- en: Chapter 10. Understanding VREFs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：理解 VREFs
- en: We looked at VREFs briefly in [Chapter 7](ch07.html "Chapter 7. Advanced Access
    Control and Configuration"), *Advanced Access Control and Configuration*, including
    a small example to illustrate how Gitolite can allow or reject pushes based on
    which files have been modified in commits being pushed. In this chapter, we will
    explore VREFs in much greater detail, since this is one of the most powerful features
    of Gitolite. We will start small, describing the simplest use for VREFs, then
    move on to more complex uses.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第7章](ch07.html "第7章 高级访问控制与配置")，*高级访问控制与配置* 中简要介绍了 VREF，包括一个小示例，展示了 Gitolite
    如何根据推送中修改的文件来允许或拒绝推送。在本章中，我们将更详细地探讨 VREF，因为这是 Gitolite 最强大的功能之一。我们将从简单的用法开始，然后逐步深入更复杂的用法。
- en: Migrating update hooks
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移更新钩子
- en: Some sites may already have been using update hooks in their existing (pre-Gitolite)
    repository setups. Since Gitolite reserves the update hook for itself, this presents
    a bit of a problem in terms of switching over.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一些站点可能已经在其现有的（Gitolite之前的）仓库设置中使用了更新钩子。由于 Gitolite 将更新钩子保留给自己，这在切换过程中会带来一些问题。
- en: If your site has such update hooks, the VREF mechanism can help replace them.
    Replacing update hooks is one of the simplest uses of VREFs, but understanding
    how that is done is also a good first step to understanding the full power of
    Gitolite's VREF mechanism.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的站点有这样的更新钩子，VREF 机制可以帮助替代它们。替换更新钩子是 VREF 最简单的用法之一，但理解如何做到这一点也是理解 Gitolite
    VREF 机制全部功能的一个良好起点。
- en: To convert your existing update hooks to VREFs, you first create a directory
    called VREF within `$HOME/local` (we're continuing the convention from [Chapter
    9](ch09.html "Chapter 9. Customizing Gitolite"), *Customizing Gitolite*, that
    the `LOCAL_CODE` variable in the `rc` file points here). Then, copy each unique
    update hook into this newly created directory, renaming each update hook in some
    way.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要将现有的更新钩子转换为 VREFs，首先在 `$HOME/local` 中创建一个名为 VREF 的目录（我们延续[第9章](ch09.html "第9章
    自定义 Gitolite")，*自定义 Gitolite* 中的约定，即 `rc` 文件中的 `LOCAL_CODE` 变量指向此目录）。然后，将每个独特的更新钩子复制到这个新创建的目录中，并对每个更新钩子进行某种重命名。
- en: As an example, say you had one repository that was frequently worked on by novice
    users using Windows, and so the update hook was used to make sure there were no
    line-ending problems. You might rename this to `check-crlf`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设有一个仓库经常由使用 Windows 的新手用户操作，因此更新钩子被用来确保没有行结束符问题。你可以将其重命名为 `check-crlf`。
- en: 'Now, for each repository that needs this check to be made (that is, each repository
    that had used that specific update hook in the pre-Gitolite setup), add a rule
    like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个需要进行此检查的仓库（即每个在 Gitolite 之前的设置中使用了该特定更新钩子的仓库），添加如下规则：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When Gitolite's update hook is processing a push, it will encounter this VREF
    rule and it will call the `check-crlf` program. The first three arguments passed
    are the same that Git itself has passed to the update hook, and if the program
    exits with a non-zero exit code, Gitolite will reject the push. No changes to
    the `check-crlf` code are needed to make all this happen; it just works.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Gitolite 的更新钩子处理一个推送时，它会遇到这个 VREF 规则，并调用 `check-crlf` 程序。传递的前三个参数与 Git 自身传递给更新钩子的参数相同，如果程序以非零退出代码退出，Gitolite
    将拒绝推送。为了实现这一切，无需更改 `check-crlf` 代码；它直接生效。
- en: 'Astute readers will have noticed that they could, instead of the rule shown
    above, use:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的读者可能已经注意到，他们可以使用以下规则来替代上面所示的规则：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This helps to limit the checking to only those users named in the rule. *In
    other words, Gitolite allows a plain old update hook to be selectively applied*,
    which could be very useful.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于将检查限制为规则中指定的用户。*换句话说，Gitolite 允许选择性地应用普通的更新钩子*，这可能非常有用。
- en: Passing arguments to the VREF code
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 VREF 代码传递参数
- en: Now let us suppose we had an update hook (in our pre-Gitolite setup) that prevented
    certain users from making changes to certain files. One way would be to write
    an update hook that checks for such files and use it as a VREF, as shown in the
    previous section. However, the list or pattern of files to be checked will need
    to somehow be encoded within the VREF code, or some other method of passing that
    information needs to be found.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在（Gitolite之前的设置中）有一个更新钩子，用于防止某些用户对某些文件进行更改。一个方法是编写一个更新钩子，检查这些文件，并将其作为 VREF
    使用，如前一节所示。然而，检查的文件列表或模式需要在 VREF 代码中以某种方式进行编码，或者需要找到其他方法来传递这些信息。
- en: 'Gitolite allows you to pass additional arguments to the VREF code. Let''s say
    the VREF used is called `NAME`, then instead of merely saying:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite 允许你将额外的参数传递给 VREF 代码。假设使用的 VREF 名称为 `NAME`，那么你可以像这样传递参数，而不仅仅是说：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and making sure that the code for the `NAME` VREF knows which files we are
    talking about, you can say:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 `NAME` VREF 的代码知道我们正在讨论哪些文件，你可以这样说：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You''ll see how this becomes really useful if you later find that another group
    of users needs to be restricted in a similar way, but for a different set of files.
    Let''s say we have a set of technical writers who are working on the documentation;
    there''s no reason for them to be touching the files that make up the source code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你稍后发现另一组用户需要以类似的方式进行限制，但限制的是不同的文件集，你会发现这种方法真的非常有用。假设我们有一组技术写作人员在编写文档；他们没有理由去触碰构成源代码的文件：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Of course, the VREF code is now not quite the same as it was when it was an
    update hook. Apart from the first three arguments (which are the same as those
    listed in man githooks for the `update` hook), there are now several other arguments,
    and the file patterns we just added are one of those (specifically, the eighth
    argument). The VREF code must get that pattern out of the incoming arguments and
    use it to decide whether the push is to be allowed or denied.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，VREF 代码现在与其作为更新钩子时的形式不完全相同。除了前面提到的三个参数（这些参数与 `update` 钩子中列出的参数相同）之外，现在还有其他一些参数，而我们刚刚添加的文件模式就是其中之一（具体来说是第八个参数）。VREF
    代码必须从传入的参数中提取该模式，并用它来决定是否允许或拒绝该推送。
- en: Using the permission field
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用权限字段
- en: Let us say we have several different kinds of source code files, and listing
    all of them in the rule for the technical writer is not only cumbersome, but error
    prone because we might miss something. We do know, however, that technical writers
    only work on documents, so we'd prefer to simply restrict them to `*.odt` files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有几种不同类型的源代码文件，将它们全部列在技术写作人员的规则中不仅繁琐，而且容易出错，因为我们可能会遗漏一些。不过，我们确实知道技术写作人员只处理文档，所以我们宁愿限制他们只能操作
    `*.odt` 文件。
- en: 'Until now, we have considered the `NAME` VREF to behave in a certain way: receive
    a filename pattern, and if any file has been changed (in the push) that matches
    that pattern, exit with a non-zero return code to signal Gitolite to reject the
    push. As you can see, this behavior completely ignores the permission field; that
    is, even this rule would have the same effect:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们一直认为 `NAME` VREF 的行为是这样的：接收一个文件名模式，如果在推送中有任何文件更改匹配该模式，则退出并返回非零代码，以向 Gitolite
    发出拒绝推送的信号。正如你所看到的，这种行为完全忽略了权限字段；也就是说，即使这个规则也会产生相同的效果：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What we need is a way to consider the permission field as well. Our first impulse
    might be to develop some way to pass this field to the VREF code, perhaps with
    some new syntax, and let the VREF code reverse the check when required.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的是一种方法来考虑权限字段。我们的第一反应可能是开发某种方式将此字段传递给 VREF 代码，也许是通过一些新的语法，并让 VREF 代码在需要时反向检查。
- en: However, this complicates the VREF code, while at the same time not making use
    of Gitolite's rule processing logic.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这使得 VREF 代码变得更加复杂，同时也没有利用 Gitolite 的规则处理逻辑。
- en: Gitolite processes access control rules based on matching a *ref* (typically
    something like `refs/heads/master or refs/tags/v1.0`) against each rule in turn.
    So one way to make use of this is to not have the VREF code actually make a decision,
    but merely *output something* that Gitolite can capture and run through its access
    control rules, just like a normal *ref* would be.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite 会根据匹配每条规则的 *引用*（通常类似 `refs/heads/master` 或 `refs/tags/v1.0`）来处理访问控制规则。所以，利用这一点的一种方法是，不让
    VREF 代码真正做出决定，而只是 *输出一些东西*，让 Gitolite 捕获并通过其访问控制规则，就像处理正常的 *引用* 一样。
- en: You could call this a *virtual ref*, too!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以称之为 *虚拟引用*！
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Let us briefly recap the terminology, a VREF is the code that runs, and a virtual
    ref is what it might send back to Gitolite.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下术语，VREF 是执行的代码，而虚拟引用是它可能返回给 Gitolite 的内容。
- en: Maintaining the update hook function
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 维护更新钩子功能
- en: However, we do not want to affect the behavior of a standard (Git) update hook
    when used as a VREF, as described earlier in this chapter. This is easy enough—Gitolite
    treats any lines in the VREF's output as virtual refs only if they start with
    `VREF/`, and even that only if the VREF has exited with zero status.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们不希望在作为虚拟引用使用时，影响标准（Git）更新钩子的行为，正如本章前面所描述的那样。这一点相当简单——Gitolite 仅当 VREF 输出的行以
    `VREF/` 开头时，才会将其视为虚拟引用，即使如此，只有当该 VREF 以零状态退出时才会如此。
- en: Default is success
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认情况下为成功
- en: At this point we need to change the `NAME` VREF. Instead of making a decision,
    it should merely print all the files that have been changed, each prefixed with
    `VREF/NAME/`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，我们需要更改 `NAME` 虚拟引用。它不再做出决定，而是简单地列出所有已更改的文件，每个文件名前面都加上 `VREF/NAME/`。
- en: 'Once that is done, it might then seem that the following rule is all we need:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成了这些，接下来可能看起来只有以下规则就足够了：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, that's not quite the end of it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是全部。
- en: There's a slight difference in how virtual refs are treated compared to real
    refs. With real refs, if no access rule matches the ref (and the user, and the
    actual type of write), the default is to reject the push.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟引用与真实引用的处理方式略有不同。对于真实引用，如果没有访问规则匹配该引用（以及用户和实际的写入类型），默认情况下会拒绝推送。
- en: However, virtual refs are designed as *additional* rules, adding checks that
    the normal Gitolite access rules cannot. Thus it makes more sense that if no VREFs
    match, it should be as if no additional checks *apply* to this push, and so the
    default is to *allow* the push.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，虚拟引用是作为*附加*规则设计的，它们增加了常规 Gitolite 访问规则无法提供的检查。因此，合理的做法是，如果没有虚拟引用匹配，就应当视为没有任何额外的检查*应用*于此次推送，因此默认情况下是*允许*推送的。
- en: 'As a result, we need one more rule, which brings our final ruleset to this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要再添加一条规则，将我们的最终规则集变为这样：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Loosely speaking, what this does is, for each file that has been changed, generate
    a virtual ref by prefixing `VREF/NAME/` to it, and passing that virtual ref through
    the ruleset. The rest is obvious, for example, changing a file called `foo.c`
    creates a virtual ref called `VREF/NAME/foo.c`, which will match only the second
    rule and this push gets denied. Files whose names end in `.odt` will match the
    first rule and not cause a reject.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 大致来说，这样做的效果是，对于每个已更改的文件，通过在文件名前加上 `VREF/NAME/` 来生成一个虚拟引用，并将该虚拟引用通过规则集进行检查。其余的很明显，例如，修改一个名为
    `foo.c` 的文件会创建一个名为 `VREF/NAME/foo.c` 的虚拟引用，这将仅匹配第二条规则，从而导致此次推送被拒绝。而文件名以 `.odt`
    结尾的文件会匹配第一条规则，不会导致拒绝。
- en: Example VREFs and their usage
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例虚拟引用及其用法
- en: The Gitolite source tree comes with a few VREFs ready to be used. To use them,
    you simply add rules similar to the ones we saw at the end of the previous section.
    We will look at a couple of them to get a feel for how they are used, and then
    design one from scratch so we know how to add our own.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite 源代码树带有一些准备好使用的虚拟引用（VREF）。要使用它们，你只需添加类似于上一节末尾所看到的规则。我们将查看其中的几个，以便了解它们是如何使用的，然后从头开始设计一个，以便我们知道如何添加自己的规则。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you look in the Gitolite source tree, you won't actually find a VREF called
    `NAME`. This is because `NAME` is special and the code for that is built in to
    Gitolite.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看 Gitolite 源代码树，你实际上不会找到名为 `NAME` 的虚拟引用。这是因为 `NAME` 是特殊的，其代码内建在 Gitolite
    中。
- en: Newcomers to Git may sometimes end up creating a commit that changes a lot more
    files than are strictly necessary for the change being made. Perhaps they added
    debugging statements to some other files, or perhaps they accidentally saved some
    files with a different line-ending (Unix LF versus Windows CRLF), and so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Git 新手来说，有时可能会创建一个提交，修改的文件比实际需要修改的文件多得多。也许他们在其他文件中添加了调试语句，或者可能他们不小心将文件保存为不同的行结尾格式（Unix
    LF 与 Windows CRLF），等等。
- en: 'If you are sure that your new developers are given relatively simple tasks,
    and at no time should any particular task touch more than, say, five files, you
    can use the `COUNT` VREF to prevent them from pushing more, and thus protect the
    repository from wide-ranging changes of the kind discussed in the previous paragraph.
    Here''s a rule that achieves that:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确定你的新开发者只会被分配相对简单的任务，并且在任何时候都不应该有任何特定的任务修改超过五个文件，你可以使用 `COUNT` 虚拟引用来防止他们推送更多文件，从而保护仓库不被大量修改，避免前一段中提到的那种情况。以下是实现这一目标的规则：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `COUNT` VREF essentially counts all the files changed in the commits that
    constitute the current push (and do not exist on any other branch or tag).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`COUNT` 虚拟引用本质上计算当前推送中所更改的所有文件（并且这些文件不存在于任何其他分支或标签中）。'
- en: If that last bit sounds complicated, consider what happens when a developer
    merely makes a new branch out of an existing one and pushes it. We don't want
    the `COUNT` VREF to basically see all the files in the branch as changed, simply
    because the old value of the branch pushed was empty. This is why the `COUNT`
    code looks at commits that do not appear in any other ref.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最后这一部分听起来有点复杂，想象一下当开发者仅仅从一个已有的分支创建一个新分支并推送时会发生什么。我们不希望`COUNT` VREF仅仅因为被推送的分支的旧值为空，而将分支中的所有文件都视为已更改。这就是为什么`COUNT`代码会查看那些在其他任何引用中都没有出现的提交。
- en: The `MAX_NEWBIN_SIZE` VREF is similar in concept. This addresses the issue that
    sometimes developers unintentionally or unknowingly commit, say, a JAR file or
    the executable file produced by a build step. Executable files like this tend
    to be a bit larger than normal source files, so if you have some idea of a reasonable
    limit, you can use this VREF to enforce it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`MAX_NEWBIN_SIZE` VREF的概念类似。这是为了解决有时开发者无意中提交了JAR文件或者构建步骤产生的可执行文件的问题。像这样的可执行文件通常比正常的源文件要大一些，因此，如果你有一个合理的大小限制，可以使用这个VREF来强制执行它。'
- en: Writing your own VREF
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你自己的VREF
- en: Here's an example use case where VREFs come in handy. We'll use this to design
    a very simple VREF, in a way that cannot be done with the existing rules.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个VREF非常有用的实际案例。我们将使用它来设计一个非常简单的VREF，这是现有规则无法完成的。
- en: 'The requirement is simple: for any repository `foo`, if a repository called
    `l10n` contains a directory called `foo`, then you cannot push any files called
    `*.po` to `foo`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要求很简单：对于任何一个仓库`foo`，如果一个名为`l10n`的仓库包含一个名为`foo`的目录，那么你就不能将任何名为`*.po`的文件推送到`foo`。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This has been adapted from a more complex, real-life use case, but for our purposes
    we don't need more than this. As you might guess, this is a multi-repository system
    that is gradually moving toward centralizing the local language files so that
    translators only have to deal with one repository. Each repository's local language
    files are moved over when they are deemed ready and from that point on, localization
    files must go to the single repository that was created for the purpose.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段内容改编自一个更复杂的现实生活案例，但对于我们的目的来说，这样已经足够了。如你所料，这是一个多仓库系统，逐步朝着集中本地语言文件的方向发展，使得翻译人员只需要处理一个仓库。每个仓库的本地语言文件在准备好后会被迁移过来，从那时起，所有的本地化文件必须提交到为此目的创建的单一仓库。
- en: 'Because this is a very specific use case, we can write a simple VREF that does
    not take any arguments. Our rule can look like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个非常特定的用例，我们可以编写一个不接受任何参数的简单VREF。我们的规则可以是这样的：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we're applying this rule to all repositories. (This is slightly
    inefficient if you have several repositories for which this will never be true—the
    VREF will be invoked for each of them, on every push. If so, replace `@all` in
    the `repo` line with a group name that contains only those repositories for which
    this check is required)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将这一规则应用于所有仓库。（如果你有多个仓库，且这些仓库永远不会符合此条件，那么VREF将在每次推送时为它们触发，这样稍显低效。如果是这种情况，可以将`@all`替换为一个仅包含需要此检查的仓库的组名）
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There may be individual rules for each of those repositories elsewhere—we need
    not put this VREF rule in each repository section. This is an example of the *Rule
    Accumulation and Delegation*, discussed in [Chapter 6](ch06.html "Chapter 6. Getting
    Started with Access Control"), *Getting Started with Access Control* in action.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些仓库中可能在其他地方有各自的规则——我们不需要在每个仓库部分都放入这个VREF规则。这是*规则累积与委托*的一个例子，如在[第6章](ch06.html
    "第6章：访问控制入门")《访问控制入门》中讨论的那样。
- en: 'Here''s one way to code this VREF (some familiarity with basic shell syntax
    and Git concepts is required to understand this code):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是编写这个VREF的一种方法（理解此代码需要一些基本的Shell语法和Git概念的知识）：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, the first check uses the git diff command to check whether this
    push has changed any `po` files. If not, there's nothing to check and we exit
    without doing anything. The second check moves to the `l10n` repository, then
    runs an `ls-tree` on that repository to check whether it contains a file or directory
    whose name is the same as the repository that the user is pushing. If it does
    not, we can exit without complaint.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第一个检查使用git diff命令检查此次推送是否更改了任何`po`文件。如果没有，那么就没有什么需要检查的，我们直接退出，不做任何操作。第二个检查切换到`l10n`仓库，然后在该仓库中运行`ls-tree`命令，检查是否包含一个文件或目录，其名称与用户正在推送的仓库名称相同。如果没有，则可以直接退出，不会报错。
- en: If those two checks succeed, we need to signal the error. One way would be to
    simply `exit 1`; Gitolite would catch the VREF code dying and reject the push.
    On the other hand, we could print the refex itself (which in this case is just
    `VREF/l10n`, but it's a good habit to use the argument instead). It will then
    match the access rule we set up, and because the permission is "-", the push will
    be rejected.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个检查成功，我们需要触发错误信号。一个方法是直接使用 `exit 1`；Gitolite 会捕获 VREF 代码的终止并拒绝推送。另一方面，我们可以打印
    refex 本身（在这种情况下是 `VREF/l10n`，但养成使用参数的习惯是个好习惯）。它将匹配我们设置的访问规则，因为权限是 "-"，所以推送将被拒绝。
- en: 'But the VREF feature offers a little more. If, after the refex, you print a
    space and then some explanatory message, this message will be printed when the
    push is rejected:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，VREF 特性提供了更多功能。如果在 refex 后打印一个空格，然后是一些解释性信息，当推送被拒绝时，这条信息将会被打印出来：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you write VREFs to catch rarely occurring conditions, then you may find it
    useful to augment Gitolite's rather spartan error reporting with something in
    plain English, so your users can scratch their heads a little less!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你写 VREF 来捕获少见的情况，那么你可能会发现通过一些简单的英语来扩展 Gitolite 相对简陋的错误报告功能非常有用，这样你的用户就不必太费劲思考了！
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored one of Gitolite's most powerful features—the ability
    to use arbitrary external factors for access control decisions by writing VREFs.
    The next chapter will conclude our exploration of Gitolite by talking about mirroring—a
    feature which large multi-site setups could find very useful.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们探讨了 Gitolite 最强大的功能之一——通过编写 VREF 使用任意外部因素进行访问控制决策的能力。下一章将通过讨论镜像来结束我们对 Gitolite
    的探索——这是一个大型多站点设置可能会非常有用的功能。
