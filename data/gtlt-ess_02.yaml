- en: Chapter 2. Installing Gitolite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 安装Gitolite
- en: The previous chapter showed you how to set up what we might call a **sandbox**
    installation of Gitolite, suitable for experimenting with the software and getting
    comfortable with it. We did that using a script that hid most of the details of
    the install process so that you could *get to the good stuff*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章展示了如何设置一个我们可以称之为**沙盒**安装的Gitolite，这适合用来实验软件并熟悉它。我们通过一个脚本完成了这一过程，隐藏了大部分安装细节，这样你就能*快速进入重点内容*。
- en: In this chapter, we will actually perform a proper install of Gitolite. We will
    start with the prerequisites on the server and move on to the actual install steps.
    By the end of this chapter, you should have a working installation of Gitolite
    that is ready to support users and serve up repositories to them securely, enforcing
    access restrictions as you specify them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将实际进行Gitolite的安装。我们将从服务器上的前提条件开始，然后进入实际的安装步骤。到本章结束时，你应该已经完成Gitolite的安装，并且它能够支持用户，安全地为他们提供仓库，并按照你指定的限制强制执行访问控制。
- en: Gitolite users and the hosting user
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gitolite用户与托管用户
- en: Gitolite provides access to several Gitolite users, using only one actual user
    ID on the server. Before we start installing and setting up Gitolite, it's useful
    to have some knowledge of what is actually going on behind the scenes and how
    this is achieved.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite提供对多个Gitolite用户的访问，只使用服务器上的一个实际用户ID。在开始安装和设置Gitolite之前，了解背后实际发生的事情以及如何实现这一点是很有用的。
- en: Gitolite uses one Unix user called the **hosting** **user** to provide repository
    access to many Gitolite users. The hosting user can be any valid user on the system,
    though by convention it is either git or gitolite. This is the only user ID that
    is used by Gitolite on the server, and it is within the home directory of this
    user that Gitolite places its files, its own configuration, as well as the repositories
    it manages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite使用一个名为**托管** **用户**的Unix用户来为许多Gitolite用户提供仓库访问。托管用户可以是系统上的任何有效用户，但通常是git或gitolite。这个是Gitolite在服务器上使用的唯一用户ID，Gitolite将其文件、自己的配置以及它管理的仓库放在此用户的主目录下。
- en: Gitolite can support thousands of Gitolite users on one server. These users
    are not *real* users as far as the server operating system is concerned, and they
    do not get access to the shell command line on the server. A Gitolite user does,
    however, get access to some of the repositories on the server so that they can
    run Git commands against them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite可以在一台服务器上支持成千上万的Gitolite用户。这些用户在服务器操作系统看来并不是*真实*用户，他们无法访问服务器的shell命令行。然而，Gitolite用户确实可以访问服务器上的一些仓库，以便他们对这些仓库执行Git命令。
- en: Distinguishing users from each other
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分不同用户
- en: Gitolite uses ssh to authenticate its users. However, while ssh normally allows
    authentication using either a password or an ssh key pair, Gitolite requires that
    a key pair be used for authentication; passwords are not accepted.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite使用ssh进行用户身份验证。然而，尽管ssh通常允许使用密码或ssh密钥对进行身份验证，Gitolite要求使用密钥对进行身份验证；不接受密码。
- en: Each Gitolite user has an ssh key pair on their desktop or laptop. A key pair
    consists of two files, typically called `id_rsa` (the private key), and `id_rsa.pub`
    (the public key).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Gitolite用户在其桌面或笔记本电脑上都有一个ssh密钥对。一个密钥对由两个文件组成，通常称为`id_rsa`（私钥）和`id_rsa.pub`（公钥）。
- en: 'The public key file contains a single, very long line of text; here''s a shortened
    example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 公钥文件包含一行非常长的文本；以下是一个简化的示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The key is actually too long to print here, so we removed about 350 characters
    from the middle, replacing them with ellipsis, but this should still give you
    a good idea of what it looks like.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该密钥实际上太长，无法在此处打印，因此我们从中间删除了大约350个字符，并用省略号替代，但这仍然可以让你对其外观有一个大致的了解。
- en: '![Distinguishing users from each other](img/2371OS_02_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![区分不同用户](img/2371OS_02_01.jpg)'
- en: 'The preceding figure illustrates the sequence of events that happens when a
    user connects to a Gitolite server to access a Git repository, and how this sequence
    is enabled. First, each user sends their public key to the Gitolite administrator.
    When the Gitolite administrator adds these users to Gitolite, Gitolite adds the
    keys to a file called `.ssh/authorized_keys` in the home directory of the hosting
    user. It then prefixes to the beginning of each line a string that looks somewhat
    like the following line (for the user Adam) and similarly for other users:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了当用户连接到 Gitolite 服务器以访问 Git 仓库时发生的事件顺序，以及如何启用这个顺序。首先，每个用户将他们的公钥发送给 Gitolite
    管理员。当 Gitolite 管理员将这些用户添加到 Gitolite 时，Gitolite 会将公钥添加到一个名为 `.ssh/authorized_keys`
    的文件中，存放在主机用户的主目录中。然后，它在每一行的开头添加一个类似如下的字符串（对于用户 Adam）以及其他用户的相似字符串：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This first step is what enables the access control. It is a one-time action,
    and needs to be repeated only when the administrator adds or removes users. Notice
    the `command` option, containing a program name (`gitolite-shell` using its full
    path), and its argument (the username, `adam` in this example)—this will be relevant
    a bit later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这第一步是启用访问控制的关键。它是一次性操作，只有在管理员添加或删除用户时才需要重复。请注意 `command` 选项，其中包含一个程序名（`gitolite-shell`
    的完整路径），以及其参数（用户名，在本示例中为 `adam`）——稍后会涉及到这一点。
- en: The second step shows what happens when, say, Bob tries to connect to the server.
    Bob runs the ssh command, whether directly or via his local git client, in the
    form of a clone, fetch, or push command. The ssh daemon on the server handles
    the connection attempt. Bob's ssh client will offer a public key, and the ssh
    daemon will go looking for it in the authorized keys file, finding it eventually.
    In our example, it finds a match on the second line.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步展示了当 Bob 尝试连接到服务器时发生了什么。Bob 运行 ssh 命令，无论是直接运行还是通过他的本地 git 客户端，形式为克隆、抓取或推送命令。服务器上的
    ssh 守护进程处理连接尝试。Bob 的 ssh 客户端将提供一个公钥，而 ssh 守护进程将在授权密钥文件中查找该公钥，最终找到它。在我们的示例中，它在第二行找到了匹配项。
- en: Next, the ssh daemon notices the command option on the matched line in the authorized
    keys file. This tells the ssh daemon that, instead of running the program that
    the client asked for, it should instead run the command mentioned in that option,
    including any arguments supplied. This means the `gitolite-shell` program is executed
    with the Gitolite username (in our example, Bob) as the first argument. This is
    how the `gitolite-shell` program knows who is connecting.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，ssh 守护进程注意到在授权密钥文件中匹配行的命令选项。这告诉 ssh 守护进程，应该运行该选项中提到的命令，而不是客户端请求的程序，并包括提供的任何参数。这意味着
    `gitolite-shell` 程序将以 Gitolite 用户名（在我们的示例中为 Bob）作为第一个参数来执行。这样，`gitolite-shell`
    程序就知道是谁在连接。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For those who are wondering what happened to the original command that the git
    client actually wanted, the ssh daemon stores it in an environment variable called
    `SSH_ORIGINAL_COMMAND` and passes it to the `gitolite-shell` program, which knows
    what to do with it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想知道 git 客户端实际想要的原始命令是什么的人，ssh 守护进程将其存储在一个名为 `SSH_ORIGINAL_COMMAND` 的环境变量中，并将其传递给
    `gitolite-shell` 程序，后者知道如何处理它。
- en: Preparing the server
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备服务器
- en: 'Gitolite can be installed on any Unix server. This includes Linux, any of the
    BSDs, and the legacy Unix servers such as AIX and HP-UX. With that said, here
    are the requirements:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite 可以安装在任何 Unix 服务器上，包括 Linux、任何 BSD 系统以及一些传统的 Unix 服务器，如 AIX 和 HP-UX。话虽如此，以下是安装要求：
- en: A Unix system with a POSIX-compatible sh (shell)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有 POSIX 兼容的 sh（shell）的 Unix 系统
- en: Git Version 1.7.1 or higher
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 版本 1.7.1 或更高版本
- en: Perl 5.8.8 or higher
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl 5.8.8 或更高版本
- en: OpenSSH 5.0 or higher
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSH 5.0 或更高版本
- en: A dedicated Unix user as the hosting user described previously, whose home directory
    must be on a filesystem that supports symlinks, and allows executables (that is,
    it is not mounted with the `noexec` mount flag)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述的专用 Unix 用户，主目录必须位于支持符号链接的文件系统中，并允许可执行文件（即，未挂载 `noexec` 挂载标志）
- en: Tip
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Ideally, you should use a brand new user ID that has no existing files or directories,
    except for whatever a newly created user gets (such as the bashrc or similar files).
    This will ensure that any leftover files don't interfere.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 理想情况下，您应该使用一个全新的用户 ID，该用户 ID 没有任何现有的文件或目录，除了新创建的用户所获得的文件（例如 bashrc 或类似文件）。这样可以确保任何剩余的文件不会干扰。
- en: Getting the Gitolite source
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取 Gitolite 源代码
- en: The next step is to obtain the Gitolite source code. The simplest way to do
    this, if your server can connect to the Internet, is to run `git clone` `git://github.com/sitaramc/gitolite`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是获取Gitolite的源代码。如果你的服务器可以连接到互联网，最简单的方法是运行`git clone` `git://github.com/sitaramc/gitolite`。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you do not have direct access to the Internet, simply use some other machine
    in between. For example, you could run the previous command on a server that can
    connect to the Internet. From that intermediate server, you can zip the entire
    Gitolite repository, bring it over to the Gitolite server, and unzip it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法直接访问互联网，可以通过其他机器进行操作。例如，你可以在一台可以连接互联网的服务器上运行前面的命令。然后，从那台中介服务器，你可以将整个Gitolite代码库压缩，传输到Gitolite服务器并解压。
- en: Installing the code
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装代码
- en: The first step is to put the source code where you want it to go. Gitolite is
    designed in a way that it doesn't require root (except to create the hosting user),
    so you can (and usually should) put it somewhere within the home directory of
    the Gitolite hosting user. For our discussion, we will pick `$HOME/bin`, because
    this is usually included in the user's PATH setting.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将源代码放在你希望的位置。Gitolite的设计方式是它不需要root权限（除了创建托管用户时），因此你可以（通常应该）将其放在Gitolite托管用户的主目录中的某个位置。为了便于讨论，我们将选择`$HOME/bin`，因为这个目录通常包含在用户的PATH设置中。
- en: 'Log in as the hosting user, and run the following commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以托管用户身份登录，并运行以下命令：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For people who are familiar with commands such as `make prefix=/usr/local install`,
    this is conceptually not very different.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉诸如`make prefix=/usr/local install`等命令的人来说，从概念上讲，这与之并没有太大区别。
- en: Setting up Gitolite
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Gitolite
- en: Now that the code is in the right place, we need to set it up. Setting it up
    involves adding an ssh public key for the main administrator of the Gitolite installation.
    In this book, we will assume the administrator's name is Adam, thus his Gitolite
    username will be `adam`, but as you follow along, please substitute your own name
    wherever you see references to Adam or `adam`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已经放在正确的位置，我们需要进行设置。设置过程包括为Gitolite安装的主管理员添加一个ssh公钥。在本书中，我们假设管理员的名字是Adam，因此他的Gitolite用户名将是`adam`，但在跟随过程中，请将文中提到的Adam或`adam`替换为你自己的名字。
- en: Ssh is a powerful and complex tool. To make things simpler in this chapter,
    we will describe a set of steps that would surely work, along with suitable assumptions
    and constraints. These constraints are not absolutely necessary, but they do serve
    to simplify our procedure, as well as remove potential troublespots. If you're
    very familiar with SSH, you will probably be able to get around them quite easily.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ssh是一个强大而复杂的工具。为了简化本章内容，我们将描述一组肯定有效的步骤，并提供适当的假设和限制。这些限制并非绝对必要，但它们确实有助于简化我们的过程，并消除潜在的麻烦点。如果你对SSH非常熟悉，可能会很容易绕过这些限制。
- en: Creating an ssh key pair
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建ssh密钥对
- en: The administrator needs to first create an ssh key pair for themselves at their
    main workstation. In many cases, there may already be an ssh key pair, possibly
    generated for some other purpose. You should look in `$HOME/.ssh` for a pair of
    files called `id_rsa` and `id_rsa.pub`. If you don't find any such files, you
    can generate a key pair by running the `ssh-keygen` command.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员需要首先在他们的主要工作站上为自己创建一对ssh密钥。在许多情况下，可能已经有一对ssh密钥，可能是为其他目的生成的。你应该在`$HOME/.ssh`目录下查找名为`id_rsa`和`id_rsa.pub`的文件。如果没有找到此类文件，你可以通过运行`ssh-keygen`命令来生成一对密钥。
- en: Ideally, you will choose a strong passphrase to protect your private key when
    generating your ssh key pair. To use it without having to constantly type the
    passphrase, you will then use the `ssh-agent` command or any of its derivatives,
    such as the keychain package. However, these nuances are out of the scope of this
    book.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，在生成ssh密钥对时，你应该选择一个强密码来保护你的私钥。为了避免每次都输入密码，你可以使用`ssh-agent`命令或其衍生工具，如keychain包。然而，这些细节超出了本书的范围。
- en: Similarly, if you had previously created a non-default key type (that is, something
    other than RSA for ssh protocol 2, which is the default), then it is assumed that
    you know what you are doing. Gitolite should work fine with DSA and ECDSA key
    pairs, but will probably not work with RSA protocol 1 keys.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你之前创建了一个非默认的密钥类型（即，除了RSA协议2（默认）以外的其他类型），那么可以假设你知道自己在做什么。Gitolite应该能很好地支持DSA和ECDSA密钥对，但可能不支持RSA协议1密钥。
- en: Running the setup command
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行设置命令
- en: Now that you have your key pair at your workstation, you will need to get the
    public key (and *only* the public key!) over to the Gitolite hosting user's home
    directory on the server. One way to do this is to use the `scp` command, as in
    `scp .ssh/id_rsa.pub git@host:adam.pub`. You can use any other method available
    to you, for example rsync, or sftp, or even a USB stick. It doesn't matter how
    you do it as long as the file gets there and is renamed as `adam.pub`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在工作站上拥有了密钥对，你需要将公钥（*仅*公钥！）传输到服务器上Gitolite托管用户的主目录中。你可以使用`scp`命令来完成这项操作，例如`scp
    .ssh/id_rsa.pub git@host:adam.pub`。你也可以使用其他任何方法，例如rsync、sftp，甚至是USB闪存驱动器。只要文件能够到达并被重命名为`adam.pub`，方式并不重要。
- en: 'A word of warning for ssh experts: do not be tempted to automatically add this
    key to the Gitolite hosting user''s authorized keys file using a command such
    as `ssh-copy-id`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 给ssh专家的一个警告：不要轻易使用像`ssh-copy-id`这样的命令自动将这个密钥添加到Gitolite托管用户的授权密钥文件中。
- en: 'Once you have copied the file, you are ready to run the actual setup command,
    which is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你复制了文件，你就准备好执行实际的设置命令，命令如下：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command should produce an output similar to the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该会输出类似于以下的内容：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can ignore the warning about the authorized keys file being created—this
    is quite normal for the first time you do this. And with that, your Gitolite installation
    and setup are all done.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以忽略关于授权密钥文件被创建的警告——这是第一次执行此操作时非常正常的情况。至此，Gitolite的安装和设置已经完成。
- en: Checking over your new Gitolite server
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查你新的Gitolite服务器
- en: 'Very few Gitolite administration tasks require logging on to the server and
    using the command line. Most of the day-to-day maintenance tasks (especially adding
    users and repositories) are done by making changes to a special repository called
    `gitolite-admin`, and pushing those changes to the server; that is, the administrator
    must perform the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 很少有Gitolite管理任务需要登录到服务器并使用命令行。大多数日常维护任务（特别是添加用户和仓库）都是通过对一个名为`gitolite-admin`的特殊仓库进行更改，然后将这些更改推送到服务器来完成的；也就是说，管理员必须执行以下操作：
- en: Clone the `gitolite-admin` repository.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆`gitolite-admin`仓库。
- en: Add some files or make changes to existing files.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些文件或更改现有的文件。
- en: Commit the changes.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改。
- en: Push them to the server (an administrator is someone who is allowed to push
    to the `gitolite-admin` repo). When the push completes, Gitolite on the server
    side invokes specific scripts to effect the changes requested.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到服务器（管理员是被允许向`gitolite-admin`仓库推送的用户）。当推送完成后，Gitolite在服务器端会调用特定的脚本来执行请求的更改。
- en: You should be able to clone the gitolite-admin repository from your workstation
    by running `git clone` `git@server:gitolite-admin`. Git will use ssh to connect
    to the "git" user on the "server". By default, it will look at your `$HOME/.ssh`
    directory, find your ssh key pair, and offer the public key to the server to authenticate
    you. After that, things proceed pretty much as described in the earlier section
    on distinguishing users from each other, and Gitolite gives you access to the
    repository.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够通过运行`git clone` `git@server:gitolite-admin`从工作站克隆`gitolite-admin`仓库。Git将使用ssh连接到服务器上的"git"用户。默认情况下，它会查看你的`$HOME/.ssh`目录，找到你的ssh密钥对，并将公钥提供给服务器进行身份验证。之后，操作基本按照前面关于区分用户的部分继续进行，Gitolite会为你提供访问该仓库的权限。
- en: 'You should now see the usual message from a successful `git clone` operation,
    and you can enter `cd gitolite-admin` to see what came in:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能看到`git clone`操作成功后的常见消息，你可以输入`cd gitolite-admin`来查看下载的内容：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see where the public keys are stored. Note that Gitolite's notion of
    what your Gitolite username is, comes solely from the name of the public key file
    in the `keydir` directory. This is why when you copied the `id_rsa.pub` file from
    your workstation you copied it as `adam.pub`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看公钥存储的位置。请注意，Gitolite对你的Gitolite用户名的定义完全来自于`keydir`目录中公钥文件的名称。这就是为什么当你从工作站复制`id_rsa.pub`文件时，必须将其命名为`adam.pub`。
- en: Tip
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Ssh experts may note that the comment field inside the public key file is ignored;
    it would be against the conventional meaning of the word "comment" to use it for
    anything that causes a behavioral change in a system, despite the number of people
    on the Internet who appear to think it has a higher purpose.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ssh专家可能会注意到，公钥文件中的注释字段会被忽略；尽管有很多人似乎认为它有更高的用途，但将其用于改变系统行为违背了“注释”一词的传统含义。
- en: Adding a user
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加用户
- en: 'Although we will cover adding users in detail in a later chapter, you may want
    to add a beta user right away. Let''s say you want to add Bob; here''s how you
    can do this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将在后续章节详细介绍如何添加用户，但你可能希望立刻添加一个测试用户。假设你要添加Bob；以下是你可以这样做的步骤：
- en: Get his public key, rename it to `bob.pub`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取他的公钥，并将其重命名为`bob.pub`。
- en: Copy it to the `keydir` directory you saw above (that is, in your local clone
    of the `gitolite-admin` repository).
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其复制到上面看到的`keydir`目录（也就是你本地克隆的`gitolite-admin`仓库中）。
- en: Add the file, commit, and push.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加文件、提交并推送。
- en: Adding a repository
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加仓库
- en: 'Looking inside the `conf/gitolite.conf` file shows us the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`conf/gitolite.conf`文件中的内容，显示如下：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To add a new repository, edit this file and add a repo line similar to the
    ones that were added previously, followed by an access rule line, sticking to
    the syntax shown previously for now. Save the file, add it, commit the change,
    and push the commit. You should immediately see the usual response from the remote
    git for a successful push, but also something like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个新仓库，编辑该文件并添加一个类似之前添加的仓库行，后面跟着一个访问规则行，暂时按照之前显示的语法进行。保存文件，添加它，提交更改并推送提交。你应该立即看到来自远程Git的成功推送响应，同时还会看到类似以下的内容：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This indicates that the new repository is ready for use.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示新仓库已经可以使用。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we installed Gitolite, learned about the special `gitolite-admin`
    repository and its contents, and added a new user and a new repository. In the
    next chapter, we will talk about what a Gitolite-managed Git repository server
    will look like to your users and what they can do with it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了Gitolite，了解了特殊的`gitolite-admin`仓库及其内容，并添加了一个新用户和一个新仓库。在下一章中，我们将讨论Gitolite管理的Git仓库服务器对用户的展示效果以及他们能进行的操作。
