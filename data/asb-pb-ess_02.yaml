- en: Chapter 1. Blueprinting Your Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章：蓝图化你的基础设施
- en: This book is a primer for anyone who has conceptual knowledge of Ansible and
    would like to get started writing Ansible playbooks to automate common infrastructure
    tasks, orchestrate application deployments, and/or manage configurations across
    multiple environments. This book follows an incremental approach, starting with
    the basics such as learning about the anatomy of a playbook and writing simple
    roles to create modular code. Once comfortable with the basics, you will be introduced
    to primitives such as adding dynamic data with variables and templates, and controlling
    execution flow with conditionals and iterators. This is then followed by more
    advanced topics such as node discovery, clustering, encrypting data, and managing
    environments. We conclude with the discussion on the orchestration features of
    Ansible. Let's begin our journey towards being an Ansible practitioner by learning
    about playbooks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为任何具备 Ansible 概念性知识的人准备的入门书籍，旨在帮助读者开始编写 Ansible playbooks，自动化常见的基础设施任务，编排应用程序部署，并/或管理跨多个环境的配置。本书采用逐步深入的方式，从学习
    playbook 的构成和编写简单角色来创建模块化代码等基础知识开始。掌握基础后，将介绍如何通过变量和模板添加动态数据，并使用条件语句和迭代器控制执行流程。接下来是一些更高级的主题，如节点发现、集群、加密数据和环境管理。最后，我们将讨论
    Ansible 的编排功能。让我们从学习 playbook 开始，迈出成为 Ansible 从业者的第一步。
- en: 'In this chapter, we will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将学习：
- en: The anatomy of a playbook
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: playbook 的结构
- en: What plays are and how to write a Hosts inventory and search patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 play 以及如何编写主机清单和搜索模式
- en: Ansible modules and the batteries-included approach
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 模块及其“开箱即用”的方法
- en: Getting introduced to Ansible
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Ansible
- en: '**Ansible** is a simple, flexible, and extremely powerful tool that gives you
    the ability to automate common infrastructure tasks, run ad hoc commands, and
    deploy multitier applications spanning multiple machines. Even though you can
    use Ansible to launch commands on a number of hosts in parallel, the real power
    lies in managing those using playbooks.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible** 是一个简单、灵活且功能极其强大的工具，能够让你自动化常见的基础设施任务、运行临时命令以及部署跨多个机器的多层应用程序。尽管你可以使用
    Ansible 在多个主机上并行执行命令，但真正的力量在于使用 playbook 来管理这些主机。'
- en: As systems engineer, infrastructure that we typically need to automate contains
    complex multitier applications. Each of which represents a class of servers, for
    example, load balancers, web servers, database servers, caching applications,
    and middleware queues. Since many of these applications have to work in tandem
    to provide a service, there is topology involved as well. For example, a load
    balancer would connect to web servers, which in turn read/write to a database
    and connect to the caching server to fetch in-memory objects. Most of the time,
    when we launch such application stacks, we need to configure these components
    in a very specific order.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统工程师，我们通常需要自动化的基础设施包含复杂的多层应用程序。每个应用程序代表一种服务器类别，例如负载均衡器、Web 服务器、数据库服务器、缓存应用程序和中间件队列。由于这些应用程序往往需要协同工作以提供服务，因此也涉及拓扑结构。例如，负载均衡器会连接到
    Web 服务器，Web 服务器会读写数据库，并连接到缓存服务器以获取内存中的对象。大多数情况下，当我们启动这种应用栈时，需要按特定顺序配置这些组件。
- en: 'Here is an example of a very common three-tier web application running a load
    balancer, a web server, and a database backend:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常常见的三层 Web 应用示例，运行负载均衡器、Web 服务器和数据库后端：
- en: '![Getting introduced to Ansible](img/B03800_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![了解 Ansible](img/B03800_01_01.jpg)'
- en: Ansible lets you translate this diagram into a blueprint, which defines your
    infrastructure policies. The format used to specify such policies is what playbooks
    are.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 让你将这个图示转换为蓝图，定义你的基础设施策略。指定这些策略的格式就是 playbook。
- en: 'Example policies and the sequence in which those are to be applied is shown
    in the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例策略及其应用顺序如下所示：
- en: Install, configure, and start the MySQL service on the database servers.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库服务器上安装、配置并启动 MySQL 服务。
- en: Install and configure the web servers that run **Nginx** with **PHP** bindings.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装并配置运行 **Nginx** 和 **PHP** 绑定的 Web 服务器。
- en: Deploy a Wordpress application on the web servers and add respective configurations
    to Nginx.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 服务器上部署 Wordpress 应用并为 Nginx 添加相应的配置。
- en: Start the Nginx service on all web servers after deploying Wordpress. Finally,
    install, configure, and start the **haproxy** service on the load balancer hosts.
    Update haproxy configurations with the hostnames of all the web servers created
    earlier.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署 Wordpress 后，启动所有 Web 服务器上的 Nginx 服务。最后，在负载均衡主机上安装、配置并启动 **haproxy** 服务。使用之前创建的所有
    Web 服务器的主机名更新 haproxy 配置。
- en: 'The following is a sample playbook that translates the infrastructure blueprint
    into policies enforceable by Ansible:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例 playbook，它将基础设施蓝图转换为 Ansible 可执行的策略：
- en: '![Getting introduced to Ansible](img/B03800_01_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Ansible](img/B03800_01_02.jpg)'
- en: Plays
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plays
- en: A playbook consists of one or more plays, which map groups of hosts to well-defined
    tasks. The preceding example contains three plays, each to configure one layer
    in the multitiered web application. Plays also define the order in which tasks
    are configured. This allows us to orchestrate multitier deployments. For example,
    configure the load balancers only after starting the web servers, or perform two-phase
    deployment where the first phase only adds this configurations and the second
    phase starts the services in the desired order.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 playbook 由一个或多个 play 组成，它们将主机组映射到明确定义的任务。前面的示例包含了三个 play，每个 play 配置一个多层 Web
    应用中的一层。Play 还定义了任务配置的顺序，这使得我们能够编排多层部署。例如，只有在启动 Web 服务器后才配置负载均衡器，或者进行两阶段部署，其中第一阶段只添加配置，第二阶段按所需顺序启动服务。
- en: YAML – the playbook language
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML – playbook 语言
- en: 'As you may have already noticed, the playbook that we wrote previously resembles
    more of a text configuration than a code snippet. This is because the creators
    of Ansible chose to use a simple, human-readable, and familiar YAML format to
    blueprint the infrastructure. This adds to Ansible''s appeal, as users of this
    tool need not learn any special programming language to get started with. Ansible
    code is self-explanatory and self-documenting in nature. A quick crash course
    on YAML should suffice to understand the basic syntax. Here is what you need to
    know about YAML to get started with your first playbook:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，我们之前编写的 playbook 更像是一个文本配置，而不是代码片段。这是因为 Ansible 的创建者选择使用简单、易读且熟悉的
    YAML 格式来设计基础设施。这增加了 Ansible 的吸引力，因为使用这个工具的用户无需学习任何特殊的编程语言就能开始使用。Ansible 代码本身就是自解释和自文档化的。快速学习一下
    YAML 基础知识就足以理解基本语法。以下是你需要了解的 YAML 相关内容，帮助你开始编写第一个 playbook：
- en: The first line of a playbook should begin with "--- " (three hyphens) which
    indicates the beginning of the YAML document.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: playbook 的第一行应以 "--- "（三个短横线）开始，表示 YAML 文档的开始。
- en: Lists in YAML are represented with a hyphen followed by a white space. A playbook
    contains a list of plays; they are represented with "- ". Each play is an associative
    array, a dictionary, or a map in terms of key-value pairs.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 中的列表使用短横线加空格表示。一个 playbook 包含一个 plays 列表；它们由"- "表示。每个 play 都是一个关联数组、字典或键值对的映射。
- en: Indentations are important. All members of a list should be at the same indentation
    level.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩进非常重要。列表中的所有成员应该具有相同的缩进级别。
- en: Each play can contain key-value pairs separated by ":" to denote hosts, variables,
    roles, tasks, and so on.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 play 可以包含以 ":" 分隔的键值对，用于表示主机、变量、角色、任务等。
- en: Our first playbook
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个 playbook
- en: 'Equipped with the basic rules explained previously and assuming readers have
    done a quick dive into YAML fundamentals, we will now begin writing our first
    playbook. Our problem statement includes the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基于之前解释的基本规则，并假设读者已经快速学习了 YAML 基础知识，我们现在将开始编写我们的第一个 playbook。我们的问题陈述包括以下内容：
- en: Create a devops user on all hosts. This user should be part of the `devops`
    group.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有主机上创建一个 devops 用户。该用户应为 `devops` 组的一部分。
- en: Install the "htop" utility. **Htop** is an improved version of top—an interactive
    system process monitor.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 "htop" 工具。**Htop** 是 top 的改进版——一个交互式系统进程监视器。
- en: Add the Nginx repository to the web servers and start it as a service.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Nginx 仓库添加到 Web 服务器并将其作为服务启动。
- en: 'Now, we will create our first playbook and save it as `simple_playbook.yml`
    containing the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的第一个 playbook，并将其保存为`simple_playbook.yml`，其中包含以下代码：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our playbook contains two plays. Each play consists of the following two important
    parts:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 playbook 包含两个 play。每个 play 都由以下两个重要部分组成：
- en: '**What to configure**: We need to configure a host or group of hosts to run
    the play against. Also, we need to include useful connection information, such
    as which user to connect as, whether to use `sudo` command, and so on.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要配置的内容**：我们需要配置一个主机或主机组来运行该 play。还需要包括有用的连接信息，如连接时使用的用户、是否使用`sudo`命令等。'
- en: '**What to run**: This includes the specification of tasks to be run, including
    which system components to modify and which state they should be in, for example,
    installed, started, or latest. This could be represented with tasks and later
    on, by roles.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要运行的内容**：这包括要运行的任务的规范，包括要修改的系统组件及其应处于的状态，例如，已安装、已启动或最新。可以通过任务来表示，稍后通过角色来执行。'
- en: Let's now look at each of these briefly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们简要查看一下这些内容。
- en: Creating a host inventory
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主机清单
- en: Before we even start writing our playbook with Ansible, we need to define an
    inventory of all hosts that need to be configured, and make it available for Ansible
    to use. Later, we will start running plays against a selection of hosts from this
    inventory. If you have an existing inventory, such as cobbler, LDAP, a CMDB software,
    or wish to pull it from a cloud provider, such as ec2, it can be pulled from Ansible
    using the concept of a dynamic inventory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写 Ansible playbook 之前，我们需要定义一个包含所有需要配置的主机的清单，并使其可以供 Ansible 使用。稍后，我们将开始针对这个清单中的部分主机运行
    play。如果你已有现有清单，如 cobbler、LDAP、CMDB 软件，或希望从云提供商（如 ec2）拉取清单，可以通过动态清单的概念从 Ansible
    中提取。
- en: 'For text-based local inventory, the default location is `/etc/ansible/hosts`.
    For our learning environment, however, we will create a custom inventory file
    `customhosts` in our working directory, the contents of which are shown as follows.
    You are free to create your own inventory file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于文本的本地清单，默认位置是 `/etc/ansible/hosts`。但是，对于我们的学习环境，我们将在工作目录中创建一个自定义清单文件`customhosts`，其内容如下所示。你可以自由创建自己的清单文件：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, when our playbook maps a play to the group, the `www` (`hosts:` `www`),
    hosts in that group will be configured. The `all` keywords will match to all hosts
    from the inventory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们的 playbook 将 play 映射到组时，该组中的`www`（`hosts:` `www`）主机将被配置。`all` 关键字将匹配清单中的所有主机。
- en: 'The following are the guidelines to for creating inventory files:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建清单文件的指南：
- en: Inventory files follow INI style configurations, which essentially include configuration
    blocks that start with host group/class names included in "`[ ]`". This allows
    the selective execution on classes of systems, for example, `[namenodes]`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单文件遵循 INI 风格的配置，这实际上包括以 "`[ ]`" 包含的主机组/类名称开始的配置块。这样可以选择性地在系统类上执行操作，例如，`[namenodes]`。
- en: A single host can be part of multiple groups. In such cases, host variables
    from both the groups will get merged, and the precedence rules apply. We will
    discuss variables and precedence in detail later.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个主机可以属于多个组。在这种情况下，来自两个组的主机变量将合并，并且优先级规则适用。我们将在后面详细讨论变量和优先级。
- en: Each group contains a list of hosts and connection details, such as the SSH
    user to connect as, the SSH port number if non-default, SSH credentials/keys,
    sudo credentials, and so on. Hostnames can also contain globs, ranges, and more,
    to make it easy to include multiple hosts of the same type, which follow some
    naming patterns.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组包含一组主机和连接详细信息，如连接时使用的 SSH 用户、如果端口非默认的 SSH 端口号、SSH 凭证/密钥、sudo 凭证等。主机名还可以包含通配符、范围等，便于包括多个具有相同类型、遵循某些命名模式的主机。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: After creating an inventory of the hosts, it's a good idea to validate connectivity
    using Ansible's ping module (for example, `ansible -m ping all`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了主机清单之后，最好使用 Ansible 的 ping 模块来验证连接（例如，`ansible -m ping all`）。
- en: Patterns
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: 'In the preceding playbook, the following lines decide which hosts to select
    to run a specific play:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 playbook 中，以下行决定了选择哪些主机来运行特定的 play：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first code will match all hosts, and the second code will match hosts which
    are part of the `www` group.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个代码将匹配所有主机，第二个代码将匹配属于`www`组的主机。
- en: 'Patterns can be any of the following or their combinations:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以是以下任意一种或它们的组合：
- en: '| Pattern Types | Examples |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 模式类型 | 示例 |'
- en: '| --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Group name | `namenodes` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 组名 | `namenodes` |'
- en: '| Match all | `all` or `*` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 匹配所有 | `all` 或 `*` |'
- en: '| Range | `namenode[0:100]` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | `namenode[0:100]` |'
- en: '| Hostnames/hostname globs | `*.example.com`, `host01.example.com` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 主机名/主机名通配符 | `*.example.com`，`host01.example.com` |'
- en: '| Exclusions | `namenodes:!secondaynamenodes` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 排除项 | `namenodes:!secondaynamenodes` |'
- en: '| Intersection | `namenodes:&zookeeper` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 交集 | `namenodes:&zookeeper` |'
- en: '| Regular expressions | `~(nn&#124;zk).*\.example\.org` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 正则表达式 | `~(nn&#124;zk).*\.example\.org` |'
- en: Tasks
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: 'Plays map hosts to tasks. Tasks are a sequence of actions performed against
    a group of hosts that match the pattern specified in a play. Each play typically
    contains multiple tasks that are run serially on each machine that matches the
    pattern. For example, take a look at the following code snippet:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Play将主机映射到任务。任务是一系列针对与Play中指定模式匹配的主机执行的操作。每个Play通常包含多个任务，这些任务在与模式匹配的每台机器上按顺序运行。例如，看看以下代码片段：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we have two tasks. The first one is to create a group,
    and second is to create a user and add it to the group created earlier. If you
    notice, there is an additional line in the second task, which starts with `name:`.
    While writing tasks, it's good to provide a name with a human-readable description
    of what this task is going to achieve. If not, the action string will be printed
    instead.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们有两个任务。第一个是创建一个组，第二个是创建一个用户并将其添加到之前创建的组中。如果你注意到，第二个任务中有一行额外的内容，从`name:`开始。在编写任务时，最好提供一个名称，清晰地描述此任务要实现的内容。如果没有，操作字符串将会被打印出来。
- en: 'Each action in a task list can be declared by specifying the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 任务列表中的每个操作可以通过指定以下内容来声明：
- en: The name of the module
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的名称
- en: Optionally, the state of the system component being managed
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，管理系统组件的状态
- en: The optional parameters
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选参数
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'With newer versions of Ansible (0.8 onwards), writing an action keyword is
    now optional. We can directly provide the name of the module instead. So, both
    of these lines will have a similar action, that is,. installing a package with
    the `apt` module:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从Ansible的更新版本（0.8及以后版本）开始，编写操作关键字已不再是必需的。我们可以直接提供模块名称。因此，这两行将执行相似的操作，即使用`apt`模块安装一个包：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ansible stands out from other configuration management tools, with its batteries-included
    included approach. These batteries are "modules." It's important to understand
    what modules are before we proceed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible与其他配置管理工具的不同之处在于它的“一体化”方式。这些“一体化的电池”就是“模块”。在继续之前，理解模块是什么非常重要。
- en: Modules
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块
- en: Modules are the encapsulated procedures that are responsible for managing specific
    system components on specific platforms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是封装的程序，负责在特定平台上管理特定的系统组件。
- en: 'Consider the following example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: The `apt` module for Debian and the `yum` module for RedHat helps manage system
    packages
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian的`apt`模块和RedHat的`yum`模块有助于管理系统包
- en: The `user` module is responsible for adding, removing, or modifying users on
    the system
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`模块负责在系统上添加、删除或修改用户'
- en: The `service` module will start/stop system services
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service`模块将启动/停止系统服务'
- en: Modules abstract the actual implementation from users. They expose a declarative
    syntax that accepts a list of the parameters and states of the system components
    being managed. All this can be declared using the human-readable YAML syntax,
    using key-value pairs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 模块将实际的实现从用户中抽象出来。它们暴露了一种声明性语法，接受管理系统组件的参数和状态列表。所有这些都可以使用人类可读的YAML语法声明，采用键值对的形式。
- en: In terms of functionality, modules resemble providers for those of you who are
    familiar with Chef/Puppet software. Instead of writing procedures to create a
    user, with Ansible we declare which state our component should be in, that is,
    which user to create, its state, and its characteristics, such as UID, group,
    shell, and so on. The actual procedures are inherently known to Ansible via modules,
    and are executed in the background.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就功能而言，模块类似于那些熟悉Chef/Puppet软件的用户中的提供者。与其编写程序来创建用户，使用Ansible时，我们声明组件应该处于的状态，即要创建的用户、用户状态和特性，如UID、组、Shell等。实际的操作通过模块被Ansible固有地识别，并在后台执行。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `Command` and `Shell` modules are special ones. They neither take key-value
    pairs as parameters, nor are idempotent.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Command`和`Shell`模块是特殊的模块。它们既不接受键值对作为参数，也不是幂等的。'
- en: Ansible comes preinstalled with a library of modules, which ranges from the
    ones which manage basic system resources to more sophisticated ones that send
    notifications, perform cloud integrations, and so on. If you want to provision
    an ec2 instance, create a database on the remote PostgreSQL server, and get notifications
    on **IRC**, then Ansible has a module for it. Isn't this amazing?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible预装了一个模块库，从管理基本系统资源的模块到更复杂的模块，如发送通知、进行云集成等。如果你想为ec2实例配置、在远程PostgreSQL服务器上创建数据库，并在**IRC**上接收通知，那么Ansible已经为你准备好了相关模块。这是不是很棒？
- en: No need to worry about finding an external plugin, or struggle to integrate
    with cloud providers, and so on. To find a list of modules available, you can
    refer to the Ansible documentation at [http://docs.ansible.com/list_of_all_modules.html](http://docs.ansible.com/list_of_all_modules.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 无需担心寻找外部插件，或为与云服务提供商的集成而烦恼。要查看可用模块的列表，可以参考Ansible文档：[http://docs.ansible.com/list_of_all_modules.html](http://docs.ansible.com/list_of_all_modules.html)。
- en: Ansible is extendible too. If you do not find a module that does the job for
    you, it's easy to write one, and it doesn't have to be in Python. A module can
    be written for Ansible in the language of your choice. This is discussed in detail
    at [http://docs.ansible.com/developing_modules.html](http://docs.ansible.com/developing_modules.html).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible也是可扩展的。如果你找不到合适的模块来完成工作，写一个模块非常简单，而且不一定要用Python。可以用你选择的语言为Ansible编写模块。详细信息可以参考：[http://docs.ansible.com/developing_modules.html](http://docs.ansible.com/developing_modules.html)。
- en: The modules and idempotence
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块和幂等性
- en: 'Idempotence is an important characteristic of a module. It is something which
    can be applied on your system multiple times, and will return deterministic results.
    It has built-in intelligence. For instance, we have a task that uses the `apt`
    module to install Nginx and ensure that it''s up to date. Here is what happens
    if you run it multiple times:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等性是模块的一个重要特性。它是指可以在系统上多次应用并返回确定性结果的特性。它具有内建的智能。例如，我们有一个任务，使用`apt`模块安装Nginx并确保它是最新的。如果你多次运行它，发生的情况如下：
- en: Every time idempotance is run multiple times, the `apt` module will compare
    what has been declared in the playbook versus the current state of that package
    on the system. The first time it runs, Ansible will determine that Nginx is not
    installed, and will go ahead with the installation.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次幂等性运行多次时，`apt`模块将比较剧本中声明的内容与系统上该软件包的当前状态。第一次运行时，Ansible会确定Nginx未安装，并继续进行安装。
- en: For every consequent run, it will skip the installation part, unless there is
    a new version of the package available in the upstream repositories.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每次随后的运行，除非上游仓库有新版本的软件包，否则它将跳过安装部分。
- en: This allows executing the same task multiple times without resulting in the
    error state. Most of the Ansible modules are idempotent, except for the command
    and shell modules. Users will have to make these modules idempotent.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许多次执行相同任务而不会导致错误状态。大多数Ansible模块都是幂等的，只有`command`和`shell`模块例外。用户需要使这些模块具备幂等性。
- en: Running the playbook
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行剧本
- en: 'Ansible comes with the `ansible-playbook` command to launch a playbook with.
    Let''s now run the plays we created:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible自带`ansible-playbook`命令来启动剧本。现在让我们运行我们创建的任务：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is what happens when you run the preceding command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令时会发生以下情况：
- en: The `ansible-playbook` parameter is the command that takes the playbook as an
    argument (`simple_playbook.yml`) and runs the plays against the hosts
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-playbook`参数是将剧本作为参数（`simple_playbook.yml`）并在主机上执行任务的命令'
- en: 'The `simple_playbook` parameter contains the two plays that we created: one
    for common tasks, and the other for installing Nginx'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simple_playbook`参数包含我们创建的两个任务：一个用于常见任务，另一个用于安装Nginx'
- en: The `customhosts` parameter is our host's inventory, which lets Ansible know
    which hosts, or groups of hosts, to call plays against
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customhosts`参数是我们主机的清单，它让Ansible知道哪些主机或主机组需要执行任务'
- en: 'Launching the preceding command will start calling plays, orchestrating in
    the sequence that we described in the playbook. Here is the output of the preceding
    command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 启动上述命令将开始调用任务，按照我们在剧本中描述的顺序进行编排。以下是执行上述命令后的输出：
- en: '![Running the playbook](img/B03800_01_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![运行剧本](img/B03800_01_03.jpg)'
- en: 'Let''s now analyze what happened:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析一下发生了什么：
- en: Ansible reads the playbooks specified as an argument to the `ansible-playbook`
    command and starts executing plays in the serial order.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 读取作为 `ansible-playbook` 命令参数指定的 playbook，并开始按顺序执行 plays。
- en: The first play that we declared, runs against the "`all`" hosts. The `all` keyword
    is a special pattern that will match all hosts (similar to `*`). So, the tasks
    in the first play will be executed on all hosts in the inventory we passed as
    an argument.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们声明的第一个 play 运行在 "`all`" 主机上。`all` 关键字是一个特殊的模式，它会匹配所有主机（类似于 `*`）。因此，第一个 play
    中的任务将会在我们作为参数传递的所有主机清单上执行。
- en: Before running any of the tasks, Ansible will gather information about the systems
    that it is going to configure. This information is collected in the form of facts.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行任何任务之前，Ansible 会收集它即将配置的系统的信息。这些信息以事实的形式被收集。
- en: The first play includes the creation of the `devops` group and user, and installation
    of the htop package. Since we have three hosts in our inventory, we see one line
    per host being printed, which indicates whether there was a change in the state
    of the entity being managed. If the state was not changed, "ok" will be printed.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个 play 包括创建 `devops` 组和用户，并安装 htop 包。由于我们的清单中有三个主机，我们会看到每个主机都会打印一行，表示被管理实体的状态是否发生了变化。如果状态没有变化，将打印
    "ok"。
- en: Ansible then moves to the next play. This is executed only on one host, as we
    have specifed "`hosts:www`" in our play, and our inventory contains a single host
    in the group "`www`".
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，Ansible 进入下一个 play。这个 play 只在一个主机上执行，因为我们在 play 中指定了 "`hosts:www`"，而我们的清单中
    "`www`" 组内只有一个主机。
- en: During the second play, the Nginx repository is added, the package is installed,
    and the service is started.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个 play 中，添加了 Nginx 仓库，安装了包，并启动了服务。
- en: Finally, Ansible prints the summary of the playbook run in the "`PLAY RECAP`"
    section. It indicates how many modifications were made, if any of the hosts were
    unreachable, or execution failed on any of the systems.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，Ansible 在 "`PLAY RECAP`" 部分打印 playbook 执行的总结。它会显示有多少修改被执行，如果任何主机无法访问，或者是否有任何系统执行失败。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: What if a host is unresponsive, or fails to run tasks? Ansible has built-in
    intelligence, which will identify such issues and take the failed host out of
    rotation. It will not affect the execution on other hosts.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个主机无响应或无法执行任务怎么办？Ansible 具有内置的智能，能够识别这些问题并将失败的主机从轮换中移除。这不会影响其他主机的执行。
- en: Review questions
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你已经充分理解了这一章的内容吗？试着回答以下问题来测试你的理解：
- en: What is idempotence when it comes to modules?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块中，幂等性是什么意思？
- en: What is the host's inventory and why is it required?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是主机的清单，为什么需要它？
- en: Playbooks map ___ to ___ (fill in the blanks)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Playbooks 将 ___ 映射到 ___（填空）
- en: What types of patterns can you use while selecting a list of hosts to run plays
    against?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择要运行 plays 的主机列表时，你可以使用哪些类型的模式？
- en: Where is the actual procedure to execute an action on a specific platform defined?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行特定平台上的操作的实际过程在哪里定义？
- en: Why is it said that Ansible comes with batteries included?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么说 Ansible 是自带电池的？
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about what Ansible playbooks are, what components
    those are made up of, and how to blueprint your infrastructure with it. We also
    did a primer on YAML—the language used to create plays. You learned about how
    plays map tasks to hosts, how to create a host inventory, how to filter hosts
    with patterns, and how to use modules to perform actions on our systems. We then
    created a simple playbook as a proof of concept.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了什么是 Ansible playbook，它由哪些组件组成，以及如何使用它来规划你的基础设施。我们还对 YAML 语言做了一个简要介绍——它是用于创建
    plays 的语言。你了解了 plays 如何将任务映射到主机，如何创建主机清单，如何使用模式筛选主机，以及如何使用模块在我们的系统上执行操作。然后，我们创建了一个简单的
    playbook 作为概念验证。
- en: In the upcoming chapter, we will start refactoring our code to create reusable
    and modular chunks of code, and call them roles.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将开始重构我们的代码，创建可重用和模块化的代码块，并将它们称为角色（roles）。
