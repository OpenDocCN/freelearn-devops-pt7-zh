- en: Chapter 5. Gadgets and Reporting in JIRA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：JIRA 中的小工具和报告
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Writing a JIRA report
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 JIRA 报告
- en: Reports in Excel format
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Excel 格式的报告
- en: Data validation in JIRA reports
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JIRA 报告中的数据验证
- en: Restricting access to reports
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制报告访问权限
- en: Object configurable parameters for reports
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告的对象配置参数
- en: Creating a pie chart in JIRA
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JIRA 中创建饼图
- en: Writing JIRA 4 gadgets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 JIRA 4 小工具
- en: Invoking REST services from gadgets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从小工具中调用 REST 服务
- en: Configuring user preferences in gadgets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置小工具中的用户偏好设置
- en: Accessing gadgets outside of JIRA
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 JIRA 外部的小工具
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Reporting support in an application like JIRA is inevitable! With so much data
    spanning across different projects, issues, and lot of project planning done on
    it, we need more and more reports with customized data according to our needs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 JIRA 这样的应用程序中，报告支持是不可避免的！由于数据跨越不同的项目、问题，并且大量的项目规划都在其上进行，我们需要越来越多的根据需求定制的数据报告。
- en: 'There are two different kinds of reporting available in JIRA:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 提供两种不同类型的报告：
- en: Gadgets that can be added into a user's dashboard – From 4.x, the JIRA dashboard
    was revamped to include gadgets, replacing the legacy portlets. These gadgets
    are mini applications built using HTML and JavaScript that can run on any OpenSocial
    gadget container. They communicate with JIRA using REST APIs and retrieve the
    required information before rendering the display for the user appropriately.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以添加到用户仪表板的小工具——从 4.x 版本开始，JIRA 仪表板被重新设计为包含小工具，取代了旧版的 portlet。这些小工具是使用 HTML
    和 JavaScript 构建的迷你应用程序，可以在任何 OpenSocial 小工具容器中运行。它们通过 REST API 与 JIRA 进行通信，获取所需的信息，然后为用户适当渲染显示。
- en: As the JIRA dashboard is now an OpenSocial gadget container, we can even add
    third-party gadgets onto it provided they meet the gadget specifications. Similarly,
    JIRA gadgets can be added on to other containers like iGoogle, Gmail, and so on,
    but not all features of JIRA gadgets are supported by other gadget containers.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 JIRA 仪表板现在是一个 OpenSocial 小工具容器，我们甚至可以将第三方小工具添加到其中，前提是它们符合小工具规范。同样，JIRA 小工具也可以添加到其他容器中，如
    iGoogle、Gmail 等，但并不是所有 JIRA 小工具的功能都被其他小工具容器所支持。
- en: Normal JIRA reports – JIRA also provides an option to create reports that show
    statistics for particular people, projects, versions, or other fields within issues.
    These reports can be found under 'Browse Project', and can be used to generate
    simple tabular reports, charts, and so on, and can then be exported to Excel if
    supported.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 普通 JIRA 报告——JIRA 还提供创建报告的选项，这些报告显示特定人员、项目、版本或问题中的其他字段的统计信息。这些报告可以在“浏览项目”下找到，可以用来生成简单的表格报告、图表等，如果支持，还可以导出到
    Excel。
- en: JIRA provides a number of built-in reports, the details of which can be found
    at [http://confluence.atlassian.com/display/JIRA/Generating+Reports](http://confluence.atlassian.com/display/JIRA/Generating+Reports).
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JIRA 提供了许多内置报告，详细信息可以在 [http://confluence.atlassian.com/display/JIRA/Generating+Reports](http://confluence.atlassian.com/display/JIRA/Generating+Reports)
    中找到。
- en: In addition to the Gadgets and Reports that JIRA provides, there are a lot of
    them available in the Atlassian plugin exchange. But still, we will end up writing
    some that are customized specifically for our organization and that is where JIRA's
    plugin architecture helps us by providing two plugin modules, one for reports
    and one for gadgets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 JIRA 提供的小工具和报告外，Atlassian 插件交换平台上还有很多其他可用的小工具和报告。但最终，我们还会编写一些专门为我们组织定制的报告，而这正是
    JIRA 的插件架构为我们提供帮助的地方，它提供了两个插件模块，一个用于报告，一个用于小工具。
- en: In this chapter, we will see more details on writing JIRA reports and gadgets,
    converting legacy portlets into gadgets, and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细介绍编写 JIRA 报告和小工具、将旧版 portlet 转换为小工具等内容。
- en: In addition to that, we will also have a quick look at the **JIRA Query Language**
    (**JQL**), which provides advanced searching capabilities within the issue navigator.
    JQL helps us to generate a lot of the reports in issue navigator and export them
    into convenient views like Excel, Word, and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们还将简要了解 **JIRA 查询语言** (**JQL**)，它提供了在问题导航器中进行高级搜索的能力。JQL 帮助我们在问题导航器中生成许多报告，并将其导出为
    Excel、Word 等方便的视图。
- en: Writing a JIRA report
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 JIRA 报告
- en: As we just mentioned, a JIRA report can display statistical information based
    on all elements within JIRA – for example, issues, projects, users, issue types,
    and so on. They can have HTML results and optionally Excel results.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚刚提到的，JIRA 报告可以基于 JIRA 中的所有元素显示统计信息——例如，问题、项目、用户、问题类型等。它们可以包含 HTML 结果，并可选地包含
    Excel 结果。
- en: 'To add new reports in JIRA, you can use the **Report Plugin Module**. The following
    are the key attributes and elements supported:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 JIRA 中添加新的报告，你可以使用 **报告插件模块**。以下是支持的关键属性和元素：
- en: '**Attributes**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**：'
- en: '| Name | Description |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `key` | This should be unique within the plugin. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `key` | 这个键在插件中应该是唯一的。 |'
- en: '| `class` | Class to provide contexts for rendered velocity templates. Must
    implement the `com.atlassian.jira.plugin.report.Report` interface. Recommended
    to extend the `com.atlassian.jira.plugin.report.impl.AbstractReport` class. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `class` | 提供渲染 Velocity 模板上下文的类。必须实现 `com.atlassian.jira.plugin.report.Report`
    接口。推荐继承 `com.atlassian.jira.plugin.report.impl.AbstractReport` 类。 |'
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `i18n-name-key` | 插件模块可读名称的本地化键。 |'
- en: '| `name` | Human-readable name of the report. Appears in the plugins page.
    Default is the plugin key. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 报告的可读名称。出现在插件页面中。默认值为插件键。 |'
- en: '**Elements**:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**：'
- en: '| Name | Description |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `description` | Description of the report. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 报告的描述。 |'
- en: '| `label` | User visible name of the report. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `label` | 用户可见的报告名称。 |'
- en: '| `resource type="velocity"` | Velocity templates for the report views. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `resource type="velocity"` | 报告视图的 Velocity 模板。 |'
- en: '| `resource type="18n"` | JAVA properties file for the i18n localization |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `resource type="18n"` | 用于 i18n 本地化的 JAVA 属性文件 |'
- en: '| `properties` | Reports configurable parameters that used to accept user inputs.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `properties` | 用于接受用户输入的报告配置参数。 |'
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a skeleton plugin using the Atlassian plugin SDK.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Atlassian 插件 SDK 创建一个骨架插件。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us consider creating a very simple report with little business logic in
    it. The example we choose here is to display the key and summary of all *issues*
    in a selected *project*. The only input for the report will be the *project name*,
    which can be selected from a drop-down list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑创建一个非常简单的报告，里面只有少量的业务逻辑。我们在这里选择的示例是显示所选 *项目* 中所有 *问题* 的键和值。报告的唯一输入将是 *项目名称*，可以从下拉列表中选择。
- en: 'The following is the step-by-step procedure to create this report:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建此报告的逐步过程：
- en: Add the report plugin module in the plugin descriptor.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件描述符中添加报告插件模块。
- en: In this first step, we will look at populating the entire plugin module in the
    `atlassian-plugin.xml` file.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一步中，我们将着眼于在 `atlassian-plugin.xml` 文件中填充整个插件模块。
- en: 'Include the report module:'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含报告模块：
- en: '[PRE0]'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As usual, the plugin module should have a unique key. The other most important
    attribute here is the class. `AllIssuesReport`, in this case, is the class that
    populates the context for the velocity templates used in the report display. It
    holds the business logic to retrieve the report results based on the criteria
    entered by the user.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像往常一样，插件模块应该具有唯一的键。这里的另一个最重要的属性是类。在这个例子中，`AllIssuesReport` 类用于填充 Velocity 模板的上下文，这些模板用于报告显示。它包含根据用户输入的标准检索报告结果的业务逻辑。
- en: 'Include the `i18n` property resource that can be used for internationalization
    within the report. The keys entered, such as `report.allissues.label`, will be
    mapped to a key within the property file:'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在报告中包含 `i18n` 属性资源，这些资源可以用于国际化。输入的键，如 `report.allissues.label`，将映射到属性文件中的一个键：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the `AllIssuesReport.properties` file will be present in the `com.jtricks.allissues`
    package under the resources folder in your plugin. All the keys that you used
    should be present in the properties file with the appropriate values.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`AllIssuesReport.properties` 文件将在插件的 `resources` 文件夹中的 `com.jtricks.allissues`
    包下。你使用的所有键应该在属性文件中存在，并具有适当的值。
- en: 'Include the velocity template resources within the report module:'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在报告模块中包含 Velocity 模板资源：
- en: '[PRE2]'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here we have defined the velocity templates that will be used to render the
    HTML and the Excel views for the report.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们定义了用于渲染报告的 HTML 和 Excel 视图的 Velocity 模板。
- en: 'Define the user-driven properties:'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义用户驱动的属性：
- en: '[PRE3]'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is a list of properties that will be rendered appropriately on the report
    input page. In our example, we need to select a project from a select list before
    generating the report. For this, we have defined a project property here for which
    the type is `select`. JIRA will automatically render this as a select list by
    taking the key/value pair from the `ProjectValuesGenerator` class. We will see
    more details on the types supported in the coming recipes.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个将在报告输入页面上正确渲染的属性列表。在我们的示例中，我们需要在生成报告之前从选择列表中选择一个项目。为此，我们在这里定义了一个项目属性，其类型为`select`。JIRA会通过从`ProjectValuesGenerator`类中获取键值对来自动将其渲染为选择列表。在接下来的示例中，我们将看到支持的更多类型的详细信息。
- en: 'Now we have the plugin descriptor filled in with the details required for the
    report plugin module. The entire module now looks as follows:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们已经填写了报告插件模块所需的插件描述符。整个模块现在看起来如下：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the `i18n` resource properties file. As mentioned, it will be created
    in the `com.jtricks.allissues` package under the resources folder. The name of
    the file will be `AllIssuesReport.properties`. We have used three properties so
    far, which will be populated with the appropriate values:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`i18n`资源属性文件。如前所述，它将创建在`com.jtricks.allissues`包下的resources文件夹中。文件名将为`AllIssuesReport.properties`。到目前为止，我们已经使用了三个属性，它们将填充适当的值：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can create `AllIssuesReport.proprties_{language}_{countrycode}` to support
    other locales.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以创建`AllIssuesReport.proprties_{language}_{countrycode}`来支持其他区域设置。
- en: Create the **Value Generator** class. This is the class that is used to generate
    the values to be used for rendering the user properties on the report input page.
    In our example, we have used the `ProjectValuesGenerator` class.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建**值生成器**类。这是用于生成要在报告输入页面上呈现用户属性的值的类。在我们的示例中，我们使用了`ProjectValuesGenerator`类。
- en: The class that generates the values should implement the `ValuesGenerator` interface.
    It should then implement the `getValues()` method to return a key/value map. The
    value will be used for display, and the key will be returned as the property value
    which will be used in the report class.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成值的类应该实现`ValuesGenerator`接口。然后它应该实现`getValues()`方法，返回一个键值对映射。值将用于显示，键将作为属性值返回，并在报告类中使用。
- en: In the `ProjectValuesGenerator` class, we use the project ID and the name as
    the key/value pair.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`ProjectValuesGenerator`类中，我们使用项目ID和名称作为键值对。
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create the report class. This is where the actual business logic lies.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建报告类。这是实际业务逻辑所在的地方。
- en: The report class, `AllIssuesReport` in this case, should extend the `AbstractReport`
    class. It can just implement the `Report` interface, but `AbstractReport` has
    some already implemented methods, and hence is recommended.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 报告类（在本例中为`AllIssuesReport`）应该继承`AbstractReport`类。它可以仅实现`Report`接口，但`AbstractReport`已经实现了一些方法，因此推荐使用它。
- en: The only mandatory method we need to implement here is the `generateReportHtml`
    method. We need to populate a map here that can be used to render the velocity
    views. In our example, we populate the map with variable issues, which is a list
    of issue objects in the selected project.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要在这里实现的唯一必需方法是`generateReportHtml`方法。我们需要在这里填充一个映射表，用来渲染velocity视图。在我们的示例中，我们用变量issues填充了映射表，它是选定项目中的问题对象列表。
- en: 'The selected project can be retrieved using the key value entered in the property
    in the `atlassian-plugin.xml` file:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用在`atlassian-plugin.xml`文件中的属性中输入的键值来检索选定的项目：
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We now use this `pid` to retrieve the list of issues using the method `getIssuesFromProject`:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在使用这个`pid`来通过方法`getIssuesFromProject`检索问题列表：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now all we need to do here is populate the map with this and return the rendered
    view as follows:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们只需要在这里用这个值填充映射表，并返回如下所示的渲染视图：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can populate any useful variable like this, and it can then be used in the
    velocity templates to render the view.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以像这样填充任何有用的变量，然后它可以在velocity模板中使用，以渲染视图。
- en: 'The class now looks as follows:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该类现在如下所示：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create the velocity template. In our case, we are using `templates/allissues/allissues-report.vm`.
    We will use the issues variable we populated in the report class, iterate on it,
    and display the issue key and summary:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建velocity模板。在我们的例子中，我们使用`templates/allissues/allissues-report.vm`。我们将使用在报告类中填充的issues变量，遍历它，并显示问题的键和摘要：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With that, our report is ready. Package the plugin and deploy it. We will see
    more on creating Excel reports, validation within reports, and so on in the coming
    recipes.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至此，我们的报告已准备好。将插件打包并部署。我们将在接下来的例子中看到更多关于创建Excel报告、报告验证等内容。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'The whole logic of how it works can be outlined as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作逻辑可以概括如下：
- en: The input view of reports is generated by the object configurable properties,
    a set of pre-defined properties used to populate input parameters in JIRA. In
    our example, we used the `select` property. We will see more of this in detail
    later in this chapter.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告的输入视图是通过对象的可配置属性生成的，这是一组用于填充JIRA输入参数的预定义属性。在我们的示例中，我们使用了`select`属性。我们将在本章稍后详细介绍这一点。
- en: The report class gets the properties, uses them to retrieve the details required
    in the report, and populates the velocity context with the details.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告类获取属性，使用这些属性获取报告中所需的详细信息，并将详细信息填充到velocity上下文中。
- en: Velocity templates use the details in its context to render the report.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velocity模板使用其上下文中的详细信息来渲染报告。
- en: 'After the plugin is deployed, you can see the report among other JIRA reports
    in the **Browse Project** section, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署后，您可以在**浏览项目**部分看到报告，正如下面的截图所示：
- en: '![How it works...](img/1803-05-01.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-01.jpg)'
- en: 'After clicking on the report, the input screen is displayed, which is constructed
    using the properties entered in the plugin descriptor, **Project** drop-down in
    our case:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 点击报告后，会显示输入界面，该界面使用在插件描述符中输入的属性构建，对于我们的案例是**Project**下拉框：
- en: '![How it works...](img/1803-05-02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-02.jpg)'
- en: 'Clicking on **Next**, the report will be generated using the Report class and
    will be rendered using the velocity template as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**后，报告将使用Report类生成，并通过velocity模板渲染，具体如下：
- en: '![How it works...](img/1803-05-03.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-03.jpg)'
- en: See also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Creating a skeleton plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process"), *Plugin Development Process*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 插件开发过程")中*创建一个骨架插件*，*插件开发过程*
- en: Deploying your plugin in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 插件开发过程")中部署您的插件
- en: Reports in Excel format
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Excel格式报告
- en: In the previous recipe, we saw how to write a simple report. We will now see
    how to modify the report plugin to include Excel reports.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，我们看到了如何编写一个简单的报告。现在我们将看到如何修改报告插件，以包括Excel报告。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Create the report plugin, as mentioned in the previous recipe.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建报告插件，正如在之前的例子中提到的。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: The following are the steps to include the provision of exporting the report
    to Excel.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包括导出报告到Excel的步骤。
- en: 'Add the velocity resource type for the Excel view in the plugin descriptor
    if not added already:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未添加，请在插件描述符中为Excel视图添加velocity资源类型：
- en: '[PRE12]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Override the `isExcelViewSupported` method in the report class to return true.
    In our case, we add this in the `AllIssuesReport.java`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在报告类中重写`isExcelViewSupported`方法，返回true。在我们的案例中，我们在`AllIssuesReport.java`中添加了这一点：
- en: '[PRE13]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method returns false by default, as it is implemented that way in the `AbstractReport`
    class.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，这个方法返回false，因为它在`AbstractReport`类中是这样实现的。
- en: 'Override the `generateReportExcel` method returning the Excel view. This is
    very similar to the `generateReportHtml` we implemented in the previous recipe.
    The only difference is the view returned. The method looks as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`generateReportExcel`方法，返回Excel视图。这与我们在之前的例子中实现的`generateReportHtml`非常相似。唯一的区别是返回的视图不同。该方法如下所示：
- en: '[PRE14]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here the `getVelocityParams` method is exactly the same as what is used in the
    `generateReportHtml` method in the previous recipe. It retrieves the list of issues
    and populates the map of velocity parameters with the variable name issues.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的`getVelocityParams`方法与之前例子中的`generateReportHtml`方法完全相同。它检索问题列表并使用变量名issues填充velocity参数映射。
- en: Create the Excel velocity template. The template is created using HTML tags
    and velocity syntax, just like the other templates. In our example, it will be
    `allissues-report-excel.vm` under the folder `templates/allissues/` under resources.
    This is where the view can be customized for Excel.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Excel velocity模板。模板的创建与其他模板一样，使用HTML标签和velocity语法。在我们的示例中，它将在`resources`下的`templates/allissues/`文件夹中，文件名为`allissues-report-excel.vm`。这里是可以定制Excel视图的地方。
- en: 'In our example, all we have is a list of issues with its summary and key. Hence,
    we can even use the same template for Excel. It appears as follows:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们所拥有的仅仅是问题的摘要和关键字列表。因此，我们甚至可以使用相同的模板来生成Excel。它如下所示：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Package the plugin and deploy it.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它。
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the Excel view is added into the reports, a link **Excel View** will appear
    on the right-hand top side of the generated reports, as shown in the next screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Excel视图被添加到报告中，生成的报告右上方将出现一个**Excel视图**的链接，如下一个截图所示：
- en: '![How it works...](img/1803-05-04.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-04.jpg)'
- en: On clicking the link, the `generateReportExcel` method is executed, which in
    turn will generate the report and render the Excel view using the appropriate
    template that is defined in the plugin descriptor.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 点击链接时，将执行`generateReportExcel`方法，这将生成报告并使用插件描述符中定义的适当模板呈现Excel视图。
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: You may have noticed that when you click on the **Excel View** link, the excel
    report that opens is of the name `ConfigureReport!excelView.jspa`, and we need
    to rename that to `.xls` to make it Excel-friendly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，当你点击**Excel视图**链接时，打开的Excel报告名为`ConfigureReport!excelView.jspa`，我们需要将其重命名为`.xls`以便兼容Excel。
- en: 'To do it automatically, we need to set the **content-disposition** parameter
    in the response header, as shown:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动执行此操作，我们需要在响应头中设置**content-disposition**参数，如下所示：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This snippet is added in the `generateReportExcel` method before returning the
    excel view using the descriptor. The report will now open as a `.xls` file and
    can then be opened in Excel without any renaming.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码段在`generateReportExcel`方法中添加，在返回Excel视图之前使用描述符。报告将作为`.xls`文件打开，然后可以在Excel中打开，而无需重命名。
- en: '![There''s more...](img/1803-05-05.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1803-05-05.jpg)'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to [http://support.microsoft.com/kb/260519](http://support.microsoft.com/kb/260519)
    and [http://jira.atlassian.com/browse/JRA-8484](http://jira.atlassian.com/browse/JRA-8484)
    for some details on this.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[http://support.microsoft.com/kb/260519](http://support.microsoft.com/kb/260519)和[http://jira.atlassian.com/browse/JRA-8484](http://jira.atlassian.com/browse/JRA-8484)以获取一些详细信息。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Writing a JIRA report*'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写JIRA报告*'
- en: Data validation in JIRA reports
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JIRA报告中的数据验证
- en: Whenever we take user inputs, it is always a good idea to validate them to make
    sure the input is in the format that is expected. The same applies to reports
    also. JIRA reports, as we have seen in the previous recipes, accept user inputs
    based on which the reports are generated. In the example we used, a project is
    selected and the details of issues in the selected project are displayed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们获取用户输入时，验证它们总是一个好主意，以确保输入符合预期的格式。这同样适用于报告。正如我们在之前的食谱中所见，JIRA报告接受用户输入，并基于这些输入生成报告。在我们使用的示例中，选择了一个项目，并显示该项目中问题的详细信息。
- en: In the previous example, the likelihood of a wrong project being selected is
    low as the project is selected from a valid list of available projects. But still,
    the final URL that generates the report can be tampered with to include a wrong
    project ID, and so it is best to do the validation no matter how the input is
    taken.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，错误选择项目的可能性较低，因为项目是从有效的可用项目列表中选择的。但仍然，生成报告的最终URL可以被篡改以包含错误的项目ID，因此最好进行验证，无论输入是如何获得的。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create the report plugin, as explained in the first recipe.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 创建报告插件，如第一篇食谱中所述。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'All we need here is to override the validate method to include our custom validations.
    The following are the steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是重写`validate`方法，加入我们自定义的验证。以下是步骤：
- en: Override the `validate` method in the report class we created in the previous
    recipe.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前创建的报告类中重写`validate`方法。
- en: 'Extract the input parameters from the request parameters, which is an argument
    to the `validate` method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从请求参数中提取输入参数，这是`validate`方法的一个参数：
- en: '[PRE17]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`reqParams` here is an argument of the `validate` method:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的`reqParams`是`validate`方法的一个参数：
- en: '[PRE18]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Check the validity of the input parameter. In our example, the input parameter
    is the `projectId`. We can check if it is valid by verifying if a project exists
    with the given ID. The following condition returns true if it is an invalid project
    ID:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查输入参数的有效性。在我们的示例中，输入参数是`projectId`。我们可以通过验证是否存在具有给定ID的项目来检查其有效性。以下条件在项目ID无效时返回true：
- en: '[PRE19]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If the parameter is invalid, add an error to the action with the appropriate
    error message:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果参数无效，请向操作添加适当的错误消息：
- en: '[PRE20]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here we pass the field name to the `addError` method so that the error message
    appears on top of the field.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将字段名传递给 `addError` 方法，以便错误信息出现在字段上方。
- en: You can use internationalization here as well to include appropriate error messages.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你也可以使用国际化来包含适当的错误信息。
- en: 'Add similar validation for all the interested parameters. The following is
    how the method looks like in our example:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对所有相关的参数添加类似的验证。以下是我们示例中的方法：
- en: '[PRE21]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Package the plugin and deploy it!
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署！
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Just before the report is generated, the `validate` method is executed. If
    there is any error, the user is taken back to the input screen with the error
    highlighted as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在报告生成之前，`validate` 方法会被执行。如果出现任何错误，用户将被带回输入界面，错误信息会高亮显示如下：
- en: '![How it works...](img/1803-05-06.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-06.jpg)'
- en: This example shows an error when the report URL is tampered with to include
    an invalid project with ID 12020.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了当报告 URL 被篡改以包括无效的项目 ID 12020 时，出现的错误。
- en: See also
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Writing a JIRA report*'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写 JIRA 报告*'
- en: Restricting access to reports
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制对报告的访问
- en: It is possible to restrict access to JIRA reports based on pre-defined criteria,
    such as making the report visible only to a certain group of people, or showing
    the report only in certain projects, and so on. Let us quickly have a look at
    how to code permissions for a JIRA report.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据预定义的条件限制对 JIRA 报告的访问，例如使报告仅对特定人群可见，或仅在特定项目中显示报告等。让我们快速看看如何为 JIRA 报告编写权限控制代码。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create the report plugin, as explained in the first recipe.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 按照第一篇食谱中解释的方法创建报告插件。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'All we need to do here is to implement the `showReport` method on the report.
    Let us assume we want to restrict the report only to JIRA Administrators. The
    following are the steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只需在报告中实现 `showReport` 方法。假设我们只想将报告限制为 JIRA 管理员可见。以下是步骤：
- en: Override the `showReport` method in the report class we created in the previous
    recipes.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前的食谱中创建的报告类中重写 `showReport` 方法。
- en: 'Implement the logic to return `true` only if the condition is satisfied. In
    our example, the report should be visible only to JIRA Administrators, and hence
    we should return `true` only if the current user is a JIRA Administrator:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现逻辑，只有在条件满足时返回 `true`。在我们的示例中，报告应该仅对 JIRA 管理员可见，因此我们应仅在当前用户是 JIRA 管理员时返回 `true`：
- en: '[PRE22]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that the method `getJiraAdministrators` should be used from JIRA v 4.3.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`getJiraAdministrators` 方法应在 JIRA v 4.3 及以后版本使用。
- en: Package the plugin and deploy it.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If the user is an Administrator, he/she will see the report link under the
    Browse projects area. If not, the report link won''t be visible. We can include
    similar conditions and evaluate them in the `showReport` method before returning
    true:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户是管理员，他/她将会在“浏览项目”区域看到报告链接。如果不是，报告链接将不可见。我们可以在 `showReport` 方法中加入类似的条件，并在返回
    true 之前进行评估：
- en: '![How it works...](img/1803-05-07.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-07.jpg)'
- en: The user **Test User**, highlighted in the preceding screenshot, is not a JIRA
    Administrator and therefore, not able to see the **All Issues** report.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如前截图所示，用户 **Test User** 不是 JIRA 管理员，因此无法查看 **All Issues** 报告。
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Writing a JIRA report*'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写 JIRA 报告*'
- en: Object configurable parameters for reports
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可配置的报告对象参数
- en: We have seen how to write JIRA reports and we also had a brief look at how JIRA
    lets us configure the input parameters. The example we have chosen in the previous
    recipe, on creating JIRA reports, explained the usage of the `select` type. In
    this recipe, we will see the various property types supported and some examples
    on how to configure them.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何编写 JIRA 报告，并简要了解了 JIRA 如何让我们配置输入参数。在前面的食谱中，我们介绍了创建 JIRA 报告，并解释了 `select`
    类型的使用。在本食谱中，我们将看到支持的各种属性类型以及如何配置它们的一些示例。
- en: 'There are a number of property types supported in JIRA. The full list supported
    by your JIRA version can be found in the `com.atlassian.configurable.ObjectConfigurationTypes`
    class. For JIRA 4.2.*, the following are the types supported for reports:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 支持多种属性类型。你所使用的 JIRA 版本所支持的完整列表可以在 `com.atlassian.configurable.ObjectConfigurationTypes`
    类中找到。对于 JIRA 4.2.*，以下是报告支持的类型：
- en: '| Type | Input HTML type |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 输入 HTML 类型 |'
- en: '| --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `string` | Text Box |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `string` | 文本框 |'
- en: '| `long` | Text Box |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `long` | 文本框 |'
- en: '| `hidden` | NA. Hidden to the user. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `hidden` | 不适用，用户不可见。 |'
- en: '| `date` | Text Box with Calendar popup |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `date` | 带日历弹出框的文本框 |'
- en: '| `user` | Text Box with User Picker |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `user` | 带用户选择器的文本框 |'
- en: '| `text` | Text Area |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 文本区域 |'
- en: '| `select` | Select List |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `select` | 选择列表 |'
- en: '| `multiselect` | Multi select List |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `multiselect` | 多选列表 |'
- en: '| `checkbox` | Check Box |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `checkbox` | 复选框 |'
- en: '| `filterpicker` | Filter Picker |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `filterpicker` | 过滤器选择器 |'
- en: '| `filterprojectpicker` | Filter or Project Picker |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `filterprojectpicker` | 过滤器或项目选择器 |'
- en: '| `cascadingselect` | Cascading Select List. Dependant on a parent Select List.
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `cascadingselect` | 层级选择列表，依赖于父级选择列表 |'
- en: How to do it...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us quickly see each property and how it is used:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解每个属性及其用法：
- en: '**string**: The `string` property is used to create a Text Box. The Java data
    type is String. All you need here is to add the `property` tag with the type as
    `string`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**string**：`string`属性用于创建一个文本框。Java数据类型是String。你只需要在这里添加`property`标签，类型为`string`：'
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Each of the property types, including the `string` property, can have a default
    value populated using the `default` tag, as shown.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属性类型，包括`string`属性，都可以使用`default`标签填充默认值，如所示。
- en: '**long**: The `long` property is used to create a Text Box. The Java data type
    is again String:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**long**：`long`属性用于创建一个文本框。Java数据类型再次是String：'
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**select**: The select property is used to create a Select List. The Java data
    type is String. We have seen an example of this in the previous recipe. There
    are two ways you can populate the values of a select property:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**select**：`select`属性用于创建一个选择列表。Java数据类型是String。我们在之前的示例中见过一个例子。你可以通过两种方式填充选择属性的值：'
- en: '**Using a Value Generator class**: The class should implement the `ValuesGenerator`
    interface and return a map of key/value pairs. The *key* will be the value returned
    to the report class, whereas the *value* is the display value to the user. Let
    us use the same example in the previous recipe here:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用值生成器类**：该类应实现`ValuesGenerator`接口并返回一个键值对映射。*key*将是返回给报告类的值，而*value*是展示给用户的显示值。让我们在这里使用之前示例中的相同例子：'
- en: '[PRE25]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`ProjectValuesGenerator` implements the `getValues()` method as follows:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ProjectValuesGenerator`实现了如下的`getValues()`方法：'
- en: '[PRE26]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Using pre-defined key/value pairs in the property**: The following is an
    example:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用预定义的键值对**：以下是一个例子：'
- en: '[PRE27]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**multiselect**: The `multiselect` property is used to create a Multi Select
    List. It is the same as the select property. The only difference is that the type
    name is multiselect. Here the Java type will be a String if only one value is
    selected, and it will be an array of Strings (`String[]`) if more than one value
    is selected!'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**multiselect**：`multiselect`属性用于创建一个多选列表。它与选择属性相同。唯一的区别是类型名称是multiselect。在这里，如果只选择一个值，Java类型将是String；如果选择多个值，Java类型将是字符串数组（`String[]`）！'
- en: '**hidden**: The `hidden` property is used to pass a Hidden Value. The Java
    data type is String:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**hidden**：`hidden`属性用于传递一个隐藏值。Java数据类型是String：'
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We need to provide a value using the `default` tag as the user won't be seeing
    the field to enter a value.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用`default`标签提供一个值，因为用户无法看到该字段以输入值。
- en: '**date**: The `date` property is used to create a Date Picker. The Java data
    type is String. We should then parse it to the `Date` object in the report:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**date**：`date`属性用于创建一个日期选择器。Java数据类型是String。我们应该将其解析为报告中的`Date`对象：'
- en: '[PRE29]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**user**: The `user` property is used to create a User Picker. The Java data
    type is String and it will be the username:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**user**：`user`属性用于创建一个用户选择器。Java数据类型是String，它将是用户名：'
- en: '[PRE30]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**text**: The `text` property is used to create a Text Area. The Java data
    type is String:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**text**：`text`属性用于创建一个文本区域。Java数据类型是String：'
- en: '[PRE31]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**checkbox**: The `checkbox` property is used to create a Checkbox. The Java
    data type is String and the value will be `true` if selected. If the checkbox
    is unchecked, the value will be `null`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**checkbox**：`checkbox`属性用于创建一个复选框。Java数据类型是String，如果选中，则值为`true`；如果复选框未选中，则值为`null`：'
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**filterpicker**: The `filterpicker` property is used to create a Filter Picker.
    The Java data type is String and it will hold the ID of the selected filter:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**filterpicker**：`filterpicker`属性用于创建一个过滤器选择器。Java数据类型是String，它将保存所选过滤器的ID：'
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**filterprojectpicker**: Used to create a Filter or Project Picker. The Java
    data type is String, and it will be the ID preceded by filter (if a filter is
    selected) and project (if a project is selected):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**filterprojectpicker**：用于创建一个过滤器或项目选择器。Java数据类型是String，它将是前缀为filter（如果选择了过滤器）或project（如果选择了项目）的ID：'
- en: '[PRE34]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**cascadingselect**: Used to create a Cascading Select, based on another select
    box:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**cascadingselect**：用于基于另一个选择框创建级联选择：'
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Here the cascading select `testCascadingSelect` depends on the select property
    named `testSelect`. We have seen the `testSelect` property with the key/value
    pairs. The next important thing is the values generator class. As with the other
    value generator classes, this one also generates a map of key/value pairs.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的级联选择 `testCascadingSelect` 依赖于名为 `testSelect` 的选择属性。我们已经看到 `testSelect` 属性的键/值对。接下来，重要的一点是值生成器类。与其他值生成器类一样，这个类也会生成一个键/值对的映射。
- en: 'Here the key in the key/value pair should be the value that will be returned
    to the user. The value should be an instance of a `ValueClassHolder` class, which
    is a static class. The `ValueClassHolder` class will look like the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，键/值对中的键应该是返回给用户的值。值应该是 `ValueClassHolder` 类的一个实例，这是一个静态类。`ValueClassHolder`
    类将如下所示：
- en: '[PRE36]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `value` in the `ValueClassHolder` will be the display value of the cascading
    select options to the user. The `className` attribute will be the `key` of the
    parent select option.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValueClassHolder` 中的 `value` 将是级联选择选项对用户的显示值。`className` 属性将是父选择项的 `key`。'
- en: 'In our example, the parent select property is `testSelect`. It has three keys
    – `key1`, `key2`, and `key3`. The `getValues()` method will, therefore, look as
    follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，父选择属性是 `testSelect`。它有三个键 – `key1`、`key2` 和 `key3`。因此，`getValues()`
    方法将如下所示：
- en: '[PRE37]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If you take a single line, for example, `allValues.put("One1", new ValueClassHolder("First
    Val1", "key1"))`, it will have the key/value pair `One1/First Val1` when the select
    list has the key `key1` selected!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你举一个单独的例子，比如 `allValues.put("One1", new ValueClassHolder("First Val1", "key1"))`，当选择列表中的
    `key1` 被选中时，它将有一个键值对 `One1/First Val1`！
- en: 'After selecting the appropriate values, they can be retrieved in the report
    class, as shown in the following lines of code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择适当的值后，它们可以在报告类中被检索，如以下代码所示：
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Special mention should be given to the `filterprojectpicker`. The value will
    be `filter-10000` if a filter with the ID 10000 is selected. The value will be
    `project-10000` if a project with ID 10000 is selected.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 特别需要提到的是 `filterprojectpicker`。如果选择了 ID 为 10000 的过滤器，则值为 `filter-10000`。如果选择了
    ID 为 10000 的项目，则值为 `project-10000`。
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: When the report input screen is presented to the user, the properties mentioned
    in the plugin descriptor are converted into the appropriate HTML elements, as
    discussed. We can then retrieve their values in the report class and process them
    to generate the report.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当报告输入界面呈现给用户时，插件描述符中提到的属性将转换为适当的 HTML 元素，如前所述。然后，我们可以在报告类中检索它们的值并进行处理，以生成报告。
- en: 'The following two screenshots show how these properties appear on the input
    screen:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个截图展示了这些属性在输入界面上的显示：
- en: '![How it works...](img/1803-05-08.jpg)![How it works...](img/1803-05-09.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/1803-05-08.jpg)![工作原理...](img/1803-05-09.jpg)'
- en: 'If you print the extracted values into the console in the report class, it
    will appear as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在报告类中将提取的值打印到控制台，它将如下所示：
- en: '![How it works...](img/1803-05-10.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/1803-05-10.jpg)'
- en: Hopefully, that gives you a fair idea of how to use Object Configurable Parameters
    in JIRA reports.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能给你一个关于如何在 JIRA 报告中使用可配置参数的清晰概念。
- en: See also
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Writing a JIRA report*'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写 JIRA 报告*'
- en: Creating a pie chart in JIRA
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JIRA 中创建饼图
- en: As we have already seen in the previous recipes, JIRA ships with a bunch of
    built-in reports. It also lets us write our own reports using the report plugin
    module. One of the reports that attract a lot of users in JIRA is the Pie Chart.
    While the existing JIRA pie reports are really good at what it is meant for, sometimes
    the need arises to write our own pie charts.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的例子中已经看到的那样，JIRA 自带了一些内置报告。它还允许我们使用报告插件模块编写自己的报告。在 JIRA 中，吸引大量用户的一种报告是饼图。尽管现有的
    JIRA 饼图报告非常适合它的用途，但有时我们也需要编写自己的饼图。
- en: Writing a pie chart in JIRA is easy because JIRA already supports `JFreeChart`
    and has utility classes which do most of the work in creating these charts. In
    this recipe, we will see how to write a simple pie chart with the help of Atlassian
    Utility classes.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JIRA 中编写饼图非常简单，因为 JIRA 已经支持 `JFreeChart` 并且具有许多实用类，这些类可以完成大部分创建这些图表的工作。在这个实例中，我们将展示如何利用
    Atlassian 实用类编写一个简单的饼图。
- en: Getting ready…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始…
- en: Create a skeleton plugin using Atlassian Plugin SDK.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Atlassian Plugin SDK 创建一个插件骨架。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us try to create a very simple pie chart without any business logic. To
    keep things simple and to concentrate on the pie chart, let us go for a report
    without any input parameters and with just the HTML view. The following are the
    steps to accomplish this:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试创建一个非常简单的饼图，不包含任何业务逻辑。为了简化操作并集中精力在饼图上，我们可以做一个没有任何输入参数并且只有 HTML 视图的报告。以下是实现这一目标的步骤：
- en: 'Add the report plugin module in the plugin descriptor:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件描述符中添加报告插件模块：
- en: '[PRE39]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: All it has is a class and a velocity template for the HTML view.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它只包含一个类和一个用于 HTML 视图的 velocity 模板。
- en: Create the report class. As usual, it should implement the `AbstractReport`
    class. All we do here is to populate the velocity templates with parameters from
    the pie chart we create using a custom `PieChartGenerator` class.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建报告类。像往常一样，它应该实现 `AbstractReport` 类。我们在这里所做的就是用我们通过自定义 `PieChartGenerator`
    类创建的饼图参数填充 velocity 模板。
- en: 'Here is how the `generateReportHtml` looks:'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是 `generateReportHtml` 的样子：
- en: '[PRE40]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `Chart` class is an Atlassian class of the type `com.atlassian.jira.charts.Chart`.
    The business logic of creating the chart is done inside a custom utility class,
    `JTricksPieChartGenerator`, which we will see next.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Chart` 类是 Atlassian 类，类型为 `com.atlassian.jira.charts.Chart`。饼图的创建业务逻辑在自定义工具类
    `JTricksPieChartGenerator` 中完成，我们接下来将看到它。'
- en: Create the `JTricksPieChartGenerator` utility class, which generates the pie
    chart.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `JTricksPieChartGenerator` 工具类，用于生成饼图。
- en: 'This is where the business logic of creating the chart is done, and therefore,
    we will see them in detail:'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是饼图创建的业务逻辑，因此我们将详细查看这些内容：
- en: Create the `DefaultPieDataset`, which will be the data set for the pie chart.
    This is a `JFreeChart` class for which the Java Docs can be found at [http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/DefaultPieDataset.html](http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/DefaultPieDataset.html).
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `DefaultPieDataset`，它将作为饼图的数据集。这是一个 `JFreeChart` 类，Java 文档可以在 [http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/DefaultPieDataset.html](http://www.jfree.org/jfreechart/api/javadoc/org/jfree/data/general/DefaultPieDataset.html)
    中找到。
- en: '[PRE41]'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Populate the values in `dataset`:'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充 `dataset` 中的值：
- en: '[PRE42]'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the example, we just populated two key/value pairs with a *name* and a *number*
    *value*. This is the data, using which the pie chart is generated. When we generate
    custom charts, we should replace this with the appropriate data that we are interested
    in.
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，我们仅填充了两个键值对，分别是 *name* 和 *number* *value*。这是用于生成饼图的数据。当我们生成自定义图表时，我们应该将其替换为我们感兴趣的合适数据。
- en: 'Get an `i18nBean`. This is required in the Atlassian utility class:'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个 `i18nBean`。这是 Atlassian 工具类中所需的：
- en: '[PRE43]'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create the chart:'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图表：
- en: '[PRE44]'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here we use the `com.atlassian.jira.charts.jfreechart.PieChartGenerator` class
    to generate the chart using the dataset we just created and the `i18nBean`. Make
    sure you invoke the generate method, as shown in the preceding snippet.
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里我们使用 `com.atlassian.jira.charts.jfreechart.PieChartGenerator` 类，通过我们刚创建的
    dataset 和 `i18nBean` 生成图表。确保调用生成方法，如前面的代码片段所示。
- en: 'Populate a map with all the required parameters from the generated `ChartHelper`
    and return a `Chart` object, as shown next:'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用从生成的 `ChartHelper` 中获取的所有必需参数填充一个 map，并返回一个 `Chart` 对象，如下所示：
- en: '[PRE45]'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You can add all parameters available, but we are limiting it to the absolute
    minimum. `params.putAll(chart.getParameters())` in the report class will then
    populate the velocity context with all these parameters.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以添加所有可用的参数，但我们将其限制为最基本的参数。`params.putAll(chart.getParameters())` 在报告类中将填充所有这些参数到
    velocity 上下文中。
- en: 'The `generateChart` method will now look as follows:'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generateChart` 方法现在的样子如下：'
- en: '[PRE46]'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create the velocity template for the HTML view using the context we populated
    in the report class. In our example, the template is `templates/pie/pie-chart.vm`.
    It looks like the following block of code:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在报告类中填充的上下文，创建 HTML 视图的 velocity 模板。在我们的示例中，模板是 `templates/pie/pie-chart.vm`。它看起来像下面这段代码：
- en: '[PRE47]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Here we display the chart we created. The chart is available at the URL `$baseurl/charts?filename=$chart`,
    where `$chart` is the location generated by the helper class. We populated this
    earlier in the context.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里我们展示我们创建的图表。图表可以通过 URL `$baseurl/charts?filename=$chart` 获取，其中 `$chart` 是由辅助类生成的位置。我们之前已在上下文中填充了这个信息。
- en: Package the plugin, deploy it, and test it!
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件，部署并测试！
- en: How it works...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In short, the bit we need to do here is to create the `DefaultPieDataset` and
    everything else is done by JIRA for you. The `generateChart` method may take more
    arguments depending on the complexity of the reports we are going to create. For
    example: `startDate`, `endDate`, and so on. The data set will then be created
    using these arguments instead of our hardcoded values!'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们在这里需要做的是创建`DefaultPieDataset`，其他一切将由JIRA为你完成。`generateChart`方法可能会根据我们要创建的报告的复杂性需要更多的参数。例如：`startDate`、`endDate`等。然后，数据集将使用这些参数创建，而不是我们硬编码的值！
- en: 'In our example, the chart appears as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，图表显示如下：
- en: '![How it works...](img/1803-05-11.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1803-05-11.jpg)'
- en: There's more...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Have a look at the other helper classes under the `com.atlassian.jira.charts.jfreechart`
    package, for example, `StackedBarChartGenerator`, `HistogramChartGenerator`, `CreatedVsResolvedChartGenerator`,
    and so on, for other types of charts!
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`com.atlassian.jira.charts.jfreechart`包下的其他帮助类，例如`StackedBarChartGenerator`、`HistogramChartGenerator`、`CreatedVsResolvedChartGenerator`等，用于生成其他类型的图表！
- en: See also
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Writing a JIRA report*'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写JIRA报告*'
- en: Writing JIRA 4 gadgets
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写JIRA 4小工具
- en: Gadgets are a big leap in JIRA's reporting features! The fact that JIRA is now
    an OpenSocial container lets its user add useful gadgets (both JIRA's own and
    third-party) into its dashboard. At the same time, gadgets written for JIRA can
    be added in other containers like iGoogle, Gmail, and so on!
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 小工具是JIRA报告功能的一大飞跃！JIRA现在是一个OpenSocial容器，允许用户将有用的小工具（包括JIRA自带的和第三方的）添加到仪表板中。同时，针对JIRA编写的小工具也可以添加到其他容器中，如iGoogle、Gmail等！
- en: In this recipe, we will have a look at writing a very simple gadget, one that
    says 'Hello from JTricks'. By keeping the content simple, it will let us concentrate
    more on writing the gadget!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将编写一个非常简单的小工具，它会显示“Hello from JTricks”。通过保持内容简单，我们可以更专注于编写小工具的工作！
- en: 'Before we start writing the gadget, it is probably worth understanding the
    key components of a JIRA gadget:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写小工具之前，理解JIRA小工具的关键组成部分可能是值得的：
- en: 'Gadget XML is the most important part of a JIRA Gadget. It holds the specification
    of the gadget and includes the following:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小工具XML是JIRA小工具中最重要的部分。它包含小工具的规范，并包括以下内容：
- en: '**Gadget Characteristics**. It includes title, description, author''s name,
    and so on'
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小工具特点**。它包括标题、描述、作者姓名等'
- en: '**Screenshot and a thumbnail image**. Please note that the screenshot is not
    used within Atlassian containers such as JIRA or Confluence. We can optionally
    add it if we want them to be used in other OpenSocial containers'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**截图和缩略图**。请注意，截图不会在Atlassian容器中使用，如JIRA或Confluence。如果我们希望它们在其他OpenSocial容器中使用，可以选择性地添加它们。'
- en: '**Required features** that the gadget container must provide for the gadget'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小工具容器必须为小工具提供的**必需功能**
- en: '**User preferences** which will be configured by the gadget users'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户偏好**，由小工具用户配置'
- en: The **Gadget content** created using HTML and JavaScript
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML和JavaScript创建的**小工具内容**
- en: A screenshot and thumbnail image will be used during preview and while selecting
    the gadget from the container.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 截图和缩略图将在预览时以及从容器中选择小工具时使用。
- en: An `i18n` property file used for internationalization in the gadget
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于小工具国际化的`i18n`属性文件
- en: Optional CSS and JavaScript file used to render the display in the **Content**
    section of the gadget
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选的CSS和JavaScript文件，用于渲染小工具**内容**部分的显示
- en: We will see each of them in the recipe.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本教程中逐一介绍它们。
- en: Getting ready
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a skeleton plugin using Atlassian Plugin SDK.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Atlassian Plugin SDK创建一个骨架插件。
- en: How to do it...
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The following are the steps to write our irst gadget, one that shows the greetings
    from JTricks!
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是编写我们第一个小工具的步骤，它会显示来自JTricks的问候！
- en: 'Modify the plugin descriptor with the gadget module and the resources required
    for our gadget:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用小工具模块和我们小工具所需的资源修改插件描述符：
- en: 'Add the `Gadget` module in the plugin descriptor:'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插件描述符中添加`Gadget`模块：
- en: '[PRE48]'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As you can see, this has a unique `key` and points to the `location` of the
    gadget XML! You can have as many gadget definitions as you want in your `atlassian-plugin.xml`
    file, but in our example, we stick with the preceding one.
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，这有一个独特的`key`，指向小工具XML的`location`！你可以在`atlassian-plugin.xml`文件中定义任意多个小工具，但在我们的示例中，我们保持使用前面的定义。
- en: 'Include the thumbnail and screenshot images and downloadable resources in the
    plugin descriptor. We have seen details of this in the previous chapter and more
    can be learned at [http://confluence.atlassian.com/display/JIRADEV/Downloadable+Plugin+Resources](http://confluence.atlassian.com/display/JIRADEV/Downloadable+Plugin+Resources).
    In our example, the resources are added on to the plugin descriptor as:'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在插件描述文件中包括缩略图、截图图像和可下载资源。我们在上一章中已经看到过这一点，更多内容可以在[http://confluence.atlassian.com/display/JIRADEV/Downloadable+Plugin+Resources](http://confluence.atlassian.com/display/JIRADEV/Downloadable+Plugin+Resources)上了解。在我们的示例中，资源作为以下内容添加到插件描述文件中：
- en: '[PRE49]'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The location is relative to the `src/main/resources` folder in the plugin. As
    mentioned before, the screenshot is optional.
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 位置是相对于插件中的`src/main/resources`文件夹。正如前面所述，截图是可选的。
- en: 'Add the `i18n` properties file that will be used in the gadget also as a downloadable
    resource:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将用于小工具的`i18n`属性文件，也作为可下载资源：
- en: '[PRE50]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The `atlassian-plugin.xml` will now look like this:'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，`atlassian-plugin.xml`将如下所示：
- en: '[PRE51]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Add the screenshot and thumbnail images under the `src/main/resources/images`
    folder. The thumbnail image should be of the size 120 x 60 pixels.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main/resources/images`文件夹下添加截图和缩略图图像。缩略图图像的大小应为120 x 60像素。
- en: Add the `i18n` properties file under the `src/main/resources/i18n` folder. The
    name of the filer we defined in `messages.xml`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`i18n`属性文件添加到`src/main/resources/i18n`文件夹下。我们在`messages.xml`中定义的文件名。
- en: 'This file is an XML file wrapped within the `messagebundle` tag. Each property
    in the file is entered as an XML tag, as shown next:'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该文件是一个XML文件，包含在`messagebundle`标签中。文件中的每个属性作为XML标签输入，如下所示：
- en: '[PRE52]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The `msg` tag has a `name` attribute, which is the property, and the corresponding
    Value is enclosed in the `msg` tag. We use three properties in our example and
    the entire file in our example looks like the following:'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`msg`标签有一个`name`属性，表示属性，且相应的值被包含在`msg`标签中。我们在示例中使用了三个属性，整个文件如下所示：'
- en: '[PRE53]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Write the Gadget XML.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写小工具XML。
- en: The Gadget XML has a Module element at the root of the XML. It has mainly three
    elements underneath – `ModulePrefs`, `UserPref`, and `Content`. We will write
    of each of them in this example. The entire set of attributes and elements and
    other details of the gadget specification can be read at [http://confluence.atlassian.com/display/GADGETDEV/Creating+your+Gadget+XML+Specification](http://confluence.atlassian.com/display/GADGETDEV/Creating+your+Gadget+XML+Specification).
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小工具XML的根元素是`Module`。它下面主要有三个元素——`ModulePrefs`、`UserPref`和`Content`。我们将在本示例中介绍每个元素。有关小工具规范的所有属性、元素和其他详细信息，可以在[http://confluence.atlassian.com/display/GADGETDEV/Creating+your+Gadget+XML+Specification](http://confluence.atlassian.com/display/GADGETDEV/Creating+your+Gadget+XML+Specification)阅读。
- en: Write the `ModulePrefs` element. This element holds the information about the
    gadget. It also has two child elements – `Require` and `Optional`, that are used
    to define the required or optional features for the gadget.
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写`ModulePrefs`元素。该元素包含有关小工具的信息。它还具有两个子元素——`Require`和`Optional`，用于定义小工具所需或可选的功能。
- en: 'The following is how the `ModulePrefs` element looks in our example after it
    is populated with all the attributes:'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是我们示例中`ModulePrefs`元素在填充所有属性后样子的示例：
- en: '[PRE54]'
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: As you can see, it holds information like `title`, `title URL` (to which the
    gadget title will link to), `description`, `author` `name` and `email`, `height`
    of the gadget, and URLs to screenshot and thumbnail images.
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，它包含了诸如`title`（标题）、`title URL`（小工具标题将链接到的URL）、`description`（描述）、`author`（作者）、`name`（名称）和`email`（电子邮件）、小工具的`height`（高度）、截图和缩略图图像的URL等信息。
- en: Anything that starts with `__MSG_` and ends with `__` is a property that is
    referred from the `i18n` properties file.
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何以`__MSG_`开头并以`__`结尾的内容，都是从`i18n`属性文件中引用的属性。
- en: The `height` of the gadget is optional and 200, by default. The images are referenced
    using `#staticResourceUrl` where the first argument is the fully qualified gadget
    module key which is of the form `${atlassian-plugin-key}:${module-key}`. In our
    example, the plugin key is `com.jtricks.gadgets` and the module key is `hello-gadget`.
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小工具的`height`（高度）是可选的，默认值为200。图像使用`#staticResourceUrl`进行引用，其中第一个参数是完全限定的小工具模块键，形式为`${atlassian-plugin-key}:${module-key}`。在我们的示例中，插件键是`com.jtricks.gadgets`，模块键是`hello-gadget`。
- en: 'Add the optional gadget directory feature inside `ModulePrefs`. This is currently
    supported only in JIRA:'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`ModulePrefs`中添加可选的小工具目录功能。目前仅在JIRA中支持：
- en: '[PRE55]'
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the example, we add the category as `Other`!
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在示例中，我们将类别添加为`Other`！
- en: 'Other values supported for category are: `JIRA`, `Confluence`, `FishEye`, `Crucible`,
    `Crowd`, `Clover`, `Bamboo`, `Admin`, `Charts`, and `External` `Content`.'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类别支持的其他值包括：`JIRA`、`Confluence`、`FishEye`、`Crucible`、`Crowd`、`Clover`、`Bamboo`、`Admin`、`Charts`
    和 `External` `Content`。
- en: You can add the gadget to more than one category by adding the categories within
    the `Param` element, each in a new line.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过在 `Param` 元素中添加类别，每行一个，来将小工具添加到多个类别中。
- en: Include `Required` features if there are any under the XML tag `require`. A
    full list of supported features can be found at [http://confluence.atlassian.com/display/GADGETDEV/Including+Features+into+your+Gadget](http://confluence.atlassian.com/display/GADGETDEV/Including+Features+into+your+Gadget).
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有需要，包含 `Required` 功能，放在 XML 标签 `require` 下。完整的支持功能列表可以在 [http://confluence.atlassian.com/display/GADGETDEV/Including+Features+into+your+Gadget](http://confluence.atlassian.com/display/GADGETDEV/Including+Features+into+your+Gadget)
    找到。
- en: 'Add the `Locale` element to point to the `i18n` properties file:'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `Locale` 元素以指向 `i18n` 属性文件：
- en: '[PRE56]'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Here the property `__ATLASSIAN_BASE_URL__` will be automatically substituted
    with JIRA's configured base URL when the gadget is rendered. The path to the property
    file here is `__ATLASSIAN_BASE_URL__/download/resources/com.jtricks.gadgets`,
    where `com.jtricks.gadgets` is the Atlassian plugin key. The path to the XML file
    `/i18n/messages.xml` is what is defined in the resource module earlier.
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，属性 `__ATLASSIAN_BASE_URL__` 会在小工具渲染时自动被替换为 JIRA 配置的基础 URL。属性文件的路径是 `__ATLASSIAN_BASE_URL__/download/resources/com.jtricks.gadgets`，其中
    `com.jtricks.gadgets` 是 Atlassian 插件的密钥。XML 文件的路径 `/i18n/messages.xml` 是之前在资源模块中定义的。
- en: Add User Preferences if required, using the `UserPref` element. We will omit
    the same in this example as the 'Hello Gadget' doesn't take any inputs from the
    user.
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，使用 `UserPref` 元素添加用户偏好设置。在本例中，我们将省略这一部分，因为“Hello Gadget”不需要用户输入。
- en: Add the `Content` for the gadget. This is where the gadget is rendered using
    HTML and JavaScript. In our example, we just need to provide the static text 'Hello
    From JTricks' and it is fairly easy.
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加小工具的 `Content`。这是使用 HTML 和 JavaScript 渲染小工具的地方。在我们的示例中，我们只需要提供静态文本“Hello From
    JTricks”，这是相当简单的。
- en: 'The entire content is wrapped within the `< ![CDATA[` and `]]>`, so that they
    won''t be treated as XML tags. The following is how it looks in our example:'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整个内容被包装在 `< ![CDATA[` 和 `]]>` 之间，以便它们不会被当作 XML 标签处理。以下是我们示例中的表现形式：
- en: '[PRE57]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Our gadget''s XML is now ready and looks like the following block of code:'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的小工具的 XML 文件现在已经准备好，格式如下所示：
- en: '[PRE58]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Package the plugin, deploy it, and test it.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件，部署并测试。
- en: How it works...
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Once the plugin is deployed, we need to add the gadget in the JIRA dashboard.
    The following is how it appears in the **Add Gadget** screen. Note the thumbnail
    is the one we have in the plugin and also note that it appears in the **Other**
    section:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，我们需要将小工具添加到 JIRA 仪表盘中。以下是它在 **添加小工具** 页面上的显示方式。请注意，缩略图是我们插件中的那个，并且它出现在
    **其他** 部分：
- en: '![How it works...](img/1803-05-12.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/1803-05-12.jpg)'
- en: 'Once it is added, it appears as follows in the **Dashboards** section:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 添加后，它在 **仪表盘** 部分显示如下：
- en: '![How it works...](img/1803-05-13.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/1803-05-13.jpg)'
- en: There's more...
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can modify the look-and-feel of the gadgets by adding more HTML or gadget
    preferences! For example, `<font color="red">Hello From JTricks</font>` will make
    it appear in red.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加更多 HTML 或小工具偏好设置来修改小工具的外观和感觉！例如，`<font color="red">Hello From JTricks</font>`
    会使其显示为红色。
- en: 'We can adjust the size of the gadget using the dynamic-height feature. We should
    add the following under the `ModulePrefs` element:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用动态高度功能调整小工具的大小。我们应该在 `ModulePrefs` 元素下添加以下内容：
- en: '[PRE59]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We should then invoke `gadgets.window.adjustHeight();` whenever the content
    is reloaded. For example, we can do it in a window onload event, as shown next:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 每当内容重新加载时，我们应该调用 `gadgets.window.adjustHeight();`。例如，我们可以在窗口加载事件中这样做，如下所示：
- en: '[PRE60]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `gadget xml` file, in this case, will look like this:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，小工具的 `gadget xml` 文件应该如下所示：
- en: '[PRE61]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The gadget should now appear as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 小工具现在应该显示如下：
- en: '![There''s more...](img/1803-05-14.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1803-05-14.jpg)'
- en: Note that the size is adjusted to just fit the text!
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，大小已经调整为正好适应文本！
- en: Invoking REST services from gadgets
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从小工具调用 REST 服务
- en: In the previous recipe, we saw how to write a gadget with static content. In
    this recipe, we will have a look at creating a gadget with dynamic content or
    the data that is coming from the JIRA server.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个例子中，我们了解了如何编写一个带有静态内容的小工具。在本例中，我们将看看如何创建一个带有动态内容的小工具，或者说是来自 JIRA 服务器的数据。
- en: JIRA uses REST services to communicate between the gadgets and the server. We
    will see how to write REST services in the coming chapters. In this recipe, we
    will use an existing REST service.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 使用 REST 服务在小工具和服务器之间进行通信。我们将在接下来的章节中学习如何编写 REST 服务。在本章中，我们将使用现有的 REST 服务。
- en: Getting ready
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在准备中
- en: Create the **Hello Gadget**, as described in the previous recipe.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 创建**Hello Gadget**，如上一章节所述。
- en: How to do it...
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us consider a simple modification to the existing **Hello Gadget** to understand
    the basics of invoking REST services from gadgets. We will try to greet the current
    user by retrieving the user details from the server instead of displaying the
    static text: **Hello From JTricks**.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑对现有的**Hello Gadget**进行简单修改，以理解如何从小工具中调用 REST 服务的基础知识。我们将尝试通过从服务器获取用户详细信息来问候当前用户，而不是显示静态文本：**Hello
    From JTricks**。
- en: 'JIRA ships with some inbuilt REST methods, one of which is to retrieve the
    details of the current user. The method can be reached in the URL: `/rest/gadget/1.0/currentUser`.
    We will use this method to retrieve the current user''s full name and then display
    it in the gadget greeting. If the user''s name is **Jobin Kuruvilla**, the gadget
    will display the message as **Hello, Jobin Kuruvilla**.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 提供了一些内置的 REST 方法，其中之一是获取当前用户的详细信息。该方法可以通过 URL 访问：`/rest/gadget/1.0/currentUser`。我们将使用该方法来获取当前用户的全名，并将其显示在小工具的问候语中。如果用户的名字是**Jobin
    Kuruvilla**，小工具将显示消息：**Hello, Jobin Kuruvilla**。
- en: As we are only changing the content of the gadget, the only modification is
    required in the gadget XML, which is `hello-gadget.xml` in our example. Only the
    `Content` element needs to be modified, which will now invoke the REST service
    and render the content.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是修改了小工具的内容，所以唯一需要修改的是小工具 XML 文件，即我们的示例中的 `hello-gadget.xml`。只需要修改 `Content`
    元素，它现在将调用 REST 服务并呈现内容。
- en: 'The following are the steps:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是步骤：
- en: 'Include the common Atlassian gadget resources:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含常见的 Atlassian 小工具资源：
- en: '[PRE62]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '`#requireResource` will bring in the JIRA gadget JavaScript framework into
    the gadget''s context. `#includeResources` will write out the HTML tags for the
    resource in place. Check out [http://confluence.atlassian.com/display/GADGETDEV/Using+Web+Resources+in+your+Gadget](http://confluence.atlassian.com/display/GADGETDEV/Using+Web+Resources+in+your+Gadget)
    for more details.'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`#requireResource` 将 JIRA 小工具的 JavaScript 框架引入小工具的上下文中。`#includeResources`
    会写出资源的 HTML 标签。更多详情请查看 [http://confluence.atlassian.com/display/GADGETDEV/Using+Web+Resources+in+your+Gadget](http://confluence.atlassian.com/display/GADGETDEV/Using+Web+Resources+in+your+Gadget)。'
- en: 'Construct a gadget object as follows:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个小工具对象，如下所示：
- en: '[PRE63]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The gadget object has four top-level options:'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小工具对象有四个顶级选项：
- en: '`baseUrl`: An option to pass the base URL. It is a mandatory option, and we
    use `__ATLASSIAN_BASE_URL__` here which will be rendered as JIRA''s base URL.'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`baseUrl`: 用于传递基础 URL 的选项。此选项是必需的，我们在这里使用 `__ATLASSIAN_BASE_URL__`，它将渲染为 JIRA
    的基础 URL。'
- en: '`useOauth`: An optional parameter. Used to configure the type of authentication
    which must be a URL. `/rest/gadget/1.0/currentUser` is commonly used.'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`useOauth`: 一个可选的参数。用于配置身份验证类型，必须是一个 URL。通常使用 `/rest/gadget/1.0/currentUser`。'
- en: '`config`: Another optional parameter. Only used if there are any configuration
    options for the gadget.'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`: 另一个可选参数。仅在小工具有任何配置选项时使用。'
- en: '`view`: Used to define the gadget''s view.'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`: 用于定义小工具的视图。'
- en: 'In our example, we don''t use authentication or any configuration options.
    We will just go with the `baseUrl` and `view` options. The following is how the
    Gadget is created using JavaScript:'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们没有使用身份验证或任何配置选项。我们只会使用 `baseUrl` 和 `view` 选项。以下是如何使用 JavaScript 创建小工具：
- en: '[PRE64]'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Populate the gadget view.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充小工具视图。
- en: 'The `view` object has the following properties:'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`view` 对象具有以下属性：'
- en: '`enableReload`: Optional. Used to reload the gadget at regular intervals.'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableReload`: 可选的。用于定期重新加载小工具。'
- en: '`onResizeReload`: Optional. Used to reload the gadget when the browser is resized.'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onResizeReload`: 可选的。用于在浏览器调整大小时重新加载小工具。'
- en: '`onResizeAdjustHeight`: Optional and used along with the `dynamic-height` feature.
    This will adjust the gadget height when the browser is resized.'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onResizeAdjustHeight`: 可选的，并与 `dynamic-height` 功能一起使用。当浏览器调整大小时，这将调整小工具的高度。'
- en: '`template`: Created the actual view.'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`: 创建实际视图。'
- en: '`args`: An array of objects or function that returns an array of objects. It
    has two attributes. `Key` –used to access the data from within the template and
    `ajaxOptions` – set of request options used to connect to the server and retrieve
    data.'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`：一个对象数组或返回对象数组的函数。它有两个属性。`Key`——用于在模板中访问数据；`ajaxOptions`——一组用于连接服务器并检索数据的请求选项。'
- en: 'In our example, we will use the `template` and `args` properties to render
    the view. First, let us see `args` because we use the data retrieved here in the
    `template`. `args` will look like the following:'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用`template`和`args`属性来渲染视图。首先，让我们看一下`args`，因为我们在`template`中使用了从这里获取的数据。`args`将如下所示：
- en: '[PRE65]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: As you can see, we invoke the `/rest/gadget/1.0/currentUser` method and use
    the key `user` to refer the data we retrieved while rendering the view. `ajaxOptions`
    uses the jQuery Ajax Options, details of which can be found at [http://api.jquery.com/jQuery.ajax#options](http://api.jquery.com/jQuery.ajax#options).
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，我们调用了`/rest/gadget/1.0/currentUser`方法，并使用`user`键来引用我们在渲染视图时获取的数据。`ajaxOptions`使用了jQuery的Ajax选项，详细信息可以在[http://api.jquery.com/jQuery.ajax#options](http://api.jquery.com/jQuery.ajax#options)找到。
- en: 'The key `user` will now hold the user details from the REST method, as follows:'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`user`键现在将保存来自REST方法的用户详细信息，如下所示：'
- en: '[PRE66]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The `template` function will now use this `args` object (defined earlier) and
    its `key`, `user` to render the view as follows:'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`template`函数现在将使用这个`args`对象（如前所定义）及其`key`（`user`）来渲染视图，如下所示：'
- en: '[PRE67]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Here, `args.user["fullName"]` will retrieve the user's `fullName` from the REST
    output. Username or e-mail can be retrieved in a similar fashion.
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`args.user["fullName"]`将从REST输出中获取用户的`fullName`。用户名或电子邮件也可以以类似的方式获取。
- en: '`AJS.$` will construct the view as `<h1>Hello, Jobin Kuruvilla</h1>`, where
    `Jobin Kuruvilla` is the `fullName` retrieved.'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AJS.$`将构建视图为`<h1>Hello, Jobin Kuruvilla</h1>`，其中`Jobin Kuruvilla`是获取到的`fullName`。'
- en: 'The entire `Content` section will look as shown in the following lines of code:'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 整个`Content`部分将如下所示：
- en: '[PRE68]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Package the gadget and deploy it.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包小部件并部署它。
- en: How it works...
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'After the modification to the gadget XML, the gadget will now display the method
    as follows:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 修改小部件XML后，小部件现在将显示如下方法：
- en: '![How it works...](img/1803-05-14a.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1803-05-14a.jpg)'
- en: See also
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Writing JIRA 4 gadgets*'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写JIRA 4小部件*'
- en: Configuring user preferences in gadgets
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在小部件中配置用户偏好
- en: In the previous two recipes, we saw how to create gadgets from static content
    and dynamic content. In this recipe, we will go one step further and display the
    gadget content, based on user input.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个食谱中，我们展示了如何从静态内容和动态内容中创建小部件。在这个食谱中，我们将更进一步，根据用户输入显示小部件内容。
- en: The user will configure the gadget during its creation, or modify it later and
    the gadget content will vary depending on the configuration parameters.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将在创建小部件时配置它，或者稍后修改它，且小部件内容将根据配置参数有所不同。
- en: Getting ready...
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在准备中...
- en: Create the **Hello Gadget**, populated with dynamic content, as described in
    the previous recipe.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 创建**Hello Gadget**，并填充动态内容，正如前面的食谱所描述。
- en: How to do it...
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In this recipe, we will let the user choose whether to display the name in the
    greeting message or not. There will be a property on the gadget named `displayName`.
    If it is set to `true`, the gadget will display the username and the greeting
    message will be **Hello, Jobin Kuruvilla**. If the `displayName` is set to false,
    the greeting message will be **Hello**!
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将让用户选择是否在问候消息中显示姓名。小部件将有一个名为`displayName`的属性。如果它设置为`true`，则小部件将显示用户名，问候消息将为**Hello,
    Jobin Kuruvilla**。如果`displayName`设置为false，问候消息将是**Hello**！
- en: 'The following are the steps to configure user preferences:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是配置用户偏好的步骤：
- en: 'Include the `setprefs` and the `views` features under the `ModulePrefs` element:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ModulePrefs`元素下包含`setprefs`和`views`功能：
- en: '[PRE69]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`setprefs` is required to persist user preferences, whereas `views` determines
    whether the current user can edit the preferences or not.'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setprefs`用于持久化用户偏好，而`views`决定当前用户是否可以编辑偏好设置。'
- en: 'Include the gadget, the `common` locale, under `ModulePrefs`, along with our
    custom `Locale` element:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ModulePrefs`下包含小部件、`common`语言环境，以及我们的自定义`Locale`元素：
- en: '[PRE70]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This is required to get the gadget configuration language properly.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是确保小部件配置语言正确的必要步骤。
- en: 'Include the required `UserPref` elements. This element defines the various
    user preferences. The element supports the following fields:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含所需的`UserPref`元素。此元素定义了各种用户偏好。该元素支持以下字段：
- en: '`name`: Required. Name of the user preferences. The value of this can then
    be accessed using `gadget.getPref("name")`.'
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：必填项。用户偏好的名称。其值可以通过 `gadget.getPref("name")` 获取。'
- en: '`display_name`: Display name of the field. By default, it will be the same
    as the name.'
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_name`：字段的显示名称。默认情况下，它与名称相同。'
- en: '`urlparam`: Optional string to pass as the parameter name for content `type="url"`.'
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urlparam`：可选字符串，作为内容 `type="url"` 的参数名称传递。'
- en: '`datatype`: Data type of the field. Valid options include: `string`, `bool`,
    `enum`, `hidden`, or `list`. Default is string.'
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datatype`：字段的数据类型。有效选项包括：`string`、`bool`、`enum`、`hidden` 或 `list`。默认值是 string。'
- en: '`required`: Marks the field as required. Default is false.'
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required`：标记字段为必填项。默认值是 false。'
- en: '`default_value`: Sets a default value.'
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_value`：设置默认值。'
- en: 'In our example, we add the `displayName` property as follows:'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们按如下方式添加 `displayName` 属性：
- en: '[PRE71]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The field is marked as `hidden` so that it won't appear in the OpenSocial gadget
    configuration form!
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该字段被标记为`hidden`，因此它不会出现在 OpenSocial 小部件的配置表单中！
- en: 'Modify the creation of `AJS.Gadget` to include the `config` property. `config`
    is normally of the form:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `AJS.Gadget` 的创建以包含 `config` 属性。`config` 通常是以下形式：
- en: '[PRE72]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Here, `descriptor` is a function that returns a new Configuration Descriptor.
    `args` is an array of objects or a function that returns one similar to `view`.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`descriptor` 是一个返回新配置描述符的函数。`args` 是一个对象数组或返回类似 `view` 的函数。
- en: 'In our example, we define a function to return a descriptor with the configuration
    details of the `displayName` property. It looks like the following:'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们定义了一个函数来返回包含 `displayName` 属性配置详情的描述符。它如下所示：
- en: '[PRE73]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Here, there is only one field: `displayName`. It is of the type `select` and
    has a `label` and `description`, both populated from the `i18n` property file
    using the `gadget.getMsg` method. The `Selected` attribute is populated with the
    current value – `gadget.getPref("displayName")`. `Options` are given as an array,
    as shown in the preceding snippet.'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里只有一个字段：`displayName`。它是 `select` 类型，并且有一个 `label` 和 `description`，这两者都是通过
    `i18n` 属性文件，使用 `gadget.getMsg` 方法填充的。`Selected` 属性被填充为当前值 – `gadget.getPref("displayName")`。`Options`
    作为数组提供，如前面的代码片段所示。
- en: More details on the various other field types and their properties can be found
    at [http://confluence.atlassian.com/display/GADGETDEV/Field+Definitions](http://confluence.atlassian.com/display/GADGETDEV/Field+Definitions).
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于各种其他字段类型及其属性的更多详细信息可以在 [http://confluence.atlassian.com/display/GADGETDEV/Field+Definitions](http://confluence.atlassian.com/display/GADGETDEV/Field+Definitions)
    上找到。
- en: 'Add the new `i18n` properties to the message bundle:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 `i18n` 属性添加到消息包中：
- en: '[PRE74]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Include the `UserPref` – `isConfigured`:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括 `UserPref` – `isConfigured`：
- en: '[PRE75]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The user preferences are set every time the gadget loads, and we use this property
    which is specially designed to prevent this.
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户偏好每次小部件加载时都会设置，我们使用这个专门设计的属性来防止这种情况。
- en: When this property is used, `AJS.gadget.fields.nowConfigured()` should be added
    as an additional field under the `config descriptor`.
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用此属性时，应该在 `config descriptor` 下添加 `AJS.gadget.fields.nowConfigured()` 作为额外字段。
- en: Modify the view to display usernames based on the configured property.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改视图以根据配置的属性显示用户名。
- en: 'The `template` function is modified as follows:'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`template` 函数修改如下：'
- en: '[PRE76]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: As you can see, the configured property is retrieved using `gadget.getPref("displayName")`.
    If it is `true`, the username is used.
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，配置的属性是通过 `gadget.getPref("displayName")` 获取的。如果它为 `true`，则使用用户名。
- en: 'The entire `Content` section now looks like the following lines of code:'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在整个 `Content` 部分看起来像以下代码行：
- en: '[PRE77]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Package the gadget and deploy it.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包小部件并部署它。
- en: How it works...
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once the user configurable properties are added, the gadget on its creation
    will ask the user to configure the `displayName` property, as shown next. The
    default value will be `true` (label :Yes) as we configured it.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了用户可配置的属性，创建小部件时将要求用户配置 `displayName` 属性，如下所示。默认值将是 `true`（标签：是），正如我们所配置的那样。
- en: '![How it works...](img/1803-05-15.jpg)'
  id: totrans-451
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-15.jpg)'
- en: 'When **Yes** is selected, it appears as:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择**是**时，它会显示为：
- en: '![How it works...](img/1803-05-16.jpg)'
  id: totrans-453
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-16.jpg)'
- en: 'If you click on the gadget options now, you can see the **Edit** option, as
    shown in the following screenshot:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在点击小部件选项，你可以看到**编辑**选项，如下图所示：
- en: '![How it works...](img/1803-05-17.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-17.jpg)'
- en: 'The following screenshot appears while clicking on **Edit**:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**编辑**时出现如下截图：
- en: '![How it works...](img/1803-05-18.jpg)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-18.jpg)'
- en: 'On selecting **No**, the message is displayed without the username, as shown
    in the following screenshot:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**否**时，消息将不显示用户名，如下图所示：
- en: '![How it works...](img/1803-05-19.jpg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-05-19.jpg)'
- en: There's more...
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One of the most popular user preferences in JIRA gadgets, and therefore, worth
    a special mention, is its ability to auto refresh itself at a configured interval.
    JIRA has a pre-defined feature that helps us to do it.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 小工具中最受欢迎的用户偏好之一，因此值得特别提及的是它能够在配置的时间间隔内自动刷新。JIRA 有一个预定义的功能，可以帮助我们实现这一点。
- en: 'There are only a couple of things you need do to implement this feature:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此功能只需要做几件事：
- en: 'Add the `refresh` UserPref:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `refresh` 用户偏好：
- en: '[PRE78]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Include the `enableReload: true` property in the `view`:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 `view` 中包含 `enableReload: true` 属性：'
- en: '[PRE79]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'You will now see an extra **Refresh** action on the gadget properties, as shown
    in the next screenshot:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将在小工具属性中看到一个额外的**刷新**操作，如下图所示：
- en: '![There''s more...](img/1803-05-20.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1803-05-20.jpg)'
- en: This can be used to refresh the gadget at any time.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用于随时刷新小工具。
- en: 'On clicking on **Edit**, the automatic refresh interval can be selected, as
    shown in the following screenshot:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**编辑**时，可以选择自动刷新间隔，如下图所示：
- en: '![There''s more...](img/1803-05-21.jpg)'
  id: totrans-471
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/1803-05-21.jpg)'
- en: See also
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Writing JIRA 4 gadgets*'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写 JIRA 4 小工具*'
- en: Invoking REST services from gadgets
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从小工具调用 REST 服务
- en: Accessing gadgets outside of JIRA
  id: totrans-475
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 JIRA 之外的小工具
- en: We have seen how to write a gadget and add it onto the JIRA Dashboard. But have
    we made use of all the advantages of an OpenSocial gadget? How about adding them
    onto other OpenSocial containers such as Gmail or iGoogle?
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过如何编写小工具并将其添加到 JIRA 仪表板上。但我们是否已经充分利用了 OpenSocial 小工具的所有优势？如何将它们添加到其他 OpenSocial
    容器中，例如 Gmail 或 iGoogle？
- en: In this recipe, we will see how to add a gadget in to Gmail. The process is
    pretty much similar for other containers as well.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何将小工具添加到 Gmail。对于其他容器，过程也是非常相似的。
- en: How to do it...
  id: totrans-478
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following is a quick step-by-step procedure to add a gadget to Gmail:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将小工具添加到 Gmail 的快速步骤：
- en: Identify the Gadget URL for the gadget that we are going to add. We can find
    this URL from the JIRA gadgets directory, as shown in the next screenshot. In
    the example, we choose to add the **Favourite Filters** gadget:![How to do it...](img/1803-05-22.jpg)
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定我们要添加的小工具的 URL。我们可以从 JIRA 小工具目录中找到这个 URL，如下图所示。在示例中，我们选择添加**收藏的过滤器**小工具：![如何操作...](img/1803-05-22.jpg)
- en: Go to **Gmail** | **Settings** | **Gadgets**. Enter the URL, as shown in the
    next screenshot:![How to do it...](img/1803-05-23.jpg)
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入**Gmail** | **设置** | **小工具**。输入 URL，如下图所示：![如何操作...](img/1803-05-23.jpg)
- en: Note that this is the only process that will be different for different containers.
    We need to enter this URL in the appropriate place for each different container.
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这是不同容器之间唯一不同的步骤。我们需要在每个容器的适当位置输入这个 URL。
- en: Once added, the gadget will appear in the settings as shown in the following
    screenshot:![How to do it...](img/1803-05-24.jpg)
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加后，小工具将在设置中显示，如下图所示：![如何操作...](img/1803-05-24.jpg)
- en: The gadget should now be available under the list of gadgets you have in your
    Gmail sidebars. Save the configurations. In our example, we need to choose whether
    to display the count of issues or not and the refresh interval.
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小工具现在应该可以在 Gmail 侧边栏中的小工具列表下使用。保存配置。在我们的示例中，我们需要选择是否显示问题的计数以及刷新间隔。
- en: Refer to the next screenshot to see how it appears in Gmail.
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见下一张截图，了解它在 Gmail 中的显示效果。
- en: The gadget now shows no results because we haven't connected to JIRA with a
    proper username/password. Edit the gadget settings and you will see an option,
    **Login & Approve**, which allows you to log in to your JIRA instance and approve
    the retrieval of data to be displayed in Gmail:![How to do it...](img/1803-05-25.jpg)
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小工具现在显示没有结果，因为我们没有使用正确的用户名/密码连接到 JIRA。编辑小工具设置，你将看到一个选项，**登录并批准**，该选项允许你登录到 JIRA
    实例并批准显示在 Gmail 中的数据获取：![如何操作...](img/1803-05-25.jpg)
- en: '**Approve Access**, as shown in the following screenshot. The gadget should
    now show the results:![How to do it...](img/1803-05-26.jpg)'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**批准访问**，如以下截图所示。现在小工具应该显示结果：![如何操作...](img/1803-05-26.jpg)'
- en: How it works...
  id: totrans-488
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The way it works is identical to that of its behavior in JIRA Dashboards. The
    gadget will communicate with JIRA using the REST APIs and the data is rendered
    using the HTML and JavaScript code under the `view` section in the gadget XML's
    `Content` element.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式与在 JIRA 仪表板中的行为完全相同。该小工具将通过 REST API 与 JIRA 通信，并使用 HTML 和 JavaScript 代码渲染数据，这些代码位于小工具
    XML 文件的 `Content` 元素下的 `view` 部分。
- en: See also
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Writing JIRA 4 gadgets*'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编写 JIRA 4 小工具*'
- en: '*Invoking REST services from gadgets*'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从小工具调用 REST 服务*'
