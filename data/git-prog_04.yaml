- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Merging, Pull Requests, and Handling Merge Conflicts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并、拉取请求和处理合并冲突
- en: In this chapter, you will see how to merge branches, using different types of
    merges. You will also see how to handle merge conflicts and tools to make managing
    conflicts easier. You will learn about pull requests and the difference between
    a fast-forward merge and a "true" merge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将看到如何使用不同类型的合并来合并分支。你还将看到如何处理合并冲突，以及一些工具来简化冲突管理。你将了解拉取请求以及快进合并与“真正”合并之间的区别。
- en: 'In this chapter, you will learn:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: How to push a commit to the server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将提交推送到服务器
- en: How to manage your commits with the command line, Visual Studio, and GitHub
    Desktop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过命令行、Visual Studio 和 GitHub Desktop 管理提交
- en: How to merge into the main branch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何合并到主分支
- en: What a pull request is
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是拉取请求
- en: What merge conflicts are and how to resolve them
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是合并冲突，如何解决它们
- en: What a fast-forward merge is
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是快进合并
- en: What a true merge is
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是“真正的”合并
- en: Let's start with an overview of merging.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从合并的概述开始。
- en: Merging overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并概述
- en: If you are on a feature branch, and the feature is sufficiently complete and
    tested, you will want to merge your branch back into the main branch. Some organizations
    let you simply merge, others (most?) require that you create a **Pull Request
    (PR)**. A **PR** says, essentially, "Please examine my code and if you think it
    is right, merge it into the main branch."
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处于一个功能分支，且该功能已经完成并经过充分测试，你可能希望将该分支合并回主分支。有些组织允许你直接合并，而其他组织（大多数？）要求你创建一个**拉取请求（PR）**。**PR**基本上是说：“请检查我的代码，如果你认为它是正确的，请将其合并到主分支。”
- en: Having a second (or third) set of eyes on your code before merging can save
    a lot of headaches later on (see *Chapter 12*, *Fixing Mistakes (Undo)*, on fixing
    mistakes).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并之前让其他人审查你的代码，可以避免日后出现很多麻烦（参见*第12章*，*修复错误（撤销）*，了解如何修复错误）。
- en: Often, if you've been careful (see below) you will merge without a problem.
    From time to time, however, you will run into the dreaded merge conflict. You'll
    see below a couple ways to handle that conflict.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你足够小心（见下文），你将顺利合并而不会出现问题。然而，偶尔你会遇到令人头疼的合并冲突。你将在下面看到几种处理冲突的方法。
- en: Book
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书籍
- en: 'You will remember from the previous chapter that we have a directory, `C:\GitHub\VisualStudio\ProGitForProgrammers`,
    that is the home of the Books application and that we''ve been editing in Visual
    Studio. Of course, we don''t have to manage it in Visual Studio; we can use any
    of our tools. For example, I can open the terminal and change directories to the
    Books app:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得在前一章中，我们有一个目录`C:\GitHub\VisualStudio\ProGitForProgrammers`，这是《书籍》应用程序的根目录，我们一直在
    Visual Studio 中编辑。当然，我们不必仅仅在 Visual Studio 中管理它；我们可以使用任何工具。例如，我可以打开终端并将目录切换到《书籍》应用程序：
- en: '![](img/B17741_04_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_01.png)'
- en: 'Figure 4.1: Opening the terminal'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：打开终端
- en: Notice that it says I have one commit to push (as indicated by the up-pointing
    arrow followed by the 1). I must have forgotten to do so the last time I was working
    with this code. I don't want to just push it, however—who knows what's in there?
    There are a few ways to find out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，它显示我有一个提交待推送（由向上箭头和1表示）。我一定是上次工作时忘记了提交。然而，我不想直接推送——谁知道里面有什么？有几种方法可以找出。
- en: What's in that push?
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送里有什么？
- en: 'From the command line, we can use the `git show` command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行，我们可以使用`git show`命令：
- en: '![](img/B17741_04_02.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_02.png)'
- en: 'Figure 4.2: Examining the push'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：查看推送内容
- en: There's a lot of information here. First, we see the author and the date. Then
    we see the message that was attached to this commit (`Add properties`). Next,
    Git does a `diff` (difference) between `Book.cs` and `Book.cs` naming the first
    one **a** and the second **b**. The one labeled **a** is `Book.cs` before this
    commit, the one labeled **b** is the new contents in this commit.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多信息。首先，我们看到作者和日期。接下来是附加到此提交的消息（`添加属性`）。然后，Git对`Book.cs`与`Book.cs`之间做了`diff`（差异）比较，前者被命名为**a**，后者为**b**。标记为**a**的是此提交之前的`Book.cs`，标记为**b**的是此提交中的新内容。
- en: You may have noticed the line that says `/dev/null`. This indicates that a file
    is being compared against nothing, and thus everything is new.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到那一行显示`/dev/null`。这表示一个文件正在与空值进行比较，因此所有内容都是新的。
- en: 'The next line shows that `/dev/null` is being compared against file **b** (the
    new `Book.cs` file):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行显示`/dev/null`与文件**b**（新的`Book.cs`文件）进行比较：
- en: '![](img/B17741_04_03.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_03.png)'
- en: 'Figure 4.3: Comparing against dev/null'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：与`dev/null`进行比较
- en: What follows are the changes. Deletions will be marked in red, modifications
    in green, and new code in yellow. (This display and these colors may depend on
    which shell you are using.) We see here that three `using` statements, a namespace,
    and the class `Book` were all added in this commit. Before we push it, let's see
    what we can learn in Visual Studio.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是更改内容。删除部分将以红色标出，修改部分以绿色显示，新增代码则以黄色显示。（此显示方式和颜色可能取决于你使用的终端。）我们看到，这次提交中添加了三个`using`语句、一个命名空间以及类`Book`。在我们推送之前，让我们看看在
    Visual Studio 中能学到什么。
- en: Visual Studio
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio
- en: 'Opening the same directory in Visual Studio and going to the Git view reveals,
    as we would expect, that we have one commit to push (outgoing):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中打开相同的目录并进入 Git 视图，正如我们预期的那样，显示了一个待推送的提交（外发）：
- en: '![](img/B17741_04_04.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_04.png)'
- en: 'Figure 4.4: Visual Studio showing one file to push'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4：Visual Studio 显示待推送的一个文件
- en: 'Before we push, let''s see what''s in that push. Clicking on **1 outgoing**
    opens two windows. The **Branches** window shows us which branch we are on (**Book**):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们推送之前，让我们看看这次推送中包含了什么内容。点击**1 outgoing**会打开两个窗口。**Branches**窗口显示了我们所在的分支（**Book**）：
- en: '![](img/B17741_04_05.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_05.png)'
- en: 'Figure 4.5: Visual Studio showing contents of the local repository'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：Visual Studio 显示本地仓库的内容
- en: 'The middle panel has the really cool info. It tells you the local (as opposed
    to origin) history of your branches:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 中间面板展示了非常酷的信息。它告诉你分支的本地历史（与远程分支相对）：
- en: '![](img/B17741_04_06.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_06.png)'
- en: 'Figure 4.6: Visual Studio showing commit history'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6：Visual Studio 显示提交历史
- en: We can see that **main** has five commits (reading newest to oldest) and that
    preceding the newest commit in **main**, we have an outgoing commit on the **Book**
    branch, whose message is **Add properties**. This is consistent with what we saw
    at the command line.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到**main**有五个提交（从最新到最旧），在**main**的最新提交之前，我们有一个来自**Book**分支的外发提交，其提交信息是**Add
    properties**。这与我们在命令行中看到的情况一致。
- en: 'We can go further, and return to **Solution Explorer**. Because there is more
    to see in `Program.cs` (rather than `Book.cs`), right-click on `Program.cs` and
    choose **Git** and then **History**. That opens the **History** page for `Program.cs`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步操作，返回到**Solution Explorer**。因为在`Program.cs`（而非`Book.cs`）中还有更多内容可以查看，所以右键点击`Program.cs`，选择**Git**，然后选择**History**。这将打开`Program.cs`的**History**页面：
- en: '![](img/B17741_04_07.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_07.png)'
- en: 'Figure 4.7: Visual Studio showing the history of Program.cs'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7：Visual Studio 显示 Program.cs 的历史记录
- en: Note that if we registered a user with an image, that image would be shown on
    the extreme left.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我们注册了带有图片的用户，那张图片会显示在最左侧。
- en: 'Here we see the four commits. We can compare them by right-clicking on, for
    example, the first one and choosing **Compare with previous**. Two windows open.
    On the left, you have the older commit, on the right the newer. We can see that
    in the newer commit one line was added, which is shown in Visual Studio with green
    highlighting:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们可以看到四个提交。我们可以通过右键点击其中一个，比如第一个，选择**Compare with previous**来进行比较。两个窗口将会打开。左侧是较旧的提交，右侧是较新的提交。我们可以看到，在较新的提交中添加了一行内容，Visual
    Studio 用绿色高亮显示：
- en: '![](img/B17741_04_08.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_08.png)'
- en: 'Figure 4.8: Side-by-side comparison'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8：并排比较
- en: You can see that Visual Studio can give you a graphic representation of the
    same information you might get from the command line.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，Visual Studio 可以为你提供一个图形化的展示，展示你从命令行中可能获得的相同信息。
- en: Details, details
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 细节，细节
- en: 'Let''s close all these history windows and go back to the list of outgoing
    and local history. Under **Outgoing**, we see **Add properties**. Right-click
    on that line and a window will open on the right. You''ll see the commit ID (ID)
    along with the name of the committer, the date, and so forth. You''ll also see
    the message and then you''ll see a list of which files were changed (in this case,
    **Book.cs**):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关闭所有这些历史窗口，返回到外发和本地历史记录的列表。在**Outgoing**下，我们看到**Add properties**。右键点击该行，一个窗口将会在右侧打开。你将看到提交
    ID（ID）、提交者的名字、日期等信息。你还会看到提交信息，接着看到被更改的文件列表（在这个案例中是**Book.cs**）：
- en: '![](img/B17741_04_09.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_09.png)'
- en: 'Figure 4.9: Visual Studio showing which files have changed for a commit'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9：Visual Studio 显示提交修改的文件
- en: We want to know what changed in `Book.cs`. To do this, right-click on `Book.cs`
    and choose **View History**. The single commit will come up in the middle window.
    Double-click on that and you'll see the `Book` class that is being added by this
    commit.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想了解`Book.cs`文件中发生了什么变化。为此，右键点击`Book.cs`并选择**查看历史记录**。中间窗口会显示出唯一的提交。双击该提交，你将看到这个提交中添加的`Book`类。
- en: GitHub Desktop
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Desktop
- en: 'We can open GitHub Desktop to the same directory. Click on **File** and choose
    **Add local repository...**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以打开GitHub Desktop并定位到相同的目录。点击**文件**并选择**添加本地仓库...**：
- en: '![](img/B17741_04_10.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_10.png)'
- en: 'Figure 4.10: Opening GitHub Desktop'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：打开GitHub Desktop
- en: 'The next step is to tell GitHub Desktop where that repository is. A dialog
    opens and you can either enter the local path by hand, or you can click **Choose...**,
    which will bring you to a Windows Explorer window where you can pick the appropriate
    directory. Once that is all set, click **Add repository**:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是告诉GitHub Desktop该仓库的位置。会弹出一个对话框，你可以手动输入本地路径，或者点击**选择...**，这将打开一个Windows资源管理器窗口，允许你选择合适的目录。设置完成后，点击**添加仓库**：
- en: '![](img/B17741_04_11.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_11.png)'
- en: 'Figure 4.11: Adding a local repository'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11：添加本地仓库
- en: 'You''ll now be brought to the main page. Notice that we are still in the repository
    **ProGitForProgrammers**, but on the **Book** branch, and that it knows we have
    one commit to push. It also offers a handy **Push origin** button with an explanation
    that pressing that button will push the commit to the origin (the server; your
    repository on GitHub):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将被带到主页面。注意，我们仍然在**ProGitForProgrammers**仓库中，但处于**Book**分支，并且系统知道我们有一个提交需要推送。它还提供了一个方便的**推送到origin**按钮，点击这个按钮将把提交推送到origin（即服务器；你在GitHub上的仓库）：
- en: '![](img/B17741_04_12.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_12.png)'
- en: 'Figure 4.12: GitHub Desktop information bar'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12：GitHub Desktop信息条
- en: 'Once again, we want to know what we are pushing. No problem, just click **History**
    and you''ll see the history of commits and the changes for whichever commit you
    highlight:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们想知道自己正在推送的内容。没问题，只需点击**历史记录**，你将看到提交历史和每个提交的更改内容：
- en: '![](img/B17741_04_13.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_13.png)'
- en: 'Figure 4.13: History in GitHub Desktop'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13：GitHub Desktop中的历史记录
- en: Now that we've seen the various ways the command line, Visual Studio, and GitHub
    Desktop manage the commit, it is time to get the commit to the server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了命令行、Visual Studio和GitHub Desktop如何管理提交，是时候将提交推送到服务器了。
- en: Push it already
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现在就推送它吧
- en: 'Let''s return to the command line and push the commit we''ve been examining:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到命令行并推送我们正在查看的提交：
- en: '![](img/B17741_04_14.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_14.png)'
- en: 'Figure 4.14: Pushing from the command line'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14：从命令行推送
- en: If you go to Visual Studio now, it should say **0 outgoing** as you've pushed
    the one that was waiting. Similarly, GitHub Desktop will have changed its button
    from **Push Origin** to **Create Pull Request** – the likely next thing to do.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你此时去查看Visual Studio，它应该显示**0个待推送**，因为你已经推送了之前等待的提交。同样，GitHub Desktop的按钮也会从**推送到Origin**变为**创建Pull
    Request**—接下来很可能需要执行的操作。
- en: Now that we have the `Book` branch sorted, it is (finally!) time to merge it
    into **main**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理好了`Book`分支，终于可以将它合并到**main**分支了。
- en: Visual Studio
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio
- en: 'Our goal is to merge `Book` back into `main`. To do this in Visual Studio,
    just click on **Git** and then on **Manage Branches**. Your **Branches** window
    will open. Right-click on **main** and choose **Checkout**. You are now ready
    to merge `Book` into `main`, which you''ll see in the right-click (context) menu
    as well:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是将`Book`分支合并回`main`分支。要在Visual Studio中完成这项操作，只需点击**Git**，然后点击**管理分支**。你的**分支**窗口将会打开。右键点击**main**并选择**检出**。现在你已经准备好将`Book`合并到`main`，这个选项也会出现在右键（上下文）菜单中：
- en: '![](img/B17741_04_15.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_15.png)'
- en: 'Figure 4.15: Merging in Visual Studio'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15：在Visual Studio中合并
- en: The trick is, while main is checked out, right-click on **Book** and you'll
    see the option to make the merge.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 诀窍是，在切换到`main`分支时，右键点击**Book**，你会看到一个合并选项。
- en: Merge conflicts
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并冲突
- en: 'Let''s turn to the command line and do a pull as our branch has diverged from
    the origin. When we do, we''re told that there is a merge conflict in `Program.cs`
    and that the merge has failed. Git tells you to fix the conflicts and then commit
    the result. This is unusual, to get a merge conflict on a pull, but as you can
    see, it does happen. Let''s handle this conflict and then set up a more typical
    situation:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转向命令行，执行拉取操作，因为我们的分支已经与原始分支分开。当我们这样做时，Git 告诉我们 `Program.cs` 中存在合并冲突，并且合并失败了。Git
    告诉您解决冲突，然后提交结果。虽然在拉取时出现合并冲突是不寻常的，但如您所见，确实会发生。让我们处理这个冲突，然后设置一个更典型的情况：
- en: '![](img/B17741_04_16.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_16.png)'
- en: 'Figure 4.16: A merge conflict'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.16: 合并冲突'
- en: 'There are a few ways to handle any merge, but the easiest is to use a merge
    tool. I use KDiff3 ([https://sourceforge.net/projects/kdiff3/](https://sourceforge.net/projects/kdiff3/)).
    Since I use this a lot, I have put it into my config file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种处理合并的方法，但最简单的方法是使用合并工具。我使用的是 KDiff3 ([https://sourceforge.net/projects/kdiff3/](https://sourceforge.net/projects/kdiff3/))。由于我经常使用它，我已经将其放入了我的配置文件中：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/B17741_04_17.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_17.png)'
- en: 'Figure 4.17: Reviewing the configuration file'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.17: 查看配置文件'
- en: This sets up KDiff3 as my merge tool and tells Git where to find it. One of
    the things I like most about KDiff is that it will often fix the problem for you.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 KDiff3 设置为我的合并工具，并告诉 Git 在哪里找到它。我最喜欢 KDiff 的一件事情是它通常会为您修复问题。
- en: 'To invoke it, all I need to write is:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用它，我只需要写：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and it opens KDiff to the conflict.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它打开了冲突的 KDiff。
- en: 'Here it found two problems and was able to fix one:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里它发现了两个问题，并且能够修复了一个：
- en: '![](img/B17741_04_18.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_18.png)'
- en: 'Figure 4.18: KDiff automatically solves one conflict'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.18: KDiff 自动解决一个冲突'
- en: 'It then brings us to a window with multiple panes. The panes on top show you
    the conflict:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它会带我们进入一个带有多个窗格的窗口。顶部的窗格显示了冲突的内容：
- en: '![](img/B17741_04_19.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_19.png)'
- en: 'Figure 4.19: Conflicts as shown in KDiff'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.19: KDiff 中显示的冲突'
- en: You can see on the left side (**Local**) that we have one line whereas on the
    right side (**Remote**) we have two lines. Clearly, someone else has edited this
    file that we edited and now Git doesn't know what to do.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到左侧 **（本地）** 我们有一行，而右侧 **（远程）** 我们有两行。显然，其他人已经编辑了这个我们也编辑的文件，现在 Git 不知道该怎么办了。
- en: 'In the bottom pane is code to provide context and then a highlighted line where
    your choice of which line(s) to place there is shown:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 底部窗格显示了提供上下文的代码，然后显示了您选择放置哪一行的高亮显示行：
- en: '![](img/B17741_04_20.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_20.png)'
- en: 'Figure 4.20: KDiff provides context for your merge'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.20: KDiff 提供了合并的上下文信息'
- en: 'When you right-click on that line, you are given a choice to pick the left
    window (window A), the right window (window B), or both (and you can choose the
    order they are added in):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当您右键单击该行时，您会看到可以选择左窗口（窗口 A）、右窗口（窗口 B）或两者（并且您可以选择它们添加的顺序）的选项：
- en: '![](img/B17741_04_21.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_21.png)'
- en: 'Figure 4.21: KDiff asking which version should be placed'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.21: KDiff 询问应放置哪个版本'
- en: 'Once you are done, save the file and close KDiff. <poof\> No more conflict.
    Git now shows you the changes you made that should now be committed:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，保存文件并关闭 KDiff。 <poof\> 冲突解决了。现在 Git 显示您所做的更改，这些更改现在应该提交了：
- en: '![](img/B17741_04_22.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_22.png)'
- en: 'Figure 4.22: Console indicating that the conflicts have been resolved'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.22: 控制台指示冲突已解决'
- en: 'You can now add that file and commit it, and then push it up to the origin:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以添加该文件并提交，然后将其推送到原始库：
- en: '![](img/B17741_04_23.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_23.png)'
- en: 'Figure 4.23: Committing and pushing to origin'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.23: 提交并推送到原始库'
- en: We've seen how KDiff and similar programs can greatly reduce the amount of work
    involved in solving merge conflicts.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 KDiff 和类似程序在解决合并冲突时可以大大减少工作量。
- en: Merging from the command line
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行合并
- en: 'Much more common is for there to be a merge conflict when you specifically
    merge locally. To do so is pretty easy. From the command line, check out the branch
    you want to merge **into** (`main`) and then use the Git command `merge`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当您特定地在本地合并时，出现合并冲突的情况更为常见。要这样做很简单。从命令行中，切换到您想要合并到的分支 **（主分支）** 然后使用 Git 命令 `merge`：
- en: '![](img/B17741_04_24.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_24.png)'
- en: 'Figure 4.24: The merge command'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '图 4.24: 合并命令'
- en: Here Git used the "recursive" strategy; a way to speed up the merge.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里 Git 使用了 "递归" 策略；一种加快合并速度的方法。
- en: Fast forward
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快进
- en: 'Often, however, you''ll see Git report that it used a fast forward merge. Fast
    forward works like this; suppose your starting point is this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你通常会看到Git报告它使用了快速前进合并。快速前进的工作方式如下：假设你的起始点是这样的：
- en: '![](img/B17741_04_25.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_25.png)'
- en: 'Figure 4.25: Fast forward'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.25：快速前进
- en: 'You now want to merge **Feature1** into **Main**. Notice that **Feature1**
    branched from the tip of **Main** (the latest commit). In that case, there is
    a path from the first commit in **Main** to the last commit in **Feature1**. In
    that case, all Git has to do is move **Main**''s pointer to the tip of **Feature1**,
    creating a single branch (which it will call **Main**):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你想要将**Feature1**合并到**Main**。请注意，**Feature1**是从**Main**的末端（最新的提交）分支出来的。在这种情况下，从**Main**的第一个提交到**Feature1**的最后一个提交之间有一条路径。在这种情况下，Git只需要将**Main**的指针移动到**Feature1**的末端，创建一个单一的分支（它将称之为**Main**）：
- en: '![](img/B17741_04_26.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_26.png)'
- en: 'Figure 4.26: Moving the pointer'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.26：移动指针
- en: Because all that is required is moving a pointer to the last commit, this is
    called **fast forward**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因为所需要的只是将指针移动到最后一个提交，所以这叫做**快速前进**。
- en: True merge
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 真正的合并
- en: 'In the previous example, **Feature1** was branched off of **Main** at the point
    that is still the tip of **Main**. But what if someone else merged a branch into
    **Main**, and now the commit you branched off of is no longer the tip:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，**Feature1**是从**Main**的末端分支出来的，这个末端仍然是**Main**的最新提交。但如果其他人已经将某个分支合并进了**Main**，而你分支出来的那个提交不再是末端提交呢：
- en: '![](img/B17741_04_27.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_27.png)'
- en: 'Figure 4.27: Feature 1 does not branch off the tip of Main'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.27：**Feature1**没有从**Main**的末端分支出来
- en: 'In this case, you either need a rebase (covered in the next chapter) or a "true"
    merge:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你需要进行重基（将在下一章讲解）或“真正的”合并：
- en: '![](img/B17741_04_28.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_28.png)'
- en: 'Figure 4.28: A true merge is required'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.28：需要进行真正的合并
- en: Because there was no path from **Main** to the tip of **Feature1** that didn't
    leave out any other commits (for example, the tip of **Main**), we use a new commit
    to bring the two branches together.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因为从**Main**到**Feature1**的末端没有任何一条路径能够不遗漏其他提交（例如，**Main**的末端），所以我们使用了一个新的提交将两个分支合并在一起。
- en: Notice that this approach adds a new commit (**A**) that exists only for the
    merge. Over time you will have a lot of these relatively meaningless commits cluttering
    up your history. The solution to this is to rebase, as shown in the next chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种方法会添加一个新的提交（**A**），这个提交仅用于合并。随着时间的推移，你会看到很多相对没有意义的提交使历史记录变得杂乱无章。解决这个问题的方法是重基，如下一章所示。
- en: You don't change anything when doing a fast forward or a true merge; you merge
    and Git takes care of the details
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行快速前进或真正的合并时，你不会做任何改变；你合并，Git会处理细节
- en: Avoiding conflicts
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免冲突
- en: 'Avoiding conflict is generally a good thing to do, and in the case of Git,
    it is a very good thing indeed. Rather than having to resolve a whole lot of conflicts
    all at once, you really want to catch those conflicts as you go (and thus handle
    just one or two at a time). If you are on a team, some conflicts cannot be avoided,
    but there are two good rules of thumb to cut down drastically on the work involved
    in handling conflicts:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 避免冲突通常是一个好习惯，在Git中尤其如此。与其一次性解决大量冲突，你更希望在遇到冲突时及时处理（这样每次处理的冲突数量就会更少）。如果你在一个团队中，有些冲突是不可避免的，但有两个很好的经验法则可以大大减少解决冲突时的工作量：
- en: Do not have more than one programmer working on any given file (if possible)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免多个程序员同时在同一个文件上工作（如果可能的话）
- en: Merge main into your feature branch very frequently
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常将**Main**合并到你的特性分支中
- en: 'Notice #2 does *not* say to merge your feature branch into main, but rather
    the other way around. This will not endanger the main thread, but will quickly
    reveal if there are any conflicts so far. If so, you can fix them in your branch
    and move on.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '注意 #2并没有说将你的特性分支合并到**Main**，而是反过来。这不会危及主线程，但会迅速揭示出到目前为止是否有任何冲突。如果有，你可以在你的分支中解决它们，然后继续前进。'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you saw:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了：
- en: How to merge branches
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何合并分支
- en: The different types of merges
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的合并
- en: How to merge conflicts
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何解决合并冲突
- en: How tools like KDiff can make merging easier
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像KDiff这样的工具如何让合并变得更容易
- en: What a pull request is
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是拉取请求
- en: What a fast forward merge is
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是快速前进合并
- en: What a true merge is
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是真正的合并
- en: Challenge
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Pretend you are two programmers working on the same project – a utility that
    contains a calculator and a Fahrenheit to Celsius converter. If you actually have
    two programmers to do this, even better.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 假装你们是两个程序员在开发同一个项目——一个包含计算器和华氏转摄氏温度转换器的工具。如果你们实际上有两个人来做这个任务，那就更好了。
- en: Set up a new repository and clone it to two different folders. Have one person
    populate the main branch with the beginnings of the UtilityKnife project, commit
    the changes, and push it. Have the other person pull the main branch's changes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个新的仓库并将其克隆到两个不同的文件夹。让一个人将主分支填充上UtilityKnife项目的初步内容，提交更改并推送。让另一个人拉取主分支的更改。
- en: OK, you both have a main branch with some code on it. Now have each programmer
    create their own branch, one to work on the calculator and the other to work on
    the converter. Along the way, the converter will want to use some of the methods
    of the calculator. Try to avoid or minimize conflicts, merge frequently, and resolve
    conflicts that arise.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，你们两个现在都有一个主分支并且上面有一些代码。接下来，让每个程序员创建自己的分支，一个用来开发计算器，另一个用来开发转换器。在此过程中，转换器需要使用计算器的一些方法。尽量避免或减少冲突，频繁合并，并解决出现的冲突。
- en: Answer
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: As always, there is no one single correct way to do this. Here is how I worked
    through it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，没有唯一正确的方法来完成这个任务。以下是我处理这个问题的方式。
- en: 'Task #1: Set up a new repository and clone it to two different folders'
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '任务 #1：设置一个新的仓库并将其克隆到两个不同的文件夹'
- en: 'Notice that we are going to use just one repository. We are building a single
    program, but at least at first Johnis going to create the calculator while Sara
    is going to create the temperature converter. We''ll call the entire program **UtilityKnife**.
    To begin we go to [GitHub.com](http://GitHub.com) and create our new repository:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们只使用一个仓库。我们在构建一个单一的程序，但至少在开始时，John将创建计算器，而Sara将创建温度转换器。我们将整个程序称为**UtilityKnife**。首先，我们访问[GitHub.com](http://GitHub.com)并创建我们的新仓库：
- en: '![](img/B17741_04_29.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_29.png)'
- en: 'Figure 4.29: Creating the new repository'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29：创建新仓库
- en: The readme file is written using Markdown. You can learn more about Markdown
    at [https://www.markdownguide.org/cheat-sheet/](https://www.markdownguide.org/cheat-sheet/)
    among other places on the net.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 读取文档文件是使用 Markdown 编写的。你可以在[https://www.markdownguide.org/cheat-sheet/](https://www.markdownguide.org/cheat-sheet/)等网络资源中了解更多关于
    Markdown 的内容。
- en: We then clone the repo into folders (or separate computers if there are two
    or more of you). I'll create a directory, `John`, and clone this repo into that
    directory.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将仓库克隆到文件夹中（如果有两人或更多人，可以克隆到不同的计算机）。我会创建一个名为`John`的目录，并将这个仓库克隆到该目录下。
- en: '![](img/B17741_04_30.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_30.png)'
- en: 'Figure 4.30: Cloning from the command line'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30：从命令行克隆
- en: John has chosen to use the command line. Sara, on the other hand, likes to use
    Visual Studio.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: John 选择使用命令行，而 Sara 则喜欢使用 Visual Studio。
- en: 'Begin by clicking on **File** and selecting **Clone Repository...**:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 首先点击**文件**，然后选择**克隆仓库...**：
- en: '![](img/B17741_04_31.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_31.png)'
- en: 'Figure 4.31: Opening the Git menu'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31：打开 Git 菜单
- en: 'That will bring up a dialog box where you can paste in the path you took from
    [GitHub.com](http://GitHub.com) and the path to your new repo:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，在其中你可以粘贴从[GitHub.com](http://GitHub.com)获取的路径和你新仓库的路径：
- en: '![](img/B17741_04_32.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_32.png)'
- en: 'Figure 4.32: Cloning from Visual Studio'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32：从 Visual Studio 克隆
- en: Click the **Clone** button, and Visual Studio will set up your cloned repository.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**克隆**按钮，Visual Studio 会设置你克隆的仓库。
- en: 'Solution Explorer validates that you have cloned the repository and brought
    down the three files from GitHub:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案资源管理器验证你已克隆仓库并从GitHub拉取了三个文件：
- en: '![](img/B17741_04_33.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_33.png)'
- en: 'Figure 4.33: Solution Explorer shows results of the clone'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33：解决方案资源管理器显示克隆结果
- en: 'Task #2: Have one person populate the main branch with the beginnings of UtilityKnife,
    commit the changes, and push it'
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '任务 #2：让一个人将主分支填充上UtilityKnife的初步内容，提交更改并推送'
- en: 'We''ll have Sara create a new solution in her directory for the UtilityKnife
    program:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让Sara在她的目录下为UtilityKnife程序创建一个新的解决方案：
- en: '![](img/B17741_04_34.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_34.png)'
- en: 'Figure 4.34: Creating the program'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34：创建程序
- en: 'When the project is completed, she adjusts `Program.cs` to be the skeleton
    of all that is to come:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目完成时，她将调整`Program.cs`，以便为接下来的所有内容搭建框架：
- en: '[PRE2]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this in place, she will commit these changes using the **Git** menu:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，她将通过**Git**菜单提交这些更改：
- en: '![](img/B17741_04_35.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_35.png)'
- en: 'Figure 4.35: The Git menu in Visual Studio'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.35：Visual Studio 中的 Git 菜单
- en: 'This will open the commit window, where you can fill in the commit message,
    and then click **Commit All**:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开提交窗口，您可以填写提交信息，然后点击**提交所有**：
- en: '![](img/B17741_04_36.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_36.png)'
- en: 'Figure 4.36: The Git Changes menu in Visual Studio'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.36：Visual Studio 中的 Git 更改菜单
- en: 'Once you do, the view will change to remove the files and commit message and
    will confirm the commit and show that there is one commit ready to be pushed:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦操作完成，视图将更改，移除文件和提交信息，并确认提交，同时显示有一个提交准备好推送：
- en: '![](img/B17741_04_37.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_37.png)'
- en: 'Figure 4.37: Commit confirmation in Visual Studio'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.37：在 Visual Studio 中的提交确认
- en: That is just what we want, so click on the upload button (the up-pointing arrow)
    and push the commit to the repo on GitHub.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们想要的，所以点击上传按钮（向上的箭头）并将提交推送到 GitHub 上的仓库。
- en: 'It verifies your success and offers to create a Pull Request for you, which
    we do not want right now:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 它验证了您的成功并提供了为您创建 Pull Request 的选项，但我们现在不需要这个：
- en: '![](img/B17741_04_37.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_37.png)'
- en: 'Figure 4.38: After commit Visual Studio indicates there is one file to push'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.38：提交后，Visual Studio 显示有一个文件需要推送
- en: 'Sara now has the starting main branch and is ready to create a feature branch.
    Before we look at that, let''s have John bring down the main branch as well:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Sara 现在有了起始主分支，准备创建一个功能分支。在我们查看之前，让我们先让 John 也拉取主分支：
- en: '![](img/B17741_04_39.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_39.png)'
- en: 'Figure 4.39: Pulling the repository from origin'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.39：从源拉取仓库
- en: This is a somewhat complex screenshot. We start by seeing that within `C:\GitHub\John`
    there is a folder called `UtilityKnife`. We change to that directory and then
    do a `git pull`. The result is the retrieval of the files for the `UtilityKnife`
    program.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个稍微复杂的截图。我们首先看到在 `C:\GitHub\John` 中有一个名为 `UtilityKnife` 的文件夹。我们切换到该目录，然后执行
    `git pull`。结果是获取了 `UtilityKnife` 程序的文件。
- en: Now both John and Sara have the same starter program for UtilityKnife.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，John 和 Sara 拥有相同的 UtilityKnife 起始程序。
- en: 'Task #3: Each programmer creates a feature branch. Each programmer then puts
    the beginning of their feature into their branch, committing frequently (more
    frequently than you would in "real life")'
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '任务 #3：每个程序员创建一个功能分支。然后，每个程序员将他们功能的开始部分放入他们的分支，频繁地提交（比在“真实生活”中更频繁）'
- en: 'John, who uses the command line, starts his feature branch by using the `checkout
    -b` command, which both creates a new branch and checks it out:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行的 John 通过使用 `checkout -b` 命令开始他的功能分支，这个命令既创建了一个新分支并切换到该分支：
- en: '![](img/B17741_04_40.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_40.png)'
- en: 'Figure 4.40: Creating a new branch at the command line'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.40：在命令行创建新分支
- en: 'He is now ready to start coding. Let''s create a folder, and then within that
    folder, the skeleton of our class and its first method:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 他现在准备开始编码了。让我们创建一个文件夹，然后在其中创建我们的类框架和它的第一个方法：
- en: '[PRE3]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s save and commit this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存并提交这个：
- en: '![](img/B17741_04_41.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_41.png)'
- en: 'Figure 4.41: Committing from the command line'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.41：从命令行提交
- en: 'We begin by taking a status that shows us that we have one untracked file.
    We add that file (remember that `add .` means add all the untracked and modified
    files to the index), and then we commit it, adding a message. Uh oh, the commit
    message is misspelled. Let''s fix that with a new command: `amend`. Since we have
    not pushed, all we have to do is enter `--amend` and use `-m` for the revised
    message:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看状态，显示我们有一个未追踪的文件。我们将该文件添加进去（记住，`add .`意味着将所有未追踪和修改过的文件添加到暂存区），然后我们提交它，并添加一条信息。哎呀，提交信息拼写错了。让我们用新命令
    `amend` 修正它。由于我们还没有推送，所需要做的就是输入 `--amend`，并使用 `-m` 添加修正后的信息：
- en: '![](img/B17741_04_42.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_42.png)'
- en: 'Figure 4.42: Using the amend flag'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.42：使用 amend 标志
- en: 'Notice the second line reflects back the change, and if we use `log` to see
    the commits, we''ll see that the commit now is spelled correctly:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第二行反映了更改，如果我们使用`log`查看提交记录，我们将看到提交现在已正确拼写：
- en: '![](img/B17741_04_43.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_43.png)'
- en: 'Figure 4.43: Using log to see the commit'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.43：使用 log 查看提交记录
- en: 'John decides to push his commit from his local repository up to the origin
    (the GitHub repo). When he tries, however, Git tells him that the server doesn''t
    know about his branch, but it helpfully gives him the right command to use:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: John 决定将他在本地仓库的提交推送到源（GitHub 仓库）。然而，当他尝试时，Git 告诉他服务器不知道他的分支，但它很友好地给出了正确的命令：
- en: '![](img/B17741_04_44.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_44.png)'
- en: 'Figure 4.44: Trying to push but failing. Git helps.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.44：尝试推送失败，Git 帮助
- en: Meanwhile, Sara has begun work on the `Calculator` class.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Sara已经开始了`Calculator`类的工作。
- en: Sara and the Calculator
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sara和Calculator
- en: 'Within Visual Studio, she clicks on the **Git** menu choice and then **new
    branch**. A dialog opens, and note that it assumes you want to branch off of **main**
    (though if you have multiple branches, you can of course branch off of any of
    them):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，她点击**Git**菜单选项，然后选择**新建分支**。会弹出一个对话框，注意它假设你要从**main**分支上创建新分支（当然，如果你有多个分支，也可以从任何一个分支上派生）：
- en: '![](img/B17741_04_45.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_45.png)'
- en: 'Figure 4.45: Creating a new branch'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.45：创建新分支
- en: She is ready now to code, and whatever she writes will not affect John's code
    (or the code on main). You can verify that she can't even see John's work. They
    are on different (and thus isolated) feature branches.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 她现在准备开始编码了，不管她写什么，都不会影响John的代码（或者主分支上的代码）。你可以确认，她甚至看不到John的工作。他们在不同的（因此是隔离的）功能分支上。
- en: She will add the skeleton of a `Calculator` class within its own folder.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 她将会在自己的文件夹中添加一个`Calculator`类的框架。
- en: '[PRE4]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Sara will now check this in, but unlike John, she will not push it up to the
    server. Thus, it will be in her local repository only.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Sara现在准备提交这个更改，但与John不同，她不会将它推送到服务器。因此，这个更改仅保存在她的本地仓库中。
- en: 'After selecting **Git** | **Commit** or **Stash**, she enters her message and
    clicks **Commit All**:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Git** | **提交**（**Commit**）或**暂存**（**Stash**）后，她输入消息并点击**提交所有**（**Commit
    All**）：
- en: '![](img/B17741_04_46.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_46.png)'
- en: 'Figure 4.46: Committing all'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.46：提交所有
- en: As noted above, this puts her commit into the local repository.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，这将她的提交放入本地仓库。
- en: 'Task #4: Merge the main branch into the feature branch frequently to ensure
    that if there are conflicts, you catch them early'
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务#4：经常将主分支合并到功能分支中，确保如果有冲突，能尽早发现
- en: 'John wants to merge main into his branch to ensure that he catches bugs early.
    To do this, he switches to main, updates by issuing a `pull` request, and then
    switches back to his feature branch and enters `merge main`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: John想将主分支合并到他的分支中，以确保他能尽早发现问题。为此，他切换到主分支，执行`pull`操作更新内容，然后切换回他的功能分支并输入`merge
    main`：
- en: '![](img/B17741_04_47.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_47.png)'
- en: 'Figure 4.47: Main already up to date'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.47：主分支已经是最新的
- en: No problem here. Main hasn't changed since we branched off of it, so `temperatureConverter`
    is fully up to date.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有问题。自从我们从主分支派生以来，主分支没有变化，所以`temperatureConverter`分支完全是最新的。
- en: 'Now, suppose John decides to merge his feature branch into main. Whether or
    not this is wise, all he has to do is reverse the merge order:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设John决定将他的功能分支合并到主分支。无论这是否明智，他只需要反转合并的顺序：
- en: '![](img/B17741_04_48.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_48.png)'
- en: 'Figure 4.48: Reversing the merge order'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.48：反转合并顺序
- en: 'The key line here is:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的一行是：
- en: '[PRE5]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are on the main branch, and this merges the feature branch into main. You
    can see that Git is able to fast-forward the merge, as described in a previous
    chapter.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前在主分支上，这将功能分支合并到主分支。你可以看到，Git能够快速前进合并（fast-forward merge），如前面章节中所描述的。
- en: John is now free to continue with his existing feature branch or to create a
    new one. If, on the other hand, he had to do a Pull Request and then wait for
    his PR to be approved before it is really merged, he would be wise to make a new
    branch, possibly off of `temperatureConverter`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在John可以继续他的现有功能分支，或者创建一个新分支。另一方面，如果他必须先做一个拉取请求（Pull Request），然后等待他的PR被批准才能真正合并，他最好新建一个分支，可能是从`temperatureConverter`分支派生的。
- en: Sara had taken a break but she's ready to go back to work. Being cautious, she
    wants first to merge main into her feature branch to make sure there are no conflicts.
    Remember, John and Sara may work well together but they are not telling each other
    every time they commit or merge.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Sara已经休息过了，但她准备回去工作。为了小心起见，她首先要将主分支合并到她的功能分支中，以确保没有冲突。记住，John和Sara可能合作得很好，但他们并不会每次提交或合并时都互相通知。
- en: 'To start, Sara checks out main and does a `pull` to get the latest files from
    main. Now she checks out **Calculator** and right-clicks on **main**:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Sara检出了主分支并执行`pull`操作，以获取主分支上的最新文件。然后她检出了**Calculator**，并右键点击**main**：
- en: '![](img/B17741_04_49.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_49.png)'
- en: 'Figure 4.49: Merging main into Calculator in Visual Studio'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.49：在Visual Studio中将主分支合并到Calculator中
- en: She will select **Merge 'main' into 'Calculator'**. Once again, doing so will
    *not* merge her changes into main, but simply retrieve the newest version of main
    and merge that into her feature branch.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 她将选择**将‘main’合并到‘Calculator’**。再一次，执行此操作并*不会*将她的更改合并到主分支，而只是获取主分支的最新版本，并将其合并到她的功能分支中。
- en: Since Visual Studio is cautious, it will ask you if you are sure.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Visual Studio 会小心谨慎，它会询问你是否确定。
- en: '![](img/B17741_04_50.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_50.png)'
- en: 'Figure 4.50: Visual Studio checks that what you are about to do is what you
    want to do'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.50：Visual Studio 检查你即将执行的操作是否符合你的意图
- en: 'Clicking **Yes** will begin the merge. Now, remember that John had done some
    work, and then merged his branch into main. Since there were no conflicts, Visual
    Studio just tells Sara that the merge was successful:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Yes** 将开始合并。现在，请记住 John 做了一些工作，然后将他的分支合并到 main 中。由于没有冲突，Visual Studio 只会告诉
    Sara 合并成功：
- en: '![](img/B17741_04_51.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_51.png)'
- en: 'Figure 4.51: Visual Studio signals success'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.51：Visual Studio 表示成功
- en: 'Of course, merging main into Calculator will change Calculator, bringing in
    everything in main. The key thing in main is what John merged, and we see that
    in Calculator now:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，将 main 合并到 Calculator 中会改变 Calculator，带入 main 中的所有内容。main 中的关键内容是 John 合并的部分，现在我们在
    Calculator 中看到了这些：
- en: '![](img/B17741_04_52.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_52.png)'
- en: 'Figure 4.52: Examining the result of the merges in Visual Studio'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.52：在 Visual Studio 中检查合并的结果
- en: 'Note that since Sara has not merged her code into main, John has no awareness
    of, nor way to get to, the `Calculator` class. If we open Visual Studio in John''s
    branch, we see **Converters** but no **Calculator**:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于 Sara 还没有将她的代码合并到 main 分支，John 对 `Calculator` 类一无所知，也无法访问它。如果我们在 John
    的分支中打开 Visual Studio，我们会看到 **Converters**，但没有 **Calculator**：
- en: '![](img/B17741_04_53.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_53.png)'
- en: 'Figure 4.53: John''s branch with no Calculator'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.53：John 的分支没有 Calculator
- en: 'Let''s pause a moment and think about what is happening on GitHub. Sara has
    committed her changes but not pushed them, so GitHub won''t know about her branch.
    John has pushed his changes and also merged them into main. We would anticipate
    two branches on GitHub, one for main and one for John; what''s more, at this point,
    main and John should be identical, and Sara should have a branch on GitHub:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂停片刻，思考一下 GitHub 上发生了什么。Sara 已经提交了她的更改，但还没有推送，因此 GitHub 并不知道她的分支。John 已经推送了他的更改，并将其合并到
    main 分支。我们预计 GitHub 上会有两个分支，一个是 main，另一个是 John；更重要的是，此时 main 和 John 应该是相同的，而 Sara
    应该在 GitHub 上有一个分支：
- en: '![](img/B17741_04_54.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_54.png)'
- en: 'Figure 4.54: The branches on origin'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.54：origin 上的分支
- en: 'Main has **Converters** (from John''s merge) but not Calculator (because Sara
    has not merged). John''s branch (**temperatureConverter**) is identical:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: main 分支有 **Converters**（来自 John 的合并），但没有 Calculator（因为 Sara 还没有合并）。John 的分支（**temperatureConverter**）是相同的：
- en: '![](img/B17741_04_55.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_55.png)'
- en: 'Figure 4.55: Changing branches on origin'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.55：在 origin 上切换分支
- en: 'To drive this home, we can ask GitHub for a list of all the branches it knows
    about:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明这一点，我们可以请求 GitHub 列出它知道的所有分支：
- en: '![](img/B17741_04_56.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_56.png)'
- en: 'Figure 4.56: Asking GitHub to list all the branches'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.56：请求 GitHub 列出所有分支
- en: These all show as updated by me because Sara and John don't really exist.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都显示为“由我更新”，因为 Sara 和 John 实际上并不存在。
- en: 'Task #5: John is building the temperature converter. Have him "borrow" code
    from the calculator. See if there are merge conflicts'
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '任务 #5：John 正在构建温度转换器。让他“借用”计算器的代码，看看是否会出现合并冲突'
- en: 'In the next four commits, Sara fleshes out the calculator with subtraction,
    multiplication, integer division, and division. She has not yet pushed her changes:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的四次提交中，Sara 将计算器扩展了减法、乘法、整数除法和除法功能。她还没有推送她的更改：
- en: '![](img/B17741_04_57.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_57.png)'
- en: 'Figure 4.57: Fleshing out the calculator'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.57：完善计算器
- en: 'The formula for converting Fahrenheit to Celsius is:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 将华氏度转换为摄氏度的公式是：
- en: '*(F – 32) * 5/9*'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*(F – 32) * 5/9*'
- en: 'John wants to convert 212° Fahrenheit (the boiling point of water) and expects
    to get back 100° Celsius as a good test case. To do this, he could use the built-in
    subtraction and division operators but instead chooses to use Sara''s calculator.
    His first attempt is to merge main into his branch:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: John 想要转换 212° 华氏度（水的沸点），并期望得到 100° 摄氏度作为一个好的测试用例。为此，他本可以使用内置的减法和除法运算符，但他选择使用
    Sara 的计算器。他的第一次尝试是将 main 合并到他的分支中：
- en: '![](img/B17741_04_58.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_58.png)'
- en: 'Figure 4.58: Merging main into the working branch'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.58：将 main 合并到工作分支
- en: Main is up to date and there is no difference between main and `temperatureConverter`.
    Yet John doesn't have the functions he needs. This tells John that the calculator
    functions he needs are not yet pushed to GitHub. He can call Sara and ask her
    to push them so that he can pull them down, or she can merge them into main and
    then he can update from main. Sara is not ready to merge into main, but agrees
    to push her branch's commits.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 主分支是最新的，`temperatureConverter`与主分支没有差异。然而，约翰没有他需要的功能。这告诉约翰，他所需的计算器功能还没有推送到GitHub。他可以给萨拉打电话，请她将这些功能推送上去，以便他可以拉取，或者她可以将这些功能合并到主分支，然后他可以从主分支更新。萨拉还没准备好将功能合并到主分支，但同意推送她分支的提交。
- en: 'She has four outgoing commits (that is, commits that have not yet been pushed
    to the origin):'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 她有四个未推送的提交（即还未推送到远程仓库的提交）：
- en: '![](img/B17741_04_59.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_59.png)'
- en: 'Figure 4.59: Visual Studio indicates four outgoing commits'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.59：Visual Studio显示有四个未推送的提交
- en: 'To push these, she just clicks on the up arrow:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 要推送这些更改，她只需点击向上的箭头：
- en: '![](img/B17741_04_60.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_60.png)'
- en: 'Figure 4.60: The push button in Visual Studio'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.60：Visual Studio中的推送按钮
- en: John tries to bring down the changes but runs into a brick wall.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰尝试拉取更改，但碰到了障碍。
- en: '![](img/B17741_04_61.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_61.png)'
- en: 'Figure 4.61: Unable to see Calculator'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.61：无法查看计算器
- en: 'His local repository has never heard of the branch **Calculator**. There are
    a couple of ways to solve this but the easiest is to ask Sara to merge her work
    into **main**:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 他的本地仓库从未听说过**Calculator**分支。解决这个问题有几种方法，但最简单的方式是让萨拉将她的工作合并到**main**分支：
- en: '![](img/B17741_04_62.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_62.png)'
- en: 'Figure 4.62: Merging Calculator into main'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.62：将Calculator合并到main分支
- en: When Sara merges Calculator into main, she does so *locally*. She still has
    to push these changes to the origin to do John any good. She pushes as she would
    any commit.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 当萨拉将Calculator合并到main分支时，她是*在本地*进行的。她仍然需要将这些更改推送到远程仓库，这样才能对约翰有用。她像提交任何其他提交一样推送它们。
- en: John is now ready to `pull` these changes. Once he does, he realizes that Sara
    has used integers and he needs doubles. He modifies the `Calculator` class to
    use doubles, and while he is at it, he makes all the methods (and the class) static.
    (If you're not familiar with C#, don't worry about what that means; the important
    thing is that he's made a change)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰现在准备`pull`这些更改。一旦他执行了操作，他意识到萨拉使用了整数，而他需要的是浮点数。他修改了`Calculator`类，改用浮点数，同时他还将所有方法（以及类）设为静态。（如果你不熟悉C#，不用担心这意味着什么；重要的是他已经做出了更改）
- en: '[PRE6]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/B17741_04_63.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_63.png)'
- en: 'Figure 4.63: Pull the changes for the branch'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.63：拉取分支的更改
- en: The second line says that we're starting out with main up to date with `origin/main`.
    However, when we do a `pull`, the local Git finds objects to bring down for main.
    There are 22 objects. Why 22 when there were only 4 commits? Some of these objects
    are used internally by Git.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行表示，我们开始时主分支与`origin/main`同步。然而，当我们执行`pull`时，本地Git发现有对象需要拉取到主分支。共有22个对象。为什么是22个，而不是仅仅4个提交？这些对象中的一部分是Git内部使用的。
- en: Later, we see that the merge was a fast forward, and the next line shows that
    there were 29 additions and no modifications or deletions (if you count the +
    marks, you'll find that there are 29). This is followed by the confirmation that
    1 file changed with 29 insertions.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 后来我们看到合并是快速前进（fast-forward）的，接下来的行显示有29个添加项，且没有修改或删除（如果你数一下+标记，你会发现是29个）。随后确认有1个文件发生了变化，并且插入了29行。
- en: John is almost there. His local copy of main now has what he needs, but it is
    on the wrong branch. The solution is to merge main into `temperatureConverter`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰快完成了。他的本地main分支现在有了他需要的内容，但它在错误的分支上。解决方案是将main分支合并到`temperatureConverter`分支。
- en: 'Because the order of which branch is being merged into the other matters, I
    always look it up on Stack Overflow:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 因为合并的分支顺序很重要，我总是去Stack Overflow查找相关信息：
- en: '![](img/B17741_04_64.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_64.png)'
- en: 'Figure 4.64: Stack Overflow advice'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.64：Stack Overflow建议
- en: 'These are exactly the steps John needs to take:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这是约翰需要采取的步骤：
- en: '![](img/B17741_04_65.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_65.png)'
- en: 'Figure 4.65: Merging'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.65：合并
- en: The last two lines indicate that `Calculator` has been brought over with the
    merge and that `temperatureConverter` has two commits to push to its repo.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两行表示`Calculator`已经通过合并带了过来，`temperatureConverter`有两个提交要推送到其仓库。
- en: 'A quick look at the log shows that `HEAD`, `origin/temperatureConverter`, `origin/main`,
    `origin/HEAD`, and `origin/Calculator` are all pointing to the same commit as
    main! Thus, John''s branch now has access to the `Calculator` class:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看日志显示，`HEAD`、`origin/temperatureConverter`、`origin/main`、`origin/HEAD` 和
    `origin/Calculator` 都指向与 main 相同的提交！因此，John 的分支现在可以访问 `Calculator` 类：
- en: '![](img/B17741_04_66.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_66.png)'
- en: 'Figure 4.66: Access to the calculator'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.66：访问计算器
- en: 'He can now return to his program and use these static methods:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 他现在可以返回到他的程序中，使用这些静态方法：
- en: '[PRE7]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I agree that this is wicked ugly, but it works, and more importantly, it demonstrates
    that John's `temperatureConverter` can use code from `Calculator`. What's more,
    John can edit `Calculator`. We'll see what happens when all this is merged.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我同意这看起来非常丑陋，但它有效，且更重要的是，它展示了 John 的 `temperatureConverter` 可以使用 `Calculator`
    中的代码。而且，John 还可以编辑 `Calculator`。我们将看看在所有这些合并之后会发生什么。
- en: 'In jumping back and forth between John and Sara, I did the work in Sara''s
    folder. No harm done, however. We''ll just have Sara commit the changes. Uh oh,
    the changes were made on main. Let''s clean all this up. First, on Sara''s machine,
    let''s merge main into `Calculator`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在 John 和 Sara 之间来回跳跃时，我在 Sara 的文件夹中完成了工作。不过没关系。我们只需要让 Sara 提交这些更改。糟糕，修改是在 main
    上进行的。我们来整理一下这一切。首先，在 Sara 的机器上，我们将 main 合并到 `Calculator`：
- en: '![](img/B17741_04_67.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_67.png)'
- en: 'Figure 4.67: Merging main into Calculator in Visual Studio'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.67：在 Visual Studio 中将 main 合并到 Calculator
- en: This is just like the previous merges except that now `Calculator` is the checked-out
    branch and we right-click on main to get the **Merge 'main' into 'Calculator'**
    option. Now, to ensure that all is right with the world, merge Calculator back
    into main.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的合并类似，只不过现在 `Calculator` 是被选中的分支，我们右键点击 main，选择 **将 'main' 合并到 'Calculator'**
    选项。现在，为了确保一切正常，我们将 `Calculator` 合并回 main。
- en: At this point, Sara's `main` and `Calculator` branches are identical, but John
    still doesn't have what he needs. Sara can now push main to the origin with a
    simple push.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Sara 的 `main` 和 `Calculator` 分支是相同的，但 John 仍然没有获得所需的内容。Sara 现在可以通过简单的 push
    将 main 推送到 origin。
- en: 'John can now retrieve main, which should have the changes he needs:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: John 现在可以检索 main，这应该包含他需要的更改：
- en: '![](img/B17741_04_68.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_68.png)'
- en: 'Figure 4.68: Retrieving main with changes'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.68：获取带有更改的 main
- en: 'Great, main has what John needs, but he needs it on his branch. No problem,
    we''ll merge main into `temperatureConverter`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，main 拥有 John 需要的内容，但他需要将其放到自己的分支中。没问题，我们将把 main 合并到 `temperatureConverter`：
- en: '![](img/B17741_04_69.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_69.png)'
- en: 'Figure 4.69: Merging main into temperatureConverter'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.69：将 main 合并到 temperatureConverter
- en: Let's go look at John's Fahrenheit converter and see if it is now up to date.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 John 的华氏转换器，看看它现在是否已经是最新的。
- en: '[PRE8]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can test that this worked by feeding the method 212 and hoping to get back
    100\. Let''s turn to the program for that:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将方法输入212并希望返回100来测试是否成功。让我们查看一下程序：
- en: '[PRE9]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s run our program:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的程序：
- en: '![](img/B17741_04_70.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_04_70.png)'
- en: 'Figure 4.70: Testing the program'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.70：测试程序
- en: We have completed the challenge and managed all our branches. More important,
    the program works!
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了挑战并管理了所有分支。更重要的是，程序可以正常运行！
