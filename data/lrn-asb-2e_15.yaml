- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Using Ansible with GitHub Actions and Azure DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 与 GitHub Actions 和 Azure DevOps
- en: In this chapter, we will start running Ansible in the cloud instead of our local
    machines, something we have been doing up to this point.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将开始在云中运行 Ansible，而不是像以前那样在本地机器上运行。
- en: 'First, this chapter will examine two services I often use during my day job:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，本章将介绍我在日常工作中经常使用的两个服务：
- en: Running GitHub Actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 GitHub Actions
- en: Running pipelines in Azure DevOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中运行流水线
- en: Before we move on, we will examine tools designed to execute Ansible from a
    central location in [*Chapter 16*](B21620_16.xhtml#_idTextAnchor716), *Introducing
    Ansible AWX and Red Hat Ansible* *Automation Platform*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们将检查一些旨在从中央位置执行 Ansible 的工具，参见 [*第16章*](B21620_16.xhtml#_idTextAnchor716)，*介绍
    Ansible AWX 和 Red Hat Ansible 自动化平台*。
- en: Neither of the two services we will be looking at has what you would call native
    support for Ansible; however, they both provide ephemeral compute resources that
    can be configured using YAML, which you can ship alongside your playbook code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要了解的这两项服务都没有所谓的原生 Ansible 支持；然而，它们都提供可以使用 YAML 配置的临时计算资源，而你可以将这些配置文件与 Playbook
    代码一起部署。
- en: This chapter will cover a more complex playbook in both **GitHub Actions** and
    **Azure DevOps**. We will also discuss some considerations when running Ansible
    away from your machine.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍一个更复杂的 Playbook，涉及 **GitHub Actions** 和 **Azure DevOps**。我们还将讨论在远离本地机器运行
    Ansible 时需要考虑的一些事项。
- en: So, rather than discussing it anymore, let’s dive straight in and look at GitHub
    Actions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，既然不再讨论这些内容，让我们直接深入，看看 GitHub Actions。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: If you are following along with the example code that we will be working through,
    then you will need access to a GitHub and an Azure DevOps account, as well as
    an Azure account since we will be launching a WordPress instance running in Azure
    as part of this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在跟随我们将要逐步讲解的示例代码，那么你将需要一个 GitHub 和 Azure DevOps 账号，同时还需要一个 Azure 账号，因为我们将在本章中启动一个运行在
    Azure 上的 WordPress 实例。
- en: You can find a complete copy of the playbook, GitHub Action config, and Azure
    DevOps Pipeline code accompanying this chapter in this book’s GitHub repository
    at [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的 GitHub 仓库中找到本章所附的完整 Playbook、GitHub Action 配置和 Azure DevOps Pipeline
    代码，地址是 [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15)。
- en: GitHub Actions
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub Actions
- en: GitHub Actions is a comprehensive platform for **continuous integration** (**CI**)
    and **continuous delivery** (**CD**) from GitHub. It enables you to automate your
    build, test, and deployment pipeline while hosting your code and GitHub’s exhaustive
    suite of code management tools. Using GitHub Actions, you can define custom workflows
    that automatically build and test every pull request made to your repository or
    deploy merged pull requests to production.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 是一个全面的 **持续集成**（**CI**）和 **持续交付**（**CD**）平台，集成于 GitHub。它使你能够自动化构建、测试和部署流水线，同时托管你的代码和
    GitHub 强大的代码管理工具。使用 GitHub Actions，你可以定义自定义工作流，自动构建和测试每一个对你仓库发出的 Pull Request，或将已合并的
    Pull Request 部署到生产环境。
- en: GitHub Actions offers more than just DevOps functionality as it is closely integrated
    with GitHub. This allows you to run workflows in response to other repository
    events. For instance, you can have a workflow that adds relevant labels automatically
    when a new issue is created in your repository.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 不仅仅提供 DevOps 功能，它与 GitHub 紧密集成。这使得你可以根据其他仓库事件来运行工作流。例如，你可以设置一个工作流，当你的仓库中新建一个
    Issue 时，自动添加相关标签。
- en: With GitHub Actions, you’re in control. You can run your workflows using GitHub’s
    Linux, Windows, and macOS virtual machines. You can also take full charge and
    operate self-hosted runners in your own data center or cloud infrastructure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions，你可以完全掌控。你可以利用 GitHub 提供的 Linux、Windows 和 macOS 虚拟机来运行你的工作流。你还可以完全控制，操作自己托管的
    Runner，在你自己的数据中心或云基础设施中运行。
- en: We will create a GitHub Action workflow to utilize the Linux agents hosted by
    GitHub.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 GitHub Action 工作流，利用 GitHub 托管的 Linux 代理。
- en: Preparation
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We need to configure a few things before we can start working through our GitHub
    Action workflow code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写 GitHub Action 工作流代码之前，我们需要配置一些东西：
- en: Create a GitHub repository to host our code and workflow.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 GitHub 仓库来托管我们的代码和工作流。
- en: Generate an SSH key pair; this will be used to access our Azure-hosted virtual
    machine instance from the GitHub-hosted compute resource when the workflow runs.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个SSH密钥对；这将在工作流运行时用于从GitHub托管的计算资源访问我们托管在Azure上的虚拟机实例。
- en: Configure some repository secrets that will be used in our workflow; these will
    store things such as our Azure credentials and the SSH key pair we created.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置一些仓库密钥，这些密钥将在我们的工作流中使用；它们将存储诸如Azure凭证和我们创建的SSH密钥对等信息。
- en: Copy the files from [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15)
    to your new repo and run the workflow.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件从[https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15)复制到你的新仓库，并运行工作流。
- en: Let’s look at these steps in more detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下这些步骤。
- en: Creating a repository
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个仓库
- en: Let’s start by creating a repository in GitHub that we will use to host our
    code and workflow.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在GitHub上创建一个仓库开始，我们将使用它来托管我们的代码和工作流。
- en: 'First, you need to log into GitHub. Once you’ve logged in, go to **Repositories**
    and then click on the **New** button; you will be taken to the **Create a new
    repository** page, where you need to update the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要登录GitHub。登录后，进入**Repositories**（仓库），然后点击**New**（新建）按钮；这会带你进入**创建新仓库**页面，在此页面上你需要更新以下内容：
- en: '**Owner**: Here, you need to select an owner for the repository. This will
    typically be your GitHub user; however, if you belong to any organization, you
    may have the option of creating the repository under one of those organizations.
    If you do that, please ensure that you have permission to do so as we will be
    spinning up temporary compute resources, which may not be allowed by your organization’s
    admins.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有者**：在这里，你需要为仓库选择一个所有者。通常情况下，这是你的GitHub用户；然而，如果你属于某个组织，你可能有选项将仓库创建在该组织下。如果选择这样做，请确保你有权限这样做，因为我们将启动临时计算资源，而这可能不被组织管理员允许。'
- en: '**Repository name**: I recommend using something descriptive, such as *Learn-Ansible-Second-Edition-Chapter15*.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库名称**：我建议使用一些描述性的名称，例如*Learn-Ansible-Second-Edition-Chapter15*。'
- en: '**Description**: While this is optional, it is always best to add one; for
    example, let’s add *Following along with* [*Chapter 15*](B21620_15.xhtml#_idTextAnchor641)
    *of* *Learn Ansible*.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：虽然这不是必需的，但最好加上描述；例如，我们可以添加*跟随* [*第15章*](B21620_15.xhtml#_idTextAnchor641)
    *学习*《*学习Ansible*》一书的内容。'
- en: '**Public** or **Private**: I recommend setting your repository’s visibility
    to *private*.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公开**或**私有**：我建议将仓库的可见性设置为*私有*。'
- en: 'You can leave the remaining options as-is and then click on the **Create repository**
    button at the end of the form. Once the repository has been created, you should
    be presented with a page that looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以保持其他选项不变，然后点击表单底部的**创建仓库**按钮。一旦仓库创建成功，你将看到如下页面：
- en: '![Figure 15.1 – Our new repository](img/B21620_15_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – 我们的新仓库](img/B21620_15_01.jpg)'
- en: Figure 15.1 – Our new repository
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – 我们的新仓库
- en: Let’s move on to the next step.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进入下一步。
- en: Generating the SSH key pair and Azure Service Principle
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成SSH密钥对和Azure服务主体
- en: We need to generate an SSH key pair and an Azure Service Principle before adding
    secrets to our newly created repository.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在将密钥添加到我们新创建的仓库之前，我们需要生成一个SSH密钥对和一个Azure服务主体。
- en: Information
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Remember to run the commands in Windows Subsystem for Linux if you’re following
    along on a Windows machine.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Windows机器上进行操作，记得在Windows子系统Linux（WSL）中运行这些命令。
- en: 'To do this, open a Terminal and run the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When prompted to enter a passphrase, just hit *Enter*; we don’t want to use
    one. This should give you two files: one called `id_rsa`, which contains the private
    portion of our key – please keep this private – and another called `id_rsa.pub`.
    As its name implies, it includes the public portion of our SSH key.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示输入密码时，直接按*Enter*键；我们不需要设置密码。这将生成两个文件：一个名为`id_rsa`，它包含我们密钥的私有部分——请保持其私密性——另一个名为`id_rsa.pub`。顾名思义，它包含我们SSH密钥的公有部分。
- en: Next, we need to generate an Azure Service Principle and grant permissions to
    our Azure subscription.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要生成一个Azure服务主体并授予权限给我们的Azure订阅。
- en: From [*Chapter 7*](B21620_07.xhtml#_idTextAnchor336), *Ansible Windows Modules*,
    and [*Chapter 9*](B21620_09.xhtml#_idTextAnchor411), *Moving to the Cloud*, we
    used the Azure command-line tool to log in using our Azure credentials. However,
    when interacting with Azure using services such as GitHub Actions, we don’t want
    to use our credentials as they will be locked down with multi-factor authentication,
    and you don’t want to hand out your credentials.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第7章*](B21620_07.xhtml#_idTextAnchor336)，*Ansible Windows 模块*，和[*第9章*](B21620_09.xhtml#_idTextAnchor411)，*迁移到云*中，我们使用
    Azure 命令行工具登录 Azure，并使用我们的 Azure 凭据。然而，当通过 GitHub Actions 等服务与 Azure 交互时，我们不想使用我们的凭据，因为它们将通过多因素身份验证进行锁定，而且你也不想泄露自己的凭据。
- en: To get around this, we can create a service principal and grant it permissions
    to the Azure subscription so that it can launch resources from the GitHub Action.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以创建一个服务主体，并授予它对 Azure 订阅的权限，以便它可以从 GitHub Action 启动资源。
- en: 'To create the service principle, you need to log into Azure using the Azure
    CLI by running the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建服务主体，你需要通过运行以下命令使用 Azure CLI 登录 Azure：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are already logged in, run the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经登录，请运行以下命令：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both commands will return a list of subscription IDs your account can access.
    Please make a note of the ID; we will need it momentarily.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 两个命令将返回你的账户可以访问的订阅 ID 列表。请记下该 ID，我们稍后会用到它。
- en: 'Here’s an example of the sort of output you can expect to see; this is the
    JSON that is being returned by the API request that the Azure CLI has made:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你可以预期看到的输出示例；这是 Azure CLI 发出的 API 请求返回的 JSON：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The information we are after is labeled as `id` against the subscription to
    which we would like to grant the service principal access. Using the preceding
    example, the command I would need to run would be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的信息标记为 `id`，与我们希望授予服务主体访问权限的订阅相关。使用前面的示例，我需要运行的命令如下：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When you run this command, replace the subscription ID in the scope with your
    own.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，请将范围中的订阅 ID 替换为你自己的。
- en: 'The output you get will look something like this; please note it down as you
    will not be able to retrieve the password again:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到的输出将类似于这样；请记下它，因为你将无法再次检索密码：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, as I am sure you will have already guessed, none of the information in
    the preceding examples is valid data, so please use your values in the next section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我相信你已经猜到的那样，前面示例中的所有信息都不是有效数据，因此请在下一部分使用你自己的值。
- en: GitHub personal access token
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub 个人访问令牌
- en: There is one more set of credentials we need to generate; because our GitHub
    repository is set to private, we need to be able to authenticate to check the
    code out and write logs back to the repository during the workflow run. To do
    this, we will need to generate a personal access token.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一组凭据需要生成；因为我们的 GitHub 仓库设置为私有，我们需要能够进行身份验证，以便在工作流运行期间检查代码并将日志写回仓库。为此，我们需要生成一个个人访问令牌。
- en: A personal access token for GitHub is a secure, revocable, and customizable
    credential that allows you to authenticate with GitHub and access its API or command-line
    tools without using your main account password.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 个人访问令牌是一种安全的、可撤销的、可定制的凭据，允许你使用 GitHub 进行身份验证，并访问其 API 或命令行工具，而无需使用主账户密码。
- en: Rather than documenting the process here, as GitHub is moving from classic to
    fine-grained tokens at the time of writing, an up-to-date copy of the documentation
    can be found at [https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitHub 正在从经典令牌转向细粒度令牌（本文撰写时），所以在此不记录过程，最新的文档副本可以在[https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)找到。
- en: 'For our purposes, you need to name your token, select just your repository,
    and grant it the following access:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，你需要为你的令牌命名，只选择你的仓库，并授予它以下访问权限：
- en: '**Contents**: Read-only'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容**：只读'
- en: '**Metadata**: Read-only; this will be selected automatically once the permission
    is set'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据**：只读；此选项将在权限设置后自动选中'
- en: Once you have your token, please note it somewhere secure; it will not be displayed
    again.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了令牌，请将其保存在安全的地方；它将不会再显示。
- en: Adding secrets to the repository
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向仓库中添加机密
- en: 'Go back to the repository in GitHub by choosing **Settings** | **Secrets and
    Variables** | **Actions**. Click the **New repository secret** button for each
    of the secrets listed in the following table. Please make sure that you call each
    secret as per the following naming conventions since our workflow code references
    these secrets by their name:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择 **设置** | **机密和变量** | **Actions** 返回 GitHub 仓库。点击 **新建仓库机密** 按钮，为以下表格中列出的每个机密创建新机密。请确保按照以下命名约定命名每个机密，因为我们的工作流代码通过名称引用这些机密：
- en: '| **Secret Name** | **Secret Content** |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| **机密名称** | **机密内容** |'
- en: '| `ARM_CLIENT_ID` | This is the `appId` value from when you create the service
    principle. In this example, this would be `2616e3df-826d-4d9b-9152-3de141465a69`.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `ARM_CLIENT_ID` | 这是您创建服务主体时的 `appId` 值。在这个示例中，这将是 `2616e3df-826d-4d9b-9152-3de141465a69`。
    |'
- en: '| `ARM_CLIENT_SECRET` | This is the `password` value that was given when you
    created the service principle. In this example, this would be `Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw`.
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `ARM_CLIENT_SECRET` | 这是您创建服务主体时给定的 `password` 值。在这个示例中，这将是 `Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw`。
    |'
- en: '| `ARM_SUBSCRIPTION_ID` | This is your Azure subscription ID; use the one you
    granted the service principal access to. In this example, this would be `e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea`.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `ARM_SUBSCRIPTION_ID` | 这是您的 Azure 订阅 ID；使用您授予服务主体访问权限的订阅 ID。在这个示例中，这将是 `e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea`。
    |'
- en: '| `ARM_TENANT_ID` | This is the ID of the `tenant` value listed when you created
    the service principle. In this example, this would be `c5df827f-a940-4d7c-b313-426cb3c6b1fe`.
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `ARM_TENANT_ID` | 这是您在创建服务主体时列出的 `tenant` 值的 ID。在这个示例中，这将是 `c5df827f-a940-4d7c-b313-426cb3c6b1fe`。
    |'
- en: '| `SSH_PRIVATE_KEY` | Open the `id_rsa` file in a text editor and copy and
    paste the contents here. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `SSH_PRIVATE_KEY` | 打开 `id_rsa` 文件并复制粘贴其内容。 |'
- en: '| `SSH_PUBLIC_KEY` | Open the `id_rsa.pub` file in a text editor and copy and
    paste the contents here. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `SSH_PUBLIC_KEY` | 打开 `id_rsa.pub` 文件并复制粘贴其内容。 |'
- en: '| `GH_PAT` | This should contain your GitHub personal access token. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `GH_PAT` | 这应该包含您的 GitHub 个人访问令牌。 |'
- en: Table 15.1 – Information needed for GitHub Actions
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15.1 – GitHub Actions 所需的信息
- en: 'Once they have all been added, your **Actions secrets and variables** page
    should look something like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它们都已添加，您的 **Actions 机密和变量** 页面应该如下所示：
- en: '![Figure 15.2 – All of the repository secrets have been added](img/B21620_15_02.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – 所有仓库机密已添加](img/B21620_15_02.jpg)'
- en: Figure 15.2 – All of the repository secrets have been added
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – 所有仓库机密已添加
- en: Now that we have all the basic configurations for the GitHub Action, let’s look
    at the workflow itself.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了 GitHub Action 的所有基本设置，让我们来看一下工作流本身。
- en: Understanding the GitHub Action workflow
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 GitHub Action 工作流
- en: 'The workflow file, which lives in the `.github/workflows/action.yml` file,
    contains, as its name suggests, the YAML code containing the jobs, steps, and
    tasks that will be executed during the workflow run. In our case, the workflow
    will execute the following two jobs, with each job being made up of multiple steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流文件位于 `.github/workflows/action.yml` 文件中，该文件包含了 YAML 代码，定义了工作流执行期间将执行的作业、步骤和任务。对于我们的情况，工作流将执行以下两个作业，每个作业由多个步骤组成：
- en: 'Scan the Ansible Playbook:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描 Ansible Playbook：
- en: Check out the code.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码。
- en: Create a folder to store the scan results.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹以存储扫描结果。
- en: Run a KICS scan on the checked-out code.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对检出的代码运行 KICS 扫描。
- en: Upload a copy of the results to GitHub.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传结果副本到 GitHub。
- en: 'Now, if KICS detects a problem with our playbook, it will report an error,
    and the workflow will stop here – if everything looks good with the KICS scan,
    then the workflow will proceed by running the following job:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果 KICS 检测到我们的 playbook 有问题，它将报告错误，并且工作流将在这里停止——如果 KICS 扫描看起来一切正常，工作流将继续运行以下任务：
- en: 'Install and run the Ansible Playbook:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并运行 Ansible Playbook：
- en: Check if a cached version of our Ansible modules and Python packages is available.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否有缓存版本的 Ansible 模块和 Python 包可用。
- en: If not cached, download and install the Ansible Azure modules and the supporting
    Python packages.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有缓存，下载并安装 Ansible Azure 模块和支持的 Python 包。
- en: Check out the code.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码。
- en: Log into Azure using the Azure CLI and the service principle we created.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Azure CLI 和我们创建的服务主体登录 Azure。
- en: Set the SSH key.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 SSH 密钥。
- en: Run the Ansible Playbook, logging the output of the Playbook so that we can
    store a copy alongside the scan results in the workflow logs.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Ansible Playbook，并记录 Playbook 输出，以便我们可以将副本存储在工作流日志中，与扫描结果一起。
- en: Upload the Playbook execution summary.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传 Playbook 执行摘要。
- en: 'Now that we know what the workflow will do, let’s dive into the code. We’ll
    start with some basic configuration:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道工作流将执行什么，让我们深入代码部分。我们从一些基本配置开始：
- en: 'The first line disables a KICS check – while the workflow does not form part
    of our Playbook, it is stored in the repository and will be scanned as part of
    the workflow’s execution:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一行禁用了 KICS 检查——尽管工作流不是我们 Playbook 的一部分，它存储在仓库中，并将作为工作流执行的一部分被扫描：
- en: '[PRE6]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We are also setting the name of the workflow, which is how it will appear in
    the GitHub web interface, before finally setting up some variables that we will
    use during the workflow’s execution.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还设置了工作流的名称，这就是它在 GitHub Web 界面中显示的方式，然后最终设置了一些在工作流执行过程中会使用的变量。
- en: 'Next up, we have the configuration that defines the workflow that should run;
    for our needs, we will run the workflow each time the code is committed to the
    main branch:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有定义应运行的工作流的配置；根据我们的需求，我们将在每次代码提交到主分支时运行工作流：
- en: '[PRE7]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next up, we must define our first job, which is the one that scans the Playbook
    code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须定义我们的第一个作业，即扫描 Playbook 代码的作业：
- en: '[PRE8]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, we are defining it as `scan_ansible_playbook`, which runs on
    the latest version of the Ubuntu image supplied by GitHub, and the default action
    for tasks is to run bash. With the job defined, we can move on to the next steps.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们将其定义为`scan_ansible_playbook`，它运行在 GitHub 提供的最新版本的 Ubuntu 镜像上，任务的默认操作是运行
    bash。定义好作业后，我们可以继续进行下一步。
- en: 'We start with the ones that check out the code and create the directory where
    we are going to be storing the results of the scan we will be running:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从检查代码并创建一个存储扫描结果的目录开始：
- en: '[PRE9]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The step downloads a copy of the repository in which the workflow is hosted;
    as you can see, we are using `${{secrets.GH_PAT}}`. We will look at secret variables
    a little later. Now, we must create the folder:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该步骤下载了托管工作流的仓库的副本；如你所见，我们正在使用`${{secrets.GH_PAT}}`。稍后我们将讨论秘密变量。现在，我们必须创建该文件夹：
- en: '[PRE10]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The section step creates a directory whose name is referenced as the `RESULTS_DIR`
    environment variable, which we defined in the top section of the workflow file.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该步骤创建了一个目录，其名称引用为`RESULTS_DIR`环境变量，我们在工作流文件的顶部部分中定义了该变量。
- en: 'When referencing an environment variable, we use the `${{env.VARIABLE_NAME}}`
    format. So, in our case, we are using `${{env.RESULTS_DIR}}`. In the next step,
    we have a dedicated task for running KICS, which is managed and maintained by
    Checkmarx:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用环境变量时，我们使用`${{env.VARIABLE_NAME}}`格式。所以，在我们的例子中，我们使用`${{env.RESULTS_DIR}}`。在下一步中，我们有一个专门用于运行
    KICS 的任务，由 Checkmarx 管理和维护：
- en: '[PRE11]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, we are instructing the task to output the JSON and SARIF files,
    `${{env.RESULTS_DIR}}` directory we created in the previous step and also for
    the workflow fail if the results of the scan contain anything with a severity
    defined in `${{ env.FAIL_ON }}`. We set this to `medium` at the start of the workflow
    file.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们指示任务输出 JSON 和 SARIF 文件，以及我们在上一步中创建的`${{env.RESULTS_DIR}}`目录，并且如果扫描结果中包含任何在`${{
    env.FAIL_ON }}`中定义的严重性，工作流会失败。我们在工作流文件开始时将其设置为`medium`。
- en: 'Now that we have completed the scan, we can review the workflow code for the
    job that installs and runs Ansible. This is called `run_ansible_playbook`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们完成了扫描，可以查看安装并运行 Ansible 的工作流代码。这被称为`run_ansible_playbook`：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, the job is defined the same as the first job, with one exception:
    we have added a `needs` line with a value of `scan_ansible_playbook`. This instructs
    the job to only run once `scan_ansible_playbook` has completed with a successful
    status.'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个作业的定义和第一个作业一样，唯一的区别是：我们添加了一个`needs`行，值为`scan_ansible_playbook`。这指示该作业仅在`scan_ansible_playbook`完成并成功时才会运行。
- en: 'The step of the job checks for the presence of three folders; if they exist,
    a cached version of those folders will be used, meaning that once the workflow
    has been run once, subsequent executions will be much quicker as we don’t have
    to install the Ansible Galaxy modules and their requirements each time the workflow
    runs:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该任务检查三个文件夹是否存在；如果存在，将使用这些文件夹的缓存版本，这意味着一旦工作流运行过一次，后续的执行会更快，因为我们不必每次都安装 Ansible
    Galaxy 模块及其依赖项：
- en: '[PRE13]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next up, we have the step that checks out our repo:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们有检查出我们仓库的步骤：
- en: '[PRE14]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You might be wondering, “*Why do we need to check out the code again? We already
    did that during the last job.*” This is a great question.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会问：“*为什么我们需要再次检出代码？我们在上一个作业中已经做过了。*”这是个很好的问题。
- en: The answer is that the compute resource that ran the job was terminated when
    the last job finished running, and all data was lost. When the current job started,
    a new resource was launched, and we started again with a completely fresh installation.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 答案是，运行作业的计算资源在上一个作业完成时被终止，所有数据都丢失。当当前作业启动时，启动了一个新的资源，并从完全崭新的安装开始。
- en: 'The next step in the workflow uses the `Azure/login@2` task to install the
    Azure CLI if it’s not already installed and then log in using the service principal
    information we defined as repository secrets earlier in this chapter:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作流中的下一步使用 `Azure/login@2` 任务来安装 Azure CLI（如果尚未安装），然后使用我们在本章前面定义为存储库机密的服务主体信息进行登录：
- en: '[PRE15]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We need to embed secrets using the `${{ secrets.SECRET_NAME }}` format. Here,
    we are using the following:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要使用 `${{ secrets.SECRET_NAME }}` 格式来嵌入机密。在这里，我们使用的是：
- en: '`${{``secrets.ARM_CLIENT_ID }}`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${{``secrets.ARM_CLIENT_ID }}`'
- en: '`${{``secrets.ARM_CLIENT_SECRET}}`'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${{``secrets.ARM_CLIENT_SECRET}}`'
- en: '`${{` `secrets.ARM_SUBSCRIPTION_ID }}`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${{` `secrets.ARM_SUBSCRIPTION_ID }}`'
- en: '`${{` `secrets.ARM_TENANT_ID }}`'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${{` `secrets.ARM_TENANT_ID }}`'
- en: Because these are all defined as secrets, the values will never appear in any
    of the Pipeline run logs.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这些都被定义为机密，因此这些值永远不会出现在任何 Pipeline 运行日志中。
- en: This means that while we know the values, someone else who has permission to
    run the workflow will never need to be told the credentials for our service principle
    as they can consume the secrets. They will also never accidentally be exposed
    to them if they check any logs or try and output them due to the workflow’s execution
    as they will be automatically redacted.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着，虽然我们知道这些值，但有权限运行工作流的其他人永远不需要被告知我们的服务主体凭据，因为他们可以使用这些机密。如果他们检查任何日志或尝试输出它们，由于工作流的执行，它们将被自动屏蔽，因此也永远不会意外暴露。
- en: 'The final step before we run Ansible is to add and configure the SSH key pair
    to our host:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行 Ansible 之前的最后一步是将 SSH 密钥对添加到我们的主机并进行配置：
- en: '[PRE16]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The SSH key pair is the final piece we needed. Now, we can run Ansible:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH 密钥对是我们所需的最后一部分。现在，我们可以运行 Ansible 了：
- en: '[PRE17]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, there is slightly more to running Ansible here than we have
    been doing on our local machines. The reason we are running the Ansible playbook
    is to capture its output and format the output so that it can be displayed in
    the GitHub Actions job log.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，运行 Ansible 在这里比在本地机器上运行时稍微复杂一些。我们运行 Ansible playbook 的原因是捕获其输出并格式化输出，以便在
    GitHub Actions 作业日志中显示。
- en: 'Here’s a breakdown of what’s happening:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是发生的事情的详细说明：
- en: '`Run the playbook (with ansible-playbook)` for clarity in the workflow’s execution
    log.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`运行 playbook（使用 ansible-playbook）`，以便在工作流的执行日志中提供更清晰的说明。'
- en: '`ansible-playbook-run` so that we can refer to this step’s outputs in the subsequent
    step.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-playbook-run`，这样我们就可以在后续步骤中引用此步骤的输出。'
- en: '`continue-on-error` to `true`, we are allowing the workflow to continue even
    if this step encounters an error. This is useful for ensuring that the workflow
    can proceed to steps that might, for example, provide diagnostic information or
    perform cleanup actions, even if the Ansible playbook fails.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`continue-on-error` 设置为 `true`，我们允许即使此步骤遇到错误，工作流仍然继续。这对于确保工作流可以继续执行其他步骤（例如提供诊断信息或执行清理操作）非常有用，即使
    Ansible playbook 失败。'
- en: '**Run**: This key starts a multi-line script block that’s executed in the jobs
    shell. The script does the following:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：这个关键字启动了一个多行脚本块，该脚本将在作业的 shell 中执行。脚本执行以下操作：'
- en: '[PRE18]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This command runs the Ansible playbook defined in `site.yml` with an inventory
    file, `inv`. The `2>&1` part redirects `stderr` to `stdout`, so both standard
    output and errors from the `ansible-playbook` command are piped to the `tee` command.
    `tee ansible_output.log` writes the output to `ansible_output.log` and displays
    it in the workflow’s log for real-time monitoring.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令运行在 `site.yml` 中定义的 Ansible playbook，并使用清单文件 `inv`。`2>&1` 部分将 `stderr` 重定向到
    `stdout`，因此 `ansible-playbook` 命令的标准输出和错误都被管道传输到 `tee` 命令。`tee ansible_output.log`
    将输出写入 `ansible_output.log` 文件并在工作流日志中显示，便于实时监控。
- en: Subsequent `echo` commands and `cat` append a formatted summary of the Ansible
    output to the special `GITHUB_OUTPUT` environment variable. As you may have noticed,
    we are mostly using Markdown to format the text.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 后续的 `echo` 命令和 `cat` 会将格式化的 Ansible 输出摘要追加到特殊的 `GITHUB_OUTPUT` 环境变量中。正如你可能已经注意到的，我们主要使用
    Markdown 格式化文本。
- en: '`env` section defines environment variables for this step. `ANSIBLE_HOST_KEY_CHECKING:
    "False"` disables Ansible’s SSH host key checking. This option is often used in
    automated environments to avoid manual interventions.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env` 部分定义了此步骤的环境变量。`ANSIBLE_HOST_KEY_CHECKING: "False"` 禁用了 Ansible 的 SSH
    主机密钥检查。此选项通常在自动化环境中使用，以避免人工干预。'
- en: 'The final step in our workflow takes the output of the previous step and outputs
    it to `$GITHUB_STEP_SUMMARY`. This is a special variable that’s used by a GitHub
    Actions workflow to record the results of a step in the workflow executions log:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作流的最后一步将前一步的输出输出到 `$GITHUB_STEP_SUMMARY`。这是一个特殊的变量，用于 GitHub Actions 工作流记录工作流执行日志中的步骤结果：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: While that completes our workflow code review, one more task happens in the
    background that we don’t have to define. As you may recall, in the first step
    of the `run_ansible_playbook` job, we had a step that looked for any caches associated
    with the workflow. Well, by defining that step, there is a post-deploy task that
    runs at the end of the workflow and creates the cache if one doesn’t exist.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这完成了我们的工作流代码审查，但还有一个任务在后台执行，我们无需定义。如你所记得，在 `run_ansible_playbook` 任务的第一步中，我们有一个步骤是查找与工作流相关的任何缓存。通过定义这个步骤，工作流结束时会有一个后部署任务，如果缓存不存在，它会创建缓存。
- en: Now that we understand our workflow code, let’s check out a copy of our newly
    created repository. Copy the code from the example repository and then check in
    the changes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了工作流代码，让我们检查一下我们新创建的仓库副本。复制示例仓库中的代码，然后提交更改。
- en: Committing the code
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交代码
- en: As mentioned previously, before running the workflow, we need to check out the
    empty repository we created at the start of this chapter. This will vary depending
    on how you interact with GitHub. I use the command line, but you might use the
    GitHub Desktop application or an IDE such as Visual Studio Code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在运行工作流之前，我们需要检查出在本章开始时创建的空仓库。具体操作方式取决于你如何与 GitHub 互动。我使用命令行，但你可能使用 GitHub
    Desktop 应用程序或 Visual Studio Code 等 IDE。
- en: Information
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: For more information on the GitHub desktop application, see [https://desktop.github.com/](https://desktop.github.com/).
    For details on how to configure an SSH connection to GitHub, see [https://docs.github.com/en/authentication/connecting-to-github-with-ssh.](https://docs.github.com/en/authentication/connecting-to-github-with-ssh.)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多 GitHub 桌面应用程序的信息，请参见 [https://desktop.github.com/](https://desktop.github.com/)。有关如何配置
    SSH 连接到 GitHub 的详细信息，请参见 [https://docs.github.com/en/authentication/connecting-to-github-with-ssh.](https://docs.github.com/en/authentication/connecting-to-github-with-ssh.)
- en: 'If you want to follow along on the command line, you must update the repository’s
    name to reflect your own and ensure you have SSH access to your GitHub repositories:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在命令行中跟随操作，你必须更新仓库名称以反映你自己的名称，并确保你可以通过 SSH 访问 GitHub 仓库：
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Once I was in the folder, I copied across the contents of [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15),
    ensuring that I also copied the `.github` folder as this contains the workflow
    we want to execute.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入文件夹，我将 [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15)
    中的内容复制过来，并确保也复制了 `.github` 文件夹，因为它包含我们想要执行的工作流。
- en: 'Once copied, I ran the following commands to add the new files and create the
    first commit, then pushed:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 复制完成后，我运行了以下命令来添加新文件并创建第一次提交，然后推送：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If everything goes as planned, if you go to your repository and click on the
    **Actions** tab, you should see something like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，当你访问仓库并点击 **Actions** 标签时，你应该能看到类似这样的内容：
- en: '![Figure 15.3 – Our first commit is running the GitHub Action](img/B21620_15_03.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – 我们的第一次提交正在运行 GitHub Action](img/B21620_15_03.jpg)'
- en: Figure 15.3 – Our first commit is running the GitHub Action
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – 我们的第一次提交正在运行 GitHub Action
- en: 'Clicking the name of the commit should show you the progress of the workflow:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 点击提交的名称应该能显示工作流的进度：
- en: '![Figure 15.4 – Viewing the progress of the workflow](img/B21620_15_04.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – 查看工作流进度](img/B21620_15_04.jpg)'
- en: Figure 15.4 – Viewing the progress of the workflow
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 查看工作流进度
- en: 'Click on the running job – in my example, this is the *Install Ansible and
    Run Playbook* job. This will show you its real-time progress:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 点击正在运行的任务——在我的示例中，这是 *安装 Ansible 并运行 Playbook* 任务。这将显示它的实时进度：
- en: '![Figure 15.5 – Viewing the real-time output](img/B21620_15_05.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – 查看实时输出](img/B21620_15_05.jpg)'
- en: Figure 15.5 – Viewing the real-time output
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5 – 查看实时输出
- en: If everything works as planned, the Ansible playbook will run, the Azure resources
    will be deployed, and we should have a running WordPress instance.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，Ansible playbook 将会运行，Azure 资源将被部署，我们应该能够看到正在运行的 WordPress 实例。
- en: 'Clicking on the **Summary** link at the top of the page will show you the full
    output. Here, we’ll see any warnings or information that was logged during the
    workflow run, followed by the KICS results:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 点击页面顶部的**摘要**链接将显示完整的输出。在这里，我们将看到在工作流运行过程中记录的任何警告或信息，然后是 KICS 结果：
- en: '![Figure 15.6 – The KICS scan results](img/B21620_15_06.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – KICS 扫描结果](img/B21620_15_06.jpg)'
- en: Figure 15.6 – The KICS scan results
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – KICS 扫描结果
- en: 'You will also be able to expand the **Ansible Playbook Output** area and view
    the logs:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以展开**Ansible Playbook 输出**区域并查看日志：
- en: "![Figure 15.7 – Ansible Playb\uFEFF\uFEFFook Output](img/B21620_15_07.jpg)"
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7 – Ansible Playbook 输出](img/B21620_15_07.jpg)'
- en: Figure 15.7 – Ansible Playbook Output
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7 – Ansible Playbook 输出
- en: 'Before we remove the Azure resources, let’s see what happens when the scan
    fails. To do this, open `roles/azure/tasks/main.yml` and remove the line that
    reads as follows (it should be around line *61*):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们删除 Azure 资源之前，让我们看看当扫描失败时会发生什么。为此，打开 `roles/azure/tasks/main.yml` 并删除以下内容（大约在第
    *61* 行）：
- en: '[PRE22]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once removed, check in the updated code. This will trigger a new workflow run:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 删除后，检查更新的代码。这将触发新的工作流运行：
- en: '![Figure 15.8 – Triggering a second workflow run](img/B21620_15_08.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图15.8 – 触发第二次工作流运行](img/B21620_15_08.jpg)'
- en: Figure 15.8 – Triggering a second workflow run
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8 – 触发第二次工作流运行
- en: 'As the line we removed will trigger a medium severity rule, our workflow run
    should fail, as shown here:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们删除的那一行将触发中等严重性的规则，因此我们的工作流运行应当失败，如此处所示：
- en: '![Figure 15.9 – Our second workflow run failed due to our change](img/B21620_15_09.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9 – 由于我们的修改，第二次工作流运行失败](img/B21620_15_09.jpg)'
- en: Figure 15.9 – Our second workflow run failed due to our change
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9 – 由于我们的修改，第二次工作流运行失败
- en: Once you have finished testing, I recommend logging into Azure and manually
    deleting the resource group containing the resources we’ve just launched.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 完成测试后，我建议登录 Azure 手动删除包含我们刚刚启动的资源的资源组。
- en: As you can see, while there are considerations you need to make for your deployments
    – such as ensuring all the connectivity and steps are in place to interact with
    your cloud provider securely – the general gist and approach to running our Playbooks
    remains much the same as on our local machine.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，尽管在部署过程中您需要考虑一些因素——例如确保所有连接和步骤都已到位，以便安全地与云服务提供商交互——但运行 Playbook 的基本思路和方法与在本地机器上运行时几乎相同。
- en: The same can also be said about the next tool we will examine, Azure DevOps.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们将要查看的下一个工具 Azure DevOps，也可以说同样的话。
- en: Azure DevOps
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure DevOps
- en: The description we used for GitHub Actions also applies to Azure DevOps Pipelines
    and repositories, two of the Azure DevOps services we will use in this section.
    Again, we will use platform-provided computing resources to run our Ansible Playbook,
    and many approaches will be the same. So, rather than covering old ground, let’s
    start with preparing an Azure DevOps project to host our code and run our Playbook.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于 GitHub Actions 的描述同样适用于 Azure DevOps Pipelines 和代码库，这是我们将在本节中使用的 Azure
    DevOps 服务中的两个。再次强调，我们将使用平台提供的计算资源来运行 Ansible Playbook，很多方法将是相同的。因此，我们将跳过老的内容，从准备一个
    Azure DevOps 项目开始，以托管我们的代码并运行 Playbook。
- en: Creating and configuring our project
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和配置我们的项目
- en: 'First, you will need to create an Azure DevOps project. Like our GitHub repository,
    I’ve called it `Learn-Ansible-Second-Edition-Chapter15`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个 Azure DevOps 项目。就像我们的 GitHub 仓库一样，我将其命名为 `Learn-Ansible-Second-Edition-Chapter15`：
- en: '![Figure 15.10 – Our newly created Azure DevOps project](img/B21620_15_10.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10 – 我们新创建的 Azure DevOps 项目](img/B21620_15_10.jpg)'
- en: Figure 15.10 – Our newly created Azure DevOps project
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10 – 我们新创建的 Azure DevOps 项目
- en: We need to configure a few things before checking our code in and adding our
    pipeline; the first is to create a service connection to Azure itself. To do this,
    click on the **Project Settings** button, which can be found at the bottom far
    left-hand corner of the page.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查代码并添加我们的管道之前，我们需要配置一些内容；首先是创建与 Azure 本身的服务连接。为此，请点击页面左下角的**项目设置**按钮。
- en: Once **Project Settings** is open, in the left-hand menu under **Pipelines**,
    click **Service connections**, then click the **Create service** **connection**
    button.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开**项目设置**，在左侧菜单下选择**管道**，点击**服务连接**，然后点击**创建服务连接**按钮。
- en: Select **Azure Resource Manager**, then click **Next**; from here, select **Service
    principal (manual)** and click **Next** again.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Azure资源管理器**，然后点击**下一步**；从这里，选择**服务主体（手动）**，再点击一次**下一步**。
- en: We are taking this approach rather than any of the others, which would automatically
    create the service principle for us, as we already have the details of a service
    principle noted from the *GitHub* *Actions* section.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们采取这种方法，而不是其他任何会自动为我们创建服务主体的方法，因为我们已经在*GitHub* *Actions*部分记录了服务主体的详细信息。
- en: 'The following table contains the information you need to enter:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含你需要输入的信息：
- en: '| **Option** | **Content** |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| **选项** | **内容** |'
- en: '| **Subscription Id** | This is your Azure subscription ID; use the one you
    granted the service principal access to. In this example, this would be `e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea`.
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| **订阅Id** | 这是你的Azure订阅ID；使用你授予服务主体访问权限的那个订阅ID。在这个示例中，它是`e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea`。
    |'
- en: '| **Subscription Name** | Enter the name of your Azure subscription. Since
    we are going to be referring to the subscription ID in the pipeline code, this
    can be set to anything you like. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| **订阅名称** | 输入你的Azure订阅名称。由于我们将在管道代码中引用订阅ID，因此可以设置为任何你喜欢的值。 |'
- en: '| **Service** **Principal Id** | This is the `appId` value from when you create
    the service principle. In this example, this would be `2616e3df-826d-4d9b-9152-3de141465a69`.
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| **服务** **主体Id** | 这是你在创建服务主体时得到的`appId`值。在这个示例中，它是`2616e3df-826d-4d9b-9152-3de141465a69`。
    |'
- en: '| **Service** **principal key** | This is the `password` value that was given
    when you created the service principle. In this example, this would be `Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw`.
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| **服务** **主体密钥** | 这是你在创建服务主体时得到的`password`值。在这个示例中，它是`Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw`。
    |'
- en: '| **Tenant ID** | This is the ID of the `tenant` value listed when you created
    the service principle. In this example, this would be `c5df827f-a940-4d7c-b313-426cb3c6b1fe`.
    |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| **租户ID** | 这是你在创建服务主体时列出的`tenant`值的ID。在这个示例中，它是`c5df827f-a940-4d7c-b313-426cb3c6b1fe`。
    |'
- en: '| **Service** **connection nam****e** | Enter `azConnection` here as this is
    how we are referencing the connection in the pipeline code. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| **服务** **连接名称** | 在此输入`azConnection`，这是我们在管道代码中引用连接的方式。 |'
- en: '| **Security** | Ensure that **Grant access permission to all pipelines** is
    selected. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| **安全性** | 确保选择了**授予所有管道访问权限**。 |'
- en: Table 15.2 – Information needed for your pipeline in Azure DevOps
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 表格15.2 – Azure DevOps中管道所需的信息
- en: Once you’ve entered this information, click the **Verify and Save** button.
    This will check the details you entered are correct and save the service connection.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这些信息后，点击**验证并保存**按钮。这将检查你输入的详细信息是否正确，并保存服务连接。
- en: 'Next, we need to install a few extensions from the Visual Studio Marketplace,
    allowing us to publish our KICS report and an overview of our Playbook run:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要从Visual Studio Marketplace安装几个扩展，以便发布我们的KICS报告和Playbook运行概况：
- en: '**Markdown** **Reports**: [https://marketplace.visualstudio.com/items?itemName=MasamitsuMurase.publish-markdown-reports](https://marketplace.visualstudio.com/items?itemName=MasamitsuMurase.publish-markdown-reports)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Markdown** **报告**：[https://marketplace.visualstudio.com/items?itemName=MasamitsuMurase.publish-markdown-reports](https://marketplace.visualstudio.com/items?itemName=MasamitsuMurase.publish-markdown-reports)'
- en: '**Sarif** **Tools**: [https://marketplace.visualstudio.com/items?itemName=sariftools.scans](https://marketplace.visualstudio.com/items?itemName=sariftools.scans)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sarif** **工具**：[https://marketplace.visualstudio.com/items?itemName=sariftools.scans](https://marketplace.visualstudio.com/items?itemName=sariftools.scans)'
- en: To enable the extensions on your Azure DevOps organization, follow the preceding
    URLs and the instructions when you click the **Get it** **free** button.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在你的Azure DevOps组织中启用这些扩展，请遵循上述URL，并按照点击**免费获取**按钮后的说明进行操作。
- en: The final configuration piece is adding a pipeline variable group and secure
    file. To do this, click on **Pipelines** in the left-hand side menu and then click
    **Library**. Once on the **Library** page, click the **+ Variable** **group**
    button.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的配置步骤是添加管道变量组和安全文件。为此，点击左侧菜单中的**管道**，然后点击**库**。进入**库**页面后，点击**+ 变量组**按钮。
- en: 'Name the variable group `playbook` and enter the following variables:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量组命名为`playbook`并输入以下变量：
- en: '| **Name** | **Value** |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **值** |'
- en: '| `breakSeverity` | `MEDIUM` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `breakSeverity` | `MEDIUM` |'
- en: '| `SSH_PUBLIC_KEY` | Paste the contents of the `id_rsa.pub` file here |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `SSH_PUBLIC_KEY` | 在此粘贴`id_rsa.pub`文件的内容 |'
- en: '| `subscriptionName` | `azConnection` – this is the name of the connection
    we created at the start of this section |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `subscriptionName` | `azConnection` – 这是我们在本节开始时创建的连接名称 |'
- en: Table 15.3 – Information required for the variable group
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15.3 – 变量组所需的信息
- en: Once you have filled in the preceding information, click `id_rsa` file.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完前面的信息后，点击`id_rsa`文件。
- en: We now have all the base configurations ready and can upload our code.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好了所有基本配置，可以上传我们的代码了。
- en: Cloning the repository and uploading the code
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆仓库并上传代码
- en: Next, we must clone the repository and upload our code, including the `azure-pipelines.yml`
    file we will cover in the next section. To do this, click on **Repos** in the
    left-hand side menu; you will be presented with several ways to clone the repository.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须克隆仓库并上传我们的代码，包括我们将在下一节中讨论的`azure-pipelines.yml`文件。为此，请点击左侧菜单中的**Repos**；你将看到几种克隆仓库的方法。
- en: 'I’ve chosen to clone using SSH again; if you are following along, update the
    `git clone` command to reflect your repository:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择再次使用 SSH 克隆；如果你跟着操作，更新`git clone`命令以反映你的仓库：
- en: '[PRE23]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'I then copied the files across from [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15).
    This time, I didn’t worry about copying the `.github` directory as it isn’t required.
    Once the files were in my locally cloned folder, I ran the following commands
    to add the new files and create the first commit, then push:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我从[https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter15)复制了文件。这一次，我没有担心复制`.github`目录，因为它不是必需的。将文件复制到本地克隆的文件夹后，我运行了以下命令，添加了新文件并创建了第一次提交，然后推送：
- en: '[PRE24]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Unlike when we first checked our code into GitHub, nothing will happen because
    we haven’t configured our pipeline yet.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们第一次将代码提交到 GitHub 时不同，由于我们尚未配置管道，因此什么也不会发生。
- en: The Azure DevOps pipeline
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure DevOps 管道
- en: Our pipeline is defined in the `azure-pipelines.yml` file, which can be found
    at the root of our repository file. Let’s quickly review the content before we
    create the pipeline using that file.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的管道定义在`azure-pipelines.yml`文件中，该文件位于我们仓库文件的根目录。在使用该文件创建管道之前，让我们快速回顾一下内容。
- en: Information
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Structurally, our `azure-pipelines.yml` file is close to what we have already
    covered for GitHub Actions; in fact, you might almost think they are interchangeable
    and compatible – however, they aren’t, so please be careful not to mix the two
    up.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 从结构上看，我们的`azure-pipelines.yml`文件与我们之前在 GitHub Actions 中讨论的非常相似；事实上，你几乎可以认为它们是可以互换和兼容的——但它们并不完全相同，所以请小心不要混淆这两者。
- en: 'Our pipeline file starts with a basic configuration that instructs the pipeline
    when to trigger, which variable group to load, and which underlying image to use.
    Right at the top, there’s an exclusion rule for KICS, something we covered in
    [*Chapter 13*](B21620_13.xhtml#_idTextAnchor566), *Scanning Your* *Ansible Playbooks*:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的管道文件从一个基本配置开始，指示管道何时触发，加载哪个变量组，以及使用哪个底层镜像。在顶部，包含一个 KICS 排除规则，这是我们在[*第 13
    章*](B21620_13.xhtml#_idTextAnchor566)中讨论过的内容，*扫描你的* *Ansible Playbooks*：
- en: '[PRE25]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once the basic configuration is complete, we can start the stages:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 完成基本配置后，我们可以开始各个阶段：
- en: 'Our first run is the KICS scan on the code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的第一次运行是对代码进行 KICS 扫描：
- en: '[PRE26]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This stage is made up of a single job:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该阶段由一个作业组成：
- en: '[PRE27]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you may have noticed, here, we are using the `checkmarx/kics:debian` container
    image to deploy KICS. This will spin up the container and run the following steps
    from within it. Our step contains two tasks – the first creates the output folder,
    checks out the code, and runs the scan:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，这里我们使用了`checkmarx/kics:debian`容器镜像来部署 KICS。这将启动容器并在其中执行以下步骤。我们的步骤包含两个任务——第一个任务创建输出文件夹，检出代码并运行扫描：
- en: '[PRE28]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The second task publishes the content of the output directory, which contains
    all of our scan results as a build artifact:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个任务发布输出目录的内容，该目录包含所有扫描结果，作为构建工件：
- en: '[PRE29]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With the files published, we no longer need the resources that were generated
    during this stage, so we can move on to the second stage:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件发布后，我们不再需要在此阶段生成的资源，因此可以进入第二阶段：
- en: '[PRE30]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'As you can see, this stage parses our scan results; the first task we run downloads
    a copy of the artifact we uploaded during the last stage:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，这个阶段解析了我们的扫描结果；我们运行的第一个任务是下载我们在上一阶段上传的工件副本：
- en: '[PRE31]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now that we have the results files, we need to review them to figure out if
    the Ansible Playbook should be run or not. This task runs a bash script that reads
    the JSON results and sets some pipeline variables to control what happens next.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经得到了结果文件，接下来需要审查它们，以判断是否需要运行 Ansible Playbook。这个任务运行一个 bash 脚本，读取 JSON
    结果并设置一些管道变量，以控制接下来的步骤。
- en: 'We start the task with some configuration:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们用一些配置来启动任务：
- en: '[PRE32]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, we have the script itself, which starts by setting some local variables
    and printing some results out to the screen using the `echo` command. These will
    appear in our pipeline run:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有了脚本本身，脚本首先通过设置一些本地变量并使用 `echo` 命令将一些结果输出到屏幕。这些结果会出现在我们的管道运行中：
- en: '[PRE33]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Then, we create a *group*, which means that when we review the pipeline output,
    the following information will be minimized, making it easier to read.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，我们创建一个*组*，这样当我们查看管道输出时，以下信息会被最小化，从而使其更容易阅读。
- en: 'In the group, we have an `if` statement that states that if less than (`-lt`)
    `1` issues are detected (that is, zero issues), then the output variable, `OK_TO_DEPLOY`,
    is set to `true`:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组内，我们有一个 `if` 语句，表示如果检测到的问题少于（`-lt`）`1`（也就是零个问题），则输出变量 `OK_TO_DEPLOY` 被设置为
    `true`：
- en: '[PRE34]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If this condition is not met – that is, there are one or more issues – then
    `OK_TO_DEPLOY` is set to `false` and an error is logged:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果此条件不满足——也就是说，存在一个或多个问题——那么 `OK_TO_DEPLOY` 被设置为 `false` 并且记录一个错误：
- en: '[PRE35]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Logging the error will stop the remainder of the pipeline from running. The
    next and final stage runs the Ansible Playbook. It has a dependency on the previous
    stage being successfully executed and `OK_TO_DEPLOY` being set to `true`:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录错误会停止管道的其余部分运行。下一个也是最后一个阶段运行 Ansible Playbook。它依赖于前一个阶段成功执行，并且 `OK_TO_DEPLOY`
    被设置为 `true`：
- en: '[PRE36]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The first task logs us into Azure and sets the service principle details as
    environment variables for use in a later task:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个任务是登录到 Azure 并将服务主体的详细信息设置为环境变量，以便在后续任务中使用：
- en: '[PRE37]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next up, we need to add our SSH key to our environment. This uses the secure
    file we uploaded earlier:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将 SSH 密钥添加到环境中。这里使用的是我们之前上传的安全文件：
- en: '[PRE38]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we need to add the public portion of the SSH key, install the bits we
    need to run the Ansible Playbook, and then actually run it, remembering to add
    the details for the service principle:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加 SSH 密钥的公共部分，安装运行 Ansible Playbook 所需的工具，然后实际运行它，记得添加服务主体的详细信息：
- en: '[PRE39]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'With the environment ready, we can run the script, which starts by adding the
    `id_rsa.pub` file and adding the right permissions:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 环境准备好后，我们可以运行脚本，脚本首先会添加 `id_rsa.pub` 文件并设置正确的权限：
- en: '[PRE40]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The next part of the script installs the Azure Ansible collection from Ansible
    Galaxy and installs the requirements. We are using `--force` here to ensure that
    the latest copy of all the collection is pulled down from Ansible Galaxy:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本的下一部分安装 Azure Ansible 集合（来自 Ansible Galaxy）并安装相关要求。我们在这里使用 `--force` 确保从 Ansible
    Galaxy 拉取到最新的所有集合：
- en: '[PRE41]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'With those installed, we can now run the playbook; we are taking a similar
    approach to running the playbook as we did for our GitHub Action:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装好这些后，我们可以运行 playbook；我们采取与运行 GitHub Action 类似的方法来运行 playbook：
- en: '[PRE42]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The final part of our script takes our Ansible output and creates a Markdown
    file called `summary.md`:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本的最后部分将我们的 Ansible 输出转换成一个名为 `summary.md` 的 Markdown 文件：
- en: '[PRE43]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The final task of the pipeline is to upload a copy of the `markdown/summary.md`
    file to our pipeline:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管道的最后一个任务是将 `markdown/summary.md` 文件的副本上传到我们的管道：
- en: '[PRE44]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: With that, our pipeline is complete. So, now that we know what it does, let’s
    add it to our Azure DevOps project and run it for the first time.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们的管道已经完成。那么，既然我们知道它的功能，接下来我们将其添加到我们的 Azure DevOps 项目中，并首次运行它。
- en: If you click on `azure-pipelines.yml` file will be loaded and you will have
    the option to **Run** or **Save**. We’ll click **Run**.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 `azure-pipelines.yml` 文件，将会加载并提供 **运行** 或 **保存** 选项。我们将点击 **运行**。
- en: 'You will be presented with something like the following screen:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上会显示如下内容：
- en: '![Figure 15.11 – Running the pipeline for the first time](img/B21620_15_11.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.11 – 第一次运行管道](img/B21620_15_11.jpg)'
- en: Figure 15.11 – Running the pipeline for the first time
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.11 – 第一次运行管道
- en: 'However, not is all as it seems! If you click on the first stage, you will
    be presented with the following. The pipeline needs permissions to access the
    variable group we created:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事情并非如它看起来的那样！如果点击第一个阶段，您将看到以下内容。管道需要访问我们创建的变量组的权限：
- en: '![Figure 15.12 – Granting the permissions for the variable group](img/B21620_15_12.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.12 – 授予变量组的权限](img/B21620_15_12.jpg)'
- en: Figure 15.12 – Granting the permissions for the variable group
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12 – 授予变量组的权限
- en: Click **View** and follow the onscreen instructions to grant the permissions.
    The KICS scan will run, and the stage will be complete. It will then move on to
    the **Parse Scan Results** stage, which should be completed again.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**查看**并按照屏幕上的说明授予权限。KICS 扫描将会运行，阶段将完成。然后，它将进入**解析扫描结果**阶段，该阶段也应完成。
- en: 'If you go back to the summary, you’ll see that more permissions are required,
    this time to access the secure file we uploaded:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回到摘要，您会看到需要更多权限，这次是为了访问我们上传的安全文件：
- en: '![Figure 15.13 – Grant the permissions for the secure file](img/B21620_15_13.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.13 – 授予安全文件的权限](img/B21620_15_13.jpg)'
- en: Figure 15.13 – Grant the permissions for the secure file
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13 – 授予安全文件的权限
- en: Again, click **View** and follow the onscreen instructions to grant permission.
    This should be the last permission that needs to be given. From now on, when we
    run the pipeline, permissions will already be given.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**查看**并按照屏幕上的说明授予权限。这应该是需要授予的最后一个权限。从现在开始，当我们运行管道时，权限已经被授予。
- en: 'If you click on the **Run Ansible** stage, you can keep track of the Playbook
    run. If everything goes as planned, returning to the summary should show you something
    like the following:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击**运行 Ansible**阶段，您可以跟踪 Playbook 的运行。如果一切按计划进行，返回摘要页面应该会显示如下内容：
- en: '![Figure 15.14 – Everything worked!!!](img/B21620_15_14.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.14 – 一切正常！！！](img/B21620_15_14.jpg)'
- en: Figure 15.14 – Everything worked!!!
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14 – 一切正常！！
- en: 'Clicking on **Markdown reports** will show the result of the Playbook run:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Markdown 报告**将显示 Playbook 运行的结果：
- en: '![Figure 15.15 – The Markdown report](img/B21620_15_15.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.15 – Markdown 报告](img/B21620_15_15.jpg)'
- en: Figure 15.15 – The Markdown report
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.15 – Markdown 报告
- en: 'Clicking **Scans** will show you the results of the KICS scan:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**扫描**将显示 KICS 扫描的结果：
- en: '![Figure 15.16 – The scan report](img/B21620_15_16.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.16 – 扫描报告](img/B21620_15_16.jpg)'
- en: Figure 15.16 – The scan report
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.16 – 扫描报告
- en: 'Like GitHub Actions, let’s see what happens when the scan fails. Again, open
    `roles/azure/tasks/main.yml` and remove the line that reads as follows (it should
    be around line *61*):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 GitHub Actions 一样，我们来看看当扫描失败时会发生什么。再次打开`roles/azure/tasks/main.yml`，删除如下所示的行（它大约在
    *61* 行附近）：
- en: '[PRE45]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Once removed, check in the updated code. This will trigger a new workflow run:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 删除后，提交更新后的代码。这将触发新的工作流运行：
- en: '![Figure 15.17 – The pipeline has errored](img/B21620_15_17.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.17 – 管道出现错误](img/B21620_15_17.jpg)'
- en: Figure 15.17 – The pipeline has errored
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.17 – 管道出现错误
- en: As you can see, we have a message stating **Pipeline failed due to 1 issue(s)
    found**, and the **Run Ansible** stage was skipped as we didn’t meet the conditions
    for it to run.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们收到一条消息，说明**管道因发现 1 个问题而失败**，并且由于未满足运行条件，**运行 Ansible** 阶段被跳过。
- en: Once you have finished testing, log into Azure and manually delete the resource
    group containing the resources we have just launched.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完成后，登录 Azure 并手动删除包含我们刚刚启动的资源的资源组。
- en: Summary
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at running our Ansible Playbooks using the compute
    resources GitHub and Azure DevOps provide. We discovered that this is great for
    running our playbook code as we can ship code that defines the configuration for
    the computing resources alongside our Playbook code.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 GitHub 和 Azure DevOps 提供的计算资源来运行我们的 Ansible Playbooks。我们发现，这非常适合运行我们的
    Playbook 代码，因为我们可以将定义计算资源配置的代码与 Playbook 代码一起部署。
- en: We also learned that by using the built-in tools, we can securely configure
    our environment so as not to expose secrets, such as our service principle credentials,
    to other users who have access to run the playbook.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学到，通过使用内置工具，我们可以安全地配置环境，以避免将服务主体凭证等机密信息暴露给其他有权限运行 Playbook 的用户。
- en: The only downside is that we had to create the logic that runs the playbook.
    Wouldn’t it be great to use a tool designed to centrally run our Playbooks from
    a single user interface? Well, in our next chapter, we will cover exactly that
    – so if you like the approach we have taken so far, read on.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的缺点是我们必须创建执行Playbook的逻辑。如果有一个工具可以从单一用户界面集中运行我们的Playbooks，岂不是很棒吗？好消息是，在下一章，我们将详细讲解这一点——所以，如果你喜欢我们目前采用的方法，请继续阅读。
- en: Further reading
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章涵盖的更多主题，请查看以下资源：
- en: '**GitHub** **Actions**: [https://docs.github.com/en/actions](https://docs.github.com/en/actions)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub** **Actions**: [https://docs.github.com/en/actions](https://docs.github.com/en/actions)'
- en: '**Azure** **DevOps**: [https://azure.microsoft.com/en-gb/products/devops](https://azure.microsoft.com/en-gb/products/devops)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure** **DevOps**: [https://azure.microsoft.com/en-gb/products/devops](https://azure.microsoft.com/en-gb/products/devops)'
