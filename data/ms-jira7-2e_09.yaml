- en: Chapter 9. JIRA Add-On Development and Leveraging the REST API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：JIRA 插件开发与利用 REST API
- en: JIRA comes with tons of useful features that help you not only get started on
    your project, but also let you customize the workflows that match your software
    model and processes. However, there are times when certain functionalities or
    customizations are required, but these are not supported by JIRA. Then again,
    many new features can be added in JIRA by installing add-ons from the Atlassian
    marketplace. JIRA has a marketplace where one can search for these add-ons. Some
    add-ons are free and some are paid add-ons. If you are looking for additional
    features, you can search on the marketplace for existing add-ons, but it's also
    possible to create your own add-ons, which requires a decent knowledge of Java.
    This chapter will give you enough information to get you started with JIRA's add-on
    development, along with some simple examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 提供了许多有用的功能，不仅可以帮助你启动项目，还可以让你自定义适合你软件模型和流程的工作流程。然而，有时某些功能或自定义需求是必需的，但 JIRA
    本身并不支持这些功能。不过，可以通过从 Atlassian 市场安装插件来向 JIRA 添加许多新功能。JIRA 有一个市场，用户可以在其中搜索这些插件。部分插件是免费的，部分是付费插件。如果你正在寻找额外的功能，可以在市场上搜索现有的插件，但也可以创建自己的插件，这需要对
    Java 有一定的了解。本章将为你提供足够的信息，帮助你开始 JIRA 插件开发，并包含一些简单的示例。
- en: 'The following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题将会涵盖：
- en: Setting up the Atlassian plugin **software development kit** (**SDK**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Atlassian 插件 **软件开发工具包** (**SDK**)
- en: Installing the Atlassian SDK on Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Atlassian SDK
- en: Creating the **helloworld** plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 **helloworld** 插件
- en: Setting up the Eclipse IDE
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Eclipse IDE
- en: Leveraging the JIRA **representational state transfer** (**REST**) API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 JIRA **表现层状态转移** (**REST**) API
- en: Setting up the Atlassian plugin SDK
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Atlassian 插件 SDK
- en: Atlassian provides an SDK to develop add-ons. The SDK needs to be installed
    on your machine before starting the development. It can be installed on Windows,
    Linux, and Mac. Any of these operating systems can be used to develop add-ons,
    however, in this chapter, the instructions will focus only on the Windows platform.
    There are no specific recommended hardware requirements to install the Atlassian
    SDK; however, to get a decent performance, install it on a machine that has a
    core i5 processor and 8 GB of RAM.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Atlassian 提供了一个 SDK 用于开发插件。SDK 需要先安装在你的机器上才能开始开发。它可以在 Windows、Linux 和 Mac 系统上安装。你可以使用任何这些操作系统来开发插件，但本章的指引将仅聚焦于
    Windows 平台。安装 Atlassian SDK 并没有具体推荐的硬件要求；然而，为了获得较好的性能，建议在配备 i5 处理器和 8 GB 内存的机器上安装。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Download the Atlassian SDK for Windows at [https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows)
    下载 Windows 版本的 Atlassian SDK。
- en: Setting up the SDK prerequisites on a Windows system
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 系统上设置 SDK 先决条件
- en: The SDK requires the Java environment to be configured on your machine. In [Chapter
    1](ch01.html "Chapter 1. Planning Your JIRA Installation"), *Planning Your JIRA
    Installation*, we discussed how to install the JDK. The JDK could have been installed
    at `C:\java` or `C:\java\jdk1.8.0_92`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 需要在你的机器上配置 Java 环境。在 [第 1 章](ch01.html "第 1 章：规划 JIRA 安装")，*规划你的 JIRA 安装*
    中，我们讨论了如何安装 JDK。JDK 可能已安装在 `C:\java` 或 `C:\java\jdk1.8.0_92` 路径下。
- en: Verifying the JDK installation and the JAVA_HOME system variable
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证 JDK 安装和 JAVA_HOME 系统变量
- en: 'The Atlassian JDK needs Oracle''s Java SE Development Kit installed on the
    system. Follow the steps mentioned in [Chapter 1](ch01.html "Chapter 1. Planning
    Your JIRA Installation"), *Planning your JIRA Installation* to install it and
    verify that the `JAVA_HOME` system variable is set up by following the steps mentioned
    here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Atlassian JDK 需要系统上安装 Oracle 的 Java SE 开发工具包。请按照 [第 1 章](ch01.html "第 1 章：规划
    JIRA 安装")，*规划你的 JIRA 安装* 中提到的步骤安装它，并按照这里提到的步骤验证 `JAVA_HOME` 系统变量是否已设置。
- en: 'Open **Command Prompt** (**cmd**) and enter the following command:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **命令提示符** (**cmd**) 并输入以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It should return the path where the JDK is installed. In our case, it''s given
    as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该返回 JDK 安装路径。在我们的案例中，它如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Verifying that JAVA_HOME\bin is present in the environment variable PATH
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证 JAVA_HOME\bin 是否存在于环境变量 PATH 中
- en: The JDK `bin` directory has executable files, such as `javac`, and it should
    be available to the Atlassian SDK.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JDK的`bin`目录包含可执行文件，例如`javac`，并且应该对Atlassian SDK可用。
- en: 'All you need to do is append the following line to your existing `Path` system
    variable `%JAVA_HOME%\bin` and perform the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的就是将以下行添加到现有的`Path`系统变量中：`%JAVA_HOME%\bin`，然后执行以下步骤：
- en: 'Open cmd and enter the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开cmd并输入以下命令：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It should return the version of the JDK:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该返回JDK的版本：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing the Atlassian SDK on Windows
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Atlassian SDK
- en: 'The Atlassian SDK can be downloaded from [https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows).
    This link will always give you the latest stable version of the SDK. Here, you
    will get an executable file called `sdk-installer-6.2.6.exe`. Perform the following
    steps to install the SDK on your Windows system:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows](https://marketplace.atlassian.com/download/plugins/atlassian-plugin-sdk-windows)下载Atlassian
    SDK。这个链接始终会提供SDK的最新稳定版本。你会得到一个名为`sdk-installer-6.2.6.exe`的可执行文件。按照以下步骤在Windows系统上安装SDK：
- en: After downloading the SDK installer, double-click on it and complete the installation.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载SDK安装程序后，双击它并完成安装。
- en: Once the installation is complete, the installer will prompt you to restart
    the computer. If the installer doesn't ask you to restart, just check whether
    you are able to use `atlas-`commands; if not, then restarting the system is the
    safest way to make sure that the SDK is installed properly.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装完成，安装程序会提示你重启计算机。如果安装程序没有提示你重启，只需检查是否能够使用`atlas-`命令；如果不能，重启系统是确保SDK正确安装的最安全方法。
- en: 'Open cmd and enter the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开cmd并输入以下命令：
- en: '[PRE4]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It should return the following information:![Installing the Atlassian SDK on
    Windows](img/image_09_001.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它应该返回以下信息：![Installing the Atlassian SDK on Windows](img/image_09_001.jpg)
- en: You can see that it will tell you which version of the Atlassian SDK is installed
    on the system and give you the details of the JDK that is installed as well.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，它会告诉你系统上安装的Atlassian SDK的版本，并提供已安装的JDK的详细信息。
- en: At this point, everything is set up and you are now ready to start developing
    add-ons.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，一切都已设置完成，你现在可以开始开发插件了。
- en: Getting familiar with the Atlassian SDK
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉Atlassian SDK
- en: 'When you ran the `atlas-version` command, it showed various details of the
    installed SDK. You might have noticed that `ATLAS Home` is the location where
    the Atlassian SDK is installed. Let''s open this directory and check its content:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`atlas-version`命令时，它会显示已安装SDK的各种详细信息。你可能已经注意到，`ATLAS Home`是Atlassian SDK安装的位置。现在，让我们打开这个目录并检查其内容：
- en: '`apache-maven-3.2.1`: This Atlassian SDK uses **Maven**, which is a popular
    tool used to build automation for Java projects.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apache-maven-3.2.1`：这个Atlassian SDK使用**Maven**，Maven是一个流行的自动化构建工具，用于Java项目。'
- en: '`bin`: This directory contains all the command-line tools that are used to
    develop add-ons. All the commands here are prefixed with `atlas-`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`：该目录包含用于开发插件的所有命令行工具。这里的所有命令都以`atlas-`为前缀。'
- en: '`repository`: This directory contains the actual code that the SDK relies on
    to develop add-ons.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repository`：该目录包含SDK依赖的实际代码，用于开发插件。'
- en: The atlas command
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: atlas命令
- en: We just discussed that all the commands are prefixed with `atlas-`. Before you
    start creating add-ons, a working JIRA instance is required. This will be used
    to test your add-ons. The `atlas-run-standalone` command is used to set up and
    start the JIRA instance for you.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论过，所有的命令都以`atlas-`为前缀。在开始创建插件之前，必须有一个工作中的JIRA实例。这将用于测试你的插件。`atlas-run-standalone`命令用于为你设置并启动JIRA实例。
- en: 'Perform the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Create a folder called `atlastutorial` in your `C:\` directory.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`C:\`目录下创建一个名为`atlastutorial`的文件夹。
- en: 'In cmd, change directory using:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在cmd中，使用以下命令更改目录：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Start JIRA using the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动JIRA：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Depending on your internet connection, this command will take a few minutes
    to complete. It downloads the JIRA files and starts the instance on port `2990`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你的互联网连接情况，这个命令可能需要几分钟才能完成。它会下载JIRA文件并在`2990`端口启动实例：
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enter `http://localhost:2990/jira` in your browser; the exact URL will also
    be displayed by the command.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中输入`http://localhost:2990/jira`；命令也会显示确切的URL。
- en: Enter `admin` as the username and password.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`admin`作为用户名和密码。
- en: This is your JIRA instance, created after you set up the Atlassian SDK with
    the test license for plugin developers; we will use this to develop the JIRA add-ons.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你的 JIRA 实例，它是在你使用插件开发者的测试许可证设置 Atlassian SDK 后创建的；我们将使用此实例来开发 JIRA 插件。
- en: Creating the helloworld plugin
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 helloworld 插件
- en: Now, we are ready to create our first add-on in JIRA, which will introduce new
    features to our instance. Any JIRA add-on contains a lot of files, and it has
    to follow a directory structure; the Atlassian SDK provides a command-line tool
    called `atlas-create-jira-plugin` to create a plugin.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备在 JIRA 中创建我们的第一个插件，它将为我们的实例引入新功能。任何 JIRA 插件都包含许多文件，并且必须遵循目录结构；Atlassian
    SDK 提供了一个命令行工具，名为`atlas-create-jira-plugin`，用来创建插件。
- en: 'If your existing JIRA is already running in cmd, then stop it by pressing on
    *Ctrl + C* and perform these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的现有 JIRA 已在命令行中运行，按 *Ctrl + C* 停止它，并执行以下步骤：
- en: In cmd, make sure that you are in the `C:\atlastutorial` directory.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，确保你处于`C:\atlastutorial`目录。
- en: 'Enter the following command and press *Enter*:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令并按 *Enter* 键：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command will respond and ask you to provide certain inputs. Use the values
    mentioned in the following table:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将回应并要求你提供某些输入。使用下表中提到的值：
- en: '| **Define value for** `groupId` | `com.atlassian.tutorial` | **Used to identify
    project uniquely** |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **为** `groupId` **定义值** | `com.atlassian.tutorial` | **用于唯一标识项目** |'
- en: '| Define value for `artifactId` | `helloworld` | An artifact is a file, usually
    a JAR, that gets deployed |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 为 `artifactId` 定义值 | `helloworld` | 一个工件是一个文件，通常是 JAR 文件，最终会被部署 |'
- en: '| Define value for `version` | `1.0-Version` | Used for distributing the plugin
    |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 为 `version` 定义值 | `1.0-Version` | 用于分发插件 |'
- en: '| Define value for `package` | `com.atlassian.tutorial.helloworld` | Used to
    organize the related classes |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 为 `package` 定义值 | `com.atlassian.tutorial.helloworld` | 用于组织相关类 |'
- en: The `atlas-create-jira-plugin` command will prompt you to confirm the values
    you just entered. Press  ***Y*** to continue. A new `helloworld` folder will be
    created at `c:\atlastutorial\helloworld`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`atlas-create-jira-plugin`命令会提示你确认刚刚输入的值。按 ***Y*** 继续。新的`helloworld`文件夹将在`c:\atlastutorial\helloworld`创建。'
- en: 'If you take a look in the `c:\atlastutorial\helloworld` directory, you will
    find a skeleton of the plugin project with the following files and folders created
    by the `atlas-create-jira-plugin` command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`c:\atlastutorial\helloworld`目录，你会发现由`atlas-create-jira-plugin`命令创建的插件项目骨架，其中包含以下文件和文件夹：
- en: '`src`: This folder contains the source code of the plugin'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：此文件夹包含插件的源代码'
- en: '`LICENSE`: This file stores the plugin license information'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE`：此文件存储插件许可证信息'
- en: '`pom`: This is the Maven configuration file'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom`：这是 Maven 配置文件'
- en: '`README`: This file contains brief instructions on how to run the plugin'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README`：此文件包含有关如何运行插件的简要说明'
- en: Adding organization details in pom.xml
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 pom.xml 中添加组织信息
- en: 'Open the `pom.xml` file, search the `<organization>` tag, and update the company
    name and the company URL. This information will be visible to the user who will
    install the plugin from the **Universal Plugin Manager** (**UPM**):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`pom.xml`文件，搜索`<organization>`标签，并更新公司名称和公司 URL。此信息将对从 **Universal Plugin
    Manager** (**UPM**) 安装插件的用户可见：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Enter the company name within an enclosed `<name>` tag and the company URL within
    an enclosed `<url>` tag and save the file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输入公司名称并将其放入 `<name>` 标签中，将公司 URL 放入 `<url>` 标签中，并保存文件。
- en: Loading the plugin in JIRA
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 JIRA 中加载插件
- en: 'We now have a plugin created with just a single command, and you can actually
    load this plugin in JIRA. Although it has no functionality right now, we will
    still make the attempt to understand how to load this plugin in JIRA. Perform
    the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经通过一个命令创建了一个插件，实际上你可以在 JIRA 中加载此插件。虽然它现在没有功能，但我们仍然会尝试理解如何在 JIRA 中加载此插件。请执行以下步骤：
- en: In cmd, navigate to the `c:\atlastutorial\helloworld` directory.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到`c:\atlastutorial\helloworld`目录。
- en: 'Enter the following command and press *Enter*:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令并按 *Enter* 键：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a shell script that installs and runs the plugin.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个安装并运行插件的 shell 脚本。
- en: This command will create a folder called the `target` subdirectory in the `helloworld`
    directory. After some time, a JIRA instance will start.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将在`helloworld`目录中创建一个名为`target`的子目录。过一段时间后，JIRA 实例将启动。
- en: Enter `http://localhost:2990/jira` in your browser; the exact URL will also
    be displayed by the command.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中输入`http://localhost:2990/jira`；确切的 URL 也将由命令显示。
- en: Enter `admin` for both username and password.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`admin`作为用户名和密码。
- en: Go to JIRA **Administration** | **Add-ons** | **Manage add-ons** (under **ATLASSIAN
    MARKETPLACE**).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到JIRA**管理** | **插件** | **管理插件**（在**ATLASSIAN市场**下）。
- en: Under **User-installed add-ons**, you will find the new add-on called **helloworld**:![Loading
    the plugin in JIRA](img/image_09_002.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**用户安装的插件**下，你将看到新的插件叫做**helloworld**：![在JIRA中加载插件](img/image_09_002.jpg)
- en: As you can see in the preceding screenshot, the **helloworld** add-on is now
    loaded in your JIRA instance. Also, the version information that we filled in
    while creating the plugin is visible here. The hyperlinked company name is also
    displayed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，**helloworld**插件现在已加载到你的JIRA实例中。此外，我们在创建插件时填写的版本信息也在这里显示。超链接的公司名称也显示在此处。
- en: Setting up the Eclipse IDE
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Eclipse IDE
- en: We have set up the development environment and installed the Atlassian SDK.
    You also learned how to create a skeleton plugin; apart from just showing up in
    the UPM, this plugin did not perform any other function. We will add a few functionalities
    to our plugin, but before that, let's configure the popular Eclipse IDE, which
    really assists in developing JIRA add-ons.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了开发环境并安装了Atlassian SDK。你还学习了如何创建一个骨架插件；除了在UPM中显示外，这个插件并没有执行其他功能。我们将向插件添加一些功能，但在此之前，让我们配置流行的Eclipse
    IDE，它确实有助于开发JIRA插件。
- en: Downloading the Eclipse IDE
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载Eclipse IDE
- en: 'The Eclipse IDE is used for development purposes in various programming languages,
    however, we will install the Eclipse IDE for Java EE Developers (Indigo). Perform
    the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse IDE用于多种编程语言的开发，但我们将安装适用于Java EE开发人员的Eclipse IDE（Indigo）。执行以下步骤：
- en: Download the Eclipse IDE for Java EE developers from [http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2](http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2](http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2)下载适用于Java
    EE开发人员的Eclipse IDE。
- en: Extract the content of the downloaded file in the `C:\eclipse` directory.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的文件内容提取到`C:\eclipse`目录中。
- en: Configuring Eclipse to start under the JDK
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Eclipse以在JDK下启动
- en: 'We need to tell our Eclipse IDE to start and use the JDK that we have already
    installed on our machine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要告诉Eclipse IDE启动并使用我们已经在计算机上安装的JDK：
- en: Open the `C:\eclipse\eclipse.ini` file.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`C:\eclipse\eclipse.ini`文件。
- en: 'Add a `-vm` entry before the `-vmargs` entry. We should define the JDK path
    here; the final `eclipse.ini` file should look similar to the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`-vmargs`条目之前添加`-vm`条目。我们需要在这里定义JDK的路径；最终的`eclipse.ini`文件应该类似于以下代码：
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Save and close the file.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: Updating the installed JREs in Eclipse
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新Eclipse中的已安装JRE
- en: 'The Eclipse JREs need to be updated with the ones that are currently installed
    in our JDK version. Perform the following steps if you are not sure whether you
    have the updated JREs or not:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 需要将Eclipse的JRE更新为我们当前安装在JDK版本中的JRE。如果你不确定是否已更新JRE，请执行以下步骤：
- en: In the menu bar, click on **Windows** | **Preferences**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单栏中，点击**窗口** | **首选项**。
- en: Double-click on the `C:\eclipse\eclipse.exe` application and it will start the
    Eclipse IDE.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`C:\eclipse\eclipse.exe`应用程序，它将启动Eclipse IDE。
- en: On the left-hand side, enter `Installed JREs`; this will filter down the list;
    after that, double-click on **Installed JREs**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧，输入`已安装JRE`；这将筛选出列表；之后，双击**已安装JRE**。
- en: On the right-hand side, click on the **Add** button and select **Standard VM**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧，点击**添加**按钮，选择**标准虚拟机**。
- en: In **JRE home**, enter `c:\java` as the location of the directory and click
    on the **Finish** button:![Updating the installed JREs in Eclipse](img/image_09_003.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**JRE主目录**中，输入`c:\java`作为目录位置，然后点击**完成**按钮：![更新Eclipse中的已安装JRE](img/image_09_003.jpg)
- en: Finally, the JREs will be updated, and it should look similar to the following
    screenshot:![Updating the installed JREs in Eclipse](img/image_09_004.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，JRE将会更新，应该类似于以下截图：![更新Eclipse中的已安装JRE](img/image_09_004.jpg)
- en: Installing the Maven plugin
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Maven插件
- en: 'The development of the JIRA add-ons is based on Maven, and there is an Eclipse
    plugin for Maven that needs to be installed. Perform the following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA插件的开发基于Maven，并且需要安装Maven的Eclipse插件。执行以下步骤：
- en: In the menu bar, click on **Help** | **Install New Software…**
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单栏中，点击**帮助** | **安装新软件…**
- en: In the **Available Software** window, click on the **Add** button.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**可用软件**窗口中，点击**添加**按钮。
- en: Enter the **Name** as `Sonatype M2Eclipse`. Enter `http://download.eclipse.org/technology/m2e/releases`
    as the **Location** and click on the **OK** button.![Installing the Maven plugin](img/image_09_005.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**名称**为`Sonatype M2Eclipse`，在**位置**中输入`http://download.eclipse.org/technology/m2e/releases`，然后点击**确定**按钮。![安装Maven插件](img/image_09_005.jpg)
- en: Select **Maven Integration for Eclipse** and click on the **Finish** button.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Eclipse的Maven集成**，然后点击**完成**按钮。
- en: Finally, restart Eclipse for these changes to take effect.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，重启Eclipse以使这些更改生效。
- en: Configuring the Maven plugin
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Maven插件
- en: 'Finally, we need to tell the Maven Eclipse plugin the location of Maven on
    our machine. The Maven directory is placed in the `ATLAS Home` directory. You
    can run the `atlas-version` command on your machine to find out the exact location
    of `ATLAS Maven Home`. Just copy this location and perform the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要告诉Maven Eclipse插件Maven在我们机器上的位置。Maven目录位于`ATLAS Home`目录中。你可以在你的机器上运行`atlas-version`命令，找出`ATLAS
    Maven Home`的确切位置。只需复制该位置并执行以下步骤：
- en: In the menu bar, click on **Windows** | **Preferences**.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单栏中，点击**窗口** | **首选项**。
- en: On the left-hand side, enter `Maven`; it will filter down the options available
    for **Maven**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧，输入`Maven`，它将筛选出可用的**Maven**选项。
- en: Click on **Installations** and then click on the **Add** button.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，然后点击**添加**按钮。
- en: The **Installation type** should be **External**. Copy the `ATLAS Maven Home`
    directory and click on the **Finish** button.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装类型**应选择**外部**。复制`ATLAS Maven Home`目录并点击**完成**按钮。'
- en: Now we are all set to start developing our JIRA add-ons using Eclipse.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已准备好使用Eclipse开始开发我们的JIRA插件。
- en: Adding functionality to the skeleton plugin
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向骨架插件添加功能
- en: The helloworld plugin (which we created earlier) lacks any functionality; we
    loaded the plugin in JIRA, but it didn't do anything apart from just showing up
    in the UPM. Now that we have also configured the Eclipse IDE, let's add a few
    functionalities to our helloworld plugin.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 之前创建的helloworld插件没有任何功能；我们将插件加载到JIRA中，但除了在UPM中显示之外，它没有执行任何操作。现在我们已经配置好了Eclipse
    IDE，让我们为helloworld插件添加一些功能。
- en: As an example, we will add a custom link in the JIRA main navigation bar using
    this plugin.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将使用此插件在JIRA主导航栏中添加一个自定义链接。
- en: Importing the helloworld plugin in Eclipse
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Eclipse中导入helloworld插件
- en: 'We can use the Eclipse IDE and import our plugin, but before we do that, there
    are Eclipse configuration files that need to be generated in the `helloworld`
    plugin project. Perform the following steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Eclipse IDE并导入我们的插件，但在此之前，需要在`helloworld`插件项目中生成Eclipse配置文件。请执行以下步骤：
- en: In cmd, navigate to the `C:\atlastutorial\helloworld` directory.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在cmd中，导航到`C:\atlastutorial\helloworld`目录。
- en: 'Enter the following command and press *Enter*:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令并按*回车*：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command will return the following message:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令将返回以下信息：
- en: '[PRE13]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we are ready to import the plugin in Eclipse. In the menu bar, click on
    **File** | **Import…**
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备好在Eclipse中导入插件了。在菜单栏中，点击**文件** | **导入…**
- en: Select **Existing Projects into Workspace** under **General** and click on the
    **Next** button.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**常规**下选择**将现有项目导入工作空间**，然后点击**下一步**按钮。
- en: Enter `C:\atlastutorial\helloworld` in the **Select root** directory and click
    on the **Finish** button.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择根目录**中输入`C:\atlastutorial\helloworld`，然后点击**完成**按钮。
- en: Now you should see the `helloworld` plugin project loaded on the left-hand side
    under **Project Explorer**, as shown in the following screenshot. If you notice
    the welcome screen in your SDK, then close it.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该可以在左侧的**项目资源管理器**下看到加载的`helloworld`插件项目，如下图所示。如果你在SDK中看到欢迎屏幕，请将其关闭。
- en: '![Importing the helloworld plugin in Eclipse](img/image_09_006.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![在Eclipse中导入helloworld插件](img/image_09_006.jpg)'
- en: Creating a menu in JIRA's top navigation bar
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在JIRA顶部导航栏中创建菜单
- en: We will use a very simple example to help us understand how to add new functionalities
    in JIRA. You are already familiar with JIRA's top navigation bar. From the JIRA
    frontend, it's not possible to add a new menu item to it; however, we will modify
    our `helloworld` plugin to add this menu item.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个非常简单的示例来帮助我们理解如何在JIRA中添加新功能。你已经熟悉了JIRA的顶部导航栏。从JIRA前端来看，无法向其添加新菜单项；然而，我们将修改我们的`helloworld`插件来添加此菜单项。
- en: 'The JIRA functionality and the behavior of its various sections are controlled
    by various modules. If we want to make any modifications to JIRA''s top navigation
    bar, then we need to add two modules called `Web Section` and `Web Item`. Perform
    the following steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA的功能和各个部分的行为由不同的模块控制。如果我们想修改JIRA的顶部导航栏，就需要添加两个模块，分别是`Web Section`和`Web Item`。请按照以下步骤操作：
- en: In the cmd, navigate to the `c:\atlastutorial\helloworld` directory.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，导航到`c:\atlastutorial\helloworld`目录。
- en: 'Enter the following command and press *Enter*:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令并按下*Enter*键：
- en: '[PRE14]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To learn more about plugin modules, refer to theURL: [https://developer.atlassian.com/docs/getting-started/plugin-modules](https://developer.atlassian.com/docs/getting-started/plugin-modules).'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要了解更多关于插件模块的信息，请参考此网址：[https://developer.atlassian.com/docs/getting-started/plugin-modules](https://developer.atlassian.com/docs/getting-started/plugin-modules)。
- en: The command will respond and prompt you to enter a specific number for various
    modules. Type `30` for `Web Section`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令将响应并提示你为不同模块输入一个特定的数字。输入`30`以选择`Web Section`。
- en: 'The command will again respond and ask you to provide certain inputs. Use the
    values as mentioned in the following table:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令将再次响应，并要求你提供某些输入。请使用以下表格中提到的值：
- en: '| `Enter Plugin Module Name` | `mySection` |'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `输入插件模块名称` | `mySection` |'
- en: '| `Enter Location` | `contact-us-links` |'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `输入位置` | `contact-us-links` |'
- en: '| `Show Advanced Setup?` | *N* |'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `显示高级设置？` | *N* |'
- en: The command will ask you, **Add Another Plugin Module?** Press  ***Y*** .
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令会询问你，**是否添加另一个插件模块？** 按下 ***Y*** 键。
- en: The command will respond and prompt you to enter a specific number for various
    modules. Type `25` for `Web Item`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令将响应并提示你为不同模块输入一个特定的数字。输入`25`以选择`Web Item`。
- en: 'The command will again respond and ask you to provide certain inputs. Use the
    values as mentioned in the following table:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令将再次响应，并要求你提供某些输入。请使用以下表格中提到的值：
- en: '| `Enter Plugin Module Name` | `Contact Us` |'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `输入插件模块名称` | `联系我们` |'
- en: '| `Enter Section` | `system.top.navigation.bar` |'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `输入部分` | `system.top.navigation.bar` |'
- en: '| `Enter Link URL` | `http://www.sparxsys.com/contact` |'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `输入链接网址` | `http://www.sparxsys.com/contact` |'
- en: '| `Show Advanced Setup?` | *N* |'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `显示高级设置？` | *N* |'
- en: The command will ask you to **Add Another Plugin Module?** Press  ***N*** .
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令会询问你，**是否添加另一个插件模块？** 按下 ***N*** 键。
- en: Run the `atlas-run` command from within your plugin project directory. Once
    JIRA starts running, open it in the browser:![Creating a menu in JIRA's top navigation
    bar](img/image_09_007.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的插件项目目录中运行`atlas-run`命令。JIRA启动后，使用浏览器打开它：![在JIRA顶部导航栏创建菜单](img/image_09_007.jpg)
- en: You should now see a new menu item called **Contact Us**, which we have added
    from our `helloworld` plugin.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能看到一个新的菜单项，名为**联系我们**，这是我们从`helloworld`插件中添加的。
- en: We have just started to add the functionality in the skeleton plugin project.
    Although all we did was add a link to the JIRA navigation bar, there is a lot
    more that can be done.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚开始在框架插件项目中添加功能。尽管我们所做的只是向JIRA导航栏添加了一个链接，但还有很多其他功能可以实现。
- en: If you are starting JIRA add-on development, then start by going through the
    tutorials mentioned on the Atlassian website at [https://developer.atlassian.com/docs/getting-started/tutorials](https://developer.atlassian.com/docs/getting-started/tutorials).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开始JIRA插件开发，可以先浏览Atlassian网站上提到的教程：[https://developer.atlassian.com/docs/getting-started/tutorials](https://developer.atlassian.com/docs/getting-started/tutorials)。
- en: So far in this chapter, we have discussed creating add-ons that extend JIRA's
    functionalities, but it's also possible to interact with JIRA from other applications
    as well. JIRA comes with the **REST API**, which allows you to manipulate JIRA's
    data and configurations from external applications. The JIRA API that adheres
    to the principles of REST does not require the client to know anything about the
    structure of the API. Rather, the server needs to provide whatever information
    the client needs to interact with the service.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了创建扩展JIRA功能的插件，但同样也可以从其他应用程序与JIRA进行交互。JIRA提供了**REST API**，允许你从外部应用程序操作JIRA的数据和配置。符合REST原则的JIRA
    API不要求客户端了解API的结构，而是服务器需要提供客户端与服务交互所需的任何信息。
- en: Various programming languages are capable of making REST calls. In the following
    section, we will discuss how to interact with JIRA REST APIs, along with some
    examples in detail.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 各种编程语言都能够进行REST调用。在接下来的部分，我们将详细讨论如何与JIRA的REST API进行交互，并提供一些示例。
- en: JIRA Cloud add-ons with an Atlassian Connect framework
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Atlassian Connect框架的JIRA Cloud插件
- en: We have just seen how to develop an add-on for a JIRA Server instance that you
    host on your own server. However, a lot of organizations also use an Atlassian
    Cloud instance, which is a hosted environment; it doesn't require any installation.
    You just sign up online and pay for the usage. The Atlassian Cloud instance comes
    with most of the features that JIRA Server offers. Many organizations prefer to
    use a cloud instance as there is no hassle to manage the server yourself. The
    procedure to develop an add-on for cloud is different. If you want to learn that,
    please follow the documentation at [https://developer.atlassian.com/static/connect/docs/latest/guides/introduction.html](https://developer.atlassian.com/static/connect/docs/latest/guides/introduction.html).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到如何为你自己托管的 JIRA Server 实例开发插件。然而，许多组织也使用 Atlassian Cloud 实例，这是一个托管环境；它不需要任何安装。你只需在线注册并为使用付费。Atlassian
    Cloud 实例提供了大多数 JIRA Server 的功能。许多组织更倾向于使用云实例，因为不需要自己管理服务器。开发云插件的过程有所不同。如果你想了解如何做，请参考[https://developer.atlassian.com/static/connect/docs/latest/guides/introduction.html](https://developer.atlassian.com/static/connect/docs/latest/guides/introduction.html)中的文档。
- en: If you plan to sell your add-on on the Atlassian marketplace then it is a good
    idea to develop the add-on for both JIRA Server and JIRA Cloud.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在 Atlassian 市场上销售你的插件，那么为 JIRA Server 和 JIRA Cloud 都开发插件是个不错的主意。
- en: Leveraging the JIRA REST API
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 JIRA REST API
- en: We have discussed how to start building add-ons that extend JIRA's functionalities.
    The add-ons are integrated very closely with JIRA's existing features; however,
    there are times when you need to add a few functionalities on top of JIRA so that
    other tools can interact with JIRA. JIRA provides access to various operations
    via REST.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何开始构建扩展 JIRA 功能的插件。这些插件与 JIRA 的现有功能紧密集成；然而，有时你需要在 JIRA 之上添加一些功能，以便其他工具能够与
    JIRA 进行交互。JIRA 通过 REST 提供了对各种操作的访问。
- en: Examples of a few operations that can be performed via REST
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 REST 可以执行的一些操作示例
- en: Issue operations such as create/modify/delete issues
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题操作，如创建/修改/删除问题
- en: Search issues
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索问题
- en: Create users
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户
- en: Group management operations like adding/removing users from a group
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 群组管理操作，如向群组添加/移除用户
- en: There are a lot of resources that are available through REST API. You can get
    the detailed list of all the resources at [https://docs.atlassian.com/jira/REST/latest/](https://docs.atlassian.com/jira/REST/latest/).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 REST API 可以访问很多资源。你可以在 [https://docs.atlassian.com/jira/REST/latest/](https://docs.atlassian.com/jira/REST/latest/)
    获取所有资源的详细列表。
- en: Use cases of JIRA REST API
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIRA REST API 的使用案例
- en: 'Having the ability to interact with JIRA through external applications opens
    up a lot of possibilities. Let''s take a look at some of the use cases of functionality
    that can be built on top of JIRA:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过外部应用程序与 JIRA 进行交互的能力开启了许多可能性。让我们来看一下可以在 JIRA 上构建的功能的一些使用案例：
- en: Generating business intelligence reports
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成业务智能报告
- en: Generating bulk operations in JIRA
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JIRA 中生成批量操作
- en: Building a custom interface for clients
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为客户构建自定义界面
- en: Generating business intelligence reports
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成业务智能报告
- en: JIRA comes with a lot of readymade reports, which we discussed in detail in
    [Chapter 3](ch03.html "Chapter 3. Reporting – Using Charts to Visualize the Data"),
    *Reporting - Charts to visualize the data*, but companies use the business intelligence tools
    to generate reports that are customized to their needs; in JIRA, all the data
    is stored in issues, which can be fetched from REST API.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 提供了很多现成的报告，我们在[第3章](ch03.html "第3章. 报告 – 使用图表可视化数据")中已详细讨论过，*报告 - 使用图表可视化数据*，但公司通常使用业务智能工具生成根据其需求定制的报告；在
    JIRA 中，所有数据都存储在问题中，可以通过 REST API 获取。
- en: Bulk operations in JIRA
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 JIRA 中执行批量操作
- en: System administrators in JIRA are often faced with situations where they need
    to perform various operations in bulk. For instance, if a new team in the company
    wants to start using JIRA, then several user accounts need to be created. JIRA's
    REST API provides the resources to create a user account. After the accounts are
    created, they also need to be added to the correct group. Although the JIRA group
    management interface already provides the mechanism to modify user groups by entering
    their usernames as a comma-separated list, modifying groups can also be done via
    the REST API.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA的系统管理员常常遇到需要批量执行各种操作的情况。例如，如果公司中一个新团队想开始使用JIRA，那么需要创建多个用户帐户。JIRA的REST API提供了创建用户帐户的资源。帐户创建后，还需要将它们添加到正确的组中。尽管JIRA的组管理界面已经提供了通过输入用户名列表（以逗号分隔）的机制来修改用户组，但也可以通过REST
    API来修改组。
- en: The scripts can be created to perform such bulk operations, and they can be
    run whenever it is needed.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建脚本来执行这些批量操作，并且可以在需要时运行它们。
- en: Building a custom interface for clients
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为客户构建自定义界面
- en: We have already seen that it's very easy to customize permissions in JIRA and
    give limited access of your JIRA instance to your clients. However, it's also
    possible to create a simple web interface that has a login box for authentication,
    a form to raise tickets, and a simple list of issues for a particular project
    or client. This web application can internally interact with JIRA, and it acts
    like the backend to store and retrieve client tickets.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，在JIRA中定制权限并为客户提供有限访问权限非常容易。然而，也可以创建一个简单的Web界面，具有用于认证的登录框、提交工单的表单，以及一个特定项目或客户的简单问题列表。这个Web应用可以与JIRA内部交互，并充当后端来存储和检索客户的工单。
- en: JIRA's REST API Browser
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JIRA的REST API 浏览器
- en: REST calls are made by calling the `http://jira.sparxsys.com/rest/api/2/RESOURCE
    URL`, and most programming languages (such as Java and PHP) support them; however,
    before you can develop the functionalities to interact with JIRA using REST, you
    need to test it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`http://jira.sparxsys.com/rest/api/2/RESOURCE URL`进行REST调用，大多数编程语言（如Java和PHP）都支持它；然而，在你能够开发与JIRA进行REST交互的功能之前，需要先进行测试。
- en: 'The Atlassian SDK that you have installed comes with a nifty tool called **REST
    API Browser**. It helps you explore the APIs and also test them. Perform these
    steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你安装的Atlassian SDK附带了一个非常方便的工具，叫做**REST API 浏览器**。它帮助你探索和测试API。执行以下步骤：
- en: Run the `atlas-run` command, as we did earlier in this chapter. It will start
    the JIRA instance.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`atlas-run`命令，就像我们在本章前面做的那样。它将启动JIRA实例。
- en: Enter `http://localhost:2990/jira` in your browser; the exact URL will also
    be displayed by the command.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中输入`http://localhost:2990/jira`；该URL也会通过命令显示出来。
- en: Enter `admin` for both the username and password.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`admin`作为用户名和密码。
- en: Go to JIRA **Administrator** | **System** | **REST API Browser** (under **ADVANCED**).
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入JIRA **管理员** | **系统** | **REST API 浏览器**（在**高级**下）。
- en: On the left-hand side, you will find the list of all the resources that REST
    API has to offer:![JIRA's REST API Browser](img/image_09_008.jpg)
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧，你会找到REST API所提供的所有资源列表：![JIRA的REST API 浏览器](img/image_09_008.jpg)
- en: Click on any one of the resources, and on the right-hand side of the main window;
    this particular resource can be tested by passing optional parameters.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任何一个资源，在主窗口的右侧；该资源可以通过传递可选参数进行测试。
- en: Let's take a look at some examples to test REST API.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些例子来测试REST API。
- en: Fetching user details
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取用户详情
- en: 'On the left-hand side, either scroll or navigate to find **api/2/user** and
    click on it:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，滚动或导航以查找**api/2/user**并点击它：
- en: '![Fetching user details](img/image_09_009.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![获取用户详情](img/image_09_009.jpg)'
- en: 'Enter `admin` as the value in the **username** parameter and click on the **Send**
    button. You will see the following response:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在**用户名**参数中输入`admin`作为值，并点击**发送**按钮。你将看到以下响应：
- en: '![Fetching user details](img/image_09_010.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![获取用户详情](img/image_09_010.jpg)'
- en: 'The response is actually in a JSON format, and you can see that it has returned
    the details of the `admin` user. However, the groups that this user is a part
    of are not returned in this response, but it''s possible to fetch this information
    as well. Perform these steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 响应实际上是JSON格式的，你可以看到它返回了`admin`用户的详细信息。然而，这个用户所属的组在这个响应中没有返回，但也可以获取到这些信息。执行以下步骤：
- en: Click on the **+**Parameter**** button on the right-hand side.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧的**+**参数按钮。
- en: Enter `expand` in the **Parameter** column.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Parameter**列中输入`expand`。
- en: Enter `groups` in the **Value** column.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Value**列中输入`groups`。
- en: Click on the **Send** button again.![Fetching user details](img/image_09_011.jpg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**Send**按钮。![获取用户详情](img/image_09_011.jpg)
- en: 'The following response is generated:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是生成的响应：
- en: '![Fetching user details](img/image_09_012.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![获取用户详情](img/image_09_012.jpg)'
- en: You can see that in the new response the groups that this user belongs to are
    also fetched by specifying the additional parameter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在新的响应中，通过指定额外的参数，这个用户所属的组也被获取到了。
- en: JIRA REST API Browser is a great tool to help you get familiar with all the
    available resources, and it really assists in development.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA REST API浏览器是一个很好的工具，可以帮助你熟悉所有可用的资源，并且在开发中非常有帮助。
- en: Sample code to interact with the REST API
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与REST API交互的示例代码
- en: The REST API is supported by a variety of languages (such as Java, PHP, Python,
    and so on). In this chapter, we will discuss a couple of code examples in the
    PHP language. PHP is a popular language used in web applications. The following
    examples are written in PHP, but even if you are familiar with other languages,
    such as Java, then you should be able to understand the concept explained here.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: REST API支持多种编程语言（如Java、PHP、Python等）。在本章中，我们将讨论几个PHP语言的代码示例。PHP是一种广泛用于Web应用程序的流行语言。以下示例采用PHP编写，但即使你熟悉其他语言，如Java，你也应该能够理解这里解释的概念。
- en: To install PHP quickly, along with Apache, the `XAMPSERVER` package can be installed
    from [https://www.apachefriends.org/](https://www.apachefriends.org/).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速安装PHP和Apache，可以从[https://www.apachefriends.org/](https://www.apachefriends.org/)安装`XAMPSERVER`包。
- en: Creating an issue using PHP
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用PHP创建问题
- en: 'The sample code `create_issue.php` is used to create an issue using PHP as
    follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码`create_issue.php`用于使用PHP创建一个问题，代码如下：
- en: '[PRE15]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code creates an issue in a JIRA project with the `GEN` project
    key and the `Task` issue type. Let's understand what this code does.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在JIRA项目中创建了一个问题，项目密钥是`GEN`，问题类型是`Task`。让我们理解一下这段代码的作用。
- en: Authenticating with JIRA
  id: totrans-216
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 与JIRA进行身份验证
- en: 'First, we need to define our JIRA URL, username, and password for authentication.
    Note that this user should have the permission to create the issue in the project:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义我们的JIRA URL、用户名和密码进行身份验证。请注意，这个用户应该具有在项目中创建问题的权限：
- en: '[PRE16]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Making the REST call to create the issue
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 发起REST调用以创建问题
- en: 'The `curl_exec()` PHP function is used to make the REST call using the `curl`
    protocol. This function accepts the parameters to make the REST call. The username,
    password, and the issue data are passed in the following code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl_exec()` PHP函数用于通过`curl`协议发起REST调用。这个函数接受参数来进行REST调用。用户名、密码和问题数据在下面的代码中传递：'
- en: '[PRE17]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Issuing data and printing the output
  id: totrans-222
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 发出数据并打印输出
- en: 'The issue that needs to be created has a lot of information, such as the project
    key, summary, description, and issue type. This information is stored in the array.
    Finally, the output is printed when the code is run:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 需要创建的问题包含很多信息，如项目密钥、摘要、描述和问题类型。这些信息存储在数组中。最后，当代码运行时，输出会被打印出来：
- en: '[PRE18]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After you run the PHP code, you will get an output, as shown in the following
    command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 运行PHP代码后，你将得到一个输出，显示如下命令：
- en: '[PRE19]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Fetching issue details using PHP
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用PHP获取问题详情
- en: 'The previous example was quite simple, where we created the issue using the
    REST API. Now, let''s look at how to fetch the issue details that we just created:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例很简单，我们通过REST API创建了一个问题。现在，让我们看看如何获取我们刚创建的问题详情：
- en: '[PRE20]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is a simple code that is just fetching the details of the `GEN-1` issue,
    which we created in the previous example. The output returned by the REST API
    is a JSON file. We have converted the JSON data to an array using the `json_decode()`
    PHP function and printed it using the `print_r()` function.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的代码，主要获取我们在前一个示例中创建的`GEN-1`问题的详细信息。REST API返回的输出是一个JSON文件。我们使用`json_decode()`
    PHP函数将JSON数据转换为数组，并通过`print_r()`函数打印出来。
- en: The previous code can be used to fetch user and group details; just change the
    `$url` variable.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码可以用来获取用户和组的详细信息；只需更改`$url`变量即可。
- en: Summary
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to develop add-ons for JIRA. If you already
    have a working knowledge of Java, and have worked on Maven, then you have a good
    opportunity to learn add-on development for JIRA and other Atlassian tools. Whenever
    the existing functionality is not sufficient to serve your needs, you can always
    develop add-ons for JIRA. These add-ons are developed in the Java language and
    also utilize Apache Maven for build automation. In this chapter, we discussed
    how to set up the development environment and the Eclipse IDE. We also created
    a skeleton plugin project.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何为JIRA开发插件。如果你已经掌握了Java知识，并且有使用Maven的经验，那么你将有很好的机会学习JIRA和其他Atlassian工具的插件开发。每当现有功能无法满足需求时，你总是可以为JIRA开发插件。这些插件是用Java语言开发的，并且利用Apache
    Maven进行构建自动化。在本章中，我们讨论了如何设置开发环境和Eclipse IDE，并且创建了一个骨架插件项目。
- en: In the next chapter, you will learn how to migrate data to JIRA using the CSV
    file. JIRA provides migration tools for Bugzilla, Mantis, and a few other issue
    trackers, but if your existing issue tracker has a lot of customizations, then
    it's always preferable to migrate the data using CSV import, which is quite powerful.
    With careful planning, it can import complex data into JIRA. We will also take
    a look at the major aspects of JIRA's CSV import.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何通过CSV文件将数据迁移到JIRA。JIRA为Bugzilla、Mantis以及其他一些问题追踪工具提供了迁移工具，但如果你现有的问题追踪工具有大量定制化内容，那么使用CSV导入迁移数据总是更为优选，这非常强大。通过细致的规划，它可以将复杂的数据导入到JIRA中。我们还将查看JIRA的CSV导入的主要方面。
