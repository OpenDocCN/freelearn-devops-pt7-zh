- en: Extending Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Ansible
- en: Ansible has matured over the years to support a wide variety of technologies,
    tools, operating systems, and processes. Its flexible architecture and modular
    implementation make it ideal for DevOps oriented groups with varying or diverse
    requirements. The extensible architecture that comprises Ansible was designed
    to support the creation of modules and expand the Ansible solution to fit the
    user's needs. As a result, Ansible itself and many of its now core modules derive
    from once available plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Ansible已成熟，支持各种技术、工具、操作系统和流程。其灵活的架构和模块化的实现使其成为DevOps导向团队的理想选择，能够满足不同或多样的需求。Ansible所包含的可扩展架构旨在支持模块的创建，并将Ansible解决方案扩展以满足用户需求。因此，Ansible本身及其许多现在成为核心的模块都源于曾经存在的插件。
- en: Throughout the years, Ansible's creators added numerous API hooks and architectures
    in an effort to support expanding Ansible itself via a wide variety of means.
    The end result of this effort was a highly extensible system, which was leveraged
    by developers to create a significant amounts of additional core functionality.
    A plugin system!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Ansible的创造者增加了许多API钩子和架构，以支持通过各种方式扩展Ansible本身。这项努力的最终成果是一个高度可扩展的系统，开发人员利用它创建了大量额外的核心功能——一个插件系统！
- en: Over the years, the Ansible plugin and module system have expanded out and taken
    a more central role in Ansible's core architecture. The once clumsily conglomerated
    extension system has been refined into a well-architected and implemented plugin
    solution. The once haphazardly implemented extension points have been refined
    to become a robust and highly capable module API. As a result of these improvements,
    the plugin and module systems have evolved significantly since its infantile stages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Ansible插件和模块系统不断扩展，逐渐在Ansible核心架构中占据了更为中心的角色。曾经笨重的扩展系统已经被精炼为一个架构良好、实施成熟的插件解决方案。曾经不规范的扩展点经过改进，成为了一个强大且高效的模块API。由于这些改进，插件和模块系统自最初阶段以来已经经历了显著的发展。
- en: 'In this chapter, we are going to take a tour of the Ansible module and plugin
    architecture. We are going to explore the inner workings of the Ansible architecture
    and APIs. We are going to dive into Python development and leverage it to create
    some custom modules and plugin extensions that will enhance our Ansible implementations
    to support custom needs. Specifically, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将参观Ansible的模块和插件架构。我们将探索Ansible架构和API的内部工作原理。我们将深入Python开发，并利用它创建一些自定义模块和插件扩展，增强我们的Ansible实现，以支持定制化需求。具体来说，我们将覆盖以下主题：
- en: Understanding Ansible Plugins and its Architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Ansible插件及其架构
- en: Setting Up the Ansible Module Development Environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Ansible模块开发环境
- en: Developing a HelloWorld Ansible Module and Extending it
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个HelloWorld Ansible模块并扩展它
- en: Setting Up a Plugin Development Environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置插件开发环境
- en: Understanding the Different Types of Plugins
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解不同类型的插件
- en: As we embark on this quest to learn about the Ansible plugin system, take careful
    note of the syntax and formatting to ensure the code is kept clean and unambiguous.
    By following this general rule of thumb, you will learn how to create and deliver
    high-quality Ansible extensions. Let's get started.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始学习Ansible插件系统的过程中，请仔细注意语法和格式，以确保代码保持清晰和无歧义。通过遵循这一通用规则，您将学会如何创建和交付高质量的Ansible扩展。让我们开始吧。
- en: Understanding Ansible Plugins and its Architecture
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Ansible插件及其架构
- en: 'Ansible''s implementation is highly modular. A modular architecture provides
    a high level of encapsulation (keeping concerns segregated and preventing them
    from cross-contaminating). The plugin solution within Ansible''s subsystems is
    architected in order to keep additions organized and encapsulated. This architecture
    is divided into distinct subsystems. The most critical subsystems for Ansible
    plugins and modules and modules are defined as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的实现具有高度的模块化。模块化架构提供了高水平的封装（将不同的关注点隔离开，避免它们相互影响）。Ansible子系统中的插件解决方案经过精心设计，以保持添加内容的有序性和封装性。该架构被划分为不同的子系统。以下是定义Ansible插件和模块最关键的子系统：
- en: The Ansible Core modules
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible核心模块
- en: Ansible configs
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible配置
- en: Custom modules
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义模块
- en: The Ansible Python API
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible Python API
- en: 'To better describe the vague list just provided, the following diagram provides
    an illustrated view of the Ansible architecture:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地描述刚刚提供的模糊列表，以下图表提供了 Ansible 架构的示意图：
- en: '![](img/c6ae4b76-d6a1-4f05-b680-91de26f31b8f.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6ae4b76-d6a1-4f05-b680-91de26f31b8f.jpg)'
- en: The preceding diagram highlights three of the most critical subsystems for Ansible
    plugin and module development. The **Core Modules**, the **Custom Modules**, and
    the **Ansible Python API**. This stack provides a comprehensive set of components
    for extending Ansible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图表突出了 Ansible 插件和模块开发中三个最关键的子系统：**核心模块**、**自定义模块**和 **Ansible Python API**。这个堆栈为扩展
    Ansible 提供了一整套组件。
- en: 'In Ansible, there are two distinct ways to extend the Ansible Core solution.
    These are described as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible 中，扩展 Ansible 核心解决方案有两种不同的方式。具体描述如下：
- en: '**Ansible plugins**: Plugins in Ansible extend the core functionality of the
    master system and provide additional functionality to the control server.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible 插件**：Ansible 插件扩展了主系统的核心功能，并为控制服务器提供附加功能。'
- en: '**Ansible modules:** Modules in Ansible extend the capabilities of playbooks
    running on target systems. These would be the systems that Ansible runs its playbooks
    on.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible 模块**：Ansible 模块扩展了在目标系统上运行的 playbook 的功能。目标系统是 Ansible 执行 playbook
    的系统。'
- en: 'These two distinctions are quite important as it defines the scope of the development.
    Let''s take a look at a simple Ansible playbook so we can better understand the
    role Ansible modules play within the Ansible architecture:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个区别非常重要，因为它决定了开发的范围。我们来看一个简单的 Ansible playbook，以便更好地理解 Ansible 模块在 Ansible
    架构中的作用：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Based on the preceding playbook, can you determine how modules are used? No?
    Let''s examine this playbook more closely:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的 playbook，你能确定模块是如何使用的吗？不行？我们来仔细看看这个 playbook：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you guessed that the module name is `<yum>`, you would be correct. Tasks
    represented in the playbook form are simply module calls. If this is the case,
    then we would logically ask ourselves "When should I create my own modules?"
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你猜测模块名称是`<yum>`，那么你是正确的。以 playbook 形式表示的任务实际上就是模块调用。如果是这种情况，我们可以合理地问自己：“我应该在什么时候创建自己的模块？”
- en: When should we create a module?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们什么时候应该创建一个模块？
- en: 'The most obvious question at this point is when and why you would want to develop
    your own Ansible modules. The answer is most of the time you actually won''t want
    to. But there are cases where you may need to. Some examples of this are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，最明显的问题是：你什么时候以及为什么要开发自己的 Ansible 模块？答案是大多数时候你其实并不需要。但是也有一些情况下，你可能需要开发自己的模块。以下是一些例子：
- en: When communication with a specific API feels clumsy or arduous
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当与特定 API 的通信显得笨拙或困难时
- en: To do something custom that Ansible does not have native support for
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 做一些 Ansible 本身没有原生支持的定制操作
- en: To communicate with an internal process or software that does not have an already
    developed Ansible module
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与没有现成 Ansible 模块的内部进程或软件进行通信
- en: Generally, if you want to write an Ansible module and the software solution
    was created by a third-party (open source, commercial, and so on), it makes sense
    to check the Ansible modules for out-of-the-box support before jumping in and
    writing code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你想编写一个 Ansible 模块，而该软件解决方案是由第三方（如开源、商业等）创建的，最好在编写代码之前先检查 Ansible 模块是否已经提供了现成的支持。
- en: In the next section, we will take a look at how to set up the Ansible development
    environment, where the Ansible module code should be stored and how it should
    be organized. Let's proceed, shall we?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看如何设置 Ansible 开发环境，Ansible 模块代码应该存储在哪里，以及如何组织这些代码。我们继续吧，好吗？
- en: Setting Up the Ansible Module Development Environment
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Ansible 模块开发环境
- en: In this section, we will discuss how to set up a local Linux environment for
    Ansible module development. In our specific implementation, we will look at how
    to do this in Ubuntu. However, the same set of configuration options should work
    under other Linux flavors as well. As new Ansible module developers, we will want
    to begin by understanding how to configure our system to best support Ansible
    development, how to setup the modules path, and how to configure the environment
    for testing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何为 Ansible 模块开发设置本地 Linux 环境。在我们具体的实现中，我们将看看如何在 Ubuntu 中做到这一点。然而，其他
    Linux 发行版下的相同配置选项也应该适用。作为新手 Ansible 模块开发者，我们首先要了解如何配置我们的系统以最好地支持 Ansible 开发，如何设置模块路径，以及如何配置环境进行测试。
- en: 'The first step to getting a development environment up and running is to understand
    the Ansible library path on the system. This path is where Ansible will search
    for additional libraries. The default value for the library path is defined within
    the primary Ansible configuration file (`/etc/ansible/ansible.cfg`). The line
    item is shown as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 启动开发环境的第一步是了解系统上的 Ansible 库路径。这个路径是 Ansible 用来搜索其他库的地方。库路径的默认值在主 Ansible 配置文件（`/etc/ansible/ansible.cfg`）中定义。该行项如下所示：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While the default path is defined within the Ansible configuration file, it
    can be manipulated at runtime by specifying the `--module-path` on the command
    line when launching Ansible.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然默认路径在 Ansible 配置文件中定义，但也可以在运行时通过在启动 Ansible 时指定 `--module-path` 来修改该路径。
- en: 'In addition to the `--module-path` switch, we can also override the default
    modules path via a system-level environment variable. An example of how to do
    this is provided next:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `--module-path` 开关外，我们还可以通过系统级环境变量覆盖默认的模块路径。如何操作的示例如下：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When developing and using Ansible modules, the most preferred location to store
    the modules is next to the playbook itself within a `./library` directory. This
    would involve creating a directory structure that looks like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发和使用 Ansible 模块时，最常见的存储模块的位置是在 playbook 本身旁边的 `./library` 目录中。这将涉及创建如下所示的目录结构：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Within the preceding structure, we could leverage the tasks available within
    the playbook. Pretty nice, right? These are the basics of setting up the development
    environment using Ansible. From here, we should probably also set up some basic
    debugging and lint solutions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述结构中，我们可以利用 playbook 中可用的任务。非常不错，对吧？这些就是使用 Ansible 设置开发环境的基础。从这里开始，我们可能还需要设置一些基本的调试和
    lint 解决方案。
- en: Ansible module testing tool setup
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 模块测试工具设置
- en: 'Ansible developers have implemented and released a pretty helpful tool to debug
    syntax and format issues within Ansible plugins and modules. This linter is quite
    useful indeed. To install the linter, execute the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 开发者已经实现并发布了一个非常有用的工具，用于调试 Ansible 插件和模块中的语法和格式问题。这个 linter 确实非常有用。要安装
    linter，请执行以下命令：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Upon executing the preceding command, we should see the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，我们应该看到以下输出：
- en: '![](img/1beefb9b-99fe-404a-9bac-22fac8eb609d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1beefb9b-99fe-404a-9bac-22fac8eb609d.png)'
- en: 'Now that we have the lint tool installed, let''s check it out to make sure
    it''s installed. Try the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 lint 工具，让我们检查一下它是否安装成功。尝试执行以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By executing the preceding command, we should see the following output on the
    console:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令后，我们应该在控制台上看到以下输出：
- en: '![](img/c28eeb38-a9e2-4e7f-b55f-dee736c2cb72.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c28eeb38-a9e2-4e7f-b55f-dee736c2cb72.png)'
- en: Nice, right? From here, we will want to set up the Ansible module test solution.
    Let's proceed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，对吧？接下来，我们将设置 Ansible 模块测试解决方案。让我们继续。
- en: Developing Hello World Ansible Module
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 Hello World Ansible 模块
- en: Now that we have a basic development environment setup, we are going to explore
    how to create Ansible modules by taking a look at the obligatory Hello World Ansible
    module implementation. By creating a Hello World module, we can get our feet wet
    in Ansible module development and learn the basic structures required for a successful
    implementation. Let's get started!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了基本的开发环境，接下来我们将通过查看必备的 Hello World Ansible 模块实现来探索如何创建 Ansible 模块。通过创建一个
    Hello World 模块，我们可以在 Ansible 模块开发中迈出第一步，并学习成功实现所需的基本结构。让我们开始吧！
- en: 'To begin our *Hello World* module, let''s create a directory structure that
    reflects the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的*Hello World*模块，让我们创建一个符合以下截图的目录结构：
- en: '![](img/dc638bef-6a01-41c3-bd3b-4a25f775209a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc638bef-6a01-41c3-bd3b-4a25f775209a.png)'
- en: 'Once this structure has been created, let''s begin filling in our Ansible Hello
    World module code. To accomplish this, alter the `helloworld.py` file to contain
    the following Python code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了这个结构，我们就可以开始填写我们的 Ansible Hello World 模块代码。为此，修改 `helloworld.py` 文件，使其包含以下
    Python 代码：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once the preceding code has been implemented, we will want an efficient way
    to test its functionality. Let's get that testing environment set up next.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实现了前面的代码，我们就需要一个高效的方式来测试其功能。接下来，让我们设置测试环境。
- en: Testing a developmental Ansible module
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试开发中的 Ansible 模块
- en: 'Once the primary Ansible module development environment has been set up, we
    will want to set up the Ansible module testing environment. This solution will
    provide us with the ability to validate our Python code without using Ansible
    directly. As such, it will make the development and validation of potential modules
    more efficient. To set this up, execute the following commands within the development
    modules directory:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好了主要的 Ansible 模块开发环境，我们将需要设置 Ansible 模块测试环境。这个解决方案将使我们能够在不直接使用 Ansible 的情况下验证我们的
    Python 代码。因此，它将使潜在模块的开发和验证更加高效。要设置此环境，请在开发模块目录中执行以下命令：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Upon executing these commands, you should see something similar to the following
    output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些命令后，你应该会看到类似以下输出：
- en: '![](img/47c213e3-20da-4046-bbb2-3e686f8ba237.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47c213e3-20da-4046-bbb2-3e686f8ba237.png)'
- en: 'Once this has been completed, we should have access to a new command, which
    will enable our ability to test our partially developed Ansible modules. Let''s
    check that out:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们应该能够访问一个新命令，这将使我们能够测试我们部分开发的 Ansible 模块。让我们来检查一下：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出：
- en: '![](img/651930f1-7efe-424b-b06c-b7bee6fa759b.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/651930f1-7efe-424b-b06c-b7bee6fa759b.png)'
- en: 'If something were to go wrong (a typo or non-compilable script), we would see
    something like the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题（如拼写错误或不可编译的脚本），我们将看到类似以下内容的提示：
- en: '![](img/54ba8e03-b526-470f-9834-612c7f710b1d.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54ba8e03-b526-470f-9834-612c7f710b1d.png)'
- en: Reading input parameters
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取输入参数
- en: One of the fundamental values that Ansible provides is its connection to the
    YAML playbooks. Developing modules is useful only if we can create playbooks that
    pass data parameters to the modules. In this section, you will learn how to expand
    our Hello World Ansible module to accept and process input parameters from playbooks.
    We will also look at how to structure our module so that it conforms to the Ansible
    boilerplate template system designed for module development.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供的一个基本价值是它与 YAML 剧本的连接。只有当我们能够创建传递数据参数给模块的剧本时，开发模块才是有意义的。在本节中，你将学习如何扩展我们的
    Hello World Ansible 模块，以接受并处理来自剧本的输入参数。我们还将了解如何构建我们的模块，使其符合 Ansible 为模块开发设计的模板系统。
- en: 'In order for our Hello World program to be able to read input parameters from
    an Ansible playbook, we will need to modify it a bit. Let''s update the `./library/HelloWorld.py`
    file to the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的 Hello World 程序能够从 Ansible 剧本中读取输入参数，我们需要稍作修改。让我们将 `./library/HelloWorld.py`
    文件更新为以下内容：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, create a simple playbook `myplaybook.yml` in the parent folder of the
    library folder with the contents defined as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在库文件夹的父文件夹中创建一个简单的剧本 `myplaybook.yml`，内容如下所示：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once saved, let''s execute it and see the output. The following is the command
    to run and the expected output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 保存后，让我们执行它并查看输出。以下是运行命令和预期输出：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output would look like what is shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如以下截图所示：
- en: '![](img/269ee631-15ea-4e7f-a2e1-e182f8d097bb.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/269ee631-15ea-4e7f-a2e1-e182f8d097bb.png)'
- en: 'Nice, right? Next, let''s take a look at what each of these Hello World lines
    does. The following is a far more documented copy of the `helloworld.py` script:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，对吧？接下来，让我们看看这些 Hello World 行的作用。以下是 `helloworld.py` 脚本的一个更为详细的文档版本：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Adding custom facts to a module
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向模块添加自定义 facts
- en: Ansible facts (as we mentioned in earlier chapters) provide informational data
    points about the systems that have run a playbook or task. At some point, we might
    need to set some Ansible facts and return them to the Ansible control server.
    In this section, we will discuss how to set Ansible facts within our Hello World
    module and some of the limitations of Ansible facts.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible facts（我们在前面的章节中提到过）提供了有关运行剧本或任务的系统的数据信息。在某些情况下，我们可能需要设置一些 Ansible facts，并将其返回给
    Ansible 控制服务器。在本节中，我们将讨论如何在我们的 Hello World 模块中设置 Ansible facts 以及 Ansible facts
    的一些限制。
- en: 'According to the Ansible documentation ([https://docs.ansible.com/ansible/dev_guide/developing_modules_general.html](https://docs.ansible.com/ansible/dev_guide/developing_modules_general.html)):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Ansible 文档（[https://docs.ansible.com/ansible/dev_guide/developing_modules_general.html](https://docs.ansible.com/ansible/dev_guide/developing_modules_general.html)）：
- en: The setup - Gathers facts about remote hosts module that ships with Ansible
    provides many variables about a system that can be used in playbooks and templates.
    However, it's possible to also add your own facts without modifying the system
    module. To do this, just have the module return a ansible_facts key, like so,
    along with other return data.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: setup - 收集有关远程主机的事实模块，它是与 Ansible 一起提供的，提供了许多关于系统的变量，这些变量可以在 playbook 和模板中使用。不过，也可以在不修改系统模块的情况下添加你自己的事实。为此，只需让模块返回一个
    ansible_facts 键，像这样，连同其他返回数据。
- en: 'In this section, we will go over how to gather module-specific custom facts
    and return them to the Ansible control server. To begin, we will want to define
    a set of formatted facts. Let''s take a look at an example of the code that does
    this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何收集模块特定的自定义事实并将其返回给 Ansible 控制服务器。首先，我们需要定义一组格式化的事实。让我们来看一个实现此功能的代码示例：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Based on the previous code, we can see that Ansible facts can be set in the
    JSON dictionary form and then passed through the `module.exit_json` file. These
    facts can then be accessed later within the playbook but only after the task that
    sets the facts has been executed. Nice, right?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的代码，我们可以看到，Ansible 事实可以以 JSON 字典的形式设置，然后通过 `module.exit_json` 文件传递。然后可以在
    playbook 中访问这些事实，但只有在设置事实的任务执行后才能访问。不错吧？
- en: Setting up the Ansible Plugin Development Environment
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Ansible 插件开发环境
- en: Ansible plugins, as we mentioned earlier, represent actions that are executed
    on the master (control server) instead of the target host. These plugins allow
    us to add additional functionality to the Ansible solution easily. Once the plugin
    has been written, the action is then available to be called via a traditional
    YAML playbook *action*. Before we start coding our action plugin, let's take a
    look at how to set up the development environment.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Ansible 插件表示在主控服务器上执行的操作，而不是在目标主机上执行。这些插件使我们能够轻松地为 Ansible 解决方案添加额外的功能。一旦插件编写完成，操作便可以通过传统的
    YAML playbook *操作*进行调用。在开始编写操作插件之前，让我们先看看如何设置开发环境。
- en: 'Similar to the modules'' development environment, action plugins must reside
    either in `./<type of plugin>_plugins` next to the playbook being executed *or*
    within one of the specified folders. For example, you might have a directory structure
    like the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于模块开发环境，操作插件必须位于 `./<plugin 类型>_plugins` 中，紧邻正在执行的 playbook *或* 位于指定的文件夹之一。例如，你可能有如下的目录结构：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or, you may have this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可能有如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or, you might consider altering the `<type of plugin>_plugins` path in the
    config folder, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以考虑修改配置文件夹中的 `<plugin 类型>_plugins` 路径，如下所示：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is important to uncomment in the configuration the type of plugin you wish
    to leverage within the config. Once the development environment has been created
    for the type of plugin we wish to create, it's time to start coding the plugin
    itself.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中取消注释你希望在配置中使用的插件类型是很重要的。一旦为我们希望创建的插件类型创建了开发环境，就可以开始编写插件本身了。
- en: Understanding the Different Types of Plugins
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解不同类型的插件
- en: 'Ansible provides the option to create numerous types of plugins. Each plugin
    type interacts with the Ansible system in a different way. In this section, we
    will be looking at the different types of plugins available within the Ansible
    plugin architecture and discover how to code them. The different types of plugins
    available are as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供了创建多种类型插件的选项。每种插件类型与 Ansible 系统的交互方式不同。在本节中，我们将查看 Ansible 插件架构中可用的不同类型插件，并学习如何编写它们。可用的插件类型如下：
- en: Action plugins
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作插件
- en: Callback plugins
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调插件
- en: Connection plugins
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接插件
- en: Lookup plugins
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找插件
- en: Vars plugins
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vars 插件
- en: Filter plugins
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器插件
- en: Test plugins
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试插件
- en: In the coming sections, we will take a look at how to code each plugin type
    and what they are capable of. Let's get started.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将了解如何编写每种插件类型的代码以及它们的功能。让我们开始吧。
- en: Action plugins
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作插件
- en: In this section, we will take a look at action plugins and you will learn what
    action plugins do and some basic code examples on how to create new actions that
    are available within the Ansible subsystems. In Ansible, `action_plugins` are
    a special type of module that provide additional functionality to an existing
    module. As we mentioned earlier, `action_plugins` run on the master instead of
    on the target.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看操作插件，您将了解操作插件的作用以及如何创建新的可在 Ansible 子系统中使用的操作的基本代码示例。在 Ansible 中，`action_plugins`
    是一种特殊类型的模块，为现有模块提供额外的功能。正如我们之前提到的，`action_plugins` 在主机上运行，而不是在目标主机上运行。
- en: 'For example, an action plugin represented via an Ansible playbook would look
    like the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过 Ansible playbook 表示的操作插件可能如下所示：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code for such an action plugin might look something like the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的操作插件代码可能看起来像以下内容：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So, as we can see, the plugin code simply adds functionality to the playbook
    by using a set of well-defined structured methods.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，插件代码通过使用一组定义明确的结构化方法，简单地将功能添加到 playbook 中。
- en: Callback plugins
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回调插件
- en: Callback plugins in Ansible provide additional functionality to Ansible when
    responding to various events within the system. Callback plugins also control
    most of the execution output that is displayed when running a command-line program.
    In this section, we will take a look at callback plugins and learn how to implement
    additional callbacks within the Ansible subsystems.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 中的回调插件为 Ansible 提供了对系统内各种事件响应的附加功能。回调插件还控制在运行命令行程序时显示的大部分执行输出。在本节中，我们将查看回调插件，并学习如何在
    Ansible 子系统中实现额外的回调功能。
- en: 'The Python code for callback plugins must be stored in the `callback` folder,
    as we talked about earlier. The code that needs to be overridden by the class
    is shown as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 回调插件的 Python 代码必须存储在 `callback` 文件夹中，正如我们之前提到的。需要由类重写的代码如下所示：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The way Callback plugins work is similar to other plugins. They provide us with
    the ability to override various functionality developed within the initial Ansible
    implementation. Additional details on the specifics of overrides available can
    be found at [http://docs.ansible.com/ansible/dev_guide/developing_plugins.html](http://docs.ansible.com/ansible/dev_guide/developing_plugins.html).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 回调插件的工作方式类似于其他插件。它们使我们能够重写在初始 Ansible 实现中开发的各种功能。有关可用重写的详细信息，可以在 [http://docs.ansible.com/ansible/dev_guide/developing_plugins.html](http://docs.ansible.com/ansible/dev_guide/developing_plugins.html)
    找到。
- en: Connection plugins
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接插件
- en: Similar to callback and action plugins, connection plugins can also be added
    to enhance the capability of the Ansible subsystems. Out of the box, Ansible uses
    a `paramiko` SSH and a native SSH Protocol connection solution. In addition, there
    are some other minor libraries leveraged as well (`chroot`, `jail`, and so on.)
    These libraries can be leveraged via playbook's. It may become wanted to leverage
    an alternative connection type such as SNMP, or message for Ansible to use. It's
    really a simple procedure (for those with Python and programming knowledge) using
    the connection plugin option. To accomplish this, simply copy one of the formats
    of one of the existing connection types into a `plugins_connection` folder and
    modify it to suit your needs.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于回调和操作插件，连接插件也可以添加以增强 Ansible 子系统的功能。开箱即用，Ansible 使用 `paramiko` SSH 和原生 SSH
    协议连接方案。此外，还使用了一些其他小型库（例如 `chroot`、`jail` 等）。这些库可以通过 playbook 使用。可能需要使用替代的连接类型，如
    SNMP，或者消息，供 Ansible 使用。对于具有 Python 和编程知识的人来说，使用连接插件选项是一个非常简单的过程。要做到这一点，只需将现有连接类型之一的格式复制到
    `plugins_connection` 文件夹中，并根据需要进行修改。
- en: Documentation for this plugin type is not comprehensive, and it is not available
    publicly yet by the Ansible creators. As such, it's recommended that you take
    a look at the Ansible source code for the existing connection plugins, for example.
    These examples can be found at [https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/connection](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/connection).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件类型的文档不全面，而且 Ansible 开发者尚未公开发布。因此，建议您查看 Ansible 源代码中现有连接插件的实现示例。例如，这些示例可以在
    [https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/connection](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/connection)
    中找到。
- en: Lookup plugins
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找插件
- en: In this section, we will take a closer look at lookup plugins and learn what
    they are, where some examples can be found, and how to leverage them. To begin,
    let's better understand what a lookup plugin actually is. A lookup plugin is designed
    to retrieve information and datasets from external data sources. For example,
    the concept of Ansible iterations is developed using lookup plugins. More specifically,
    `with_fileglob` and `with_items` were implemented using the lookup plugin constructs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更深入地了解查找插件，学习它们是什么，在哪里可以找到一些示例，以及如何利用它们。首先，让我们更好地理解查找插件的实际含义。查找插件旨在从外部数据源检索信息和数据集。例如，Ansible
    迭代的概念就是使用查找插件开发的。更具体来说，`with_fileglob` 和 `with_items` 是通过查找插件构建的。
- en: 'Let''s take a look at how to implement a look-up plugin based on the official
    Ansible source code documentation:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何基于官方 Ansible 源代码文档实现查找插件：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This is an example of how this lookup is called:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何调用这个查找插件的示例：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Distributing Ansible plugins
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分发 Ansible 插件
- en: 'We discussed this in some detail within each section of this chapter, but it
    deserves reiterating. The most effective way to enable and distribute an Ansible
    plugin is to create a subdirectory alongside the playbook, which will leverage
    the plugin, that is, to create one of the following directories along side your
    playbook:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章的每一节中都详细讨论了这一点，但它值得再次强调。启用和分发 Ansible 插件的最有效方式是，在 playbook 所在目录旁创建一个子目录，利用该插件，也就是说，在你的
    playbook 旁创建以下目录之一：
- en: '`./action_plugins`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./action_plugins`'
- en: '`./lookup_plugins`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./lookup_plugins`'
- en: '`./callback_plugins`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./callback_plugins`'
- en: '`./connection_plugins`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./connection_plugins`'
- en: '`./filter_plugins`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./filter_plugins`'
- en: '`./strategy_plugins`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./strategy_plugins`'
- en: '`./cache_plugins`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./cache_plugins`'
- en: '`./test_plugins`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./test_plugins`'
- en: '`./shell_plugins`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./shell_plugins`'
- en: In addition to this methodology for the distribution of a plugin, we could also
    use RPM or PIP to package the plugin and distribute it to the proper Ansible installation
    directory. The traditional installation location is set in the `/etc/ansible/ansible.cfg`
    file and can be altered as required.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这种插件分发方法，我们还可以使用 RPM 或 PIP 来打包插件并将其分发到适当的 Ansible 安装目录。传统的安装位置设置在 `/etc/ansible/ansible.cfg`
    文件中，并可以根据需要进行更改。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about extending Ansible. You learned that there are
    two types of extensions for Ansible. The first is an Ansible module, and the second
    one is an Ansible plugin. Ansible modules provide developers with the ability
    to add functionality to Ansible running on target hosts, whereas plugins extend
    the capabilities of the control server.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何扩展 Ansible。你了解到 Ansible 有两种类型的扩展。第一种是 Ansible 模块，第二种是 Ansible 插件。Ansible
    模块为开发者提供了向运行在目标主机上的 Ansible 添加功能的能力，而插件则扩展了控制服务器的功能。
- en: You learned how to set up a local development environment for both Ansible modules
    and Ansible plugins. Once we had the development environment taken care of, we
    looked at how to write modules using a Hello World example and how to extend Ansible
    with a new plugin that overrides functionality within the core Ansible plugin
    solution.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何为 Ansible 模块和 Ansible 插件设置本地开发环境。一旦我们处理好了开发环境，我们就探讨了如何通过一个 Hello World
    示例编写模块，以及如何通过新的插件扩展 Ansible，从而覆盖核心 Ansible 插件解决方案中的功能。
- en: After that, we explored the plugin architecture and learned the various extension
    points that can be leveraged. This included action plugins, controller plugins,
    var plugins, and more.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们探讨了插件架构，并学习了可以利用的各种扩展点。这包括操作插件、控制插件、变量插件等。
- en: In the next and final chapter, we will take a look at Ansible Galaxy. Ansible
    Galaxy is a user-managed distribution point for Ansible playbooks. It is a critical
    implementation for Ansible developers and makes the job of creating playbooks
    to perform common tasks a breeze. Let's get moving.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的最后一章中，我们将看看 Ansible Galaxy。Ansible Galaxy 是一个由用户管理的 Ansible playbook 分发点。它是
    Ansible 开发者的一个关键实现，使得创建用于执行常见任务的 playbook 变得轻松。让我们开始吧。
