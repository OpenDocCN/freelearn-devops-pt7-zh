- en: Git Providers, Integrations, and Clients
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git提供商、集成和客户端
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Setting up an organization at GitHub
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上设置组织
- en: Creating a repository at GitHub
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub上创建一个仓库
- en: Adding templates for issues and pull requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为问题和拉取请求添加模板
- en: Creating a GitHub API key
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建GitHub API密钥
- en: Using GitHub to authenticate at Jenkins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub在Jenkins上进行身份验证
- en: Triggering Jenkins builds
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发Jenkins构建
- en: Using Jenkinsfiles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jenkins文件
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It is possible to host your own Git installation and maintain a central server
    for your organization. If you are a small company or an open source project, maintaining
    such an infrastructure can be a burden. But today, there exists a number of Git
    providers who can lift the burden.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以托管自己的Git安装并维护一个中央服务器来为你的组织提供服务。如果你是一个小公司或开源项目，维护这样的基础设施可能是一种负担。但今天，已经有许多Git提供商可以减轻这种负担。
- en: GitHub is the best-known Git provider with 40 million users. Many high-profiled
    open source projects are hosted by GitHub. Once you have created an account at
    GitHub, you can explore the 85 million Git repositories currently hosted.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是最知名的Git提供商，拥有4000万用户。许多知名的开源项目都托管在GitHub上。一旦你创建了GitHub账户，就可以浏览当前托管的8500万个Git仓库。
- en: In modern software development, **continuous integration** (**CI**) is popular.
    The idea is that changes from developers are merged into the code base as soon
    as possible. Git's **pull requests** (**PRs**) are a way of doing so. Of course,
    GitHub provides a UI to create PRs and let's collaborators do code reviews. Part
    of a CI policy is also to run all tests automatically. Software like Jenkins can
    be configured to build and test for every commit.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发中，**持续集成**（**CI**）是很流行的。其理念是开发者的更改应该尽快地合并到代码库中。Git的**拉取请求**（**PRs**）就是一种实现方式。当然，GitHub提供了创建PR的界面，并让协作者进行代码审查。CI策略的一部分也是自动运行所有测试。像Jenkins这样的软件可以配置为每次提交时进行构建和测试。
- en: Setting up an organization at GitHub
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub上设置组织
- en: Whether you have a commercial product or an open source project, there is likely
    a company or a group of people behind it. GitHub supports such a structure by
    allowing users to create an organization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是商业产品还是开源项目，都可能有公司或一群人在背后支持。GitHub通过允许用户创建组织来支持这种结构。
- en: An organization can have repositories associated and it has members. The advantage
    of using an organization is that members might come and go (developers will get
    a new job, and leave), but the repositories will be associated with the organization
    so there will be no need to transfer ownership of repositories.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织可以关联多个仓库，并且有成员。使用组织的好处在于，成员可以随时加入或离开（开发人员可能换工作，离开），但仓库将与组织关联，因此无需转移仓库的所有权。
- en: As a user, you can be a member of multiple organizations. It is common to be
    a member of your employer's organization but also of a number of organizations
    behind open source projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，你可以是多个组织的成员。通常，你是雇主组织的成员，同时也是多个开源项目背后组织的成员。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need a user account at GitHub. For this recipe, we will use the GitHub
    user `johndoepackt`. Any user can create an organization.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个GitHub的用户账户。对于本教程，我们将使用GitHub用户`johndoepackt`。任何用户都可以创建一个组织。
- en: If you don't have a GitHub account, it is time to create one. Once you have
    created your account and signed in, you are ready to go.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有GitHub账户，现在是时候创建一个了。一旦创建并登录你的账户，你就可以开始使用了。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Creating an organization is a function under Settings. So, you need to find
    Settings in your GitHub account, as shown in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组织是设置中的一个功能。因此，你需要在GitHub账户中找到设置，如下图所示：
- en: '![](img/cf88d2b4-db69-488f-89d5-d3f270f3462b.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf88d2b4-db69-488f-89d5-d3f270f3462b.png)'
- en: 'One menu item in Settings is Organizations. You can create an organization
    in two different ways. You can either turn your user into an organization or create
    a separate organization. We will create an organization and not turn the user
    into an organization, as shown in the next screenshot:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置中的一个菜单项是组织。你可以通过两种方式创建一个组织。你可以将你的用户账户转为组织，或者创建一个独立的组织。我们将创建一个组织，而不是将用户账户转为组织，如下图所示：
- en: '![](img/613d523d-0aff-479b-b6a5-0e77edd1fb88.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/613d523d-0aff-479b-b6a5-0e77edd1fb88.png)'
- en: Once the organization is created, you can invite users to become members. It
    is also possible to add outside or external collaborators.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组织后，您可以邀请用户成为成员。也可以添加外部或外部协作者。
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Organizations at GitHub are a layer on top of Git. They can be seen as a way
    to provide access control to associated repositories.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上的组织是在 Git 之上的一层。可以将它们视为提供与关联仓库的访问控制的方式。
- en: When GitHub users explore the repositories associated with your organizations,
    they will be subject to the privileges you have set up. This means that you are
    in charge of what you allow others to see.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当 GitHub 用户浏览与您的组织相关的仓库时，他们将受到您设置的权限限制。这意味着您可以控制允许他人查看的内容。
- en: If you are a paying customer at GitHub, your organization can have private repositories.
    A private repository is only accessible by members of the organization. A company
    can have open source projects or examples as public repositories. But, by using
    a private repository, it is possible to have some company secrets.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 GitHub 的付费用户，您的组织可以拥有私有仓库。私有仓库仅限组织成员访问。公司可以拥有开源项目或示例作为公共仓库。但是，通过使用私有仓库，可以保护一些公司机密。
- en: There's more...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Each organization has a number of settings that you can tweak. In order to increase
    the security of your organization, you can require that members have to use two-factor
    authentication.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织都有一些设置可以调整。为了提高组织的安全性，您可以要求成员启用双因素认证。
- en: You also have access to an audit log for your organization. In many cases, you
    will have to ensure who did what. The audit log can also reveal if someone has
    gained access to your organization and tried to tamper with it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以访问组织的审计日志。在许多情况下，您需要确保谁做了什么。审计日志还可以揭示是否有人访问了您的组织并试图篡改它。
- en: See also
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: GitHub organizations are a well-documented feature of GitHub. The documentation
    is located at [https://help.github.com/categories/setting-up-and-managing-organizations-and-teams/](https://help.github.com/categories/setting-up-and-managing-organizations-and-teams/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 组织是 GitHub 上的一个文档化特性。相关文档可以在 [https://help.github.com/categories/setting-up-and-managing-organizations-and-teams/](https://help.github.com/categories/setting-up-and-managing-organizations-and-teams/)
    找到。
- en: Creating a repository at GitHub
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建仓库
- en: Using Git is all about repositories. GitHub provides a UI for creating repositories.
    The UI makes it easier for new Git users to get started. And for obvious reasons,
    GitHub does not give you access to their server directly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 的核心是仓库。GitHub 提供了一个创建仓库的 UI 界面，使新的 Git 用户更容易入门。出于显而易见的原因，GitHub 不直接向您提供对其服务器的访问权限。
- en: In the previous recipe, we created an organization at GitHub. In this recipe,
    we will create a repository within the organization. As an individual user (not
    an organization), you can create repositories too.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中，我们在 GitHub 上创建了一个组织。在本教程中，我们将在该组织中创建一个仓库。作为个人用户（而非组织），您也可以创建仓库。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: You begin by logging in at GitHub. Before creating the repository, you have
    to make two decisions. First, what should the repository's name be? Second, should
    the repository be public or private?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先登录 GitHub。在创建仓库之前，您需要做出两个决策。首先，仓库的名称应该是什么？其次，仓库应该是公开的还是私有的？
- en: Private repositories are only visible for members of the organization. But in
    order to create private repositories, you must be a paying customer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 私有仓库仅对组织成员可见。但要创建私有仓库，您必须是付费客户。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Since we are going to create a repository for the organization, you will have
    to switch from your ordinary user to your organization. It''s a dropdown with
    the title Switch dashboard context. Once you have switched context, your screen
    will look like this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们要为组织创建仓库，因此您需要从普通用户切换到您的组织。这是一个名为“切换仪表板上下文”的下拉菜单。切换上下文后，您的屏幕将如下所示：
- en: '![](img/d0f7c508-0ece-475c-ad6b-69926ffce962.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0f7c508-0ece-475c-ad6b-69926ffce962.png)'
- en: 'Now, you are ready to create the repository. You will have to set the name,
    a Description (optional), and decide whether the repository is Public or Private.
    Moreover, GitHub can create `.gitignore`, `LICENSE`, and a simple `README.md`
    for you. Often you will know the main programming language, and a `.gitignore`
    based on best practices can be generated. In the following screenshot, you can
    see all the fields with values:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你准备好创建代码库了。你需要设置名称、描述（可选），并决定代码库是公开的还是私有的。此外，GitHub 可以为你创建 `.gitignore`、`LICENSE`
    和一个简单的 `README.md` 文件。通常，你会知道主要的编程语言，并可以生成一个基于最佳实践的 `.gitignore` 文件。在下图中，你可以看到所有填写的字段：
- en: '![](img/5eaebe29-d75b-4ea5-bf43-73e145a865c6.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5eaebe29-d75b-4ea5-bf43-73e145a865c6.png)'
- en: 'Once the repository is created, you can clone it on your computer as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了代码库，你可以按照以下步骤将其克隆到你的计算机上：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The screens you went through in the recipe are *Creating a repository at GitHub*
    server. In essence, it is simply creating a directory and running `git init`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本教程中经过的步骤是 *在 GitHub 上创建代码库*。本质上，这只是创建一个目录并运行 `git init`。
- en: Adding the extra files (`.gitignore`, `LICENSE`, and `README.md`) is fairly
    simple too. Setting up a good `.gitignore` takes time, but you get a good starting
    point with the generated one.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外的文件（`.gitignore`、`LICENSE` 和 `README.md`）也非常简单。设置一个好的 `.gitignore` 需要时间，但你可以从生成的
    `.gitignore` 文件中得到一个很好的起点。
- en: GitHub also sets up access control for your repository. Only members of the
    organization have write permissions; that is, they have the rights to commit.
    In the settings of the repository, you can define more precise access control
    under the menu item Collaborators & teams. A team is a group of GitHub users who
    work together. In your company, you might have iOS, Android, and DevOps teams.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 还为你的代码库设置了访问控制。只有组织成员才具有写权限；也就是说，他们有提交代码的权利。在代码库的设置中，你可以在菜单项“Collaborators
    & teams”下定义更精确的访问控制。一个团队是由一起工作的 GitHub 用户组成的。在你的公司中，可能有 iOS、Android 和 DevOps 团队。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'With a repository at GitHub, code reviews are an integral part of pull requests.
    Let''s update `README.md` and perform a code review at GitHub:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上使用代码库时，代码审查是拉取请求的一个重要组成部分。让我们更新 `README.md` 并在 GitHub 上进行代码审查：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can now go to GitHub, find your repository and create a pull request. You
    can invite your collaborators to review your changes before they are merged, as
    shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以去 GitHub，找到你的代码库并创建一个拉取请求。你可以邀请你的合作者在合并之前审查你的更改，如下图所示：
- en: '![](img/2f2403ac-af3d-4031-9b13-f3913ab12e48.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f2403ac-af3d-4031-9b13-f3913ab12e48.png)'
- en: When we created the repository, we had the option to create it as a private
    one. Private repositories are only available for paying customers. From a Git
    perspective, there is no difference between public and private repositories. The
    major difference is who can view a repository. As you might imagine, public repositories
    can be viewed by everybody. You don't even have to log in to GitHub to view a
    public repository. These repositories are ideal for open source projects—and if
    you read GitHub's terms closely, you will see that a public repository is meant
    to be open source.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建代码库时，我们有选择将其创建为私有代码库的选项。私有代码库仅对付费用户开放。从 Git 的角度来看，公共代码库和私有代码库没有区别。主要的区别在于谁可以查看代码库。正如你想象的那样，公共代码库可以被任何人查看。你甚至不需要登录
    GitHub 就可以查看公共代码库。这些代码库非常适合开源项目——如果你仔细阅读 GitHub 的条款，你会发现公共代码库是为了开源而设计的。
- en: Private repositories can only be viewed by the users you have given access to.
    Typically, every member of your organization can view private repositories. In
    other words, private repositories are ideal for internal projects or proprietary
    software. Today, many companies are mixing public and private repositories while
    their software developers can fluently move between repositories.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 私有代码库只能被你授予访问权限的用户查看。通常情况下，你的组织中的每个成员都可以查看私有代码库。换句话说，私有代码库非常适合内部项目或专有软件。如今，许多公司将公共代码库和私有代码库结合使用，他们的软件开发人员可以在这些代码库之间流畅地切换。
- en: Adding templates for issues and pull requests
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为问题和拉取请求添加模板
- en: In [Chapter 7](fcc6f77f-119c-41e9-b4b0-9b7df263b7f1.xhtml), *Enhancing Your
    Daily Work with Git Hooks, Aliases, and Scripts*, we showed how to add templates
    for commits.  A commit template helps the developer to include the relevant information
    in the commit message. At GitHub, users will create issues and pull requests.
    It is up to the issue or pull request creator to write a meaningful description.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](fcc6f77f-119c-41e9-b4b0-9b7df263b7f1.xhtml)，*通过 Git Hooks、别名和脚本提升你的日常工作*，我们展示了如何为提交添加模板。提交模板帮助开发者在提交信息中包含相关的内容。在
    GitHub 上，用户会创建问题和拉取请求。问题或拉取请求的创建者负责写出有意义的描述。
- en: This recipe will explain to you how to add templates for issues and pull requests.
    The purpose is to help people to remember to include enough context for you to
    quickly understand what the issue or pull request is about.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向你解释如何为问题和拉取请求添加模板。目的是帮助人们记得提供足够的上下文，帮助你快速理解问题或拉取请求的内容。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue to use the repository `nomen-rescio` that we created in a previous
    recipe. GitHub is using **Markdown** as a markup language everywhere. Markdown
    is developer friendly since it is plain text with some special conversions for
    typesetting bold, bullet lists, and so on. Going through Markdown might be a complete
    book on its own.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用我们在之前的教程中创建的`nomen-rescio`仓库。GitHub 在各个地方都使用**Markdown**作为标记语言。Markdown
    对开发者友好，因为它是纯文本，并且具有一些特殊的转换功能，用于排版粗体、项目符号列表等内容。深入学习 Markdown 可能本身就足够写成一本书。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To start, you will need to find Settings for your repository. There is a big Set
    up templates button which is what you are looking for. You can choose to use one
    of the precanned templates, but we will create a custom one, as shown in the next
    screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要找到你仓库的设置。在设置中有一个大大的“设置模板”按钮，这就是你要找的按钮。你可以选择使用其中一个现成的模板，但我们将创建一个自定义模板，如下图所示：
- en: '![](img/332195f3-6fd1-4ba3-a646-f101b2a965c8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/332195f3-6fd1-4ba3-a646-f101b2a965c8.png)'
- en: 'You save the template by clicking on Commit changes. When a user is creating
    an issue, your template will be shown. The user can choose to delete all your
    text but most users will read it before doing so; note the following screenshot:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你通过点击“提交更改”来保存模板。当用户创建问题时，你的模板将被显示。用户可以选择删除你写的所有文本，但大多数用户会在删除前阅读它；请参考以下截图：
- en: '![](img/8ef16abf-bd1d-423e-a8c4-9ccc5c8a90e9.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ef16abf-bd1d-423e-a8c4-9ccc5c8a90e9.png)'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Your templates live in the repository itself. Actually, you find them in the
    directory `.github`. If you prefer, you can edit a template in your favorite editor
    and commit changes just like any other file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你的模板会保存在仓库本身。实际上，你会在目录 `.github` 中找到它们。如果你愿意，你可以在你喜欢的编辑器中编辑模板，并像其他文件一样提交更改。
- en: The directory `ISSUE_TEMPLATE` contains the templates for issues is the file.
    Similar, if you create a file under the directory `PULL_REQUEST_TEMPLATE`, you
    will have a template for pull requests. With multiple templates, the user will
    be asked to choose which template is appropriate.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目录 `ISSUE_TEMPLATE` 包含问题的模板文件。类似地，如果你在 `PULL_REQUEST_TEMPLATE` 目录下创建一个文件，你将得到一个拉取请求的模板。通过多个模板，用户将被要求选择适合的模板。
- en: Creating a GitHub API key
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 GitHub API 密钥
- en: So far, all the work we have performed at GitHub has been manual. Programmers
    like to automate processes, and performing GitHub work is no exception to that
    rule. With the next recipe, we will show you how you can automate tasks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在 GitHub 上所做的工作都是手动的。程序员喜欢自动化流程，执行 GitHub 工作也不例外。在下一个教程中，我们将向你展示如何自动化这些任务。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To automate GitHub tasks you need to be able to access GitHub. Instead of logging
    in using a user name and password, you can use an API key or personal access token.
    Such a token should not be shared, and you need to keep it secret at all times.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化 GitHub 任务，你需要能够访问 GitHub。你可以选择使用 API 密钥或个人访问令牌，而不是通过用户名和密码登录。这样的令牌不应该与他人共享，并且你需要始终保密。
- en: So, this recipe begins with generating an access token and shows you a simple
    Python script. The Python script will find all your repositories, and find all
    the pull requests for each repository.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，本教程从生成访问令牌开始，并展示一个简单的 Python 脚本。这个 Python 脚本会查找你所有的仓库，并为每个仓库查找所有的拉取请求。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we need to generate the personal access token. You will have to drill
    down in the menu system: Settings, Developer settings, and finally, Person access
    token. We will give our token the name `basic-query` since we plan only to do
    that. You can specify what the token has access to. Our token will only need access
    to repository actions, as indicated in the following screenshot:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要生成个人访问令牌。你需要在菜单系统中逐步深入：设置，开发者设置，最后是个人访问令牌。我们会给我们的令牌命名为`basic-query`，因为我们仅打算执行这个操作。你可以指定令牌的访问权限。我们的令牌只需要访问仓库操作，如以下截图所示：
- en: '![](img/2772c873-f590-432f-8746-ee788cc6a08e.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2772c873-f590-432f-8746-ee788cc6a08e.png)'
- en: 'Once you generate the token, it will displayed. You will only see it once at
    GitHub, so it is important to copy it to your computer. In the following screenshot,
    you can see the page with the generated token (except we have added a rectangle
    since we need to keep it a secret):'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你生成了令牌，它将被显示出来。在 GitHub 上你只会看到一次令牌，因此重要的是将其复制到你的电脑。在以下截图中，你可以看到生成的令牌页面（除了我们添加了一个矩形框，因为我们需要保密）：
- en: '![](img/cfe13a2d-f11c-461b-a03d-9a3a048a7ddb.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfe13a2d-f11c-461b-a03d-9a3a048a7ddb.png)'
- en: 'As already mentioned, we will use Python. You need to install the small library
    PyGitHub. Using Pip, the installation is easy:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用 Python。你需要安装一个小型库 PyGitHub。使用 Pip 安装非常简单：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we are ready to run the Python script that will fetch the repositories
    and the pull requests. The script is just iterating over repositories and pull
    requests:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备运行一个 Python 脚本来获取仓库和拉取请求。这个脚本仅仅是遍历仓库和拉取请求：
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The token gives you access to GitHub but only the parts that were specified
    when you created the token. Behind the scenes, the methods of PyGitHub are implemented
    as HTTP calls to GitHub's API.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌可以让你访问 GitHub，但仅限于创建令牌时指定的部分。后台，PyGitHub 的方法是通过 HTTP 请求调用 GitHub 的 API 实现的。
- en: For example, the call `get_repos` is an HTTP GET of `/user/repos`. The HTTP
    request will return the result as JSON. PyGitHub is parsing the JSON result and
    populating Python objects so the result is more natural for a Python developer.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，调用`get_repos`就是对`/user/repos`进行 HTTP GET 请求。HTTP 请求将以 JSON 格式返回结果。PyGitHub
    解析 JSON 结果并填充 Python 对象，使得结果对 Python 开发者来说更加自然。
- en: Python is not the only programming language. You can find libraries for almost
    any known language.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Python 并不是唯一的编程语言。你几乎可以为任何已知的语言找到库。
- en: Of course, you can go beyond the simple scripts and develop a full-blown GitHub
    client. We will leave that as an exercise for you.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以超越简单的脚本，开发一个完整的 GitHub 客户端。我们将把这个作为一个练习留给你。
- en: See also
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The complete API documentation for PyGitHub can be found at [http://pygithub.readthedocs.io/en/latest/reference.html](http://pygithub.readthedocs.io/en/latest/reference.html).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PyGitHub 的完整 API 文档可以在 [http://pygithub.readthedocs.io/en/latest/reference.html](http://pygithub.readthedocs.io/en/latest/reference.html)
    查找。
- en: Using GitHub to authenticate at Jenkins
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub 在 Jenkins 中进行身份验证
- en: Jenkins is the most popular continuous integration software and it allows users
    to continuously build, test, and release any kind of software. It is extremely
    flexible and configurable in every aspect, including the way users are able to
    log in and authorize. GitHub is able to act as an OAuth provider, which is very
    convenient since it makes a lot of sense to map the users working on a project
    with the relative area of the CI system.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是最受欢迎的持续集成软件，它允许用户持续构建、测试和发布任何类型的软件。它在各个方面都非常灵活和可配置，包括用户能够登录和授权的方式。GitHub
    能够作为 OAuth 提供者，这非常方便，因为它非常符合将参与项目的用户与 CI 系统中的相应区域进行映射的需求。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to demonstrate the procedure, we will need a Jenkins instance. Every
    company will have a different setup so, in order to make things more predictable,
    we will work with a local version of Jenkins.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示过程，我们需要一个 Jenkins 实例。每个公司都会有不同的配置，因此，为了使事情更加可预测，我们将使用 Jenkins 的本地版本。
- en: 'Jenkins is a Java app but still, the easiest way to get a running ephemeral
    instance of Jenkins for our example is by using Docker. With Docker installed
    and running on your machine, simply run:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一个 Java 应用，但对于我们的示例，最简单的方式是使用 Docker 来获取一个临时的 Jenkins 实例。只要在你的机器上安装并运行
    Docker，简单执行以下命令：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This instance of Jenkins won't leave behind any traces of itself once the docker
    container is stopped.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Jenkins 实例在停止 Docker 容器后不会留下任何痕迹。
- en: 'The logs will start appearing on your console and they will contain the password
    for the first login. Look for something that appears as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 日志将开始显示在控制台上，并包含首次登录的密码。请查找以下内容：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point you can point your browser to `http://localhost:8080/` and you
    will be prompted for your password, as shown in the next screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以将浏览器指向`http://localhost:8080/`，并将会提示你输入密码，如下图所示：
- en: '![](img/b34e77c7-c424-4e3e-8b8b-f91ea5e2d8df.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b34e77c7-c424-4e3e-8b8b-f91ea5e2d8df.png)'
- en: 'At this point, you will be prompted to install plugins. For this example, let''s
    just install the suggested plugins as shown in the next screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你将被要求安装插件。对于本示例，我们只需安装建议的插件，如下图所示：
- en: '![](img/ec328140-0764-46ea-8b48-e19f841e49c9.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec328140-0764-46ea-8b48-e19f841e49c9.png)'
- en: 'Next, you will be prompted to create an admin user, but, since this is an ephemeral
    image, you can just continue by clicking Continue as admin:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将被要求创建一个管理员用户，但由于这是一个临时镜像，你可以直接点击“继续作为管理员”继续操作：
- en: '![](img/f7591874-d9bb-4e45-b05a-87b9d4b9ee51.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7591874-d9bb-4e45-b05a-87b9d4b9ee51.png)'
- en: Next, you will be asked to set up the Instance Configuration. Just keep the
    default value and click Save and Finish.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将被要求设置实例配置。只需保持默认值并点击“保存并完成”。
- en: 'At this point, Jenkins is ready to be used. Just click on Start using Jenkins,
    as shown in the next screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Jenkins 已经准备好使用了。只需点击“开始使用 Jenkins”，如下面的截图所示：
- en: '![](img/fb5ccf16-e5f4-4300-a40d-cfd41cf6b552.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb5ccf16-e5f4-4300-a40d-cfd41cf6b552.png)'
- en: 'You will now see the Welcome to Jenkins! homepage, as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将看到欢迎来到 Jenkins！首页，如下所示：
- en: '![](img/96d02e42-61b3-43f1-a5c5-c84df8c2017b.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96d02e42-61b3-43f1-a5c5-c84df8c2017b.png)'
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to authenticate to Jenkins using GitHub, you will have to install
    the GitHub Authentication Plugin. To do this, click on Manage Jenkins on the panel
    on the left and on the new page click on Manage Plugins, as shown in the following
    screenshot:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用 GitHub 验证 Jenkins，你需要安装 GitHub 身份验证插件。为此，请点击左侧面板中的“管理 Jenkins”，然后在新页面中点击“管理插件”，如下图所示：
- en: '![](img/0ddbc1fc-69d3-4378-a7f5-53b7be64800b.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0ddbc1fc-69d3-4378-a7f5-53b7be64800b.png)'
- en: 'Now you can navigate to the Available tab and type `github auth` in the search
    box , as shown in the next screenshot:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以切换到“可用”标签，并在搜索框中输入 `github auth`，如下图所示：
- en: '![](img/b541849b-9f58-4a8e-ab44-b51e86a70f0b.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b541849b-9f58-4a8e-ab44-b51e86a70f0b.png)'
- en: You can now install the plugin by checking the box on the left and clicking
    on Install without restart.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过勾选左侧的框并点击“无需重启安装”来安装插件。
- en: Once the plugin is installed you can go back to the Jenkins homepage by clicking
    on the Jenkins logo in the top-left corner and, once again, clicking on Manage
    Jenkins.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件安装完成后，你可以通过点击左上角的 Jenkins 徽标返回到 Jenkins 首页，并再次点击“管理 Jenkins”。
- en: 'This time we will proceed by clicking on Configure Global Security, as shown
    in the next screenshot:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次我们将点击“配置全局安全性”，如下图所示：
- en: '![](img/b4224b1c-0d05-408c-b817-ebef1fbde4d0.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4224b1c-0d05-408c-b817-ebef1fbde4d0.png)'
- en: 'Now head over to GitHub and, as shown in the next screenshot, register a new
    application by navigating to [https://github.com/settings/applications/new](https://github.com/settings/applications/new):'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往 GitHub，并按照下图所示，访问 [https://github.com/settings/applications/new](https://github.com/settings/applications/new)
    注册一个新应用：
- en: '![](img/9c7343b9-4334-48a3-b6d7-f3b5f2b5a125.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c7343b9-4334-48a3-b6d7-f3b5f2b5a125.png)'
- en: Here you will need to fill in an arbitrary Application name and the Authorization
    callback URL as shown. Once you register the application you will be able to see
    your Client ID and Client Secret. These will be needed in Jenkins in order to
    fill in the relative fields in the Global Security Settings.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处，你需要填写一个任意的应用名称和授权回调 URL，如下所示。注册应用后，你将能够看到你的客户端 ID 和客户端密钥。它们将在 Jenkins 中用于填写全局安全设置中的相关字段。
- en: Once you submit the form you will be able to log in to Jenkins using your GitHub
    credentials.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交表单后，你将能够使用 GitHub 凭证登录 Jenkins。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Authentication needs to solve the question, Who is the person trying to access
    the service?. There are many ways to do it: login and password, tokens, and so
    on. OAuth is another way to answer that question. OAuth stands for Open Authentication
    and it is an open standard for access delegation. It allows users to have access
    to websites (such as our Jenkins instance) without having to provide them, and
    therefore trust them, with a password.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证需要解决的问题是，谁是试图访问服务的人？有许多方式可以做到这一点：登录和密码、令牌等等。OAuth 是回答这个问题的另一种方式。OAuth 代表开放身份验证，它是一个开放的访问授权标准。它允许用户访问网站（如我们的
    Jenkins 实例），而无需提供密码，因此也无需信任这些网站。
- en: GitHub has the ability to act as an OAuth provider, which means that other websites
    can be configured to accept the credentials provided by GitHub to let users access
    their services.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 有作为 OAuth 提供者的能力，这意味着其他网站可以配置为接受 GitHub 提供的凭据，从而允许用户访问他们的服务。
- en: This means that whenever a user tries to access a Jenkins instance configured
    to accept GitHub OAuth, he will be redirected to GitHub itself to authenticate
    and, subsequently, GitHub will redirect the user to the Jenkins instance with
    an attached identity token.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着每当用户尝试访问配置为接受 GitHub OAuth 的 Jenkins 实例时，他将被重定向到 GitHub 本身进行身份验证，随后 GitHub
    会将用户重定向回 Jenkins 实例，并附带身份令牌。
- en: There's more...
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'Authentication is only half of the equation. Identifying a user is, of course,
    important, but what we do with that information is critical as well. Here is where
    authorization comes into play, which, keeping the question analogy, aims to answer
    the question: Given that the person trying to access the service is X, what is
    he allowed and not allowed to do?'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证只是问题的一半。识别用户当然很重要，但我们如何利用这些信息同样至关重要。此时，授权发挥作用，它旨在回答这个问题：假设试图访问服务的人是 X，那么他被允许做什么、不能做什么？
- en: The way we configured the Jenkins instance, anybody able to log in will be able
    to do anything. This might not be the desired behavior, which leads to another
    section of the Global Security page in Jenkins.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置的 Jenkins 实例是，任何能够登录的人都可以做任何事情。这可能不是我们期望的行为，这也引出了 Jenkins 的 Global Security
    页面中的另一个部分。
- en: You will find a section called Authorization, which provides many options. One
    is the GitHub Committer Authorization Strategy, which determines if a user is
    allowed to see a specific Jenkins job–but only if he's allowed to access the relative
    GitHub repository.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一个名为授权的部分，其中提供了许多选项。其中一个是 **GitHub Committer 授权策略**，它决定用户是否被允许查看某个特定的 Jenkins
    作业——但前提是他被允许访问相应的 GitHub 仓库。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参见
- en: The documentation of the GitHub OAuth Plugin is available at [https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin](https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub OAuth 插件的文档可以在 [https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin](https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin)
    查阅。
- en: Triggering Jenkins builds
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发 Jenkins 构建
- en: When you create a Jenkins job, how will Jenkins know when it's time to build
    a specific branch or pull request? Jenkins offers many ways to do this, from continuously
    building based on a timer, to polling the Git repository to see if anything changed.
    Both of these options are not very efficient, but luckily GitHub allows for a
    better solution.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个 Jenkins 作业时，Jenkins 如何知道何时构建特定的分支或拉取请求？Jenkins 提供了许多方法来实现这一点，从基于计时器的持续构建到轮询
    Git 仓库查看是否有变化。尽管这两种选项都不是非常高效，但幸运的是 GitHub 提供了更好的解决方案。
- en: GitHub has the concept of Webhooks, which means that it can be configured to
    contact a server, such as our Jenkins instance, when something important happens.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 有 Webhooks 的概念，这意味着它可以配置为在发生重要事件时联系一个服务器，例如我们的 Jenkins 实例。
- en: There are many ways to achieve the goal, but in this recipe we will focus on
    one approach, which is going to be helpful especially in an enterprise environment
    where a GitHub organization is used, containing several repositories. Managing
    a single job or more per repository can quickly become a repetitive chore and
    that is where the **GitHub Branch Source** plugin comes into play.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 达到目标的方式有很多，但在这个配方中，我们将专注于一种方法，这种方法在企业环境中尤其有用，特别是当使用 GitHub 组织，包含多个仓库时。每个仓库管理一个或多个作业会迅速变成一项重复的工作，而这时
    **GitHub Branch Source** 插件便派上了用场。
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We are going to need a Jenkins instance so the same preparatory steps as the
    previous recipe are needed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一个 Jenkins 实例，因此需要与之前配方相同的准备步骤。
- en: Additionally, if the Jenkins instance is not reachable from the internet, a
    reverse proxy will be needed in order for GitHub to send notifications to the
    Jenkins instance.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果 Jenkins 实例无法从互联网访问，那么需要一个反向代理，以便 GitHub 能够向 Jenkins 实例发送通知。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The steps are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: The GitHub Branch Source plugin comes preinstalled with the default installation,
    but if your setup does not already have the plugin, you can easily install it
    as we did in the previous recipe. Go to the Jenkins home page and proceed to Manage
    Jenkins, Manage Plugins, click on the Available tab and look for GitHub Branch
    Source. Install the plugin.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub Branch Source 插件在默认安装中预先安装，但如果你的环境中尚未安装该插件，你可以像在前面的配方中一样轻松安装它。前往 Jenkins
    首页，进入“管理 Jenkins”，点击“管理插件”，然后选择“可用”标签，搜索 GitHub Branch Source 并安装插件。
- en: 'Now, go back to the Jenkins homepage and click on Create New Jobs:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回 Jenkins 首页，点击“创建新作业”：
- en: '![](img/424c5a74-f3bd-43b9-a794-bf5127c127de.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/424c5a74-f3bd-43b9-a794-bf5127c127de.png)'
- en: 'Choose a job name and select GitHub Organization before clicking OK. The following
    configuration page can look a bit daunting, so let''s break it down:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个作业名称，并在点击“确定”之前选择 GitHub 组织。以下配置页面可能看起来有点令人望而却步，所以让我们分解它：
- en: '![](img/31013018-1169-47ff-ac05-57ec0aa70bec.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31013018-1169-47ff-ac05-57ec0aa70bec.png)'
- en: The only section that really needs to be taken care of is Projects. The first
    thing to set is the GitHub credentials. This will allow Jenkins to automatically
    set up webhooks for us. Credentials in Jenkins are treated with security in mind
    and are properly encrypted, so don't be afraid to save them here.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一需要特别注意的部分是项目。首先需要设置的是 GitHub 凭证。这将允许 Jenkins 自动为我们设置 Webhook。在 Jenkins 中，凭证是以安全为前提进行处理并正确加密的，因此不必担心在这里保存它们。
- en: 'Next, we need to specify the Owner, which is simply the name of the GitHub
    organization we want to keep under control. The following section describes the
    behaviors, which are completely fine in their default form. They will allow building:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要指定所有者，它只是我们想要控制的 GitHub 组织的名称。以下部分描述了这些行为，默认情况下它们完全正常。它们将允许构建：
- en: Branches
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支
- en: PRs coming from the repo itself
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自本仓库的 PR
- en: PRs coming from forks, but from trusted users
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Fork 的 PR，但来自受信任的用户
- en: That is it! Now Jenkins will be able to automatically build any branch or PR
    as long as the code contains a Jenkinsfile. Jenkinsfiles are going to be treated
    in the next recipe, so stay tuned!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在 Jenkins 将能够自动构建任何分支或 PR，只要代码中包含 Jenkinsfile。Jenkinsfile 的使用将在下一个配方中介绍，请继续关注！
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The GitHub Branch Souce plugin will allow Jenkins to periodically scan the whole
    specified GitHub organization, and for every repository it will check all the
    branches and PRs, and if they contain a file called `Jenkinsfile` they will be
    automatically built following the directives contained in the Jenkinsfile itself.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Branch Source 插件将允许 Jenkins 定期扫描指定的 GitHub 组织，并检查每个仓库中的所有分支和 PR，如果其中包含一个名为
    `Jenkinsfile` 的文件，它们将会自动构建，并遵循 Jenkinsfile 中的指令。
- en: This is quite a powerful paradigm and it allows to keep under version control
    not only the code of the project but also the instructions on how to build, test,
    and even release it in the same code base.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常强大的模式，它不仅可以将项目的代码纳入版本控制，还可以将如何构建、测试甚至发布项目的指令也纳入同一个代码库中。
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The job configuration page will allow changing many different behaviors. What
    if, for example, we don't want to build all branches, but only the ones whose
    name matches a regular expression? The solution is just a few clicks away! There
    are so many possibilities and the Jenkins developers keep adding new ones, so
    it's worth taking a look periodically at what's available.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该作业配置页面允许更改许多不同的行为。例如，如果我们不想构建所有的分支，而只构建那些名称与正则表达式匹配的分支怎么办？解决方案只需要几个点击！有很多可能性，Jenkins
    的开发者不断增加新的功能，所以定期查看可用的选项是值得的。
- en: See also
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for the GitHub Branch Source plugin is available at [https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/index.html#github-branch-source](https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/index.html#github-branch-source).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Branch Source 插件的文档可以在 [https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/index.html#github-branch-source](https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/index.html#github-branch-source)
    查阅。
- en: Using Jenkinsfiles
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkinsfile
- en: 'Jenkinsfiles are a relatively new feature in the Jenkins world and they come
    in two varieties and syntaxes:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkinsfile 是 Jenkins 世界中的相对较新功能，它有两种不同的类型和语法：
- en: Declarative
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式
- en: Groovy DSL
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Groovy DSL
- en: The Groovy DSL is very flexible and powerful, but it also facilitates some anti-patterns,
    so in this recipe we're going to focus on the declarative-style Jenkinsfiles.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Groovy DSL 非常灵活且强大，但它也容易导致一些反模式，因此在这个食谱中，我们将专注于声明式风格的 Jenkinsfile。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need a GitHub repository containing a codebase that can be built and
    tested. Given the sheer number of possible programming languages and build systems
    available, we will choose an arbitrary Java project using the popular Maven build
    system.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要一个包含可以构建和测试的代码库的 GitHub 仓库。鉴于可用的编程语言和构建系统种类繁多，我们将选择一个任意的 Java 项目，并使用流行的
    Maven 构建系统。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'It will be sufficient to add a file called `Jenkinsfile` with these contents:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要添加一个名为 `Jenkinsfile` 的文件，并包含以下内容：
- en: '[PRE6]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Jenkinsfile describes both how to build and test the software and the environment
    in which to run such an operation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkinsfile 描述了如何构建和测试软件以及运行这些操作的环境。
- en: 'Let''s take a look at the different sections:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下不同的部分：
- en: '`agent any` specifies that this build can be run on any available executor.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`agent any` 指定此构建可以在任何可用的执行器上运行。'
- en: The `tools {}` section specifies the programs needed to run our build. In this
    case, Maven and the **Java Development Kit** (**JDK**) are needed and the versions
    are specified as well.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools {}` 部分指定了运行构建所需的程序。在这种情况下，需要 Maven 和 **Java 开发工具包** (**JDK**)，并且也指定了版本。'
- en: '`stages {}` and `stage() {}` allow splitting the run into well-defined sections
    which will allow better analysis of build results.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stages {}` 和 `stage() {}` 允许将运行过程分为明确的阶段，从而使构建结果的分析更加清晰。'
- en: Each stage needs to contain a `steps {}` section that will describe exactly
    which operations to perform. In this case, in the *Initialize* stage, we are simply
    running a shell script that echoes a couple of environment variables.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个阶段需要包含一个 `steps {}` 部分，该部分将精确描述要执行的操作。在这种情况下，在 *初始化* 阶段，我们仅仅运行一个 shell 脚本，回显一些环境变量。
- en: The Build stage actually runs Maven and, if the build succeeds, it will analyze
    the results of the unit tests contained in an XML file.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建阶段实际上会运行 Maven，如果构建成功，它将分析包含在 XML 文件中的单元测试结果。
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Jenkinsfiles are a huge topic that would be able to fill a book on its own,
    so the examples provided have only scratched the surface of what is possible.
    To give some examples, you will be able to:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkinsfile 是一个庞大的话题，足以填满一本书，因此提供的示例仅仅触及了可能性的表面。举几个例子，你将能够：
- en: Run steps in parallel on different machines to save build time
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同的机器上并行运行步骤以节省构建时间
- en: Save and deploy build artifacts
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存并部署构建工件
- en: Run complete releases
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行完整的发布版本
- en: Wait for some user input
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待一些用户输入
- en: And much much more
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及更多更多
- en: See also
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见其他
- en: The syntax for declarative Jenkinsfiles can be found at [https://jenkins.io/doc/book/pipeline/syntax/](https://jenkins.io/doc/book/pipeline/syntax/).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 声明式 Jenkinsfile 的语法可以在 [https://jenkins.io/doc/book/pipeline/syntax/](https://jenkins.io/doc/book/pipeline/syntax/)
    中找到。
- en: Be aware that plugins are able to contribute all kinds of steps and tools, so
    be sure to check the documentation of the plugin you are planning to use!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，插件可以贡献各种步骤和工具，因此请务必查看你打算使用的插件的文档！
