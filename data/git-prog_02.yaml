- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Creating Your Repository
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的代码库
- en: In this chapter, you will learn how to create an account on GitHub, and how
    to create and clone your first repository so that you have a link between the
    repository on your computer and that on GitHub.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何在 GitHub 上创建一个账户，如何创建和克隆你的第一个代码库，从而建立你电脑上的代码库与 GitHub 上代码库之间的链接。
- en: 'This chapter will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容将包括：
- en: Creating your repository
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的代码库
- en: Git pull
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 拉取
- en: Push me, pull you
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推我、拉你
- en: Starting at the command line
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行开始
- en: Commits – best practices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交 – 最佳实践
- en: We'll start by creating your GitHub repository.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建你的 GitHub 代码库开始。
- en: Creating your repository
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的代码库
- en: There are a number of different ways to create your repository. We'll cover
    creating a repository on GitHub and cloning it to your disk, as this is the most
    common way.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创建代码库有很多种不同的方法。我们将介绍如何在 GitHub 上创建代码库并将其克隆到本地磁盘，因为这是最常见的方式。
- en: Creating your repository on GitHub first
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先在 GitHub 上创建你的代码库
- en: Your first step is to register with GitHub. Go to [http://github.com](http://github.com)
    and click **Sign Up**. Fill in your username (it will tell you if the name is
    taken) and your email and it may ask you to verify that you are a human. Assuming
    you are, click **Create Account**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先需要在 GitHub 上注册。访问 [http://github.com](http://github.com) 并点击**注册**。填写你的用户名（如果用户名已被占用，系统会提示）和邮箱，系统可能会要求你验证你是人类。假设你是，点击**创建账户**。
- en: 'Fill out their micro-survey and click **Create Account**. You will be asked
    to verify your email, and once you do, you''ll see the (one-time) opening page
    asking what you want to do first. Choose **Create a repository**:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 填写他们的微型调查问卷，然后点击**创建账户**。系统会要求你验证电子邮件，完成后你会看到（一次性）欢迎页面，询问你想要做的第一件事。选择**创建代码库**：
- en: '![](img/B17441_02_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_01.png)'
- en: 'Figure 2.1: Getting started with GitHub'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：开始使用 GitHub
- en: If you already have an account, sign in and press **New Repository**. You may
    not find this at first glance, in which case click the big plus sign in the corner.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有账户，登录并点击**新建代码库**。你可能一开始找不到这个选项，这时点击角落的大加号。
- en: Either way, you will be brought to the **Create A New Repository** page. The
    first job is to give your new repository a name. I'll use `ProGitForProgrammers`.
    Feel free to use any name you want as long as GitHub doesn't complain that the
    name is taken.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，你都会被引导到**创建新代码库**页面。第一件事是为你的新代码库命名。我将使用 `ProGitForProgrammers`。只要 GitHub
    没有提示名称已被占用，你可以随意使用任何名称。
- en: 'Now it is time to fill in the form:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候填写表格了：
- en: '![](img/B17441_02_02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_02.png)'
- en: 'Figure 2.2: Creating the repository'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：创建代码库
- en: Start by entering a short description of your project. Next, and very importantly,
    choose whether you want this repository to be public (anyone can see it) or private
    (only people you invite can see it).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先输入一个简短的项目描述。接下来，非常重要的是，选择你是否希望将这个代码库设置为公开（任何人都可以查看）还是私有（只有你邀请的人可以查看）。
- en: I strongly recommend checking **Add a README file**. This will be what is shown
    to users when they come to your repository. You can fix the file up later using
    Markdown.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议勾选**添加 README 文件**。这将是用户访问你的代码库时看到的内容。你可以稍后使用 Markdown 来修改该文件。
- en: Be sure to add a `.gitignore` file. This tells Git which files to ignore when
    checking your files into the repository. This can be very important so that you
    don't overwrite another programmer's metadata files. Click the dropdown and admire
    how many languages are supported; for C# I recommend you search for and choose
    Visual Studio.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要添加 `.gitignore` 文件。这告诉 Git 在提交文件到代码库时忽略哪些文件。这非常重要，以防你不小心覆盖了其他程序员的元数据文件。点击下拉菜单，看看支持多少种语言；对于
    C#，我建议你搜索并选择 Visual Studio。
- en: If your repository is public, be certain to choose a license for the code. I
    chose the MIT License. You can learn more about this license at [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码库是公开的，请务必为代码选择许可证。我选择了 MIT 许可证。你可以在 [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)
    了解更多关于此许可证的信息。
- en: 'That''s it! You are ready to click **Create repository**. When you do, you''ll
    be brought to the home page for your new GitHub repository:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你准备好点击**创建代码库**了。点击后，你将被带到你的新 GitHub 代码库的主页：
- en: '![](img/B17441_02_03.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_03.png)'
- en: 'Figure 2.3: Initial view of your repository'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：你代码库的初始视图
- en: Notice that you have the three files you asked for, and that you can see a preview
    of the README as well as the description you entered.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你已经有了你要求的三个文件，并且可以看到 README 文件的预览以及你输入的描述。
- en: Right now, this repository exists only on the server. You want to put a copy
    on your disk so that you can add code and use commands to keep them in sync. Therefore
    you will "clone" the repository; that is, you'll make an exact copy of the remote
    repository in your local repository.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这个仓库只存在于服务器上。你想把它复制到你的磁盘上，以便你可以添加代码并使用命令保持同步。因此，你将“克隆”这个仓库；也就是说，你会在本地仓库中创建一个远程仓库的精确副本。
- en: How you will do this will depend on whether you are using the command line,
    Visual Studio, or a GUI.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何进行这一步将取决于你使用的是命令行、Visual Studio 还是 GUI。
- en: Cloning to your computer – command line
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆到你的计算机 – 命令行
- en: Cloning to your local repository is easy. Open your terminal (or PowerShell)
    and change the directory to where you want the repository to go (in my case GitHub/the
    command line).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆到本地仓库非常简单。打开你的终端（或 PowerShell），并将目录更改为你想要仓库存放的位置（在我这里是 GitHub/命令行）。
- en: 'Switch back to your GitHub repo on [GitHub.com](http://GitHub.com), and see
    the green button in the upper right-hand corner marked **Code**. Click that button
    and a small dialog box will open. Choose **HTTPS** unless you know you have **SSH**
    (as I do). In either case, click on the clipboard icon to copy the address:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到你的 GitHub 仓库，点击右上角绿色的**Code**按钮。点击该按钮后会弹出一个小对话框。选择**HTTPS**，除非你知道自己有**SSH**（就像我一样）。无论哪种情况，点击剪贴板图标以复制地址：
- en: '![](img/B17441_02_04.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_04.png)'
- en: 'Figure 2.4: Copying the address of the repo'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：复制仓库地址
- en: 'Return to the command line, enter `git clone`, and then paste in the address:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到命令行，输入 `git clone`，然后粘贴地址：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see something like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似这样的内容：
- en: '![](img/B17441_02_05.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_05.png)'
- en: 'Figure 2.5: Cloning at the command line'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：在命令行中克隆
- en: 'Change the directory to `ProGitForProgrammers` and you''ll see that the three
    files that were on the server are now here as well:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将目录更改为`ProGitForProgrammers`，你会看到原本在服务器上的三个文件现在也出现在这里：
- en: '![](img/B17441_02_06.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_06.png)'
- en: 'Figure 2.6: Files in the directory'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6：目录中的文件
- en: Now let's take a look at how to do this in Visual Studio.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在 Visual Studio 中执行此操作。
- en: Cloning to your computer – visual studio
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆到你的计算机 – Visual Studio
- en: Go to your directory (in my case `GitHub`) and make a directory called `VisualStudio`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 进入你的目录（在我这里是`GitHub`），创建一个名为 `VisualStudio` 的目录。
- en: 'Open Visual Studio with no project. Select **File | Clone Repository**. Fill
    in the fields and click **Clone**:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 打开没有项目的 Visual Studio，选择**文件 | 克隆仓库**。填写字段并点击**克隆**：
- en: '![](img/B17441_02_07.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_07.png)'
- en: 'Figure 2.7: Cloning to your local repository using Visual Studio'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：使用 Visual Studio 克隆到本地仓库
- en: 'A few seconds later you will see the three files, now shown in the **Solution
    Explorer**:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，你会看到三个文件，现在它们显示在**解决方案资源管理器**中：
- en: '![](img/B17441_02_08.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_08.png)'
- en: 'Figure 2.8: Cloned files in Visual Studio'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8：在 Visual Studio 中的克隆文件
- en: There are a number of ways to clone from a GitHub repository to your own. One
    way is to use a dedicated GUI tool such as GitHub Desktop.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从 GitHub 仓库克隆到你自己的仓库有很多种方法。其中一种方法是使用专用的 GUI 工具，比如 GitHub Desktop。
- en: Cloning to your computer – GitHub for Desktop
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆到你的计算机 – GitHub for Desktop
- en: Once again, return to your root directory (`GitHub`) and make a new directory.
    This time call it `GitHubDesktop`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次返回到你的根目录（`GitHub`），并创建一个新目录。这次命名为`GitHubDesktop`。
- en: 'Now, return to GitHub and click **Code**:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到 GitHub 并点击**Code**：
- en: '![](img/B17441_02_09.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_09.png)'
- en: 'Figure 2.9: Cloning directly through GitHub Desktop'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9：通过 GitHub Desktop 直接克隆
- en: 'Notice that one of the choices is **Open with GitHub Desktop**. Click on that.
    A dialog will open. The only field you need to fill in is the local path. Click
    **Clone**:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，其中一个选项是**使用 GitHub Desktop 打开**。点击它，一个对话框会弹出。你需要填写的唯一字段是本地路径。点击**克隆**：
- en: '![](img/B17441_02_10.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_10.png)'
- en: 'Figure 2.10: Cloning to GitHub Desktop using HTTP'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：使用 HTTP 克隆到 GitHub Desktop
- en: Notice that GitHub Desktop wants the `https` URL for your repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，GitHub Desktop 需要你仓库的 `https` URL。
- en: 'You now have three copies of your original repository, each in its own directory:
    `CommandLine`, `VisualStudio`, and `GitHubDesktop`. These might represent three
    programmers working on the same solution, or various ways for one programmer to
    choose to clone their project.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有三个原始仓库的副本，每个副本都在自己的目录中：`CommandLine`、`VisualStudio` 和 `GitHubDesktop`。这些可能代表三位程序员在同一个解决方案上工作，或者是一个程序员选择克隆其项目的不同方式。
- en: Creating a project
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: We need a project. Using Visual Studio (or your favorite editor) create a project
    called `ProGitForProgrammers` in the `CommandLine` directory. When you are done,
    you should have the three original files and a folder for your program. In that
    folder will be the `.sln` file as well as a folder for the code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个项目。使用 Visual Studio（或您喜欢的编辑器）在 `CommandLine` 目录下创建一个名为 `ProGitForProgrammers`
    的项目。完成后，您应该会有三个原始文件和一个程序文件夹。该文件夹中将包含 `.sln` 文件以及一个代码文件夹。
- en: 'Open the command line and navigate to the same directory. When you get there
    your command line should look something like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令行并导航到相同的目录。当您到达时，您的命令行应如下所示：
- en: '![](img/B17441_02_11.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_11.png)'
- en: 'Figure 2.11: The command-line prompt'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：命令行提示符
- en: 'Look at the yellow, where you see `+1 ~0 -0`. The `+1` means you''ve added
    a file or a directory; the `~0` indicates that no files have been modified; the
    `-0` indicates that no files have been deleted. Let''s see what was added. Enter:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 看看黄色区域，您会看到 `+1 ~0 -0`。`+1` 表示您添加了一个文件或目录；`~0` 表示没有文件被修改；`-0` 表示没有文件被删除。让我们来看一下添加了什么。输入：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see something like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似如下内容：
- en: '![](img/B17441_02_12.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_12.png)'
- en: 'Figure 2.12: Untracked files'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：未跟踪的文件
- en: 'Git is telling you that you are on the branch `main` (the only branch for now)
    and that you have "untracked files" – that is, files that are in the directory
    but that are not being tracked by Git. If they are untracked, Git can''t store
    them; in fact, Git knows nothing about them. Let''s fix that. Enter these commands:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Git 告诉您您在 `main` 分支（目前唯一的分支）上，并且您有“未跟踪的文件”——也就是说，这些文件存在于目录中，但 Git 并没有跟踪它们。如果它们是未跟踪的，Git
    无法存储它们；实际上，Git 根本不知道它们的存在。让我们来解决这个问题。输入以下命令：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`add` tells Git that this is a file it should pay attention to and `commit`
    brings it into the local repository.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`add` 告诉 Git 这是一个它应该关注的文件，而 `commit` 将其添加到本地仓库。'
- en: Every `commit` must have a message, and if you don't provide one, you'll be
    prompted by Git to add one. Here I've added it by using the `-m` flag.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每次 `commit` 都必须有一条信息，如果您没有提供，Git 会提示您添加信息。我在这里通过使用 `-m` 标志添加了它。
- en: 'Once again, all this is happening locally and so GitHub doesn''t know about
    it. We can fix that by pushing our commit up to the server:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，所有这些操作都发生在本地，因此 GitHub 并不知道这一切。我们可以通过将我们的提交推送到服务器来解决这个问题：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now if you go to GitHub and refresh the page your project will be there. You
    can click your way down through the folders, and even into `Program.cs`, to see
    the code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您去 GitHub 并刷新页面，您的项目将会显示在那里。您可以通过文件夹逐层点击，甚至进入 `Program.cs` 文件，查看代码：
- en: '![](img/B17441_02_13.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_02_13.png)'
- en: 'Figure 2.13: Viewing your code on GitHub'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13：在 GitHub 上查看您的代码
- en: Notice in the upper left that it tells you that you are on the **main** branch.
    Next to that is the path to get to `Program.cs`. Below that is the message you
    added, and then the file itself.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意左上角告诉您您正在 **main** 分支。旁边是到 `Program.cs` 的路径。下面是您添加的提交信息，然后是文件本身。
- en: Git pull
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 拉取
- en: Having pushed your commits to the server, other developers may want to pull
    them to their own directory, to keep in sync.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的提交推送到服务器后，其他开发者可能希望将其拉取到自己的目录，以保持同步。
- en: Pulling down using GitHub Desktop
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GitHub Desktop 拉取
- en: Having put the project up on the server, we can simply pull it down into the
    other locations. For example, open GitHub Desktop. It will tell you that there
    have been changes in the repository and helpfully offer a button for you to update
    your local repo.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目上传到服务器后，我们可以轻松地将其拉取到其他位置。例如，打开 GitHub Desktop。它会告诉您仓库中有更改，并热心地提供一个按钮帮助您更新本地仓库。
- en: If you open a file explorer and navigate to the `GitHubDesktop` directory, you'll
    see that there is now a replica of the files you pushed from the command line.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开文件资源管理器并导航到 `GitHubDesktop` 目录，您将看到现在有一个您从命令行推送的文件副本。
- en: Pulling down to Visual Studio
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拉取到 Visual Studio
- en: 'Click on the Git menu and choose **Pull**. Visual Studio is updated with the
    code from the server. Now all three repositories are up to date. This is the heart
    of Git:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Git 菜单并选择 **拉取**。Visual Studio 会更新为服务器上的代码。现在所有三个仓库都是最新的。这是 Git 的核心：
- en: Save your files to a local repository
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件保存到本地仓库
- en: Push your files to the remote repository
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件推送到远程仓库
- en: Pull down any files that are on the remote repository but not on your local
    repository
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取任何在远程仓库中但本地仓库中不存在的文件
- en: Push me, pull you
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送我，拉取你
- en: Generally, you want to push your changes and pull down changes from other developers.
    Also, generally, you will not be working on the same files, and certainly not
    in main. We'll discuss how to avoid this in *Chapter 4*, *Merging Branches*. For
    now, we'll just be very careful.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会推送自己的更改并从其他开发者那里拉取更改。此外，通常你不会在相同的文件上工作，更不会在主分支（main）上工作。我们将在*第4章*，*合并分支*中讨论如何避免这种情况。现在，我们只需要格外小心。
- en: 'Open Visual Studio in the directory `GitHub/VisualStudio/ProGitForProgrammers`.
    Add a line to `Program.cs` as shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录`GitHub/VisualStudio/ProGitForProgrammers`中打开 Visual Studio。按照下面的方式向`Program.cs`中添加一行代码：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
