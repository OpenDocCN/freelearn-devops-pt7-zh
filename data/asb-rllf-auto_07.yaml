- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Managing Your Virtualization and Cloud Platforms
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理您的虚拟化和云平台
- en: Since the introduction of virtualization and cloud computing, organizations
    can handle their IT infrastructure using programmatic methods since most of the
    IT components are software-defined, such as **software-defined data centers**
    (**SDDC**), **software-defined storage** (**SDS**), **software-defined networking**
    (**SDN**), and others. But this additional layer of technologies also made infrastructure
    management more complex as engineers need to handle both the underlying infrastructure
    and the overcloud virtual components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自虚拟化和云计算引入以来，组织能够使用程序化的方法处理其 IT 基础设施，因为大多数 IT 组件是软件定义的，例如**软件定义数据中心**（**SDDC**）、**软件定义存储**（**SDS**）、**软件定义网络**（**SDN**）等。但是，这些额外的技术层也使得基础设施管理更加复杂，因为工程师需要同时处理底层基础设施和上层虚拟组件。
- en: Ansible can help you automate both the underlying cloud infrastructure as well
    as the overcloud virtual components such as the automated cluster configurations
    of virtualization platforms (VMware, OpenStack, Red Hat Virtualization, and others).
    It can also help you provision virtual components such as virtual machines, virtual
    networks, and virtual storage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 可以帮助您自动化底层云基础设施以及上层虚拟组件的管理，例如虚拟化平台（VMware、OpenStack、Red Hat Virtualization
    等）的自动化集群配置。它还可以帮助您配置虚拟组件，如虚拟机、虚拟网络和虚拟存储。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主题：
- en: Introduction to Infrastructure as Code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码简介
- en: Managing cloud platforms using Ansible
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理云平台
- en: Automating VMware vSphere resources using Ansible
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 自动化 VMware vSphere 资源
- en: Using Ansible as an IaC tool for AWS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 作为 AWS 的 IaC 工具
- en: Creating resources in GCP using Ansible
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 在 GCP 中创建资源
- en: First, you will learn how to configure the necessary authentication and provision
    resources in virtualization platforms such as VMware vCenter and public cloud
    platforms such as GCP and AWS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将学习如何配置必要的身份验证，并在虚拟化平台（如 VMware vCenter）和公共云平台（如 GCP 和 AWS）中配置资源。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements for this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: A Linux machine for the Ansible control node (with internet access)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 Ansible 控制节点的 Linux 机器（需要能够访问互联网）
- en: Knowledge of managing cloud platforms (VMware, GCP, and AWS)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理云平台（VMware、GCP 和 AWS）的知识
- en: Access to the VMware vCenter console and API (for the VMware use case)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 VMware vCenter 控制台和 API（针对 VMware 用例）
- en: Access to the AWS console and API
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 AWS 控制台和 API
- en: Access to the GCP console and API
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 GCP 控制台和 API
- en: All the Ansible code, playbooks, commands, and snippets for this chapter can
    be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-07](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-07).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有 Ansible 代码、剧本、命令和代码片段可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-07](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-07)
- en: Introduction to Infrastructure as Code
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码简介
- en: '**Infrastructure as Code** (**IaC**) is a method that’s used to provision and
    manage infrastructure details and configurations as software code and make changes
    inside the code instead of changing the infrastructure whenever required. There
    are many dedicated tools and software for IaC, including Ansible. Instead of manually
    deploying the infrastructure components, such as virtual machines, storage, network,
    policies, and so on, it is possible to develop IaC and use tools to deploy the
    infrastructure automatically. The following diagram shows some typical IaC components
    regarding the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）是一种方法，用于将基础设施的细节和配置作为软件代码进行配置和管理，并通过修改代码来更改基础设施，而不是每次需要时修改基础设施。许多专门的工具和软件用于
    IaC，包括 Ansible。与手动部署基础设施组件（如虚拟机、存储、网络、策略等）不同，您可以开发 IaC 并使用工具自动化部署基础设施。下图展示了与以下内容相关的典型
    IaC 组件：'
- en: Infrastructure component details will be stored as code in a specific format
    (for example, YAML playbooks).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施组件的详细信息将以特定格式（例如 YAML 剧本）存储为代码。
- en: 'IaC tools (for example, Ansible) will create and manage the infrastructure
    component in the private or public cloud based on the infrastructure code:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaC 工具（例如 Ansible）将根据基础设施代码在私有或公共云中创建和管理基础设施组件：
- en: '![Figure 7.1 – Typical Infrastructure as Code components ](img/B18383_07_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 典型的基础设施即代码组件](img/B18383_07_01.jpg)'
- en: Figure 7.1 – Typical Infrastructure as Code components
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 典型的基础设施即代码组件
- en: In the next sections, you will learn how to use Ansible as an IaC tool for deploying
    and managing infrastructure in private and public cloud platforms.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将学习如何使用 Ansible 作为基础设施即代码（IaC）工具，在私有和公共云平台上部署和管理基础设施。
- en: Managing cloud platforms using Ansible
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理云平台
- en: As you learned in the previous chapters, Ansible can manage both Linux, Windows,
    and network devices. But virtualization platforms work differently and you cannot
    use SSH-based connections and operations to automate such platforms. Most of these
    platforms offer **application programming interface** (**API**) and **software
    development kit** (**SDK**)-based access to help us access and control such platforms
    over HTTP (or HTTPS). Since Ansible can use SDK (Python libraries) and communicate
    over HTTP/HTTPS, it is possible to automate any platforms that offer such access.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前几章中所学到的，Ansible 可以管理 Linux、Windows 和网络设备。但是虚拟化平台的工作方式不同，无法使用基于 SSH 的连接和操作来自动化这些平台。这些平台大多数提供
    **应用程序编程接口** (**API**) 和 **软件开发工具包** (**SDK**) 访问方式，帮助我们通过 HTTP（或 HTTPS）访问和控制这些平台。由于
    Ansible 可以使用 SDK（Python 库）并通过 HTTP/HTTPS 进行通信，因此可以自动化任何提供这种访问方式的平台。
- en: 'The following diagram shows the different connection methods used by Ansible
    to communicate with the managed devices and platforms:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 Ansible 用于与管理设备和平台进行通信的不同连接方式：
- en: '![Figure 7.2 – Ansible connection methods ](img/B18383_07_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – Ansible 连接方式](img/B18383_07_02.jpg)'
- en: Figure 7.2 – Ansible connection methods
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Ansible 连接方式
- en: Application Programming Interface
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口
- en: An API is a connection or protocol that allows one system to communicate with
    another using a dedicated set of instructions and results. Unlike command-line
    utilities, which are meant for human interaction with the system, API-based access
    can help automate and control such systems programmatically and in a controlled
    way. Read more about APIs at [https://en.wikipedia.org/wiki/API](https://en.wikipedia.org/wiki/API).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: API 是一种连接或协议，允许一个系统通过一套专用的指令和结果与另一个系统进行通信。与命令行工具不同，命令行工具是用于人机交互的，而基于 API 的访问可以帮助以编程方式和受控的方式自动化和控制这些系统。了解更多关于
    API 的内容，请访问 [https://en.wikipedia.org/wiki/API](https://en.wikipedia.org/wiki/API)。
- en: 'Ansible has hundreds of modules (refer to *Figure 7.3*) and plugins that support
    cloud automation and they are available as collections for specific cloud or virtualization
    platforms. With these modules, it is possible to create and manage cloud resources
    such as virtual machines, virtual private networks, virtual disks, access policies,
    serverless components, containers, and more:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 拥有数百个模块（参见 *图 7.3*）和插件，支持云自动化，并且它们作为特定云平台或虚拟化平台的集合提供。通过这些模块，可以创建和管理云资源，如虚拟机、虚拟私有网络、虚拟磁盘、访问策略、无服务器组件、容器等：
- en: '![Figure 7.3 – Ansible cloud modules ](img/B18383_07_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – Ansible 云模块](img/B18383_07_03.jpg)'
- en: Figure 7.3 – Ansible cloud modules
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – Ansible 云模块
- en: 'Find the full list of cloud modules at [https://docs.ansible.com/ansible/2.9/modules/list_of_cloud_modules.xhtml](https://docs.ansible.com/ansible/2.9/modules/list_of_cloud_modules.xhtml)
    (for Ansible 2.9). Since the introduction of Ansible collections, these modules
    have been migrated to the respective cloud collections. Check out the collection
    pages in Ansible Galaxy ([https://galaxy.ansible.com](https://galaxy.ansible.com))
    to see all the plugins, roles, and playbooks that are part of the Ansible content
    collection. For example, the following screenshot shows the Ansible collection
    page of the VMware collection by the community ([https://galaxy.ansible.com/community/vmware](https://galaxy.ansible.com/community/vmware)):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [https://docs.ansible.com/ansible/2.9/modules/list_of_cloud_modules.xhtml](https://docs.ansible.com/ansible/2.9/modules/list_of_cloud_modules.xhtml)（适用于
    Ansible 2.9）上找到云模块的完整列表。自 Ansible 集合推出以来，这些模块已经迁移到相应的云集合中。请查看 Ansible Galaxy 中的集合页面（[https://galaxy.ansible.com](https://galaxy.ansible.com)），以查看所有插件、角色和剧本，这些内容是
    Ansible 内容集合的一部分。例如，以下截图显示了 VMware 集合的社区 Ansible 集合页面（[https://galaxy.ansible.com/community/vmware](https://galaxy.ansible.com/community/vmware)）：
- en: '![Figure 7.4 – Ansible VMware collection ](img/B18383_07_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – Ansible VMware 集合](img/B18383_07_04.jpg)'
- en: Figure 7.4 – Ansible VMware collection
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – Ansible VMware 集合
- en: 'Search for the collection in Ansible Galaxy and use the appropriate collection
    either from the community or from the vendors themselves. The following screenshot
    shows the search result for the `aws` collection in the Ansible Galaxy portal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible Galaxy 中搜索集合，并使用来自社区或供应商的适当集合。以下截图展示了在 Ansible Galaxy 门户中搜索 `aws`
    集合的结果：
- en: '![Figure 7.5 – AWS collection result in Ansible Galaxy ](img/B18383_07_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – AWS 集合在 Ansible Galaxy 中的结果](img/B18383_07_05.jpg)'
- en: Figure 7.5 – AWS collection result in Ansible Galaxy
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – AWS 集合在 Ansible Galaxy 中的结果
- en: By exploring the Ansible Galaxy portal, you will find thousands of contributions
    from the community and vendors. By using Ansible collections, it is possible to
    save playbook development time by using existing roles, modules, and playbooks
    from existing collections.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过探索 Ansible Galaxy 门户，你将发现来自社区和供应商的成千上万的贡献。通过使用 Ansible 集合，可以利用现有的角色、模块和剧本，节省开发剧本的时间。
- en: In the next section, you will learn how to manage VMware using Ansible by using
    connection methods, modules, and more.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何通过使用连接方法、模块等来管理 VMware。
- en: Automating VMware vSphere resources using Ansible
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 自动化 VMware vSphere 资源
- en: 'We will start with some simple automation use cases for VMware, such as provisioning
    of virtual machines, managing `community.vmware`) contains around 150 modules
    and other plugins:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一些简单的 VMware 自动化用例开始，例如虚拟机的配置、管理等。`community.vmware` 包含大约 150 个模块和其他插件：
- en: '![Figure 7.6 – Ansible VMware collection by the community ](img/B18383_07_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 社区提供的 Ansible VMware 集合](img/B18383_07_06.jpg)'
- en: Figure 7.6 – Ansible VMware collection by the community
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 社区提供的 Ansible VMware 集合
- en: The `community.vmware` collection relies on the `pyvmomi` and `community.vmware`
    collection, you need to install appropriate packages for Ansible to use it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`community.vmware` 集合依赖于 `pyvmomi` 和 `community.vmware` 集合，你需要安装适当的包以便 Ansible
    使用它。'
- en: 'VMware has already introduced the `vmware.vmware_rest`) to manage the operations
    using a REST API instead of Python libraries and SDKs. `vmware.vmware_rest` contains
    around 130 modules and other plugins:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: VMware 已经推出了 `vmware.vmware_rest`，通过 REST API 来管理操作，而不是使用 Python 库和 SDK。`vmware.vmware_rest`
    包含大约 130 个模块和其他插件：
- en: '![Figure 7.7 – Ansible VMware REST API collection by VMware ](img/B18383_07_07.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – VMware 提供的 Ansible VMware REST API 集合](img/B18383_07_07.jpg)'
- en: Figure 7.7 – Ansible VMware REST API collection by VMware
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – VMware 提供的 Ansible VMware REST API 集合
- en: Use any of these Ansible collections, depending on your vSphere version and
    module requirements.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的 vSphere 版本和模块需求，使用这些 Ansible 集合中的任何一个。
- en: VMware Ansible Collections
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: VMware Ansible 集合
- en: The Ansible VMware community collection based on the Python library is available
    at [https://galaxy.ansible.com/community/vmware](https://galaxy.ansible.com/community/vmware).
    The collection based on the REST API is available at [https://galaxy.ansible.com/vmware/vmware_rest](https://galaxy.ansible.com/vmware/vmware_rest).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Python 库的 Ansible VMware 社区集合可以在 [https://galaxy.ansible.com/community/vmware](https://galaxy.ansible.com/community/vmware)
    获取。基于 REST API 的集合可以在 [https://galaxy.ansible.com/vmware/vmware_rest](https://galaxy.ansible.com/vmware/vmware_rest)
    获取。
- en: Ansible VMware automation prerequisites
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible VMware 自动化前提条件
- en: 'To use the VMware collection, you need to meet the following requirements:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 VMware 集合，你需要满足以下要求：
- en: Install the Ansible VMware collection.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Ansible VMware 集合。
- en: Install the required libraries.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的库。
- en: VMware vCenter Lab
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: VMware vCenter 实验室
- en: If you do not have access to a VMware lab to test and practice, then get an
    evaluation copy of VMware vSphere ([https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=vsphere-eval-7](https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=vsphere-eval-7))
    and install it on your home server. Refer to *How to Install VMware vSphere Hypervisor
    ESXi* ([https://www.techbeatly.com/how-to-install-vmware-vsphere-hypervisor-esxi](https://www.techbeatly.com/how-to-install-vmware-vsphere-hypervisor-esxi))
    and *How to Install VMware vCenter Server Appliance* ([https://www.techbeatly.com/how-to-install-vmware-vcenter-server-appliance](https://www.techbeatly.com/how-to-install-vmware-vcenter-server-appliance))
    to set up a VMware home lab.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 VMware 实验室用于测试和练习，可以获取 VMware vSphere 的评估版（[https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=vsphere-eval-7](https://customerconnect.vmware.com/en/web/vmware/evalcenter?p=vsphere-eval-7)）并将其安装在你的家庭服务器上。参考*如何安装
    VMware vSphere Hypervisor ESXi*（[https://www.techbeatly.com/how-to-install-vmware-vsphere-hypervisor-esxi](https://www.techbeatly.com/how-to-install-vmware-vsphere-hypervisor-esxi)）和*如何安装
    VMware vCenter Server Appliance*（[https://www.techbeatly.com/how-to-install-vmware-vcenter-server-appliance](https://www.techbeatly.com/how-to-install-vmware-vcenter-server-appliance)）来搭建
    VMware 家庭实验室。
- en: Installing an Ansible VMware collection
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Ansible VMware 集合
- en: 'Use the `ansible-galaxy` command to install a collection. By default, `ansible-galaxy`
    will store the collection’s content in the `HOME_DIRECTORY/.ansible/collections`
    path. It is a best practice to store the collection in a project directory instead
    of a home directory to avoid any dependency issues. Configure the collection path
    in `ansible.cfg`, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ansible-galaxy`命令安装集合。默认情况下，`ansible-galaxy`会将集合的内容存储在`HOME_DIRECTORY/.ansible/collections`路径中。为了避免任何依赖问题，最佳实践是将集合存储在项目目录中，而不是主目录中。按照以下方式在`ansible.cfg`中配置集合路径：
- en: '![Figure 7.8 – ansible.cfg with collection_paths ](img/B18383_07_08.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – ansible.cfg 配置文件与 collection_paths](img/B18383_07_08.jpg)'
- en: Figure 7.8 – ansible.cfg with collection_paths
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – ansible.cfg 配置文件与 collection_paths
- en: 'When you execute the `ansible-galaxy` command, the collection will be downloaded
    and stored in the project directory as per the configuration, as shown in the
    following screenshot (refer to the **VMware Ansible collections** page at [galaxy.ansible.com](http://galaxy.ansible.com)
    to see the installation command; refer to the previous information box to find
    the link):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`ansible-galaxy`命令时，集合将根据配置被下载并存储在项目目录中，如下图所示（请参阅**VMware Ansible 集合**页面，网址为[galaxy.ansible.com](http://galaxy.ansible.com)查看安装命令；请参阅前面的信息框查找链接）：
- en: '![Figure 7.9 – Installing the VMware collection ](img/B18383_07_09.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 安装 VMware 集合](img/B18383_07_09.jpg)'
- en: Figure 7.9 – Installing the VMware collection
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 安装 VMware 集合
- en: 'Verify the collection’s details using the `ansible-galaxy collection list`
    command, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ansible-galaxy collection list`命令验证集合的详细信息，如下所示：
- en: '![Figure 7.10 – Listing the installed collections ](img/B18383_07_10.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 列出已安装的集合](img/B18383_07_10.jpg)'
- en: Figure 7.10 – Listing the installed collections
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 列出已安装的集合
- en: If you have installed the Ansible community package, then the default collection
    will be there as part of Python’s `site-packages`. The latest collection that’s
    been installed inside your custom collection directory can be seen in the preceding
    screenshot.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 Ansible 社区包，那么默认集合将作为 Python 的`site-packages`的一部分存在。最新安装的集合可以在你自定义的集合目录中看到，前面截图中已显示。
- en: Installing the required Python libraries
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装所需的 Python 库
- en: 'The list of required Python libraries and SDKs will be stored inside the `requirements.txt`
    file in the collection folder, as shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的 Python 库和 SDK 列表将存储在集合文件夹中的`requirements.txt`文件内，如下所示：
- en: '![Figure 7.11 – Collection dependencies in requirements.txt ](img/B18383_07_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – requirements.txt 中的集合依赖项](img/B18383_07_11.jpg)'
- en: Figure 7.11 – Collection dependencies in requirements.txt
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – requirements.txt 中的集合依赖项
- en: 'Use the `pip install` command to install all the dependencies for the Ansible
    collection, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip install`命令安装 Ansible 集合的所有依赖项，如下所示：
- en: '![Figure 7.12 – Installing the requirements for the collection ](img/B18383_07_12.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – 安装集合所需的依赖项](img/B18383_07_12.jpg)'
- en: Figure 7.12 – Installing the requirements for the collection
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – 安装集合所需的依赖项
- en: If you are using Python virtual environments for Ansible, then remember to activate
    the appropriate virtual environment and install the necessary libraries inside
    the Python virtual environment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为 Ansible 使用 Python 虚拟环境，请记得激活适当的虚拟环境，并在虚拟环境中安装必要的库。
- en: Automation Execution Environments
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化执行环境
- en: Red Hat Ansible Tower used Python virtual environments to handle dependencies
    such as Python libraries, collections, and so on. In `ansible-core`, and the required
    collections. Refer to [https://www.ansible.com/products/execution-environments](https://www.ansible.com/products/execution-environments)
    for more details. Learn how to build new execution environments (container images)
    using the `ansible-builder` utility ([https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat Ansible Tower 使用 Python 虚拟环境来处理依赖项，如 Python 库、集合等。在 `ansible-core` 和所需的集合中。有关更多详细信息，请参考
    [https://www.ansible.com/products/execution-environments](https://www.ansible.com/products/execution-environments)。学习如何使用
    `ansible-builder` 工具构建新的执行环境（容器镜像）（[https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/execution_environments.xhtml)）。
- en: Provisioning VMware virtual machines in Ansible
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ansible 中配置 VMware 虚拟机
- en: In this exercise, you will create Ansible content to provision virtual machines
    in a VMware cluster.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将创建 Ansible 内容来在 VMware 集群中配置虚拟机。
- en: 'You must have the following configurations and details in place before proceeding
    with this exercise:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续此练习之前，您必须具备以下配置和详细信息：
- en: A virtual machine template in VMware vCenter (Linux or Windows)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware vCenter 中的虚拟机模板（Linux 或 Windows）
- en: A default user account inside the virtual machine template to access new virtual
    machines once provisioned
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机模板中用于访问新虚拟机的默认用户帐户
- en: A VMware vCenter username and password with adequate access to create and manage
    resources in the cluster
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有足够权限的 VMware vCenter 用户名和密码，以便在集群中创建和管理资源
- en: Details of the data center, cluster, datastore, and folder to save the VM in
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于保存虚拟机的数据中心、集群、数据存储和文件夹的详细信息
- en: Ensure the appropriate permissions are in place by logging into VMware vCenter
    and creating some test machines using the VMware VM template. Once you have confirmed
    the access and permissions, start developing Ansible artifacts for VMware VM provisioning.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过登录到 VMware vCenter 并使用 VMware 虚拟机模板创建一些测试机器，确保适当的权限已经设置好。一旦确认了访问和权限，开始为 VMware
    虚拟机配置开发 Ansible 工件。
- en: Creating Ansible automation artifacts for VM provisioning
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用于虚拟机配置的 Ansible 自动化工件
- en: 'You need to declare and pass a few variables for the vCenter access and VM
    creation. Keep these variables inside the playbook or in a separate file. Follow
    these steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要声明并传递一些变量以进行 vCenter 访问和虚拟机创建。将这些变量保存在 playbook 中或单独的文件中。按照以下步骤操作：
- en: 'Store the vCenter credentials inside your Ansible Vault file – that is, `vars/vmware-credential.yaml`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 vCenter 凭据存储在您的 Ansible Vault 文件中——即 `vars/vmware-credential.yaml`：
- en: '![Figure 7.13 – Creating an Ansible Vault file for your VMware credentials
    ](img/B18383_07_13.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 为您的 VMware 凭据创建 Ansible Vault 文件](img/B18383_07_13.jpg)'
- en: Figure 7.13 – Creating an Ansible Vault file for your VMware credentials
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 为您的 VMware 凭据创建 Ansible Vault 文件
- en: 'Add the VMware vCenter username and password inside the file and save the vault
    file:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 VMware vCenter 用户名和密码添加到文件中并保存 Vault 文件：
- en: '[PRE0]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Remember the vault password as you will need this while executing the playbook.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住 Vault 密码，因为在执行 playbook 时将需要它。
- en: 'Create another variable file called `vars/common-vars.yml` for storing details
    about the new virtual machine (refer to `Chapter-07` in this book’s GitHub repository
    for more details):'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个名为 `vars/common-vars.yml` 的变量文件，用于存储关于新虚拟机的详细信息（有关详细信息，请参阅本书 GitHub 仓库中的
    `Chapter-07`）：
- en: '![Figure 7.14 – Variables for the VMware cluster and VM ](img/B18383_07_14.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – VMware 集群和虚拟机的变量](img/B18383_07_14.jpg)'
- en: Figure 7.14 – Variables for the VMware cluster and VM
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – VMware 集群和虚拟机的变量
- en: It is possible to add multiple VM details inside and loop the task. However,
    we only covered using a single VM here.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在其中添加多个虚拟机详细信息并循环任务。然而，我们这里只涉及了使用单个虚拟机。
- en: 'Create a role for virtual machine provisioning by using the `ansible-galaxy
    role init` command, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `ansible-galaxy role init` 命令创建用于虚拟机配置的角色，如下所示：
- en: '![Figure 7.15 – Initializing a new role using the ansible-galaxy role init
    command ](img/B18383_07_15.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 使用 `ansible-galaxy role init` 命令初始化一个新角色](img/B18383_07_15.jpg)'
- en: Figure 7.15 – Initializing a new role using the ansible-galaxy role init command
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 使用 `ansible-galaxy role init` 命令初始化一个新角色
- en: 'Add the necessary tasks to `roles/vmware-provision-vm-from-template/tasks/main.yml`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将必要的任务添加到 `roles/vmware-provision-vm-from-template/tasks/main.yml`：
- en: '![Figure 7.16 – main.yaml with a subtasks file ](img/B18383_07_16.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 带有子任务文件的 main.yaml](img/B18383_07_16.jpg)'
- en: Figure 7.16 – main.yaml with a subtasks file
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 带有子任务文件的 main.yaml
- en: '`tasks/main.yml` contains two tasks for calling the subtasks file. The first
    task does a pre-check to ensure a VM with the same name does not exist before
    you proceed with VM creation. If one doesn’t exist, then the next task will be
    executed based on the `when: vm_check.failed` condition. This is a best practice
    as you need to add all possible validations and error handling inside the playbook.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`tasks/main.yml` 包含两个任务，用于调用子任务文件。第一个任务进行预检查，以确保在继续创建虚拟机之前不存在同名的虚拟机。如果没有虚拟机存在，则根据
    `when: vm_check.failed` 条件执行下一个任务。这是一种最佳实践，因为在 playbook 中需要添加所有可能的验证和错误处理。'
- en: 'Create the necessary content for `roles/vmware-provision-vm-from-template/tasks/vmware-provisioning-pre-check.yaml`.
    Also, display a message if the virtual machine already exists:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `roles/vmware-provision-vm-from-template/tasks/vmware-provisioning-pre-check.yaml`
    的必要内容。如果虚拟机已存在，还要显示一条消息：
- en: '![Figure 7.17 – vmware-provisioning-pre-check.yaml ](img/B18383_07_17.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – vmware-provisioning-pre-check.yaml](img/B18383_07_17.jpg)'
- en: Figure 7.17 – vmware-provisioning-pre-check.yaml
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – vmware-provisioning-pre-check.yaml
- en: 'Create `roles/vmware-provision-vm-from-template/tasks/vmware-provisioning-task.yaml`
    and add a task to create a new VMware VM (refer to this book’s GitHub repository
    for the full code), as shown in the following screenshot:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `roles/vmware-provision-vm-from-template/tasks/vmware-provisioning-task.yaml`
    并添加一个任务来创建新的 VMware 虚拟机（请参考本书的 GitHub 仓库查看完整代码），如下面的截图所示：
- en: '![Figure 7.18 – VMware VM creation task file ](img/B18383_07_18.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – VMware 虚拟机创建任务文件](img/B18383_07_18.jpg)'
- en: Figure 7.18 – VMware VM creation task file
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – VMware 虚拟机创建任务文件
- en: 'It is a best practice to keep the default values of variables in `roles/vmware-provision-vm-from-template/defaults/main.yml`
    and pass the actual values while executing the playbook:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最佳实践是将变量的默认值保存在 `roles/vmware-provision-vm-from-template/defaults/main.yml`
    中，并在执行 playbook 时传递实际值：
- en: '![Figure 7.19 – Default variable for the VMware role ](img/B18383_07_19.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – VMware 角色的默认变量](img/B18383_07_19.jpg)'
- en: Figure 7.19 – Default variable for the VMware role
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – VMware 角色的默认变量
- en: 'Create the main playbook, `Chapter-07/vmware-provision-vm-from-template.yml`.
    Since the execution happens on a local machine for API and HTTP-based platforms,
    make sure `hosts: localhost` has been configured, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建主 playbook，`Chapter-07/vmware-provision-vm-from-template.yml`。由于执行是在本地机器上进行的，适用于
    API 和 HTTP 基础平台，确保已配置 `hosts: localhost`，如下所示：'
- en: '![Figure 7.20 – The main playbook to create the VMware infrastructure ](img/B18383_07_20.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – 创建 VMware 基础设施的主 playbook](img/B18383_07_20.jpg)'
- en: Figure 7.20 – The main playbook to create the VMware infrastructure
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 创建 VMware 基础设施的主 playbook
- en: It is possible to keep the variables under `group_vars` or `host_vars` as needed.
    However, here we have used a variable file approach to demonstrate this use case
    easily.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据需要将变量保存在 `group_vars` 或 `host_vars` 中。然而，在这里我们采用了变量文件的方法，以便轻松展示此用例。
- en: In the preceding snippet, the `ansible.builtin.wait_for` module is being used
    to wait for the newly created virtual machine to come online with SSH. We used
    the IP address of the virtual machine, port `22` (SSH), and instructed Ansible
    to wait for some period (`vm_wait_for_ssh_time`). Refer to [https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.xhtml)
    to learn more about the `wait_for` module.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，使用了 `ansible.builtin.wait_for` 模块，等待新创建的虚拟机通过 SSH 上线。我们使用了虚拟机的 IP
    地址、端口 `22`（SSH），并指示 Ansible 等待一段时间（`vm_wait_for_ssh_time`）。详细了解 `wait_for` 模块，请参阅
    [https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.xhtml](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/wait_for_module.xhtml)。
- en: 'Once the VM is up and running, add the new VM to a dynamic host group, `vmwarenewvms`,
    for post-provisioning tasks, as shown here:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦虚拟机启动并运行，将新虚拟机添加到动态主机组 `vmwarenewvms` 中，以进行后期配置任务，如下所示：
- en: '![Figure 7.21 – Adding the newly created VM to the Ansible inventory ](img/B18383_07_21.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – 将新创建的虚拟机添加到 Ansible 库中](img/B18383_07_21.jpg)'
- en: Figure 7.21 – Adding the newly created VM to the Ansible inventory
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – 将新创建的虚拟机添加到 Ansible 库中
- en: Instead of adding hosts, it is possible to use the dynamic inventory plugin
    for VMware to detect the newly created virtual machines and use them in the next
    set of tasks. Refer to [https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.xhtml](https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.xhtml)
    for more details. Also, refer to [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086),
    *Expanding Your Automation Landscape*, the *Ansible dynamic inventory* section,
    to learn how to use an Ansible dynamic inventory with AWS.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 VMware 的动态库存插件代替手动添加主机，可以自动检测新创建的虚拟机并在接下来的任务中使用它们。有关更多详情，请参阅 [https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.xhtml](https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_vm_inventory_inventory.xhtml)。此外，参阅
    [*第 5 章*](B18383_05.xhtml#_idTextAnchor086)，*扩展您的自动化范围*，其中包含 *Ansible 动态库存* 部分，了解如何将
    Ansible 动态库存与 AWS 一起使用。
- en: 'Create another play in the same Ansible playbook to execute the post-provisioning
    tasks such as creating new users, configuring system files, and installing new
    packages, as shown here:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个 Ansible playbook 中创建另一个 play 来执行后期配置任务，例如创建新用户、配置系统文件和安装新软件包，如下所示：
- en: '![Figure 7.22 – Second play in the playbook for post-provisioning tasks ](img/B18383_07_22.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 用于后期配置任务的 playbook 中的第二个 play ](img/B18383_07_22.jpg)'
- en: Figure 7.22 – Second play in the playbook for post-provisioning tasks
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – 用于后期配置任务的 playbook 中的第二个 play
- en: 'When you use Ansible Automation Controller (part of Ansible Automation Platform)
    or Ansible AWX, it is possible to split the playbook into multiple job templates
    and create job workflows, as shown in the following diagram:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 Ansible 自动化控制器（Ansible 自动化平台的一部分）或 Ansible AWX 时，可以将 playbook 拆分为多个作业模板，并创建作业工作流，如下图所示：
- en: '![Figure 7.23 – Workflow templates (source: docs.ansible.com) ](img/B18383_07_23.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 工作流模板（来源：docs.ansible.com）](img/B18383_07_23.jpg)'
- en: 'Figure 7.23 – Workflow templates (source: docs.ansible.com)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 工作流模板（来源：docs.ansible.com）
- en: You will learn about workflow job templates and Ansible Automation Controller
    in [*Chapter 12*](B18383_12.xhtml#_idTextAnchor213), *Integrating Ansible with
    Your Tools*. Refer to [https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml)
    to learn more about workflow templates.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 12 章*](B18383_12.xhtml#_idTextAnchor213)，*将 Ansible 集成到您的工具中* 中，您将了解工作流作业模板和
    Ansible 自动化控制器。参阅 [https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml](https://docs.ansible.com/automation-controller/latest/html/userguide/workflows.xhtml)
    了解更多关于工作流模板的内容。
- en: 'Execute the `ansible-playbook vmware-provision-vm-from-template.yml` playbook
    with `--ask-vault-password` and provide the vault password, as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `ansible-playbook vmware-provision-vm-from-template.yml` playbook，使用 `--ask-vault-password`
    参数并提供 vault 密码，如下所示：
- en: '![Figure 7.24 – Executing the playbook to create the VMware VM ](img/B18383_07_24.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 执行 playbook 来创建 VMware 虚拟机 ](img/B18383_07_24.jpg)'
- en: Figure 7.24 – Executing the playbook to create the VMware VM
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 执行 playbook 来创建 VMware 虚拟机
- en: Add more tasks to the post-provisioning section to automate the VM configuration
    workflows and make it a single workflow for end-to-end VM provisioning. In the
    next section, you will learn about cloud management for **Amazon Web Services**
    (**AWS**) and how to use Ansible as an IaC tool.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 向后期配置部分添加更多任务，以自动化虚拟机配置工作流，并将其作为端到端虚拟机配置的单一工作流。在接下来的部分中，您将了解 **Amazon Web Services**
    (**AWS**) 的云管理以及如何将 Ansible 用作基础设施即代码（IaC）工具。
- en: Create a Template in the vSphere Client
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 vSphere Client 中创建一个模板
- en: Refer to [https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.hostclient.doc/GUID-40BC4243-E4FA-4A46-8C8B-F50D92C186ED.xhtml](https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.hostclient.doc/GUID-40BC4243-E4FA-4A46-8C8B-F50D92C186ED.xhtml)
    for VMware template creation procedures.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.hostclient.doc/GUID-40BC4243-E4FA-4A46-8C8B-F50D92C186ED.xhtml](https://docs.vmware.com/en/VMware-vSphere/6.0/com.vmware.vsphere.hostclient.doc/GUID-40BC4243-E4FA-4A46-8C8B-F50D92C186ED.xhtml)
    了解 VMware 模板创建流程。
- en: Using Ansible as an IaC tool for AWS
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Ansible 用作 AWS 的基础设施即代码（IaC）工具
- en: In this section, you will create Ansible content to provision and manage AWS
    resources using Ansible. Let’s assume that whenever you need to create a new EC2
    instance, you need to follow multiple manual procedures such as creating a new
    **Virtual Private Cloud** (**VPC**), a new security group, network access policies,
    and many other items. You also need to do post-provisioning steps such as creating
    new user accounts, installing packages, configuring applications, and more.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将创建Ansible内容，用于通过Ansible配置和管理AWS资源。假设每当您需要创建一个新的EC2实例时，您需要执行多个手动步骤，例如创建一个新的**虚拟私有云**（**VPC**）、一个新的安全组、网络访问策略以及许多其他项目。您还需要进行后配置步骤，例如创建新的用户帐户、安装软件包、配置应用程序等。
- en: With the help of the Ansible AWS collection, it is possible to automate all
    of these tasks and manage the entire life cycle of the infrastructure.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible AWS集合的帮助下，可以自动化所有这些任务，并管理基础设施的整个生命周期。
- en: AWS Free Tier
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS免费套餐
- en: 'To practice AWS and Ansible use cases, it is possible to use AWS Free Tier,
    which provides more than 100 AWS resources free of charge. Visit [https://aws.amazon.com/free](https://aws.amazon.com/free)
    (*Figure 7.25*) and sign up for a free AWS Free Tier account to find them:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要实践AWS和Ansible的用例，可以使用AWS免费套餐，该套餐提供超过100种AWS资源，免费使用。访问[https://aws.amazon.com/free](https://aws.amazon.com/free)
    (*图7.25*)并注册免费的AWS免费套餐账户来查找它们：
- en: '![Figure 7.25 – AWS Free Tier access with more than 100 services ](img/B18383_07_25.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图7.25 – 使用超过100种服务的AWS免费套餐访问](img/B18383_07_25.jpg)'
- en: Figure 7.25 – AWS Free Tier access with more than 100 services
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25 – 使用超过100种服务的AWS免费套餐访问
- en: It is important to ensure that your AWS resource usage is within the AWS Free
    Tier limit to avoid the credit or debit card connected with your account being
    billed. Refer to [https://aws.amazon.com/aws-cost-management/aws-budgets/](https://aws.amazon.com/aws-cost-management/aws-budgets/)
    to learn how to configure budget alerts and other billing details for your AWS
    account.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的AWS资源使用量在AWS免费套餐限制范围内，以避免与您的账户连接的信用卡或借记卡被收费。请参考[https://aws.amazon.com/aws-cost-management/aws-budgets/](https://aws.amazon.com/aws-cost-management/aws-budgets/)了解如何配置预算警报和其他计费详情。
- en: I have ensured that the following demonstration only uses the AWS Free Tier-based
    resources so that no additional costs will be incurred to your AWS Free Tier account.
    But it is also important to delete the resource from the AWS account once you
    have finished testing.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我已确保以下演示仅使用基于AWS免费套餐的资源，这样您的AWS免费套餐账户将不会产生额外费用。但在完成测试后，也很重要要从AWS账户中删除这些资源。
- en: Installing the Ansible AWS collection
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Ansible AWS集合
- en: 'As you learned in the previous section, it is possible to use the `ansible-galaxy`
    command to install the Ansible AWS collection. If you need multiple collections
    for the project, then create a `requirements.yaml` file and mention the required
    collections and roles inside it:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在上一节中所学，可以使用`ansible-galaxy`命令来安装Ansible AWS集合。如果项目需要多个集合，可以创建一个`requirements.yaml`文件，并在其中列出所需的集合和角色：
- en: '![Figure 7.26 – The requirements.yaml file with collection details ](img/B18383_07_26.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图7.26 – 包含集合详细信息的requirements.yaml文件](img/B18383_07_26.jpg)'
- en: Figure 7.26 – The requirements.yaml file with collection details
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26 – 包含集合详细信息的requirements.yaml文件
- en: 'Once `requirements.yaml` has been updated, install the collection using the
    `ansible-galaxy` command by calling the `requirements.yaml` file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`requirements.yaml`文件已更新，通过调用`requirements.yaml`文件，使用`ansible-galaxy`命令安装集合：
- en: '![Figure 7.27 – Installing the collection using requirements.yaml ](img/B18383_07_27.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图7.27 – 使用requirements.yaml安装集合](img/B18383_07_27.jpg)'
- en: Figure 7.27 – Installing the collection using requirements.yaml
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27 – 使用requirements.yaml安装集合
- en: 'The collection will be installed in the `Chapter-07/collections` path that
    you configured in `ansible.cfg`. Verify the collection, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合将安装在您在`ansible.cfg`中配置的`Chapter-07/collections`路径下。请验证集合，如下所示：
- en: '![Figure 7.28 – Ansible collection list ](img/B18383_07_28.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图7.28 – Ansible集合列表](img/B18383_07_28.jpg)'
- en: Figure 7.28 – Ansible collection list
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28 – Ansible集合列表
- en: The Ansible collection for AWS automation is now ready to use. Now, start developing
    your Ansible playbook.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Ansible的AWS自动化集合已准备好使用。现在，开始开发您的Ansible剧本。
- en: Creating Ansible IaC content for the AWS infrastructure
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为AWS基础设施创建Ansible IaC内容
- en: 'In this scenario, two web servers will be installed with website content and
    configured to serve behind an **elastic load balancer** (**ELB**), as shown in
    the following diagram:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，将安装两个 Web 服务器并配置网站内容，在 **弹性负载均衡器**（**ELB**）后面提供服务，如下图所示：
- en: '![Figure 7.29 – Build a web server infrastructure and application ](img/B18383_07_29.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.29 – 构建 Web 服务器基础设施和应用程序](img/B18383_07_29.jpg)'
- en: Figure 7.29 – Build a web server infrastructure and application
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29 – 构建 Web 服务器基础设施和应用程序
- en: 'Multiple roles can be created to handle multiple resources in this Ansible
    automation content, as shown in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建多个角色来处理 Ansible 自动化内容中的多个资源，如下图所示：
- en: '![Figure 7.30 – Ansible roles for managing cloud platforms ](img/B18383_07_30.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.30 – 管理云平台的 Ansible 角色](img/B18383_07_30.jpg)'
- en: Figure 7.30 – Ansible roles for managing cloud platforms
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30 – 管理云平台的 Ansible 角色
- en: Check out the `amazon.aws` collection document ([https://galaxy.ansible.com/amazon/aws](https://galaxy.ansible.com/amazon/aws)),
    to see the Python library requirements for installing the `boto` and `boto3` Python
    libraries. You learned how to do this in [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086),
    *Expanding Your Automation Landscape*. Please refer to this chapter to learn how
    to configure the AWS credential for this automation job.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `amazon.aws` 集合文档（[https://galaxy.ansible.com/amazon/aws](https://galaxy.ansible.com/amazon/aws)），了解安装
    `boto` 和 `boto3` Python 库的 Python 库要求。您在 [*第 5 章*](B18383_05.xhtml#_idTextAnchor086)《扩展您的自动化领域》中已学习如何操作。请参考该章节学习如何配置
    AWS 凭证，以便进行此自动化作业。
- en: Creating a variable for the AWS environment
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 AWS 环境创建变量
- en: 'Details about the AWS region, VPC, and subnets are stored in the `Chapter-07/vars/aws-common-vars.yml`
    file (refer to the course repository on GitHub):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 AWS 区域、VPC 和子网的详细信息存储在 `Chapter-07/vars/aws-common-vars.yml` 文件中（请参阅 GitHub
    上的课程仓库）：
- en: '![Figure 7.31 – AWS-related variables in vars/aws-common-vars.yml ](img/B18383_07_31.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.31 – vars/aws-common-vars.yml 中的 AWS 相关变量](img/B18383_07_31.jpg)'
- en: Figure 7.31 – AWS-related variables in vars/aws-common-vars.yml
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31 – vars/aws-common-vars.yml 中的 AWS 相关变量
- en: Once the details about the AWS cloud have been stored in a variable, you must
    create a variable to store the EC2 instance details.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有关 AWS 云的详细信息存储在变量中，就必须创建一个变量来存储 EC2 实例的详细信息。
- en: Default VPC in AWS
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 中的默认 VPC
- en: 'A default VPC will be present in each AWS region when you start using AWS VPC,
    which comes with the following resources:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始使用 AWS VPC 时，每个 AWS 区域将默认存在一个 VPC，包含以下资源：
- en: Subnets (public) in each **Availability Zone** (**AZ**)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 **可用区**（**AZ**）中的子网（公共）
- en: An internet gateway
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个互联网网关
- en: DNS resolution
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 解析
- en: In this demonstration, we will use the `amazon.aws.ec2_vpc_net` Ansible module.
    Refer to the official documentation ([https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.xhtml](https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.xhtml))
    to learn more.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示范中，我们将使用 `amazon.aws.ec2_vpc_net` Ansible 模块。请参阅官方文档（[https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.xhtml](https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.xhtml)）了解更多信息。
- en: Listing the EC2 instances
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出 EC2 实例
- en: 'Details about the new EC2 instances are stored in the `vars/aws-ec2-new.yml`
    file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有关新 EC2 实例的详细信息存储在 `vars/aws-ec2-new.yml` 文件中：
- en: '![Figure 7.32 – New EC2 details in the variable file ](img/B18383_07_32.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.32 – 变量文件中的新 EC2 详细信息](img/B18383_07_32.jpg)'
- en: Figure 7.32 – New EC2 details in the variable file
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32 – 变量文件中的新 EC2 详细信息
- en: The number of EC2 instances can be controlled in this variable as you will be
    using a loop to provision them. Now, you must configure the AWS security group
    variables.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此变量可以控制 EC2 实例的数量，因为您将使用循环来配置它们。现在，您必须配置 AWS 安全组变量。
- en: Creating an AWS security group
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 AWS 安全组
- en: 'Use the `amazon.aws.ec2_group` module to create a new security group with the
    required rules in `roles/aws-create-sg/tasks/main.yml`, as shown here:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `amazon.aws.ec2_group` 模块在 `roles/aws-create-sg/tasks/main.yml` 中创建一个新安全组，并配置所需规则，如下所示：
- en: '![Figure 7.33 – Security group task ](img/B18383_07_33.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.33 – 安全组任务](img/B18383_07_33.jpg)'
- en: Figure 7.33 – Security group task
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33 – 安全组任务
- en: If your application is serving over different ports, add the ports accordingly
    and adjust the playbook as needed. Once you’ve done this, you must create the
    SSH key pair task.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序在不同端口上提供服务，请相应添加端口并根据需要调整剧本。一旦完成此操作，您必须创建 SSH 密钥对任务。
- en: Creating the SSH key pair
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 SSH 密钥对
- en: 'A new key can be created using the `amazon.aws.ec2_key` module. A local key
    pair (`~/.ssh/id_rsa.pub`) will be used for this in `roles/aws-create-keypair/tasks/main.yml`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `amazon.aws.ec2_key` 模块创建新的密钥对。在 `roles/aws-create-keypair/tasks/main.yml`
    中，将使用本地密钥对（`~/.ssh/id_rsa.pub`）：
- en: '![Figure 7.34 – Creating the SSH key resource ](img/B18383_07_34.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.34 – 创建 SSH 密钥资源](img/B18383_07_34.jpg)'
- en: Figure 7.34 – Creating the SSH key resource
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34 – 创建 SSH 密钥资源
- en: This key pair is important as you will need it later to access the EC2 instances
    and configure web servers and other details. In the preceding code block, we used
    an existing SSH key pair on the workstation (`~/.ssh/id_rsa.pub`) and its public
    key to create this new key pair resource in AWS so that we do not need to download
    the private key again. Now, you must add tasks for creating an **Elastic Load
    Balancer** (**ELB**).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个密钥对非常重要，因为您稍后需要使用它来访问 EC2 实例并配置 Web 服务器和其他细节。在前面的代码块中，我们使用了工作站上的现有 SSH 密钥对（`~/.ssh/id_rsa.pub`）及其公钥，在
    AWS 中创建了这个新的密钥对资源，以便我们不需要重新下载私钥。现在，您必须添加用于创建**弹性负载均衡器**（**ELB**）的任务。
- en: Creating an Elastic Load Balancer
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建弹性负载均衡器
- en: 'A new ELB can be created by using the `amazon.aws.ec2_elb_lb` module in `roles/aws-create-elb/tasks/main.yml`,
    as shown here:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `amazon.aws.ec2_elb_lb` 模块在 `roles/aws-create-elb/tasks/main.yml` 中创建新的
    ELB，如下所示：
- en: '![Figure 7.35 – Creating an Amazon ELB ](img/B18383_07_35.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.35 – 创建 Amazon ELB](img/B18383_07_35.jpg)'
- en: Figure 7.35 – Creating an Amazon ELB
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35 – 创建 Amazon ELB
- en: If you are using a different version of the AWS Ansible collection, then check
    out the appropriate Ansible module for creating load balancers and change the
    playbook accordingly. Now, you are ready to create the EC2 instance tasks.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是不同版本的 AWS Ansible 集合，请查看适当的 Ansible 模块以创建负载均衡器，并相应地更改 playbook。现在，您已准备好创建
    EC2 实例任务。
- en: Creating EC2 instances
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 EC2 实例
- en: Finally, start creating the EC2 instances. However, you must ensure that no
    duplicate VMs are created. It is a best practice to add validations inside the
    playbook to avoid any mistakes happening automatically as AWS will not complain
    about creating multiple instances with the same name.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，开始创建 EC2 实例。然而，您必须确保不会创建重复的虚拟机。最佳实践是在 playbook 中添加验证，以避免自动发生任何错误，因为 AWS 不会对创建具有相同名称的多个实例提出警告。
- en: 'Create the necessary tasks in `roles/aws-create-ec2/tasks/main.yml` to collect
    the existing instances. Only proceed with EC2 creation if the instances don’t
    exist:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `roles/aws-create-ec2/tasks/main.yml` 中创建必要的任务以收集现有实例。只有当实例不存在时，才继续创建 EC2
    实例：
- en: '![Figure 7.36 – Fetching EC2 instances ](img/B18383_07_36.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.36 – 获取 EC2 实例](img/B18383_07_36.jpg)'
- en: Figure 7.36 – Fetching EC2 instances
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36 – 获取 EC2 实例
- en: 'If the EC2 instance already exists, then you should not create a new EC2 instance
    again. So, based on `existing_ec2_list`, create new EC2 instances, as shown here:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 EC2 实例已经存在，则不应再次创建新 EC2 实例。因此，根据 `existing_ec2_list` 创建新的 EC2 实例，如下所示：
- en: '![Figure 7.37 – Creating an EC2 instance if one does not exist ](img/B18383_07_37.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.37 – 如果实例不存在，则创建 EC2 实例](img/B18383_07_37.jpg)'
- en: Figure 7.37 – Creating an EC2 instance if one does not exist
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37 – 如果实例不存在，则创建 EC2 实例
- en: 'After creating the EC2 instances, you need to collect the newly created EC2
    instances’ details and wait for them to boot up and respond as being online, as
    shown here:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 EC2 实例后，您需要收集新创建的 EC2 实例的详情，并等待它们启动并响应在线状态，如下所示：
- en: '![Figure 7.38 – Collecting information about the newly created EC2 instances
    ](img/B18383_07_38.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.38 – 收集新创建的 EC2 实例信息](img/B18383_07_38.jpg)'
- en: Figure 7.38 – Collecting information about the newly created EC2 instances
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38 – 收集新创建的 EC2 实例信息
- en: 'Once the EC2 instances are up and running, collect their details so that you
    can update them to ELB:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 EC2 实例启动并运行，收集其详情，以便您可以将它们更新到 ELB：
- en: '![Figure 7.39 – Collecting the new EC2 instances’ details ](img/B18383_07_39.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.39 – 收集新 EC2 实例的详情](img/B18383_07_39.jpg)'
- en: Figure 7.39 – Collecting the new EC2 instances’ details
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39 – 收集新 EC2 实例的详情
- en: 'Using the collected details (`ec2_existing_collected`), update the ELB with
    instance items in the backend, as shown here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 使用收集的详情（`ec2_existing_collected`），在后台更新 ELB 实例项，如下所示：
- en: '![Figure 7.40 – Updating the ELB with instance details in the backend ](img/B18383_07_40.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.40 – 在后台更新 ELB 实例详情](img/B18383_07_40.jpg)'
- en: Figure 7.40 – Updating the ELB with instance details in the backend
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40 – 在后台更新 ELB 实例详情
- en: 'The ELB and backend instances are ready and connected, but nothing is running
    inside the EC2 instances. Now, you need to install the web server and its content
    inside it. For that, collect the newly created EC2 instances’ details in a dynamic
    host group for **post-provisioning** tasks, as shown here:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: ELB 和后端实例已经准备好并已连接，但 EC2 实例内还没有运行任何程序。现在，你需要在其中安装 Web 服务器及其内容。为此，收集新创建的 EC2
    实例详细信息，放入动态主机组中，以便进行**后置配置**任务，如下所示：
- en: '![Figure 7.41 – Updating the inventory with new EC2 instance details ](img/B18383_07_41.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.41 – 使用新的 EC2 实例详细信息更新库存](img/B18383_07_41.jpg)'
- en: Figure 7.41 – Updating the inventory with new EC2 instance details
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41 – 使用新的 EC2 实例详细信息更新库存
- en: Instead of collecting the host details, as shown in the preceding screenshot,
    it is possible to utilize an Ansible dynamic inventory. Refer to [*Chapter 5*](B18383_05.xhtml#_idTextAnchor086),
    *Expanding Your Automation Landscape*, the *Ansible dynamic inventory* section
    to learn how to use an Ansible dynamic inventory with AWS.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的截图中所示的收集主机详细信息不同，你也可以利用 Ansible 动态库存。参见[*第 5 章*](B18383_05.xhtml#_idTextAnchor086)，*扩展自动化领域*，*Ansible
    动态库存* 部分，了解如何在 AWS 中使用 Ansible 动态库存。
- en: Once you have prepared all of the tasks in the roles, use these roles in the
    appropriate order inside the main playbook.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你准备好了所有角色中的任务，就按照适当的顺序在主剧本中使用这些角色。
- en: The main playbook for integrating the provisioning workflow for AWS
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成 AWS 配置工作流的主剧本
- en: 'The IaC provisioning workflow is written inside the main playbook – that is,
    `Chapter-07/aws-infra-provisioning.yaml` (refer to this book’s GitHub repository
    for the full code). The variables can be stored under `group_vars` or `host_vars`
    as a best practice. However, we have used the variable file approach to demonstrate
    this use case easily. Use the previously created roles in the appropriate order,
    as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 配置工作流写在主剧本中——即 `Chapter-07/aws-infra-provisioning.yaml`（请参考本书的 GitHub 仓库获取完整代码）。作为最佳实践，变量可以存储在
    `group_vars` 或 `host_vars` 下。然而，我们采用了变量文件的方法来简化此用例的演示。按照以下顺序使用之前创建的角色：
- en: '![Figure 7.42 – AWS infrastructure provisioning playbook ](img/B18383_07_42.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.42 – AWS 基础设施配置剧本](img/B18383_07_42.jpg)'
- en: Figure 7.42 – AWS infrastructure provisioning playbook
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42 – AWS 基础设施配置剧本
- en: 'In the same playbook, the post-provisioning tasks have been added under different
    plays called `Deploy Webserver to EC2 instances` and `hosts: ec2webservers` (the
    dynamic host group created in `roles/aws-create-ec2/tasks/main.yml`).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '在同一个剧本中，后置配置任务已经被添加到名为 `Deploy Webserver to EC2 instances` 和 `hosts: ec2webservers`
    的不同 play 下（即在 `roles/aws-create-ec2/tasks/main.yml` 中创建的动态主机组）。'
- en: 'The `deploy-web-server` role will install the `httpd` web server and install
    `firewalld` and configure the web server with the default website content. The
    following screenshot shows the post-provisioning play and an optional play to
    show the ELB address so that you do not need to log into the AWS console and check
    for the URL to access the website:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`deploy-web-server` 角色将安装 `httpd` Web 服务器，并安装 `firewalld`，同时配置 Web 服务器以提供默认的网站内容。以下截图显示了后置配置的
    play 以及一个可选的 play，用于展示 ELB 地址，这样你就不需要登录 AWS 控制台去检查访问网站的 URL：'
- en: '![Figure 7.43 – Post-provisioning tasks in the second play ](img/B18383_07_43.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.43 – 第二个 play 中的后置配置任务](img/B18383_07_43.jpg)'
- en: Figure 7.43 – Post-provisioning tasks in the second play
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43 – 第二个 play 中的后置配置任务
- en: 'When you execute the playbook, the workflow will be triggered for provisioning
    the infrastructure and application:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 执行剧本时，工作流将触发基础设施和应用程序的配置：
- en: '[PRE1]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, the following message will be displayed after the post-provisioning
    tasks:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，后置配置任务完成后，将显示以下信息：
- en: '![Figure 7.44 – The Ansible playbook displaying the ELB details ](img/B18383_07_44.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.44 – 显示 ELB 详细信息的 Ansible 剧本](img/B18383_07_44.jpg)'
- en: Figure 7.44 – The Ansible playbook displaying the ELB details
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.44 – 显示 ELB 详细信息的 Ansible 剧本
- en: Add more resources to the provisioning workflow, such as additional EBS volumes
    to the server, Network Access Control rules, and images from custom AMIs or snapshots.
    Post-provisioning can be expanded with more configurations as necessary.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 向配置工作流中添加更多资源，例如额外的 EBS 卷、网络访问控制规则，以及来自自定义 AMI 或快照的镜像。后置配置可以根据需要通过更多配置来扩展。
- en: Now, you need to create the playbook’s content to delete the resources to complete
    the full IaC life cycle.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要创建剧本内容来删除资源，以完成完整的 IaC 生命周期。
- en: Completing the IaC life cycle by using a destroy playbook
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用销毁剧本完成 IaC 生命周期
- en: 'The `Chapter-07/aws-infra-destroy.yaml` playbook will take care of destroying
    the resources and housekeeping jobs (refer to this book’s GitHub repository for
    the full code):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chapter-07/aws-infra-destroy.yaml` 剧本将负责销毁资源和清理任务（请参考本书的 GitHub 仓库获取完整代码）：'
- en: '![Figure 7.45 – AWS infrastructure destroy playbook ](img/B18383_07_45.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.45 – AWS 基础设施销毁剧本](img/B18383_07_45.jpg)'
- en: Figure 7.45 – AWS infrastructure destroy playbook
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.45 – AWS 基础设施销毁剧本
- en: 'If the resources are not required, then destroy the entire infrastructure using
    the destroy playbook:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不再需要资源，可以使用销毁剧本销毁整个基础设施：
- en: '[PRE2]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this section, you learned how to create AWS resources and manage the end-to-end
    life cycle for implementing IaC practices. In the next section, you will explore
    similar automation for **Google Cloud Platform** (**GCP**).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何创建 AWS 资源并管理实施基础设施即代码（IaC）实践的端到端生命周期。在下一节中，您将探索类似的 **Google Cloud
    Platform**（**GCP**）自动化。
- en: Ansible AWS Integration
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 与 AWS 集成
- en: Read more about Ansible AWS integration at [https://www.ansible.com/integrations/cloud/amazon-web-services](https://www.ansible.com/integrations/cloud/amazon-web-services).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于 Ansible AWS 集成的信息：[https://www.ansible.com/integrations/cloud/amazon-web-services](https://www.ansible.com/integrations/cloud/amazon-web-services)。
- en: Creating resources in GCP using Ansible
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 在 GCP 中创建资源
- en: Like VMware and AWS, it is possible to create and manage GCP resources with
    the help of the Ansible GCP content collection.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 与 VMware 和 AWS 类似，借助 Ansible GCP 内容集合，您可以创建和管理 GCP 资源。
- en: Prerequisite for Ansible GCP automation
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible GCP 自动化的前提条件
- en: Before you start, you need to ensure the prerequisites have been configured
    for Ansible GCP automation.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要确保为 Ansible GCP 自动化配置了必要的前提条件。
- en: 'As you learned for VMware, AWS, and other platforms, you need to install the
    relevant Ansible content collection. In this case, you must install the `google.cloud`
    collection if you haven’t done so yet:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在 VMware、AWS 和其他平台上所学的那样，您需要安装相关的 Ansible 内容集合。在本例中，如果尚未安装，您必须安装 `google.cloud`
    集合：
- en: '[PRE3]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `google.cloud` collection contains around 170 modules, roles, and other
    plugins to automate the GCP infrastructure and its resources.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`google.cloud` 集合包含约 170 个模块、角色和其他插件，用于自动化 GCP 基础设施及其资源。'
- en: 'The modules in the `google.cloud` collection require the following Python libraries
    to be installed on the system:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`google.cloud` 集合中的模块需要在系统上安装以下 Python 库：'
- en: '[PRE4]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure you are installing the libraries into the correct path if you are
    using a Python virtual environment for Ansible.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Python 虚拟环境进行 Ansible 操作，请确保将库安装到正确的路径。
- en: Ansible for Google Cloud
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 Google Cloud 的 Ansible
- en: 'Learn more about Ansible GCP automation by reading the *Google Cloud Platform
    Guide*: [https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.xhtml](https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.xhtml).
    Also, check out the Google Cloud Ansible collection at [https://galaxy.ansible.com/google/cloud](https://galaxy.ansible.com/google/cloud)
    to explore Ansible modules for GCP automation.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读 *Google Cloud Platform 手册*，了解更多 Ansible GCP 自动化内容：[https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.xhtml](https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.xhtml)。同时，访问
    [https://galaxy.ansible.com/google/cloud](https://galaxy.ansible.com/google/cloud)
    查阅 Google Cloud Ansible 集合，探索 GCP 自动化的 Ansible 模块。
- en: GCP free trial
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GCP 免费试用
- en: To practice GCP and Ansible use cases, it is possible to get a GCP free trial
    with more than 20 GCP services to use free of cost. Visit [https://cloud.google.com/free](https://cloud.google.com/free)
    and sign up for a GCP Free Tier account. I have ensured that the following demonstration
    only uses the GCP Free Tier-based resources so that no additional costs will be
    incurred on your account. It is also important to delete the resource from your
    GCP account once you have finished testing.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习 GCP 和 Ansible 的使用案例，可以通过 GCP 免费试用获得超过 20 项 GCP 服务，免费使用。访问 [https://cloud.google.com/free](https://cloud.google.com/free)
    并注册 GCP 免费层账户。我已经确保以下演示仅使用基于 GCP 免费层的资源，因此不会对您的账户产生额外费用。完成测试后，记得从您的 GCP 账户中删除这些资源。
- en: Configuring GCP credentials
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 GCP 凭证
- en: Use your GCP service accounts or machine accounts to configure the platform
    access for Ansible automation (refer to the following information box for more
    information). Once you created the service account and downloaded the JSON file,
    configure Ansible to use the JSON file as the credential for GCP access.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的 GCP 服务账户或机器账户配置 Ansible 自动化平台访问（更多信息请参阅下面的信息框）。创建服务账户并下载 JSON 文件后，配置 Ansible
    使用该 JSON 文件作为 GCP 访问凭证。
- en: 'It is possible to configure the credential as module parameters or as environment
    variables, as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将凭证配置为模块参数或环境变量，具体如下：
- en: '[PRE5]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Depending on the environment and practices, follow an appropriate method, similar
    to what we did for VMware and AWS.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 根据环境和实践，选择合适的方法，类似于我们为 VMware 和 AWS 所做的。
- en: Creating a GCP Service Account
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 GCP 服务账户
- en: Refer to [https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount](https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount)
    to learn how to create a GCP service account and create and download JSON key
    files.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount](https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount)
    了解如何创建 GCP 服务账户，并创建和下载 JSON 密钥文件。
- en: Creating a GCP instance using Ansible
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Ansible 创建 GCP 实例
- en: 'In this exercise, you will create Ansible content to create a simple compute
    instance in GCP:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，您将创建 Ansible 内容以在 GCP 中创建一个简单的计算实例：
- en: 'Create a variable file called `vars/gcp-details.yaml` so that you can store
    the GCP credential details, as follows:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `vars/gcp-details.yaml` 的变量文件，以便您可以存储 GCP 凭证详细信息，如下所示：
- en: '![Figure 7.46 – GCP configuration variables for Ansible ](img/B18383_07_46.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.46 – Ansible 的 GCP 配置变量](img/B18383_07_46.jpg)'
- en: Figure 7.46 – GCP configuration variables for Ansible
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.46 – Ansible 的 GCP 配置变量
- en: 'Create the `Chapter-07/gcp-create-instance.yml` playbook. Create a new VPC
    network using `google.cloud.gcp_compute_network` if required and configure the
    new GCP instance so that it uses the new VPC network. In this exercise, you will
    be using the `default` VPC network and adding a task to fetch the `default` VPC
    network details:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `Chapter-07/gcp-create-instance.yml` 剧本。根据需要使用 `google.cloud.gcp_compute_network`
    创建新的 VPC 网络，并配置新的 GCP 实例以便它使用新的 VPC 网络。在此练习中，您将使用 `default` VPC 网络，并添加一个任务来获取
    `default` VPC 网络的详细信息：
- en: '![Figure 7.47 – GCP provisioning playbook ](img/B18383_07_47.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.47 – GCP 配置剧本](img/B18383_07_47.jpg)'
- en: Figure 7.47 – GCP provisioning playbook
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.47 – GCP 配置剧本
- en: 'Add a task to the same playbook to create the GCP instance boot disk with the
    Debian 9 operating system (use other public images or your own private images
    as needed):'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向同一剧本中添加一个任务，使用 Debian 9 操作系统创建 GCP 实例启动磁盘（根据需要使用其他公共镜像或自己的私有镜像）：
- en: '![Figure 7.48 – Creating a GCP disk for the new VM ](img/B18383_07_48.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.48 – 为新虚拟机创建 GCP 磁盘](img/B18383_07_48.jpg)'
- en: Figure 7.48 – Creating a GCP disk for the new VM
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.48 – 为新虚拟机创建 GCP 磁盘
- en: The `instance_source_disk` variable will contain details about the disk. We
    will pass this information to the instance creation task in the next step.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`instance_source_disk` 变量将包含有关磁盘的详细信息。我们将在下一步将此信息传递给实例创建任务。'
- en: 'Add a task to create the GCP instance and pass the network and disk details,
    as follows:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个任务来创建 GCP 实例，并传递网络和磁盘详细信息，如下所示：
- en: '![Figure 7.49 – Creating a GCP instance with network and disk details ](img/B18383_07_49.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.49 – 创建带有网络和磁盘详细信息的 GCP 实例](img/B18383_07_49.jpg)'
- en: Figure 7.49 – Creating a GCP instance with network and disk details
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.49 – 创建带有网络和磁盘详细信息的 GCP 实例
- en: 'Execute the Ansible `gcp-create-instance.yml` playbook:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Ansible `gcp-create-instance.yml` 剧本：
- en: '[PRE6]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Verify the instance details on the GCP console, as shown here:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下所示，在 GCP 控制台验证实例详细信息：
- en: '![Figure 7.50 – Verifying the instance on the GCP dashboard ](img/B18383_07_50.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.50 – 在 GCP 控制台验证实例](img/B18383_07_50.jpg)'
- en: Figure 7.50 – Verifying the instance on the GCP dashboard
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.50 – 在 GCP 控制台验证实例
- en: 'Also, verify the disk details, as shown here:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，验证磁盘详细信息，如下所示：
- en: '![Figure 7.51 – Verifying the disk details on the GCP dashboard ](img/B18383_07_51.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.51 – 在 GCP 控制台验证磁盘详细信息](img/B18383_07_51.jpg)'
- en: Figure 7.51 – Verifying the disk details on the GCP dashboard
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.51 – 在 GCP 控制台验证磁盘详细信息
- en: With around 170 modules available, it is possible to manage almost all cloud
    resources in GCP, including computing, disk, networks, load balancers, firewalls,
    routing, cloud builds, autoscaling, DNS, databases, Spanner, and more.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 可用大约170个模块，几乎可以管理GCP中的所有云资源，包括计算、磁盘、网络、负载均衡器、防火墙、路由、云构建、自动扩展、DNS、数据库、Spanner等。
- en: Ansible GCP Modules
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible GCP模块
- en: 'Refer to the official documentation to see the available Ansible GCP modules:
    [https://docs.ansible.com/ansible/latest/collections/google/cloud/index.xhtml](https://docs.ansible.com/ansible/latest/collections/google/cloud/index.xhtml).'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考官方文档查看可用的Ansible GCP模块：[https://docs.ansible.com/ansible/latest/collections/google/cloud/index.xhtml](https://docs.ansible.com/ansible/latest/collections/google/cloud/index.xhtml)。
- en: Summary
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about IaC concepts and how to use Ansible as an
    IaC tool. You also learned about how Ansible can manage virtualization and cloud
    platforms such as VMware, AWS, and GCP. Then, you learned about the different
    methods and credential configurations for these platforms so that Ansible can
    access and execute automated operations.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了IaC的概念以及如何使用Ansible作为IaC工具。你还了解了Ansible如何管理虚拟化和云平台，如VMware、AWS和GCP。然后，你了解了这些平台的不同方法和凭证配置，以便Ansible能够访问并执行自动化操作。
- en: Next, you explored the Ansible modules and collections that are available for
    VMware, AWS, and GCP. By developing the basic playbooks for creating new virtual
    machines (EC2 instances or GCP instances), you have started your journey in infrastructure
    automation and management. Expand the playbook’s content to build use cases suitable
    for your cloud and virtualization environment.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你了解了可用于VMware、AWS和GCP的Ansible模块和集合。通过开发用于创建新虚拟机（EC2实例或GCP实例）的基本playbook，你已经开始了基础设施自动化和管理的旅程。扩展playbook的内容，构建适合你云和虚拟化环境的使用案例。
- en: In the next chapter, you will learn how to help non-platform teams use Ansible
    for their automation use cases, such as building and managing databases using
    Ansible.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何帮助非平台团队使用Ansible进行自动化应用场景，例如使用Ansible构建和管理数据库。
- en: Further reading
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多本章内容的相关主题，请查看以下资源：
- en: '*What is Infrastructure as Code (IaC)?*: [https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac](https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是基础设施即代码（IaC）？*: [https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac](https://www.redhat.com/en/topics/automation/what-is-infrastructure-as-code-iac)'
- en: '*Ansible VMware Guide*: [https://docs.ansible.com/ansible/2.5/scenario_guides/guide_vmware.xhtml](https://docs.ansible.com/ansible/2.5/scenario_guides/guide_vmware.xhtml)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ansible VMware指南*: [https://docs.ansible.com/ansible/2.5/scenario_guides/guide_vmware.xhtml](https://docs.ansible.com/ansible/2.5/scenario_guides/guide_vmware.xhtml)'
- en: '*VMware API and SDK Documentation*: [https://www.vmware.com/support/pubs/sdk_pubs.xhtml](https://www.vmware.com/support/pubs/sdk_pubs.xhtml)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*VMware API和SDK文档*: [https://www.vmware.com/support/pubs/sdk_pubs.xhtml](https://www.vmware.com/support/pubs/sdk_pubs.xhtml)'
- en: '*Introducing the VMware REST Ansible Content Collection*: [https://www.ansible.com/blog/introducing-the-vmware-rest-ansible-content-collection](https://www.ansible.com/blog/introducing-the-vmware-rest-ansible-content-collection)'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*介绍VMware REST Ansible内容集合*: [https://www.ansible.com/blog/introducing-the-vmware-rest-ansible-content-collection](https://www.ansible.com/blog/introducing-the-vmware-rest-ansible-content-collection)'
- en: '*Ansible Amazon Web Services Guide*: [https://docs.ansible.com/ansible/latest/collections/amazon/aws/docsite/guide_aws.xhtml](https://docs.ansible.com/ansible/latest/collections/amazon/aws/docsite/guide_aws.xhtml)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ansible Amazon Web Services指南*: [https://docs.ansible.com/ansible/latest/collections/amazon/aws/docsite/guide_aws.xhtml](https://docs.ansible.com/ansible/latest/collections/amazon/aws/docsite/guide_aws.xhtml)'
