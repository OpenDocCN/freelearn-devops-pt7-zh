- en: Chapter 9. Managing Environments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：管理环境
- en: 'Most organizations start with a single environment while building their infrastructures.
    However, as the complexity grows, it is imperative that we have a workflow that
    involves writing code and testing it in development environments, followed by
    an intensive QA cycle to make sure that the code is tested for stability in the
    staging, or preproduction, environment before we finally release it to production.
    In order to simulate a real-world behavior, these environments have to run identical
    stacks of applications, but most likely at different scales. For example, staging
    will be a small-scale replica of production with fewer servers, and most commonly,
    development environments would run on individual workstations in virtualized environments.
    Even though all these environments run an identical application stack, they have
    to be isolated from each other and must have environment-specific configurations,
    explained as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织在构建基础设施时，从单一环境开始。然而，随着复杂性的增加，必须拥有一个工作流，包括编写代码并在开发环境中进行测试，然后经过严格的QA周期，确保代码在预生产（即staging）环境中经过稳定性测试，最后才发布到生产环境。为了模拟现实世界的行为，这些环境必须运行相同的应用堆栈，但很可能是不同的规模。例如，staging环境将是生产环境的小规模复制，具有较少的服务器，而开发环境通常运行在虚拟化的个人工作站上。即使所有这些环境都运行相同的应用堆栈，它们必须相互隔离，并且必须具有特定环境的配置，具体如下：
- en: The applications in the `dev` group should not be pointing at databases in staging
    and vice versa
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev`组中的应用不应指向staging中的数据库，反之亦然'
- en: A production environment may have its own package repository
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境可能有自己的包存储库
- en: A staging environment may run a web server on port `8080`, whereas all other
    environments run it on port `80`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预生产环境可能在端口`8080`上运行Web服务器，而其他所有环境则在端口`80`上运行
- en: 'With roles, we could create a modular code to configure these environments
    identically for all environments. Another important property of Ansible is its
    ability to separate code from data. Using these two in combination, we could model
    the infrastructure in a way that we would be able to create environment-specific
    configurations without having to modify the roles. We would be able to create
    them just by providing the variables from different places. Let''s take a look
    at the following screenshot:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过角色，我们可以创建一个模块化的代码，以便为所有环境配置相同的环境。Ansible的另一个重要特性是它能够将代码与数据分离。通过这两者的结合，我们可以以一种方式建模基础设施，使得我们能够在不修改角色的情况下创建特定环境的配置。我们只需要通过提供来自不同位置的变量就能创建它们。让我们来看一下下面的截图：
- en: '![Managing Environments](img/B03800_09_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![管理环境](img/B03800_09_01.jpg)'
- en: 'The preceding diagram portrays three different environments, which are dev,
    stage, and production, within the same organization. All three run the same application
    stack, which involves a load balancer, web servers, and database servers. However,
    the two things to note here are that:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图表展示了同一组织中的三种不同环境：开发（dev）、预生产（stage）和生产（production）。这三者都运行相同的应用堆栈，包括负载均衡器、Web服务器和数据库服务器。然而，需要注意的两点是：
- en: Each environment has a different scale based on which host can be configured
    to run one or more roles (for example, `db` plus `www`).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个环境的规模不同，基于此，主机可以配置为运行一个或多个角色（例如，`db` 和 `www`）。
- en: Each environment is isolated from the other. A web server in a production environment
    will not connect to a database in staging, and vice versa.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个环境都彼此隔离。生产环境中的Web服务器不会连接到staging中的数据库，反之亦然。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Managing multiple environments with Ansible
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible管理多个环境
- en: Separating inventory files per environment
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按环境分隔库存文件
- en: Using the `group_vars` and `host_vars` groups to specify environment-specific
    configurations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`group_vars`和`host_vars`组来指定特定环境的配置
- en: Approaches for managing environments
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理环境的方法
- en: 'You have already learned about the need to create different environments with
    identical roles, but with different data. At the time of writing this, more than
    one approach exists for managing such multiple environment scenarios with Ansible.
    We are going to discuss two approaches here, and you can use your best judgment
    to pick either of the two or create your own approach. There is no explicit way
    to create an environment, but the following are the built-in features of Ansible,
    which could come in handy:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解到，需要创建具有相同角色但数据不同的不同环境。在写这篇文章时，已经存在多种方法来管理Ansible中的多环境场景。我们将在这里讨论两种方法，你可以根据自己的判断选择其中一种，或者创建自己的方法。没有明确的方式来创建环境，但以下是Ansible的内置功能，可能会派上用场：
- en: The use of an inventory to group together hosts that belong to one environment
    and isolate them from the hosts in other environments
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用库存将属于同一环境的主机分组，并将它们与其他环境中的主机隔离开
- en: The use of inventory variables, such as the `group_vars` and `host_vars` groups,
    to provide environment-specific variables
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用库存变量，例如`group_vars`和`host_vars`组，来提供特定于环境的变量
- en: Before we proceed, it would be useful to review the inventory groups, variables,
    and precedence rules that are applicable to them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，回顾适用于库存组、变量和优先级规则会很有帮助。
- en: The inventory groups and variables
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库存组和变量
- en: 'You have already learned learned that the Ansible inventory follows an INI
    style configuration, where hosts are grouped together with group tags enclosed
    in square brackets, as shown in the following figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解到，Ansible的库存遵循INI样式的配置，其中主机通过带有方括号的组标签分组，如下图所示：
- en: '![The inventory groups and variables](img/B03800_09_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![库存组和变量](img/B03800_09_02.jpg)'
- en: 'The inventory variables can then be specified so that they match these group
    names using `group_vars` or match specific hosts in the `host_vars` files. Apart
    from these group names, there is a provision to specify default variables for
    the `group_vars` and `host_vars` files using a file named "`all`", which gives
    rise to the following structure:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以指定库存变量，使其与这些组名匹配，使用`group_vars`或在`host_vars`文件中匹配特定主机。除了这些组名外，还可以使用名为"`all`"的文件为`group_vars`和`host_vars`文件指定默认变量，从而形成以下结构：
- en: '![The inventory groups and variables](img/B03800_09_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![库存组和变量](img/B03800_09_03.jpg)'
- en: In such a case, if you specify the same variable in the `all` and `webserver`
    files, the one variable that is more specific will take precedence. What this
    means is, if you define a variable in '`all`' and define it again in the '`webserver`'
    group under `group_vars`, the value of the parameters will be set to the one defined
    in '`webserver`', which is more specific. This is the behavior that we exploit
    in the approaches, which are as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果在`all`和`webserver`文件中指定相同的变量，具有更高特定性的变量将优先。也就是说，如果你在`'all'`中定义了一个变量，并在`'webserver'`组的`group_vars`下再次定义该变量，那么该变量的值将被设置为`'webserver'`中定义的值，因为它更具体。这就是我们在以下方法中利用的行为：
- en: Approach 1 – using nested groups in an inventory
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 1 – 在库存中使用嵌套组
- en: 'In addition to being able to create groups using the INI style, Ansible supports
    nested groups, where a complete group can be part of another parent group. The
    first approach is based on this feature and is discussed step by step, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够使用INI样式创建组，Ansible还支持嵌套组，其中一个完整的组可以是另一个父组的一部分。第一种方法就是基于这个特性，并按以下步骤逐步讨论：
- en: Create an environment directory to store environment-specific inventory files.
    It's a good idea to name them after the environments. Add hosts that are specific
    to that environment and group them. A group can be of any criteria, such as a
    role, location, server racks, and so on. For example, create a '`webservers`'
    group to add all the Apache web servers, or a group called '`in`' to add all the
    hosts belonging to that location.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个环境目录来存储特定于环境的库存文件。最好按照环境命名它们。添加特定于该环境的主机并将其分组。组可以基于任何标准，例如角色、位置、服务器机架等等。例如，创建一个`'webservers'`组，将所有Apache
    web服务器添加进去，或者创建一个名为`'in'`的组，将所有属于该位置的主机添加进去。
- en: 'Add a parent group named after the environment name, such as, production, development,
    staging, and so on, and include all other groups that belong to that environment
    as a child. Each of these in turn include a group of hosts, for example:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个父组，名称与环境名称相同，如生产、开发、预发布等，并将所有属于该环境的其他组作为子组包含进来。每个子组依次包含一个主机组，例如：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, create the common/default group variables in the `group_vars/all` file.
    These variables then can be overridden from the environment-specific files.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `group_vars/all` 文件中创建公共/默认的组变量。这些变量随后可以从特定于环境的文件中被覆盖。
- en: 'To specify the environment-specific variables, create the `group_vars/{{env}}`
    file, which is shown as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要指定特定于环境的变量，请创建 `group_vars/{{env}}` 文件，具体如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is also going to override the variables in the `all` group. The following
    diagram shows the file structure created with this approach:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这还将覆盖 `all` 组中的变量。以下图所示，使用此方法创建的文件结构：
- en: '![Approach 1 – using nested groups in an inventory](img/B03800_09_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![方法 1 – 使用嵌套组的清单](img/B03800_09_04.jpg)'
- en: Once this has been created, it's just a matter of calling the environment-specific
    inventory with the `ansible-playbook` command run.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建完成，只需通过运行 `ansible-playbook` 命令调用特定于环境的清单。
- en: 'For example, let''s take a look at the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一下以下命令：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Approach 2 – using environment-specific inventory variables
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 2 – 使用特定于环境的清单变量
- en: 'The second approach does not require nested groups and relies on the following
    two features of Ansible:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法不需要嵌套组，而是依赖于 Ansible 的以下两个特性：
- en: The `-i` option of Ansible-playbook also accepts a directory that can contain
    one or more inventory files
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-playbook` 的 `-i` 选项也接受一个目录，目录下可以包含一个或多个清单文件。'
- en: The `host` and `group` variables can be relative to the inventory files in addition
    to the `group_vars` and `host_vars` groups in the root of the Ansible repository
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host` 和 `group` 变量除了位于 Ansible 仓库根目录的 `group_vars` 和 `host_vars` 组外，还可以相对于清单文件。'
- en: 'This approach will create completely isolated variable files for each environment.
    The file structure we created is portrayed in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将为每个环境创建完全隔离的变量文件。我们创建的文件结构如下图所示：
- en: '![Approach 2 – using environment-specific inventory variables](img/B03800_09_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![方法 2 – 使用特定于环境的清单变量](img/B03800_09_05.jpg)'
- en: 'The following is the step-by-step method used for this approach:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此方法的逐步操作：
- en: Create an environment directory in the root of the Ansible repository. Under
    this, create one directory per environment.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ansible 仓库的根目录中创建一个环境目录。在此目录下为每个环境创建一个子目录。
- en: 'Each of the environment directories contain two things:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个环境目录包含两样东西：
- en: A host's inventory.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机的清单。
- en: Inventory variables, for example, `group_vars` and `host_vars`. To make environment-specific
    changes, `group_vars` is relevant to us.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单变量，例如 `group_vars` 和 `host_vars`。要进行环境特定的更改，`group_vars` 与我们相关。
- en: Each environment contains its own `group_vars` directory, which in turn can
    have one or more files, including the `all` file as default. No two environments
    share these variables with others.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个环境包含自己的 `group_vars` 目录，目录下可以有一个或多个文件，其中包括默认的 `all` 文件。不同环境之间不会共享这些变量。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Caution**: In addition to the environment-specific `group_vars` group, it''s
    possible to use the `group_vars` file residing on top of the Ansible-playbook
    repository. However, it''s recommended that you don''t use it with this approach,
    as environment-specific changes are overridden by the values in the playbook `group_vars`
    if they are same.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：除了特定于环境的 `group_vars` 组外，您还可以使用位于 Ansible-playbook 仓库顶部的 `group_vars`
    文件。然而，建议不要在这种方法中使用它，因为如果它们相同，环境特定的更改会被播放簿 `group_vars` 中的值覆盖。'
- en: 'With this approach, the playbook can be launched specific to an environment
    as:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，播放簿可以针对特定环境启动，如下所示：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `environments/dev` is a directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`environments/dev` 是一个目录。
- en: Creating a development environment
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建开发环境
- en: 'After learning about how to manage environments, let''s try it out by refactoring
    our existing code and create a dev environment. To test it, let''s create a variable
    called "`env_name`" and change the default page of Nginx to dynamically use this
    variable and print the environment name. We will then try to override this variable
    from the environment. Let''s take a look at the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了如何管理环境后，让我们通过重构现有代码并创建一个dev环境来实践。为了测试它，我们创建了一个名为"`env_name`"的变量，并将Nginx的默认页面修改为动态使用这个变量并打印环境名称。然后我们会尝试从环境中覆盖这个变量。让我们来看看以下步骤：
- en: 'Let''s begin by setting the default variable:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先设置默认变量：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, change the Nginx task to use a template instead of a static file, so
    make the following modification in the `roles/nginx/tasks/configure.yml` file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将Nginx任务更改为使用模板而不是静态文件，因此在`roles/nginx/tasks/configure.yml`文件中做出如下修改：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modify it into the following code:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其修改为以下代码：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s now try running the playbook without creating the environment:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们尝试在未创建环境的情况下运行playbook：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After the run is complete, let's check the default web page:![Creating a development
    environment](img/B03800_09_06.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行完成后，让我们检查默认的网页：![创建开发环境](img/B03800_09_06.jpg)
- en: It prints the value of the variable that we set from the `group_vars/all` file,
    the default value.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它打印我们从`group_vars/all`文件中设置的变量值，即默认值。
- en: 'Let''s now create a file that would allow us to manage a `dev` environment.
    Since we are going to use the same set of hosts, we could just convert our existing
    inventory to dev and add a parent group after the name of the environment:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个文件，允许我们管理`dev`环境。由于我们将使用相同的主机集，我们可以将现有的清单转换为dev环境，并在环境名称后添加一个父组：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add all the groups to the `dev` environment as:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有组添加到`dev`环境中，如下所示：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The inventory file is shown as follows and we''ve to make the following changes:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清单文件如下所示，我们需要做以下更改：
- en: 'Now, let''s create a `group_vars` file for the `dev` environment and override
    the environment name:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个用于`dev`环境的`group_vars`文件，并覆盖环境名称：
- en: '[PRE10]'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This time, we are going to run the playbook as:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一次，我们将以以下方式运行playbook：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ll see the following screenshot as the output:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将看到以下截图作为输出：
- en: '![Creating a development environment](img/B03800_09_08.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建开发环境](img/B03800_09_08.jpg)'
- en: Review questions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood this chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你已经充分理解了这一章的内容吗？尝试回答以下问题来测试你的理解：
- en: How do you specify multiple host inventories for the same environment?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为同一个环境指定多个主机清单？
- en: If you define a variable in the `environments/dev/group_vars/all` file and the
    same in the `group_vars/all` file, which one will take precedence?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在`environments/dev/group_vars/all`文件中定义了一个变量，并在`group_vars/all`文件中也定义了同一个变量，哪个变量会优先？
- en: How do you create a group of groups in a host inventory file?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在主机清单文件中创建一个组的组？
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to create multiple environments that map to
    the software development workflow or the phases. We started with a brief overview
    of inventory groups and inventory variables, specifically, the `group_vars` file.
    This was followed by the two approaches used to manage environments. Finally,
    we refactored our code, went on to create the `dev` environment, and tested it
    by overriding one variable from the environment. In the next chapter, you are
    going to learn about infrastructure orchestration and how Ansible shines when
    it comes to orchestrating complex infrastructure workflows, zero downtime deployments,
    and so on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何创建与软件开发工作流或各个阶段相对应的多个环境。我们从简要介绍清单组和清单变量开始，特别是`group_vars`文件。接着介绍了管理环境的两种方法。最后，我们重构了代码，创建了`dev`环境，并通过覆盖环境中的一个变量进行了测试。在下一章中，你将学习基础设施编排，以及在编排复杂的基础设施工作流、零停机部署等方面，Ansible如何大放异彩。
