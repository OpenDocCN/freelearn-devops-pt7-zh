- en: Chapter 7. Parallel Dimensions – Branching with Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 平行维度——使用 Git 进行分支
- en: '*Cheap branching and merging are the two most well known and applauded features
    of Git. In this chapter we shall see what branching is, why you need a branch,
    and when you need a branch. And since we have already tried our hand at merging,
    having used it to merge two files for solving a merge conflict in [Chapter 6](ch06.html
    "Chapter 6. Unleash the Beast – Git on Text-based Files"), *Unleash the Beast
    – Git on Text-based Files*, we shall go one step ahead and see how to merge branches
    when needed.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*Git 最著名并且广受赞誉的两个特点就是廉价的分支和合并。在本章中，我们将了解什么是分支，为什么你需要分支，以及何时需要分支。既然我们已经尝试过合并，曾在[第6章](ch06.html
    "Chapter 6. Unleash the Beast – Git on Text-based Files")《释放猛兽——Git与文本文件》里使用合并解决过一个合并冲突，我们接下来将更进一步，了解如何在需要时合并分支。*'
- en: 'All these are explored from an organization''s point of view. We will also
    learn and practice methods to simplify our work by:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些内容都是从组织的角度进行探索的。我们还将学习并实践一些方法，通过以下方式简化我们的工作：
- en: Creating simple alias for frequently used lengthy commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为常用的长命令创建简单的别名
- en: Chaining of multiple commands for frequently used workflows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将多个命令链式连接，以适应常用工作流程
- en: What is branching
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是分支
- en: Branching in Git is a function that is used to launch a separate, similar copy
    of the present workspace for different usage requirements. In other words branching
    means diverging from whatever you have been doing to a new lane where you can
    continue working on something else without disturbing your main line of work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Git 中的分支是一个功能，用于为不同的使用需求启动一个独立的、类似当前工作区的副本。换句话说，分支意味着从你当前的工作中分岔出来，进入一条新的道路，在不打扰主线工作的情况下，你可以继续做其他事情。
- en: Let's understand it better with the help of the following example.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例更好地理解这一点。
- en: Suppose you are maintaining a checklist of some process for a department in
    your company, and having been impressed with how well it's structured, your superior
    requests you to share the checklist with another department after making some
    small changes specific to the department. How will you handle this situation?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在为公司某部门维护一个流程检查表，并且对其结构的高效性印象深刻，您的上司要求您在做出一些特定于该部门的小修改后，将该检查表分享给另一个部门。你会如何处理这种情况？
- en: An obvious way without a version control system is to save another copy of your
    file and make changes to the new one to fit the other department's needs. With
    a version control system and your current level of knowledge, perhaps you'd clone
    the repository and make changes to the cloned one, right?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有版本控制系统，一种明显的方法是保存文件的另一份副本，并对新文件进行修改，以适应其他部门的需求。使用版本控制系统，并结合你当前的知识水平，也许你会克隆仓库并对克隆的副本进行修改，对吧？
- en: Looking forward, there might be requirements/situations where you want to incorporate
    the changes that you have made to one of the copies with another one. For example,
    if you have discovered a typo in one copy, it's likely to be there in the other
    copy because both share the same source. Another thought – as your department
    evolves, you might realize that the customized version of the checklist that you
    created for the other department fits your department better than what you used
    to have earlier, so you want to integrate all changes made for the other department
    into your checklist and have a unified one.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 展望未来，可能会有需要/情况，要求你将已对某一副本所做的更改，合并到另一副本中。例如，如果你在一个副本中发现了拼写错误，它很可能也会出现在另一个副本中，因为两者共享相同的源代码。另一个想法是——随着你们部门的不断发展，你可能会意识到，你为其他部门创建的定制版检查表比你以前使用的版本更适合你们部门，因此你想将为其他部门做的所有更改合并到你的检查表中，并拥有一个统一的版本。
- en: This is the basic concept of a branch – a line of development which exists independent
    of another line both sharing a common history/source, which when needed can be
    integrated. Yes, a branch always begins life as a copy of something and from there
    begins a life of its own.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是分支的基本概念——一条独立于其他开发线的开发线，它们共享一个共同的历史/源代码，必要时可以合并。是的，分支总是以某些内容的副本开始，然后从那里开始独立发展。
- en: Almost all VCS have some form of support for such diverged workflows. But it's
    Git's speed and ease of execution that beats them all. This is the main reason
    why people refer to branching in Git as its killer feature (we'll cover the intricacies
    of Git branching in the next chapter).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的版本控制系统都有某种形式的支持，以适应这种分歧的工作流程。但正是 Git 的速度和执行简便性让它领先于所有其他系统。这也是人们将 Git 的分支称为其杀手级特性的主要原因（我们将在下一章深入探讨
    Git 分支的细节）。
- en: Why do you need a branch
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么需要分支
- en: To understand the why part, let's think about another situation where you are
    working in a team where different people contribute to different pieces existing
    in your project.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解为什么需要分支，我们来考虑另一种情况：你在一个团队中工作，团队中的不同成员为项目中的不同部分做出贡献。
- en: Your entire team recently launched phase one of your project and is working
    towards phase two. Unfortunately, a bug that was not identified by the quality
    control department in the earlier phases of testing the product pops up after
    the release of phase one (yeah, been there, faced that!).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你的整个团队最近发布了项目的第一阶段，并正在朝第二阶段努力。不幸的是，一个在早期测试阶段没有被质量控制部门发现的错误，在第一阶段发布后出现了（是的，我也经历过！）。
- en: All of a sudden your priority shifts to fixing the bug first, thereby dropping
    whatever you've been doing for phase two and quickly doing a hot fix for the identified
    bug in phase one. But switching context derails your line of work; a thought like
    that might prove very costly sometimes. To handle these kind of situations you
    have the branching concept (refer to the next section for visuals), which allows
    you to work on multiple things without stepping on each other's toes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 突然间，你的优先事项转向了首先修复错误，因此放下了你在第二阶段所做的工作，快速修复了第一阶段中识别出的错误。但是，切换上下文会破坏你的工作流程；这样的想法有时可能会非常昂贵。为了处理这些情况，你可以使用分支概念（参见下一部分的图示），它允许你在不互相干扰的情况下同时处理多个任务。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There might be multiple branches inside a repository but there's only one active
    branch, which is also called current branch.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库中可能有多个分支，但只有一个活动分支，也称为当前分支。
- en: By default, since the inception of the repository, the branch named **master**
    is the active one and is the only branch unless and until changed explicitly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，自从代码库创建之初，名为**master**的分支是活动分支，除非显式更改，否则它是唯一的分支。
- en: Naming conventions
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名规范
- en: 'There are a bunch of naming conventions that Git enforces on its branch names;
    here''s a list of frequently made mistakes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Git对分支名称有一系列命名规则，以下是一些常见的命名错误：
- en: 'A branch name cannot contain the following:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支名称不能包含以下内容：
- en: A space or a white space character
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空格或空白字符
- en: Special characters such as colon (:), question mark (?), tilde (~), caret (^),
    asterisk (*), and open bracket ([)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊字符，如冒号（:）、问号（?）、波浪号（~）、插入符号（^）、星号（*）和左括号（[）
- en: Forward slash (/) can be used to denote a hierarchical name, but the branch
    name cannot end with a slash
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 斜杠（/）可用于表示层级名称，但分支名称不能以斜杠结尾
- en: For example, my/name is allowed but myname/ is not allowed, and myname\ will
    wait for inputs to be concatenated
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，my/name是允许的，但myname/是不允许的，而myname\ 将等待输入进行拼接
- en: Strings followed by a forward slash cannot begin with a dot (.)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以斜杠（/）结尾的字符串不能以点（.）开头
- en: For example, my/.name is not valid
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，my/.name 是无效的
- en: Names cannot contain two continuous dots (..) anywhere
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称不能包含连续的两个点（..）
- en: When do you need a branch
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时需要创建分支
- en: 'With Git, There are no hard and fast rules on when you can/need to create a
    branch. You can have your own technical, managerial, or even organizational reasons
    to do so. Following are a few to give you an idea:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Git时，关于何时可以/需要创建分支并没有硬性规定。你可以根据自己的技术、管理甚至组织原因来决定创建分支。以下是一些给你提供参考的情况：
- en: A branch in development of software applications is often used for self learning/experimental
    purposes where the developer needs to try a piece of logic on the code without
    disturbing the actual released version of the application
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在软件应用开发中，分支通常用于自学/实验目的，开发人员需要在不影响已发布版本的应用程序的情况下尝试在代码上进行逻辑测试
- en: Situations like having a separate branch of source code for each customer who
    requires a separate set of improvements to your present package
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些情况，比如为每个客户创建一个单独的源代码分支，每个客户需要对你当前的包进行一组独立的改进
- en: And the classic one – few people in the team might be working on the bug fixes
    of the released version, whereas the others might be working on the next phase/release
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经典的情况是——团队中的某些人可能在修复已发布版本的错误，而其他人可能在开发下一个阶段/版本
- en: For few workflows, you can even have separate branches for people providing
    their inputs, which are finally integrated to produce a release candidate
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一些工作流，你甚至可以为每个提供输入的人创建独立的分支，最后将这些分支合并，生成一个发布候选版本
- en: 'Following are flow diagrams for few workflows to help us understand the utilization
    of branching:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些工作流的流程图，帮助我们理解如何使用分支：
- en: Branching for a bug fix can have a structure as shown the following diagram:![When
    do you need a branch](img/7522OS_07_01.jpg)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行bug修复时的分支结构可以如下图所示：![When do you need a branch](img/7522OS_07_01.jpg)
- en: This explains that when you are working on P2 and find a bug in P1, you need
    not drop your work, but switch to P1, fix it, and return back to P2.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这说明了当你在处理P2时，发现P1中存在bug，你不必放弃当前的工作，而是切换到P1，修复bug，然后再回到P2。
- en: Branching for each promotion is as shown in the following diagram:![When do
    you need a branch](img/7522OS_07_02.jpg)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个推广的分支结构如下图所示：![When do you need a branch](img/7522OS_07_02.jpg)
- en: This explains how the same set of files can be managed across different phases/promotions.
    Here, P1 from development has been sent to the testing team (a branch called testing
    will be given to the testing team) and the bugs found are reported and fixed in
    the development branch (v1.1 and v1.2) and merged with the testing branch. This
    is then branched as production or release, which end users can access.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这解释了如何在不同的阶段/推广中管理相同的一组文件。在这里，来自开发的P1已被发送到测试团队（测试团队将获得一个名为“测试”的分支），并且发现的bug会在开发分支（v1.1和v1.2）中报告并修复，最后与测试分支合并。之后，这将被分支为生产或发布版本，最终用户可以访问。
- en: Branching for each component development is as shown in the following diagram:![When
    do you need a branch](img/7522OS_07_03.jpg)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组件开发的分支结构如下图所示：![When do you need a branch](img/7522OS_07_03.jpg)
- en: Here every development task/component build is a new independent branch, which
    when completed is merged into the main development branch.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，每个开发任务/组件构建都是一个独立的新分支，完成后会合并到主开发分支中。
- en: 'Practice makes perfect: branching with Git'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践出真知：使用Git进行分支操作
- en: I'm sure you have got a good idea about what, why, and when you can use branches
    when dealing with a Git repository. Let's fortify the understanding by creating
    a few use cases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你已经对在处理Git仓库时，何时、为什么以及如何使用分支有了较好的理解。让我们通过创建一些用例来加深这一理解。
- en: Scenario
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景
- en: Suppose you are the training organizer in your organization and are responsible
    for conducting trainings as and when needed. You are preparing a list of people
    who you think might need business communication skills training based on their
    previous records.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是你所在组织的培训组织者，负责在需要时进行培训。你正在准备一份人员名单，这些人基于之前的记录，可能需要接受商务沟通技巧的培训。
- en: As a first step, you need to send an e-mail to the nominations and check their
    availability on the specified date, and then get approval from their respective
    managers to allot the resource. Having experience in doing this, you are aware
    that the names picked by you from the records for training can have changes even
    at the last minute based on situations within the team. So you want to send out
    the initial list for each team and then proceed with your work while the list
    gets finalized.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事，你需要向被提名者发送电子邮件，确认他们在指定日期的可用性，然后从他们的经理处获得批准，分配资源。通过以往的经验，你知道从记录中选出的培训人员名单可能会因团队内的情况而发生最后时刻的变化。因此，你希望先发送初步名单给每个团队，然后在名单最终确定的同时继续工作。
- en: Time for action – creating branches in GUI mode
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻——在GUI模式下创建分支
- en: 'Whenever you want to create a new branch using Git Gui, execute the following
    steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你想使用Git Gui创建一个新分支时，按照以下步骤操作：
- en: Open Git Gui for the specified repository.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开指定仓库的Git Gui。
- en: Select the **Create** option from the **Branch** menu (or use the shortcut keys
    *Ctrl* + *N*), which will give you a dialog box as follows:![Time for action –
    creating branches in GUI mode](img/7522_07_04.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**分支**菜单中选择**创建**选项（或使用快捷键*Ctrl* + *N*），这时会弹出如下对话框：![Time for action – creating
    branches in GUI mode](img/7522_07_04.jpg)
- en: In the **Name** field, enter a branch name, leave the remaining fields as default
    for now, and then click on the **Create** button.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入分支名称，暂时保留其余字段为默认值，然后点击**创建**按钮。
- en: '*What just happened?*'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have learned to create a branch using Git Gui. Now let's go through the process
    mentioned for the CLI mode and perform relevant actions in Git Gui.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用Git Gui创建分支。现在，让我们通过CLI模式中提到的过程，并在Git Gui中执行相应的操作。
- en: Time for action – creating branches in CLI mode
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻——在CLI模式下创建分支
- en: Create a directory called `BCT` in your desktop. BCT is the acronym for Business
    Communication Training.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桌面上创建一个名为`BCT`的目录。BCT是“商务沟通培训”的缩写。
- en: Let's create a text file inside the `BCT` directory and name it `participants`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BCT`目录下创建一个文本文件，并命名为`participants`。
- en: 'Now open the `participants.txt` file and paste the following lines in it:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `participants.txt` 文件并粘贴以下内容：
- en: '`Finance team`'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`财务团队`'
- en: '`Charles`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`查尔斯`'
- en: '`Lisa`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`丽莎`'
- en: '`John`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`约翰`'
- en: '`Stacy`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`斯泰西`'
- en: '`Alexander`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`亚历山大`'
- en: Save and close the file.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: 'Initiate it as a Git repository, add all the files, and make a commit as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其初始化为 Git 仓库，添加所有文件，并进行如下提交：
- en: '[PRE0]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, e-mail those people followed by an e-mail to their managers and wait for
    the finalized list.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，给这些人发邮件，然后给他们的经理发邮件，并等待最终确认的名单。
- en: 'While they take their time to respond, you should go ahead and work on the
    next list, say for the marketing department. Create a *new branch* called `marketing`
    using the following syntax:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当他们花时间回复时，你应该继续处理下一个名单，比如营销部门。使用以下语法创建一个名为 `marketing` 的 *新分支*：
- en: '[PRE1]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now open the `participants.txt` file and start entering the names for the marketing
    department below the finance team list, as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `participants.txt` 文件并开始在财务团队名单下方输入营销部门的名字，如下所示：
- en: '`Marketing team`'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`营销团队`'
- en: '`Collins`'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`科林斯`'
- en: '`Linda`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`琳达`'
- en: '`Patricia`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`帕特里夏`'
- en: '`Morgan`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`摩根`'
- en: Before you finish finding the fifth member of the marketing team, you receive
    a finalized list from the finance department manager stating he can afford only
    three people for the training as the remaining (Alexander and Stacy) need to take
    care of other critical tasks. Now you need to alter the finance list and fill
    in the last member of the marketing department.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你找到营销团队第五个成员之前，你收到财务部门经理的最终名单，他表示只能为培训提供三个人，因为剩下的（亚历山大和斯泰西）需要处理其他关键任务。现在你需要更改财务名单并填入营销部门的最后一个成员。
- en: Before going back to the finance list and altering it, let's add the changes
    made for the marketing department and commit it.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在返回财务名单并进行修改之前，让我们先添加并提交为营销部门所做的更改。
- en: '[PRE2]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open the file and delete the names Alexander and Stacy, save, close, add the
    changes, and commit with the commit message `Final list from Finance team`.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件，删除亚历山大和斯泰西的名字，保存并关闭，添加更改并提交，提交信息为 `财务团队的最终名单`。
- en: '[PRE3]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Open the file and add the fifth name, Amanda, for the marketing team, save,
    add, and commit.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件，添加营销团队的第五个名字，阿曼达，保存、添加并提交。
- en: '[PRE4]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Say the same names entered for marketing have been confirmed; now we need to
    merge these two lists, which can be done by the following command.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设为营销团队输入的相同名字已经确认；现在我们需要合并这两个名单，可以通过以下命令完成：
- en: '[PRE5]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will get a merge conflict as shown in the following screenshot:![Time for
    action – creating branches in CLI mode](img/7522_07_05.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将遇到如下截图所示的合并冲突：![执行时刻 – 在命令行模式下创建分支](img/7522_07_05.jpg)
- en: Open the `participants.txt` file and resolve the merge conflict as as learned
    in [Chapter 6](ch06.html "Chapter 6. Unleash the Beast – Git on Text-based Files"),
    *Unleash the Beast – Git on Text-based Files*, then add the changes, and finally
    commit them.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `participants.txt` 文件并解决合并冲突，如在[第6章](ch06.html "第6章. 解锁怪兽 – 在文本文件上使用 Git")
    *解锁怪兽 – 在文本文件上使用 Git* 中所学，然后添加更改，最后提交。
- en: '*What just happened?*'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Without any loss of thought or data, we have successfully adopted the changes
    on the first list, which came in while working on the second list, with the concept
    of branching – without one interfering with another.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有任何思维或数据丢失的情况下，我们已经成功地在处理第二个名单时采用了第一个名单的更改，借助分支的概念——两个列表相互独立，互不干扰。
- en: As discussed, a branch begins its life as a copy of something else and then
    has a life of its own.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如讨论过的，分支的生命周期开始时是另一个事物的副本，然后它会有自己的生命。
- en: Here, by performing `git checkout` `–b branch_name` we have created a new branch
    from the existing position.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过执行 `git checkout` `–b branch_name` 我们从当前的位置创建了一个新分支。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Technically, the so-called existing position is termed as the position of HEAD
    and this type of lightweight branches, which we create locally, are called topic
    branches. Another type of branch would be the remote branch or remote-tracking
    branch, which tracks somebody else's work from some other repository. We already
    got exposed to this while learning the concept of cloning.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来说，所谓的“现有位置”指的是 HEAD 所在的位置，这种我们本地创建的轻量级分支叫做主题分支（topic branches）。另一种分支类型是远程分支或远程跟踪分支（remote-tracking
    branch），它跟踪其他仓库中的工作。当我们学习克隆的概念时，已经接触过这一点。
- en: 'The command `git checkout –b branch_name` is equivalent to executing the following
    two commands:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 命令 `git checkout –b branch_name` 等同于执行以下两个命令：
- en: '`git branch branch_name`: Creates a new branch of the given name at the given
    position, but stays in the current branch'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git branch branch_name`：在指定位置创建一个新的分支，但仍然停留在当前分支'
- en: '`git checkout branch_name`: Switches you to the specified branch from the current/active
    branch'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git checkout branch_name`：从当前/活跃分支切换到指定的分支'
- en: When a branch is created using Git Gui, the checkout process is automatically
    taken care of, which results in it being in the created branch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Git Gui创建分支时，切换过程会自动处理，这样你就会进入刚创建的分支。
- en: The command `git merge` `branch_name` merges the current/active branch with
    the specified branch to incorporate the content. Note that even after the merge
    the branch will exist until it's deleted with the command `git branch –d branch_name`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`git merge` `branch_name`命令将当前/激活的分支与指定的分支合并，以包含相关内容。请注意，即使在合并之后，分支仍然存在，直到使用命令`git
    branch –d branch_name`删除它。'
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In cases where you have created and played with a branch whose content you don't
    want to merge with any other branch and want to simply delete the entire branch,
    use `–D` instead of `–d` in the command mentioned earlier.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建并操作了一个分支，但不想将该分支的内容与其他任何分支合并，并且希望删除整个分支，请在之前提到的命令中使用`–D`代替`–d`。
- en: 'To view a list of branches available in the system, use the command git branch
    as shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看系统中可用分支的列表，可以使用命令`git branch`，如下面的截图所示：
- en: '![What just happened?](img/7522_07_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_07_06.jpg)'
- en: As shown in the screenshot, the branches available in our `BCT` repository right
    now are **marketing** and **master**, with **master** being the *default branch*
    when you create a repository. The branch with a star in front of it is the active
    branch. To ease the process of identifying the active branch, Git displays the
    active branch in brackets (`branch_name`) as indicated with an arrow.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如截图所示，我们的`BCT`仓库当前可用的分支是**marketing**和**master**，其中**master**是创建仓库时的*默认分支*。带有星号的分支是当前活跃的分支。为了便于识别当前分支，Git会在括号中显示活跃分支（`branch_name`），如箭头所示。
- en: 'By performing this exercise we have learned to create, add content, and merge
    branches when needed. Now, to visually see how the history has shaped up, open
    gitk (by typing `gitk` in the command-line interface or by selecting **Visualize
    All Branch History** from the **Repository** menu of Git Gui) and view the top
    left corner. It will show a history like in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，我们已经学会了创建、添加内容和在需要时合并分支。现在，为了直观地查看历史记录的变化，打开gitk（在命令行界面中输入`gitk`，或通过Git
    Gui的**Repository**菜单选择**Visualize All Branch History**），然后查看左上角。它将显示如下截图中的历史记录：
- en: '![What just happened?](img/7522_07_07.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_07_07.jpg)'
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Homework**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业**'
- en: Try to build a repository alongside the idea explained with the last flow diagram
    given in the *When do you need a branch* section. Have one main line branch called
    development and five component development branches, which should be merged in
    after the customizations are made to its source.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试根据*何时需要分支*一节中最后一个流程图的说明，建立一个仓库。创建一个名为“development”的主分支和五个组件开发分支，在进行定制后将这些分支合并。
- en: .config file – play with shortcuts
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .config文件 – 使用快捷方式
- en: As the name conveys, this text file, which is present inside your `.git` directory,
    is our project/repository-specific configuration file. It can also contain aliases
    to commands which you frequently use. An example of adding an alias is illustrated
    in the following section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，这个文本文件位于`.git`目录内，是我们项目/仓库的特定配置文件。它还可以包含你经常使用的命令别名。以下部分将展示如何添加一个别名的示例。
- en: Time for action – adding simple aliases using CLI
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻 – 使用CLI添加简单别名
- en: 'In your command-line window, type the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行窗口中，输入以下内容：
- en: '[PRE6]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now open your `.config` file, which is present inside the repository with your
    favorite text editor and you will see the following lines at the bottom:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开仓库中的`.config`文件，用你喜欢的文本编辑器查看，并且在底部会看到以下几行：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*What just happened?*'
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We have successfully created aliases for the Git commands `add` and `status`.
    To verify this, switch back to your command-line window and type the command `git
    st` and observe the output, which will be a spot on match to your `git status`
    command . Similarly we can use `git ad` as a substitute for the `git add` command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地为Git命令`add`和`status`创建了别名。为了验证这一点，切换回命令行窗口，输入`git st`并观察输出，它将完全匹配你的`git
    status`命令。类似地，我们可以使用`git ad`作为`git add`命令的替代。
- en: We can also chain two or more commands with one single alias. Let's learn how
    to do this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将两个或更多命令链式连接在一个单一的别名下。让我们学习如何做到这一点。
- en: Time for action – chain commands with a single alias using CLI
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 该操作的时间到了——使用CLI链式命令与单一别名
- en: As learned that the `.config` file is a plain text file, let's familiarize ourselves
    by opening and editing it directly this time instead of going via the command
    line.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`.config`文件是一个纯文本文件，让我们通过直接打开并编辑它来熟悉这个文件，而不是通过命令行进行操作。
- en: Open your favorite text editor and the `.config` file with it if you have not
    done so already.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你喜欢的文本编辑器，并用它打开`.config`文件（如果你还没有这样做的话）。
- en: 'Due to the actions performed by the commands in the earlier section, there
    will be a section created at the bottom of the file called `[alias]` under which
    we would have entries for `ad` and `st`. Add another line after that and paste
    the following characters:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于前面章节中命令的执行，将会在文件底部创建一个名为`[alias]`的部分，在该部分下我们会有`ad`和`st`的条目。之后再添加一行并粘贴以下字符：
- en: '[PRE8]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It should appear as follows:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它应该如下所示：
- en: '[PRE9]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Switch back to your command line and execute the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回命令行并执行以下命令：
- en: '[PRE10]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now add a new file called `testfile.txt` with some content to your repository
    and execute the following commands:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在向你的版本库中添加一个名为`testfile.txt`的新文件并添加一些内容，然后执行以下命令：
- en: '[PRE11]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*What just happened?*'
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have successfully chained multiple commands under a single alias.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地将多个命令链式连接在一个别名下。
- en: From now on, whenever we need to create a branch inside this repository, we
    can do it by using the `Git bco` command.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，每当我们需要在这个版本库中创建分支时，可以使用`Git bco`命令。
- en: 'Similarly whenever you need to add all the changes and view the status of the
    repository in series, we can use the following command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，每当你需要添加所有更改并查看版本库状态时，我们可以使用以下命令：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Whenever you need to do a commit on your repository, instead of `git commit
    –m "your_commit_messsage_here"`, we can use the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你需要在版本库中提交时，不需要使用`git commit –m "your_commit_message_here"`，我们可以使用以下命令：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice the difference between adding an alias through the command line and our
    recent modification directly on the file. The commands we have added are direct
    shell commands which when inserted inside the `.config` file must have a prefix
    of an exclamation symbol (!).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意通过命令行添加别名和我们最近直接修改文件之间的区别。我们添加的命令是直接的Shell命令，当它们插入到`.config`文件中时，必须以感叹号（!）作为前缀。
- en: '`git add .` adds all the changes made to the files present in your repository
    whereas the `&&` symbol is used to join another command, namely `git st` with
    the previous one. `Git st` displays the status of the repository. Because we have
    already created an alias for `status`, which is `st`, we have the convenience
    of using that here.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`git add .`会将所有更改的文件添加到你的版本库中，而`&&`符号则用来连接另一个命令，即`git st`与前一个命令连接。`git st`显示的是版本库的状态。因为我们已经为`status`创建了一个别名`st`，所以在这里我们可以方便地使用它。'
- en: Don't get afraid on seeing the next two lines which have all those curly braces
    pointing at you; all you need to know is that we have written a shell script which
    has a function `f()` within which we have chained the commands for execution.
    And like discussed, any shell commands have to be prefixed with an exclamation
    (!) symbol.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕看到接下来的两行代码中那些大括号；你需要知道的是，我们已经写了一个Shell脚本，其中有一个函数`f()`，在这个函数内部，我们已经将命令链式连接以供执行。正如之前讨论的，任何Shell命令都必须以感叹号（!）作为前缀。
- en: '`${1}` is a magic object technically called a variable which does the job of
    fetching the user values (`check_branch`) and inserting them next to the command
    dynamically, such that wherever you use `${1}`, it''s filled with the value that
    was provided by the user.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`${1}`是一个技术上称为变量的神奇对象，它的作用是获取用户输入的值（`check_branch`）并动态地将其插入到命令旁边，因此无论你在哪里使用`${1}`，它都会填充为用户提供的值。'
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that all the configuration changes that we have made are with respect to
    the `.config` file of one particular repository only and hence all these customizations
    will stay local. To make it global these changes need to be made inside your global
    `.gitconfig` file. This usually resides inside the `C:\Users\your_username` directory
    if you are on Windows and inside the `~/` directory if you are on Mac or Linux.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们所做的所有配置更改仅适用于某个特定仓库的 `.config` 文件，因此这些自定义设置将保持本地化。如果要使其全局生效，需要在你的全局 `.gitconfig`
    文件中进行更改。如果你使用的是 Windows 系统，这个文件通常位于 `C:\Users\your_username` 目录下，而在 Mac 或 Linux
    系统中则通常位于 `~/` 目录下。
- en: Time for action – adding complex aliases using GUI
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作时间 – 使用 GUI 添加复杂的别名
- en: Git Gui already has shortcuts for pretty much everything you will usually need,
    which we have been learning as we come across different topics, so let's understand
    how to chain commands using Git Gui.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Git Gui 已经为你通常需要的几乎所有功能提供了快捷键，我们在学习过程中已经接触到这些内容，因此让我们来了解如何使用 Git Gui 链接命令。
- en: Open Git Gui and select the **Add** option from the **Tools** menu, which will
    give you an **Add Tool** window as follows:![Time for action – adding complex
    aliases using GUI](img/7522_07_08.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Git Gui 并从**工具**菜单中选择**添加**选项，这将弹出一个**添加工具**窗口，如下所示：![Time for action – adding
    complex aliases using GUI](img/7522_07_08.jpg)
- en: 'Enter the following values in the respective fields:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相应的字段中输入以下值：
- en: '| Field name | Field value |'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字段名称 | 字段值 |'
- en: '| --- | --- |'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Name** | `Add and status` |'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **名称** | `添加并查看状态` |'
- en: '| **Command** | `git add . && git status` |'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **命令** | `git add . && git status` |'
- en: Click on the **Add** button.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Now you will see the newly created alias as a menu item inside the **Tools**
    menu, as shown in the following screenshot:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在你会看到新创建的别名作为菜单项出现在**工具**菜单中，如下图所示：
- en: '![Time for action – adding complex aliases using GUI](img/7522_07_09.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Time for action – adding complex aliases using GUI](img/7522_07_09.jpg)'
- en: '*What just happened?*'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have practically learned that we can create comfortable aliases for lengthy
    commands that we frequently use. We also learned and practiced methods to combine
    multiple commands and execute them in order, using both the CLI and GUI modes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实践了如何为我们经常使用的长命令创建便捷的别名。我们还学习并实践了如何将多个命令结合起来并按顺序执行，使用命令行和图形界面模式。
- en: Tip
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Homework**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业**'
- en: Create a simple alias for `git log`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为 `git log` 创建一个简单的别名。
- en: Then, create a chain with two commands and call it `clog` (`git commit` and
    `git log)` in such a way that when you type `git clog "my_commit_message_here"`,
    your changes will shift from the **changes to be committed** state to **nothing
    to commit** state (which means the changes that were added but not committed are
    now committed with the commit message provided) continued by a listing of all
    the commits and their relevant details (which are usually displayed when using
    the command `git log`).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个由两个命令组成的链，并将其命名为 `clog`（`git commit` 和 `git log`），使得当你输入 `git clog "my_commit_message_here"`
    时，你的更改将从**待提交更改**状态变为**没有要提交的内容**状态（这意味着已添加但未提交的更改现在已提交，且提交信息为提供的信息），然后列出所有提交及其相关详细信息（这些通常是使用命令
    `git log` 时显示的内容）。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We have learned:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学到了：
- en: What branching is
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支是什么
- en: How and when it can be used with different workflows
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何以及何时在不同的工作流中使用
- en: We also practiced elements on how to work with different parts of the same repository
    without one interfering with the other and merging these different parts to incorporate
    content when needed.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还实践了如何在同一个仓库中操作不同部分而不相互干扰，并在需要时合并这些部分以整合内容。
- en: Additionally, we also took a dip into the usage of aliases and practically performed
    the creation of a simple alias for frequently used lengthy commands and the chaining
    of multiple commands for frequently used workflows.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还探索了别名的使用，并实际演示了如何为常用的长命令创建简单的别名，以及如何将多个命令链在一起，适用于常用的工作流程。
