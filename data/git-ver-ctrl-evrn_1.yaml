- en: Chapter 1. Breathe Easy – Introduction to Version Control System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 轻松呼吸——版本控制系统简介
- en: '*We might have wondered numerous times if there is a way we could travel back
    in time to change what had happened in life. Well, as fictional as it sounds,
    you are going to learn a method to perform this travel when it comes to digitized
    files! Yes, you read that right; this chapter is going to introduce you to a system
    that makes this possible. We will begin by giving you a solid conceptual understanding
    about version control with Git.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们或许曾无数次地想，是否有办法回到过去改变曾经发生过的事情。虽然听起来像是虚构的，但你将会学到一种方法，当涉及到数字化文件时，可以实现这种“穿越”！没错，你没有看错；本章将向你介绍一个让这一切成为可能的系统。我们将从为你提供关于
    Git 版本控制的坚实概念理解开始。*'
- en: 'This chapter will answer the following questions:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将回答以下问题：
- en: What is a version control system?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是版本控制系统？
- en: Where do you need one?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在哪里需要它？
- en: How did they evolve?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是如何发展的？
- en: Why is Git your best bet?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么 Git 是你的最佳选择？
- en: By the end of this chapter you would be able to visualize how you can better
    handle situations where frequent changes happen on different parts of your digitized
    files. So let's get started right away!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够清楚地了解如何更好地处理在数字化文件的不同部分频繁变动的情况。那我们就马上开始吧！
- en: Do you need help
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要帮助吗？
- en: I learned to play computer games even before learning to switch a computer on
    or off, for which I sought an adult's help. The early computer games, which put
    us in awe even at that time, had a few frustrating moments when they wouldn't
    allow us to save our progress. Even if they had a save option it was a single
    save slot at a time, which meant you could only save your progress at the cost
    of your earlier save. This was a shame, because your previous save might have
    been at an exceptionally fun part of the game that you would like to preserve
    now and revisit later some day, or even worse, your present save might have been
    at an unwinnable situation that you want to undo.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我在学会打开或关闭计算机之前就学会了玩电脑游戏，那时我需要寻求成年人的帮助。早期的电脑游戏即使在当时也让我们惊叹，但也有一些让人沮丧的时刻，它们不允许我们保存进度。即使它们有保存选项，也只是一次只能保存一个档位，这意味着你只能用新的进度覆盖掉旧的进度。这样很遗憾，因为你之前的存档可能是在游戏中特别有趣的部分，你现在希望保存并在以后某个时候重新访问，或者更糟糕的是，你当前的存档可能是在一个无法通关的情境中，你希望撤销这一点。
- en: Computer games have evolved from this state while our way of working with digitized
    files remains the same. Options like *undo* and *redo* help us momentarily when
    the file that we are working with is still open, but fail to go beyond that. You
    cannot just open a file and start undoing the changes that you have made before
    your last save to get back to an older state.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机游戏从这一状态进化而来，而我们处理数字化文件的方式却依然保持不变。像 *撤销* 和 *重做* 这样的选项在文件仍然打开时能短暂地帮助我们，但无法超越这个限制。你不能仅仅打开一个文件，然后开始撤销在上次保存之前所做的更改，以回到较早的状态。
- en: There are also several situations where we would like to maintain multiple versions
    of the same file. Even the most widely used way of maintaining multiple versions
    of a file by naming the new files sequentially, for example, `Inventory_product_2011-09-21.doc`,
    `System_requirement_specification_v6.xls`, and so on, become a pain as the number
    of versions increases because of the huge volume of the number of files that has
    to be maintained.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些情况，我们希望维护同一个文件的多个版本。即使是最常用的通过按顺序命名新文件的方式来维护多个版本，比如 `Inventory_product_2011-09-21.doc`、`System_requirement_specification_v6.xls`
    等等，随着版本数量的增加，这种方式也会变得令人头疼，因为必须维护的文件数量巨大。
- en: Now if you have experienced or thought about any of these situations and wondered
    whether there is a way to handle this better, you will be rejoicing at the end
    of this chapter. This is where a **version control system** (**VCS**) comes into
    play.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经历过或思考过这些情况，并想知道是否有更好的方法来处理，你将在本章结束时感到欣喜。这就是 **版本控制系统**（**VCS**）发挥作用的地方。
- en: What is a version control system
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是版本控制系统
- en: A system capable of recording the changes made to a file or a set of files over
    a time period in such a way that it allows us to get back in time from the future
    to recall a specific version of that file, is called a version control system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个能够记录文件或一组文件在一段时间内所做更改的系统，以便它允许我们从未来回到过去，回溯某个特定版本的文件，这种系统被称为版本控制系统。
- en: To give you a more formal explanation, a version control system is a software
    package that when initiated will monitor your files for changes and allow you
    to tag the changes at different levels so that you can revisit those tagged stages
    whenever needed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给您更正式的解释，版本控制系统是一个软件包，当启动时，它会监控您的文件变化，并允许您在不同级别上标记这些变化，以便您在需要时可以随时回访这些标记的阶段。
- en: When installed and initiated, this version control system creates a local directory
    at the same place where your files reside, which it uses to manage the entire
    history of the changes made to your files.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并启动后，版本控制系统会在您的文件所在位置创建一个本地目录，用于管理您文件所有更改的历史记录。
- en: Why you need a version control system
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么您需要一个版本控制系统
- en: 'Try answering the following questions with regards to your present system setup:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请尝试回答以下与您当前系统设置相关的问题：
- en: Can you maintain multiple versions of the same file under the same name, thus
    avoiding cluttering of files with small differences in their names mentioning
    their versions?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否可以在同一个文件名下保持多个版本，从而避免因文件名中提及版本而导致文件冗余？
- en: Do you have any means of marking a specific portion of your content in the file/files
    that you might need in future before changing them for present needs?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否有任何方法在更改文件/文件内容之前，标记出未来可能需要的特定部分？
- en: Are you satisfied with the existing scenario where your only failsafe plan for
    getting back your content is copying and pasting the file or group of files in
    a separate folder that contains the word "backup" in its name? And updating it
    regularly?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否满意现有的情况，即唯一的备份方案是将文件或一组文件复制并粘贴到一个包含“备份”字样的单独文件夹中，并定期更新它？
- en: If your answer to any of these questions is a big*no*, then that's exactly the
    reason you would probably need a version control system and this book.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对这些问题的回答是个大*不*，那么这正是您可能需要版本控制系统和本书的原因。
- en: If your answers to these questions are *yes*, it means that you have probably
    managed to find roundabout ways to solve these issues. Simple measures could include
    creating a restoration point in latest releases of Windows, which internally stores
    versions of all documents such as your Word, Excel, or PowerPoint files present
    at that point in time as a part of creating your restoration point.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对这些问题的回答是*是*，这意味着您可能已经找到了变通的方法来解决这些问题。简单的措施包括在最新版本的 Windows 中创建还原点，该还原点会在当时存储您所有文档的版本，如您的
    Word、Excel 或 PowerPoint 文件。
- en: As varied as the potential solutions may be, allow me tell you that version
    control systems will amaze you with their power, simplicity, and ease of use.
    They will allow you to achieve much better results with less than half the time
    and effort that you would normally put into your present solutions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案可能会有很多种，但请允许我告诉您，版本控制系统将以其强大、简单和易用的特点让您感到惊讶。它们将使您在比现在的解决方案所需时间和精力少一半的情况下，获得更好的结果。
- en: By using a version control system you have the power to play with the flow of
    changes happening to your documents. Whenever you have to make considerable amount
    of changes to the existing content you can mark those changes as a stage (with
    a tag) that you can revisit later; this serves as a failsafe mechanism just in
    case things didn't go as per your plan and you want to revert the content of the
    document back to a particular older state.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用版本控制系统，您可以掌控文档变更的流程。每当您需要对现有内容做出大量修改时，您可以将这些更改标记为一个阶段（带有标签），以便稍后回访；这就像一个安全机制，以防事情没有按计划进行，您希望将文档内容恢复到某个较早的状态。
- en: 'The following figures demonstrate the flow of content creation with and without
    a version control system:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了有无版本控制系统的内容创作流程：
- en: '![Why you need a version control system](img/7522_01_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![为什么您需要版本控制系统](img/7522_01_01.jpg)'
- en: The previous figure shows you the flow of a content creation matrix at different
    times spread across sessions. As you can observe in a regular constructive context
    the flow is from *left to right*, meaning you progress with content creation one
    way when it comes to building content on different time periods. In this flow
    you cannot go back to a previous phase from where you can take a different direction
    altogether when compared to what you have already taken.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上一图展示了在不同时间点跨会话传播的内容创作矩阵的流程。如你所见，在常规的建设性环境中，流程是从*左到右*的，这意味着在不同时间段的内容创作过程中，你是单向前进的。在这个流程中，你不能回到一个早期阶段，从那里你可以选择一个完全不同的方向，而不是你已经采取的方向。
- en: To explain it using our flow diagram, you cannot go back to any of the intermediate
    stages from the final stage to write an entirely different third paragraph to
    serve a new purpose without any data loss. (You cannot use the undo feature as
    the content was built across time periods, and you cannot undo something once
    you have saved and closed your file.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们流程图的说明，你无法从最终阶段回到任何中间阶段去写一个完全不同的第三段内容以服务于新的目的，而不会丢失任何数据。（你不能使用撤销功能，因为内容是在不同的时间段中构建的，而且一旦你保存并关闭文件后，不能撤销任何操作。）
- en: Presently we achieve this using the "save as" option, giving the file a different
    name, deleting the third paragraph, and starting to write a new one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们通过使用“另存为”选项，给文件起一个不同的名字，删除第三段，并开始写新的一段来实现这一点。
- en: In contrast, when you use a version control system, it's a **multi-directional
    free flow context**. You mark each and every change you consider important as
    a new stage and proceed with your content creation. This allows you to get back
    to any earlier stages that you have created, without any data loss.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，当你使用版本控制系统时，它是一个**多方向自由流动的环境**。你标记下每一个你认为重要的更改作为一个新的阶段，并继续进行内容创作。这使你可以在没有任何数据丢失的情况下，回到你创建的任何早期阶段。
- en: '![Why you need a version control system](img/7522_01_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![你为什么需要版本控制系统](img/7522_01_02.jpg)'
- en: 'And the best part is you are not limited by the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最棒的部分是，你不受以下限制：
- en: Number of hops
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃的次数
- en: Number of stages between the hops
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃之间的阶段数
- en: Direction of the hop
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃的方向
- en: This means we can, without any concern, jump to and fro between and across stages
    in any direction without any data loss. Now doesn't that sound like the need of
    the hour?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以毫无顾虑地在任何方向上自由地在不同阶段之间跳来跳去而不会丢失任何数据。现在听起来是不是正是这个时代所需要的？
- en: Types of version control systems
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统的类型
- en: 'There are three types of version control systems available. These are classified
    based on their **mode of operation**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的版本控制系统可用。这些是根据它们的**操作模式**进行分类的：
- en: Local version control system
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地版本控制系统
- en: Centralized version control system
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中式版本控制系统
- en: Distributed version control system
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式版本控制系统
- en: Let's quickly go through the history in brief.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下历史。
- en: Local version control system
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地版本控制系统
- en: After understanding that maintaining multiple versions of files by just following
    a file naming convention is highly error prone, a **local version control system**
    was the first successful attempt to solve this issue.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在认识到仅通过遵循文件命名规则来维护多个版本的文件是高度容易出错后，**本地版本控制系统**是第一个成功解决此问题的尝试。
- en: '**Revision control system** (**RCS**) was one of the most popular version control
    systems in this cadre.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**修订控制系统**（**RCS**）曾是这一领域最流行的版本控制系统之一。'
- en: This tool basically works by keeping patch sets (that is, the difference between
    the file's content at progressive stages) using a special format in the version
    tracker that is stored in your local hard disk.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具基本上通过在版本跟踪器中使用一种特殊格式来保持补丁集（即文件在不同阶段内容之间的差异），并将其存储在本地硬盘上。
- en: It can then recreate the file's contents exactly at any given point in time
    by adding up all the relevant patches in order and "checking it out" (reproducing
    the content to the user's workplace).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以通过按顺序添加所有相关补丁并“签出”（将内容复制到用户的工作区），精确地在任何给定的时间点重建文件的内容。
- en: '![Local version control system](img/7522_01_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![本地版本控制系统](img/7522_01_03.jpg)'
- en: Tidbits
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Version tracker is nothing but a file with its own file format holding structured
    content format through which it can perform its functionalities.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 版本跟踪器实际上是一个拥有自己文件格式的文件，通过该格式可以存储结构化内容，并执行其功能。
- en: When a file is put under RCS it creates a version tracker entry that will hold
    details such as RCS configuration for that particular file at the top followed
    by version number, date, time, author, state, branch, and a link to the next stage
    followed by contents of the file in a specially formatted manner. After this process
    your file is deleted!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件被放入RCS时，它会创建一个版本跟踪条目，其中包含该文件特定的RCS配置，版本号、日期、时间、作者、状态、分支以及指向下一个阶段的链接，接着是文件内容，格式化方式特别。完成此过程后，你的文件会被删除！
- en: Retrieval of the file, as stated previously, is done through reconstruction
    of patches.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，文件的检索是通过修补程序的重建来完成的。
- en: Centralized version control system
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集中式版本控制系统
- en: As with any other software package or concept, as the requirements kept evolving,
    users felt that local version control systems limited their activities.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他任何软件包或概念一样，随着需求不断发展，用户觉得本地版本控制系统限制了他们的活动。
- en: People were not able to work collaboratively on the same project, as the files
    with their versions are stored in somebody's local computer and were not accessible
    to other people working on the same files.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 人们无法在同一个项目上进行协作工作，因为带有版本的文件存储在某个人的本地计算机上，其他在同一文件上工作的人无法访问这些文件。
- en: So how do you solve this problem?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你该如何解决这个问题呢？
- en: It is solved by keeping the files in a common place (server) that everybody
    has access to from their local machines (clients). Hence, the birth of a **centralized
    version control system**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将文件保存在一个大家都能从本地计算机（客户端）访问的公共位置（服务器）来解决问题。因此，**集中式版本控制系统**应运而生。
- en: '![Centralized version control system](img/7522_01_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![集中式版本控制系统](img/7522_01_04.jpg)'
- en: Whenever people want to edit single or multiple files only the last version
    of the files are retrieved.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每当人们想编辑单个或多个文件时，只会检索文件的最后一个版本。
- en: This setup not only provides access to the files for people who require them
    but also offers visibility on what other people are working towards.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置不仅为需要文件的人提供访问权限，还提供了对其他人工作进展的可见性。
- en: As the files are stored in one single location from which everybody needs to
    share the files, any changes made to the files are automatically shared with other
    individuals as well.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文件存储在一个统一位置，所有人都需要共享这些文件，因此对文件所做的任何更改会自动与其他人共享。
- en: Distributed version control system
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式版本控制系统
- en: Whenever you bet big time on one single unit, the probability of losing is also
    high. Yes, there is a high degree of risk involved in using a centralized version
    control system because the users only have the last version of files in their
    system for working purposes; there is a chance you might ultimately lose the entire
    history of your files if the server gets corrupt and if you don't have fail-safe
    procedures implemented.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你将大量资源押注于一个单一单位时，失败的概率也会很高。是的，使用集中式版本控制系统确实存在很高的风险，因为用户只能在系统中获得文件的最后一个版本用于工作；如果服务器发生故障，而且没有实施故障保护程序，你最终可能会丢失文件的全部历史记录。
- en: Now people get confused. You risk everything when you store your entire history
    in one single place using a centralized version control concept; on the contrary
    you lose the power to work collaboratively when you use local version control.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在人们感到困惑。当你使用集中式版本控制概念将整个历史存储在一个地方时，你将面临巨大的风险；相反，当你使用本地版本控制时，你失去了协作工作的能力。
- en: So what do you do?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你该怎么做呢？
- en: Exactly! You combine the advantages of both and make a **hybrid system**. And
    that's one of the key reasons why **distributed version control systems** came
    into the picture.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 没错！你将两者的优点结合起来，构建一个**混合系统**。这也是**分布式版本控制系统**进入视野的关键原因之一。
- en: '![Distributed version control system](img/7522_01_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![分布式版本控制系统](img/7522_01_05.jpg)'
- en: 'Distributed version control systems have the advantages of local version control
    systems, such as the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式版本控制系统具备本地版本控制系统的优点，例如以下几点：
- en: Making local changes without any concern of full time connectivity to the server
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不担心与服务器持续连接的情况下进行本地更改
- en: Not relying on a single copy of files stored in the server
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不依赖存储在服务器中的单一文件副本
- en: 'These are combined with the advantages of centralized version control systems,
    such as the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与集中式版本控制系统的优点结合起来，例如以下几点：
- en: Reusability of work
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作的可重用性
- en: Collaborative working, not relying on history stored on individual machines
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作工作，不依赖存储在个人机器上的历史记录
- en: A distributed version control system is designed to act both ways. It stores
    the entire history of the file/files on each and every machine locally and also
    syncs the local changes made by the user back to the server whenever required
    so that the changes can be shared with others providing a collaborative working
    environment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式版本控制系统设计成双向工作。它在每台机器上本地存储文件/文件的整个历史记录，并且在需要时将用户所做的本地更改同步回服务器，以便将更改与其他人共享，提供一个协作的工作环境。
- en: There are several other advantages in terms of performance, ease of use, and
    administration. It's a general saying that "you name anything that a centralized
    version control system can perform; a distributed version control system can handle
    the same thing and perform much better".
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能、易用性和管理方面，还有其他一些优势。一般来说有一句话说：“你列举任何一个集中式版本控制系统能做的事情；分布式版本控制系统都能做，并且做得更好。”
- en: Falling for Git
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信赖 Git
- en: We came across different types of version control systems in the previous section,
    from which we clearly understood that a distributed version control system is
    what will make our lives easy, safe, and secure.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中我们接触到了不同类型的版本控制系统，从中我们清楚地了解到，分布式版本控制系统能让我们的工作变得更加轻松、安全和可靠。
- en: Now, there are lots of distributed systems available in the market, so which
    one to choose?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，市场上有很多分布式系统，那么该选择哪个呢？
- en: Git is a relatively new software package (April 7, 2005 with its first prototype)
    that was designed from the ground up to avoid flaws that existed in many other
    version control systems.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个相对较新的软件包（2005年4月7日发布第一个原型），它从零开始设计，避免了许多其他版本控制系统存在的缺陷。
- en: 'Linus Torvalds, the man who gave us the Linux kernel, is the proud initiator
    of this project as well. The very architecture of GIT is tailored for better speed,
    performance, flexibility, and usability. When I first heard the previous sentence
    I had the same thought that you have in mind right now: "It talks the talk; can
    it walk the walk?"'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Linus Torvalds，Linux 内核的创造者，也是这个项目的骄傲发起人。Git 的架构本身就为更好的速度、性能、灵活性和可用性量身定制。当我第一次听到这句话时，我脑海中和你现在的想法是一样的：“它说得很好；它真的能做到吗？”
- en: As a matter of fact there are several live case studies; I got convinced when
    I saw Git handling the complex Linux kernel source code so gracefully.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，有多个实际案例研究；我在看到 Git 如何优雅地处理复杂的 Linux 内核源代码时，深受震撼。
- en: For those of you who don't have any idea about Linux kernel or why it's tagged
    complex, just think about approximately 9 million lines of content spread across
    25,000 files subjected to all kinds of content manipulation, travelling back and
    forth, numerous times every day by several hundred developers across the world.
    And still the response time of Git's operations are in seconds.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不了解 Linux 内核或为什么它被称为复杂的人，可以想象大约900万行内容分布在25000个文件中，内容经常被不同的开发人员操作，每天多次往返。即使如此，Git
    的操作响应时间仍然仅为几秒钟。
- en: 'Why they trust Git for such challenging tasks and how Git meets their expectations
    is through the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么他们信任 Git 来完成如此具有挑战性的任务，以及 Git 如何满足他们的期望，可以通过以下几点来解释：
- en: Atomicity
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原子性
- en: Performance
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: Security
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Atomicity
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子性
- en: Atomicity is nothing but a property of an operation that appears to occur at
    a single instant between its invocation and its response.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 原子性只不过是一个操作的特性，它在调用和响应之间看似在一个瞬间发生。
- en: As an example let's take a banking system. When you transfer money from your
    account to another account, the operation is either completed fully or rejected
    meaning either the money gets debited from your account and gets credited to the
    recipient's account or the entire operation gets dropped and no money is debited
    from your account in the first place.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以银行系统为例。当你从你的账户向另一个账户转账时，操作要么完全成功，要么被拒绝，这意味着要么钱从你的账户中扣除并存入收款人的账户，要么整个操作被取消，钱根本不会从你的账户中扣除。
- en: These systems avoid partial completions such as the amount getting debited from
    your account but not getting credited to recipient's account.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些系统避免了部分完成的情况，比如钱已经从你的账户扣除，但没有存入收款人的账户。
- en: 'Another example would be a seat reservation system in which the following are
    the possible states:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是座位预定系统，其中可能有以下几种状态：
- en: Both pay and reserve a seat
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时付款并预定座位
- en: Neither pay nor reserve a seat
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 既不付款也不预定座位
- en: Git creators understood the value of our data, and implemented the same when
    handling content with Git. It ensures there is no data loss or version mismatch
    happening due to partial operations, which increases reliability.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的创建者理解我们数据的价值，并在处理 Git 内容时实现了这一点。它确保了由于部分操作导致的数据丢失或版本不匹配的情况不会发生，从而提高了可靠性。
- en: Performance
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: No matter how good a car's interiors are, if it isn't quick enough, it isn't
    fit enough for racing against time. Git is proven to be manyfold faster than its
    competitors.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 无论一辆车的内部如何豪华，如果它不够快，就无法与时间赛跑。Git 被证明比它的竞争者快得多。
- en: Even when handling several million files, an operation performed using Git takes
    only seconds to complete. One of the main reasons for this would be the way Git
    handles your files. Conceptually most other systems (CVS, Subversion, Perforce,
    Bazaar, and so on) look at your data as a set of files and changes made to each
    of them as the version proceeds.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 即使处理数百万个文件，使用 Git 执行的操作也只需几秒钟即可完成。这其中的一个主要原因在于 Git 处理文件的方式。大多数其他系统（如 CVS、Subversion、Perforce、Bazaar
    等）概念上将数据视为一组文件，并把每个文件的变更看作版本更新的一部分。
- en: 'The following is a pictorial representation of how other systems handle files
    and their versions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其他系统如何处理文件及其版本的图示：
- en: '![Performance](img/7522_01_06.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![性能](img/7522_01_06.jpg)'
- en: 'In contrast, Git sees a relation between your files and works upon it. It takes
    a **snapshot** of the entire set of files instead of storing the difference between
    versions of each file; this contributes to the lightning speed of Git in certain
    operations like reverting your file''s contents to earlier versions (which we
    will see in later chapters). Each time a version is created, a snapshot is taken.
    This doesn''t mean that Git stores multiple replicas of your files; if Git finds
    that there is no change in any of your files'' content, just a reference to that
    file that points to the previous snapshot is stored in the new snapshot, as shown
    in the following figure:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Git 将文件之间的关系看作是其操作的核心。它对整个文件集进行 **快照**，而不是存储每个文件版本之间的差异；这有助于 Git 在某些操作（如将文件内容恢复到先前版本）中的快速性（稍后的章节我们会讨论到）。每次创建版本时，Git
    都会进行快照。这并不意味着 Git 存储多个文件副本；如果 Git 发现某个文件内容没有变化，它只会存储指向先前快照的引用，而不是存储文件本身，如下图所示：
- en: '![Performance](img/7522_01_07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![性能](img/7522_01_07.jpg)'
- en: The best part is that Git tries to occupy as little space (again, several times
    less when compared to other version control systems) as possible to maintain version
    histories of your files. A live case study in handling the source code of Mozilla
    Firefox published by Keith P. ([http://keithp.com/blogs/Repository_Formats_Matter/](http://keithp.com/blogs/Repository_Formats_Matter/))
    showed how effectively version control systems utilize space when it comes to
    maintaining the history of your files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是，Git 尽可能占用最少的空间（与其他版本控制系统相比，空间占用少了几倍）来维护文件的版本历史。在凯斯·P.（[http://keithp.com/blogs/Repository_Formats_Matter/](http://keithp.com/blogs/Repository_Formats_Matter/)）发布的关于
    Mozilla Firefox 源代码管理的案例研究中，展示了版本控制系统在维护文件历史记录时是如何高效利用空间的。
- en: Mozilla's CVS repository was 2.7 GB in size; when imported to Subversion the
    size grew to 8.2 GB, and when put under Git the size got shrunk to 450 MB. For
    a source code of size 350 MB it's fairly nice to have the whole project history
    (from 1998) with just 100 MB more space.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla 的 CVS 仓库大小为 2.7 GB；导入到 Subversion 后大小增至 8.2 GB，而在 Git 中，大小压缩到了 450 MB。对于一个
    350 MB 的源代码项目，能够拥有自 1998 年以来的全部项目历史，只需要额外 100 MB 的空间，真是相当不错。
- en: Security
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性
- en: When you use Git, you can be sure that no one is tampering with your files'
    content. Everything that goes into Git is check-summed using an SHA-1 hash before
    it's stored, and after that it is referred to using that checksum.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 Git 时，你可以放心，没有人会篡改你的文件内容。所有提交到 Git 的内容都会先通过 SHA-1 哈希进行校验，确保内容的完整性，之后使用该校验和来引用文件。
- en: 'This means it''s impossible to change the contents of any file or directory
    without Git knowing about it. The SHA-1 hash used here is a collection of 40 hexadecimal
    characters (a-f and 0-9) which is generated based on the contents of a file or
    directory structure. The following is an example of a hash:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，在没有 Git 知道的情况下，任何文件或目录的内容都无法更改。这里使用的 SHA-1 哈希是由 40 个十六进制字符（a-f 和 0-9）组成，基于文件或目录结构的内容生成。以下是一个哈希示例：
- en: 9e79e3e9dd9672b37ac9412e9a926714306551fe
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 9e79e3e9dd9672b37ac9412e9a926714306551fe
- en: For those of you who would like to know more about it, you can hear from the
    very creator, Linus Torvalds, who gives a presentation at Google's tech talk event.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些希望进一步了解的人，你可以听听版本控制系统的创始人——Linus Torvalds在谷歌技术讲座上的演讲。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we discussed problems faced in our daily lives when it comes
    to digitized files, followed by exactly addressing those issues and assuring a
    solution to those challenging problems with the help of a version control system.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了我们日常生活中遇到的与数字化文件相关的问题，接着针对这些问题提供了具体的解决方案，并通过版本控制系统确保能够解决这些具有挑战性的问题。
- en: We also quickly went through the evolution of version control systems and obtained
    a solid understanding of how a distributed version control system can make our
    lives easy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还简要回顾了版本控制系统的发展历程，并深入理解了分布式版本控制系统如何使我们的生活更加便捷。
- en: Then we got introduced to the best-in-class distributed version control system,
    Git, and discussed a few reasons for such a claim with some interesting statistics
    and case studies. This was followed by a view on a few of its internals such as
    atomicity, performance, and security.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接着我们介绍了行业领先的分布式版本控制系统Git，并通过一些有趣的统计数据和案例研究讨论了这一声明背后的几个理由。随后，我们还探讨了它的一些内部机制，如原子性、性能和安全性。
- en: Now that we've done enough ground work, we're ready to get our copy of Git and
    get it running in our system, which is the topic of the next chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成了足够的准备工作之后，我们已经准备好安装Git并在系统中运行它，这也是下章的主题。
