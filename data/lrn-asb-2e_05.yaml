- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Deploying WordPress
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 WordPress
- en: In the previous chapter, we built a playbook that installs and configures a
    basic **LAMP stack**. In this chapter, we will be building on top of the techniques
    we used there to create a playbook that installs a **LEMP stack**, which, as you
    might recall, replaces Apache with NGINX and then installs WordPress.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了一个安装和配置基本 **LAMP 堆栈** 的 playbook。在本章中，我们将在那里使用的技术基础上构建一个 playbook，用于安装
    **LEMP 堆栈**，正如你可能记得的，它用 NGINX 替代了 Apache，然后安装 WordPress。
- en: 'Once we finish this chapter, you should be able to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你应该能够做到以下几点：
- en: Prepare our initial playbook
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备我们的初始 playbook
- en: Download and install the WordPress CLI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装 WordPress CLI
- en: Install and configure WordPress
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 WordPress
- en: Log in to your WordPress installation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录到你的 WordPress 安装
- en: 'The chapter covers the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及以下主题：
- en: Preinstallation tasks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预安装任务
- en: The `stack_install` role
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stack_install` 角色'
- en: The `stack_config` role
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stack_config` 角色'
- en: The `wordpress` role
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wordpress` 角色'
- en: Running the WordPress playbook
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 WordPress playbook
- en: Before we start, we should quickly cover what WordPress is; you have likely
    visited a website powered by WordPress at some point in the last 24 hours.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，简要了解一下 WordPress；你可能在过去的 24 小时内访问过一个由 WordPress 提供支持的网站。
- en: It is an open-source **content management system** (**CMS**) powered by PHP
    and MySQL and used by around 810 million websites, which is around 43% of all
    the websites on the internet today, according to the statistics published by Colorlib
    in August of 2023.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个开源的 **内容管理系统** (**CMS**)，由 PHP 和 MySQL 提供支持，根据 2023 年 8 月 Colorlib 发布的统计数据，全球约有
    8.1 亿个网站使用它，占所有网站的约 43%。
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Like in [*Chapter 4*](B21620_04.xhtml#_idTextAnchor202), *Deploying a LAMP Stack*,
    we will use the local **Multipass virtual machine** we have been using throughout
    the title. Again, additional packages will be downloaded when launching the virtual
    machine and deploying WordPress.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 [*第4章*](B21620_04.xhtml#_idTextAnchor202) *部署 LAMP 堆栈* 中一样，我们将继续使用之前在整个标题中使用的本地
    **Multipass 虚拟机**。同样，在启动虚拟机并部署 WordPress 时，将下载额外的软件包。
- en: You can find a complete copy of the playbook in the repository accompanying
    this title at [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter05).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书附带的仓库中找到完整的 playbook 副本，地址是 [https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Learn-Ansible-Second-Edition/tree/main/Chapter05)。
- en: Preinstallation tasks
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预安装任务
- en: 'As mentioned in [*Chapter 4*](B21620_04.xhtml#_idTextAnchor202), *Deploying
    a LAMP Stack*, a LEMP stack is composed of the following elements:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [*第4章*](B21620_04.xhtml#_idTextAnchor202) *部署 LAMP 堆栈* 中所提到的，LEMP 堆栈由以下元素组成：
- en: '**Linux**: In our case, this will be the Ubuntu Multipass virtual machine'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：在我们的案例中，这将是 Ubuntu Multipass 虚拟机'
- en: '**NGINX**: If you remember, it is pronounced as *engine-x*, which means there
    is an *E* in *LEMP* and not an *N* (which would also make it impossible to pronounce
    as an abbreviation)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NGINX**：如果你记得，它的发音是 *engine-x*，这意味着在 *LEMP* 中应该有一个 *E*，而不是 *N*（否则也无法作为缩写来发音）'
- en: '**MariaDB**: As we have already seen, this will be the database component'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MariaDB**：正如我们已经看到的，这将是数据库组件'
- en: '**PHP**: We will be using PHP 8 again for this'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PHP**：我们将再次使用 PHP 8 来进行配置'
- en: Before we install WordPress, we need to install and configure these components.
    Also, as this playbook will eventually be executed against publicly available
    cloud servers, we must consider some best practices around our NGINX configuration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 WordPress 之前，我们需要先安装和配置这些组件。而且，由于这个 playbook 最终将在公开的云服务器上执行，我们必须考虑一些关于 NGINX
    配置的最佳实践。
- en: 'However, before we start looking at the playbook, let’s start things off by
    getting the initial structure of the playbook set up:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们开始查看 playbook 之前，让我们先设置 playbook 的初始结构：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This gives us our basic layout. Next, we must copy the `cloud-init.yaml`, `example_key`,
    `example_key.pub`, and `hosts.example` files from the previous chapters, so when
    it is time to run the playbook, we have everything we need to launch the virtual
    machine using Multipass.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了基本布局。接下来，我们必须从前面的章节中复制 `cloud-init.yaml`、`example_key`、`example_key.pub`
    和 `hosts.example` 文件，这样当我们运行 playbook 时，我们就能拥有所有必要的文件来通过 Multipass 启动虚拟机。
- en: Now that we have the basics configured, we can make a start by writing the playbook
    to deploy and configure our initial software stack.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了基础设置，可以开始编写 playbook 来部署和配置我们的初始软件栈。
- en: The stack_install role
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stack_install 角色
- en: 'We are going to start by creating a role called `stack_install` using `ansible-galaxy`
    `role init`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用 `ansible-galaxy` 的 `role init` 创建一个名为 `stack_install` 的角色开始：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install our initial software stack. Once installed, we hand it over
    to a second role, which will then configure the software stack before a third
    role starts the WordPress installation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装我们的初始软件栈。安装完成后，我们将其交给第二个角色，第二个角色将配置软件栈，之后第三个角色开始安装 WordPress。
- en: 'So, what packages do we need? WordPress has the following requirements:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们需要哪些软件包呢？WordPress 有以下要求：
- en: PHP 7.4 or greater
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 7.4 或更高版本
- en: MySQL 5.7 or greater OR MariaDB 10.4 or greater
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 5.7 或更高版本，或 MariaDB 10.4 或更高版本
- en: Nginx or Apache with the `mod_rewrite` module
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 `mod_rewrite` 模块的 Nginx 或 Apache
- en: HTTPS support
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 HTTPS
- en: We know from the previous chapter that the versions of PHP and MariaDB we are
    installing meet this requirement, leaving just NGINX, which we can download and
    install from the principal NGINX repository to get the latest and greatest version.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一章我们知道，安装的 PHP 和 MariaDB 版本满足此要求，只剩下 NGINX，我们可以从主要的 NGINX 仓库下载并安装以获取最新的版本。
- en: Enabling the NGINX repository
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 NGINX 仓库
- en: 'Before we look at the tasks and variables that we will need to enable the mainline
    NGINX repository, let’s start off the `roles/stack_install/tasks/main.yml` file
    with a task that updates the operating system and the cache of available packages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看启用主线 NGINX 仓库所需的任务和变量之前，让我们从 `roles/stack_install/tasks/main.yml` 文件开始，执行一个更新操作系统和可用软件包缓存的任务：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The remainder of the tasks we will be defining enable the repository before
    we finally install the packages.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的任务将会定义启用仓库的操作，最后我们将安装软件包。
- en: Moving onto the `roles/stack_install/default/main.yml` file, we need to set
    some variables containing information on the repository, which we will add alongside
    the default Ubuntu ones.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 `roles/stack_install/default/main.yml` 文件中，我们需要设置一些包含仓库信息的变量，并将它们与默认的
    Ubuntu 仓库一起添加。
- en: 'These variables start with one that contains the URL of the signing key for
    the repository that will be enabled:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变量从一个包含仓库签名密钥 URL 的变量开始，该仓库将被启用：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will then add the following repository URLs:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将添加以下仓库 URL：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may have noticed that we are using the `ansible_distribution_release` fact
    to dynamically run into the URL to put the correct version number of the Ubuntu
    distribution.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们正在使用 `ansible_distribution_release` 事实动态运行 URL，以正确地填入 Ubuntu 发行版的版本号。
- en: 'Now, back to the `roles/stack_install/tasks/main.yml` file and the two tasks
    that call these variables – these will look like the following, starting with
    the addition of the signing key:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到 `roles/stack_install/tasks/main.yml` 文件以及调用这些变量的两个任务——它们看起来如下，首先是添加签名密钥：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we are using `with_items`, so, if you need to, you could define
    more than one URL and add additional signing keys.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用 `with_items`，所以，如果需要，你可以定义多个 URL 并添加额外的签名密钥。
- en: 'This approach is carried forward to the next task, where we are adding more
    than one repository:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法被延续到了下一个任务，在那里我们将添加多个仓库：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The final task in the `roles/stack_install/tasks/main.yml` file is the one
    that installs all of the packages:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack_install/tasks/main.yml` 文件中的最后一个任务是安装所有软件包的任务：'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will notice that rather than defining the packages in a single variable,
    I have split them into three, and we are combining them by using `+` when calling
    the variables.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我没有将所有的软件包定义为一个变量，而是将它们分成了三个，并且在调用变量时通过 `+` 将它们合并。
- en: So, what do these three variables contain, and why don’t we define them as a
    single variable?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这三个变量包含了什么？为什么我们不将它们定义为一个变量？
- en: 'Back to the `roles/stack_install/default/main.yml` file, you can see that `system_packages`
    is defined as the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `roles/stack_install/default/main.yml` 文件，你可以看到 `system_packages` 定义如下：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Following that, the `extra_packages` variable contains the following package
    list:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着，`extra_packages` 变量包含以下软件包列表：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we have the list of packages that make up the bulk of our software
    stack:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们列出了组成我们软件栈主体的软件包：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As we are defining three variables for the packages, it means that we can, if
    required, overwrite them elsewhere in our playbook.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们为软件包定义了三个变量，这意味着如果需要，我们可以在剧本的其他地方覆盖它们。
- en: Let us, for example, assume that we need to install the Amazon Web Services
    command-line tool on the virtual machine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们需要在虚拟机上安装 Amazon Web Services 命令行工具。
- en: This would allow us to push data, such as images, to an Amazon S3 bucket or
    clear a cache on a CloudFront content delivery network endpoint.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们将数据（例如图片）推送到 Amazon S3 存储桶，或清除 CloudFront 内容分发网络的缓存。
- en: 'Rather than overriding a long list of packages from a single variable, we could
    take the `extra_packages` variable, add it to `group_vars/common.yml`, and append
    it to the end of the list of packages so that it will now look like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以不通过单一变量覆盖一长串软件包，而是将`extra_packages`变量添加到`group_vars/common.yml`中，并将其追加到软件包列表的末尾，这样它将变成如下所示：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, this is a lot more efficient than repeating all the packages
    we want to install.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这比重复列出我们要安装的所有软件包要高效得多。
- en: Another advantage of using `+` to combine everything is that we only need to
    call a single `ansible.builtin.apt` task to install everything we need for the
    following role, which we will dive into now.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`+`来合并所有内容的另一个优点是，我们只需要调用一个`ansible.builtin.apt`任务来安装我们在接下来的角色中需要的所有内容，我们现在就来深入了解这个角色。
- en: The stack_config role
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stack_config 角色
- en: 'Now that we have our base software stack installed we need to configure it,
    let’s start by creating the role by running the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装好了基础软件栈，我们需要对其进行配置，首先通过运行以下命令创建角色：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This gives us the basic file structure needed for the `stack_config` role.
    With that in place, we can now look at configuring the role itself – in this role,
    we will need to do the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了`stack_config`角色所需的基本文件结构。有了这些结构后，我们现在可以开始配置角色本身——在这个角色中，我们需要执行以下操作：
- en: Add a system user for our WordPress installation to run under
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的 WordPress 安装添加一个系统用户来运行
- en: Configure NGINX as per the best practices on the WordPress documentation
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 WordPress 文档中的最佳实践来配置 NGINX
- en: Configure PHP-FPM to run as the WordPress user we created earlier
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 PHP-FPM 以作为我们之前创建的 WordPress 用户运行
- en: As we need a user for WordPress to run under, we should make a start there.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要一个用户让 WordPress 运行，因此我们应当从这里开始。
- en: WordPress system user
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress 系统用户
- en: 'The defaults for the WordPress system user, which should be placed in `roles/stackconfig/defaults/main.yml`,
    are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 应放置在`roles/stackconfig/defaults/main.yml`中的 WordPress 系统用户的默认值如下：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We refer to this as the system user, as we will create a user in WordPress itself
    later in the chapter. This user’s details will also be defined in Ansible, so
    we do not want to get the two different users confused.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其称为系统用户，因为我们稍后将在 WordPress 本身内创建一个用户。该用户的详细信息也将在 Ansible 中定义，因此我们不希望将这两个不同的用户搞混。
- en: 'The two tasks that use these variables, found in `roles/stack_config/tasks/main.yml`,
    should look like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些变量的两个任务可以在`roles/stack_config/tasks/main.yml`中找到，它们应该如下所示：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding task ensures that the group is present, and the next task adds
    an operating system-level user, which is added to the group that has just been
    created:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的任务确保该组存在，接下来的任务将添加一个操作系统级别的用户，该用户会被加入到刚刚创建的组中：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, we are not adding a key to the user this time as we don’t want
    to log in to the user account to start manipulating files and other actions. This
    should all be done within WordPress itself or by using Ansible.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们这次没有为用户添加密钥，因为我们不想登录到用户账户去操作文件或执行其他操作。这些都应该在 WordPress 本身内完成，或通过 Ansible
    来执行。
- en: NGINX configuration
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NGINX 配置
- en: 'We are going to be using several template files for our NGINX configuration.
    The first template is called `roles/stack_config/templates/nginx-nginx.conf.j2`,
    and it will replace the main NGINX configuration deployed by the package installation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用多个模板文件来配置我们的 NGINX。第一个模板叫做`roles/stack_config/templates/nginx-nginx.conf.j2`，它将替换通过软件包安装部署的主要
    NGINX 配置：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The file’s content is the same as the file that will be replaced, except that
    we are updating `worker_processes` to use the number of processors detected by
    Ansible when the setup module runs rather than a hardcoded value.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 文件内容与将被替换的文件相同，唯一的不同之处在于我们正在更新`worker_processes`，使其使用在运行 setup 模块时 Ansible 检测到的处理器数量，而不是硬编码的值。
- en: 'The task to deploy the configuration file is as you would expect, and it should
    be placed in `roles/stack_config/tasks/main.yml`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 部署配置文件的任务正如你所预期的那样，它应该放在`roles/stack_config/tasks/main.yml`中：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As you can see, we are notifying the restart `nginx` handler, which is stored
    in the `roles/stack_config/handlers/main.yml` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在通知重启`nginx`处理器，该处理器存储在`roles/stack_config/handlers/main.yml`文件中：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we have the default site template, `roles/stack_config/templates/nginx-confd-default.conf.j2`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有默认的站点模板`roles/stack_config/templates/nginx-confd-default.conf.j2`：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To help identify where the template files will be placed on the target host,
    I am naming them so that the full path is in the filename. In this case, the filename
    is `nginx-confd-default.conf.j2`, and it will be deployed to `/etc/nginx/conf.d/default.conf`;
    the task to do this follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助确定模板文件将放置在目标主机上的位置，我将它们命名为文件名中包含完整路径。在这种情况下，文件名是`nginx-confd-default.conf.j2`，它将被部署到`/etc/nginx/conf.d/default.conf`；执行此操作的任务如下：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following two files we are deploying are going into a folder that doesn’t
    exist. So, we first need to create the destination folder. To do this, we need
    to add the following to `roles/stack_config/tasks/main.yml`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要部署的两个文件将放到一个不存在的文件夹中。所以，我们首先需要创建目标文件夹。为此，我们需要在`roles/stack_config/tasks/main.yml`中添加以下内容：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we are not making any replacements in the `nginx-global-restrictions.conf`
    file, we are using the `ansible.builtin.copy` module rather than `ansible.builtin.template`
    here; the file is stored `in roles/stack_config/files/` and the task that copies
    it is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`nginx-global-restrictions.conf`文件中没有进行任何替换，所以在这里我们使用`ansible.builtin.copy`模块，而不是`ansible.builtin.template`；该文件存储在`roles/stack_config/files/`中，复制它的任务如下：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This file has some sensible defaults in it, such as denying access to files
    that are included as part of the WordPress installation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中有一些合理的默认设置，比如拒绝访问作为WordPress安装一部分的文件：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Another import inclusion is adding a configuration to deny access to `.php`
    files within `/wp-content/` and its sub-folders:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个导入包含的配置是拒绝访问`/wp-content/`及其子文件夹中的`.php`文件：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There are several other configurations in the `nginx-global-restrictions.conf`
    file; see the repository, which accompanies the book, for the complete configuration,
    as there are too many snippets for us to go into here.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-global-restrictions.conf`文件中有其他一些配置；请参阅随书附带的仓库以获取完整配置，因为这里有太多的代码片段，我们无法一一讲解。'
- en: 'The same can be said for the next and final block of the NGINX configuration;
    review the repository for more information on the configuration deployed by the
    following task:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于NGINX配置的下一个和最后一个块，可以说情况是一样的；请查看仓库，了解由以下任务部署的更多配置信息：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When we reviewed the default site template, `roles/stack_config/templates/nginx-confd-default.conf.j2`,
    you may have noticed the use of a few variables we haven’t yet defined; they were
    `php.ip` and `php.port`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看默认站点模板`roles/stack_config/templates/nginx-confd-default.conf.j2`时，你可能已经注意到使用了几个我们尚未定义的变量；它们是`php.ip`和`php.port`。
- en: As you may have already guessed from the variable labeling, these have to do
    with the configuration of PHP, so, let us look at configuring the PHP and PHP-FPM
    part of our deployment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从变量标记中已经猜到的，这些与PHP的配置有关，因此，让我们来看看配置部署中PHP和PHP-FPM的部分。
- en: PHP and PHP-FPM configuration
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PHP和PHP-FPM配置
- en: 'As we saw in the previous section, there are a few variables defined for PHP
    in `roles/stack_config/defaults/main.yml`, and these are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，`roles/stack_config/defaults/main.yml`中为PHP定义了几个变量，它们如下：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We then have some variables that define some information on the paths for the
    various files and service names:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一些变量定义了一些关于各种文件路径和服务名称的信息：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The first configuration of the two tasks we will be running deploys the PHP-FPM
    configuration; this is, what the template, which can be found at `roles/stack_config/templates/php-fpmd-www.conf.j2`,
    looks like:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行的两个任务中的第一个任务部署PHP-FPM配置；这是模板`roles/stack_config/templates/php-fpmd-www.conf.j2`的样子：
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, we have a few replacements in this file. Starting at the top
    between the square brackets, we are defining the PHP-FPM pool name and using the
    content of the `wordpress_system.user` variable for this.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在这个文件中有一些替换。从顶部开始，在方括号之间，我们定义了PHP-FPM池的名称，并使用`wordpress_system.user`变量的内容来进行此操作。
- en: Next, we have the user and group we want our pool to run under; here, we use
    `wordpress_system.user` and `wordpress_system.group`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置了希望我们的池运行的用户和组；在这里，我们使用`wordpress_system.user`和`wordpress_system.group`。
- en: Finally, we are setting the IP address and port we want our PHP-FPM pool to
    listen on by using the `php.ip` and `php.port` variables.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过使用`php.ip`和`php.port`变量来设置我们希望 PHP-FPM 池监听的 IP 地址和端口。
- en: 'The task in `roles/stack_config/tasks/main.yml` to deploy the template looks
    as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack_config/tasks/main.yml`中用于部署模板的任务如下所示：'
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The handler to restart PHP-FPM in `roles/stack_config/handlers/main.yml` is
    very similar to the ones we have already been defining throughout the book:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`roles/stack_config/handlers/main.yml`中，用于重启 PHP-FPM 的处理程序与我们在本书中之前定义的处理程序非常相似：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The next task in `roles/stack_config/tasks/main.yml` uses the `ansible.builtin.lineinfile`
    module:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack_config/tasks/main.yml`中的下一个任务使用了`ansible.builtin.lineinfile`模块：'
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We are taking the `php.ini` file and looping through it by looking for the values
    defined by the `regexp` key. Once we find the value, we replace it with the content
    of the replace key. If there are changes to the file, we are making a backup first,
    just in case.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在读取`php.ini`文件，并通过查找`regexp`键定义的值来循环处理它。一旦找到该值，我们就用`replace`键的内容替换它。如果文件有变化，我们会先备份文件，以防万一。
- en: Also, we are using `backrefs` to ensure that if there is no matching `regex`
    in the file, then it will be left unchanged; if we didn’t use them, the `restart
    php-fpm` handler would be called every time the playbook runs, and we do not want
    PHP-FPM to be restarted if there is no reason for it be.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们使用了`backrefs`来确保如果文件中没有匹配的`regex`，则文件保持不变；如果不使用它们，`restart php-fpm`处理程序将在每次运行剧本时被调用，而我们并不希望
    PHP-FPM 在没有必要的情况下被重启。
- en: Starting NGINX and PHP-FPM
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动 NGINX 和 PHP-FPM
- en: Now that we have NGINX and PHP-FPM installed and configured, we need to start
    the two services rather than wait until the end of the playbook run.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经安装并配置好了 NGINX 和 PHP-FPM，我们需要启动这两个服务，而不是等到剧本运行结束再启动。
- en: 'If we don’t do this now, our upcoming role to install WordPress will fail.
    The first of the two tasks in `roles/stackconfig/tasks/main.yml` looks like the
    following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在不设置密码，我们接下来的安装 WordPress 的角色会失败。`roles/stackconfig/tasks/main.yml`中的两个任务的第一个看起来像这样：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The second task looks pretty much the same:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个任务看起来几乎是一样的：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If you look at the two tasks, they are the same as the two handlers we have
    already defined.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下这两个任务，它们与我们之前定义的两个处理程序是一样的。
- en: However, if you look closer, you will notice that while we are using the `ansible.builtin.service`
    module, we are only setting the `state` setting to `started` rather than `restarted`,
    and we are missing the configuration for `enabled`, which sets the service to
    start on boot.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你仔细看，会发现尽管我们使用了`ansible.builtin.service`模块，我们只将`state`设置为`started`而不是`restarted`，并且我们没有配置`enabled`，这个配置用于设置服务在启动时自启。
- en: Another thing you may have noticed is the use of the `php_service_name` variable;
    to explain why we are using this, you will need to wait until [*Chapter 6*](B21620_06.xhtml#_idTextAnchor291),
    *Targeting* *Multiple Distributions*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的另一件事是使用了`php_service_name`变量；为了说明我们为什么使用它，你需要等到[*第 6 章*](B21620_06.xhtml#_idTextAnchor291)，标题为*针对多种发行版*时再进一步了解。
- en: The final component of our software stack that we need to configure is MariaDB,
    so let us review that before we move on to the WordPress installation and configuration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要配置的软件堆栈的最后一个组件是 MariaDB，因此在继续进行 WordPress 安装和配置之前，让我们先回顾一下它。
- en: MariaDB configuration
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MariaDB 配置
- en: The MariaDB configuration will closely match its configuration in [*Chapter
    4*](B21620_04.xhtml#_idTextAnchor202), *Deploying a LAMP Stack*, minus a few steps,
    so I will not go into too much detail here.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB 的配置将与[*第 4 章*](B21620_04.xhtml#_idTextAnchor202)中的配置非常相似，标题为*部署 LAMP
    堆栈*，只不过少了几个步骤，因此我在这里不再详细讲解。
- en: 'The default variables for this part of the role in `roles/stack_config/defaults/main.yml`
    are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分角色的默认变量在`roles/stack_config/defaults/main.yml`中的定义如下：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As you can see, we are now using a nested variable and have removed the host
    wildcard, which we had previously defined as `%` in [*Chapter 4*](B21620_04.xhtml#_idTextAnchor202),
    *Deploying a* *LAMP Stack*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们现在使用了一个嵌套变量，并且去除了之前在[*第 4 章*](B21620_04.xhtml#_idTextAnchor202)中定义的主机通配符`%`，该章标题为*部署
    LAMP 堆栈*。
- en: 'Our first task is to start MariaDB so that we can interact with it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个任务是启动 MariaDB，以便我们能够与之交互：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Check for the presence of the `~/.``my.cnf` file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`~/.my.cnf`文件是否存在：
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Set a password:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 设置密码：
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the `~/``my.cnf` file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `~/``my.cnf` 文件：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, remove the anonymous user:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，删除匿名用户：
- en: '[PRE39]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, we have come to our final task, which is to remove the test database:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经来到了最后一个任务，即删除测试数据库：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, with everything we need to install and run WordPress configured, we can
    start on WordPress itself.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有安装和运行 WordPress 所需的配置已经完成，我们可以开始安装 WordPress 了。
- en: The wordpress role
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress 角色
- en: Now that we have completed the roles that prepare our target virtual machine,
    we can proceed with the actual WordPress installation; this will be split into
    a few different parts, starting with downloading `wp-cli` and setting up the database.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了准备目标虚拟机的角色，可以开始实际的 WordPress 安装了；这将分为几个不同的部分，首先是下载 `wp-cli` 并设置数据库。
- en: 'Before we progress, we should create the role:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要创建角色：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now that we have the empty role files, we can start populating the tasks and
    variables in the files.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了空的角色文件，可以开始在文件中填充任务和变量。
- en: Some facts
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些事实
- en: 'Before installing WordPress, we must set some facts using the `ansible.builtin.set_fact`
    module. The following task, the first in the `roles/wordpress/tasks/main.yml`
    file, sets two variables using the information gathered when Ansible first connects
    to the hosts:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 WordPress 之前，我们必须使用 `ansible.builtin.set_fact` 模块设置一些事实。接下来的任务是 `roles/wordpress/tasks/main.yml`
    文件中的第一个任务，它使用 Ansible 初次连接主机时收集的信息设置两个变量：
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We will use these two variables when we install WordPress using the WordPress
    CLI, which we will be downloading and installing next.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这两个变量，当我们使用 WordPress CLI 安装 WordPress 时，接下来会下载并安装该工具。
- en: WordPress CLI installation
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress CLI 安装
- en: 'WordPress CLI (`wp-cli`) is a command-line tool used to administer your WordPress
    installation; we will be using it throughout the role, so, the first thing our
    role should do is download it. To do this, we need to download the following variables
    in `roles/wordpress/defaults/main.yml`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress CLI（`wp-cli`）是一个用于管理 WordPress 安装的命令行工具；我们将在整个角色中使用它，因此我们角色的第一件事应该是下载它。为此，我们需要在
    `roles/wordpress/defaults/main.yml` 中下载以下变量：
- en: '[PRE43]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Moving back to the `roles/wordpress/tasks/main.yml` file, we use these two
    variables in the following task, which downloads `wp-cli` and places it on our
    host:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 `roles/wordpress/tasks/main.yml` 文件，在接下来的任务中，我们使用这两个变量，它们会下载 `wp-cli` 并将其放置在我们的主机上：
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, we have `wp-cli` on our host with the correct execute permissions.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的主机上已经安装了 `wp-cli` 并且拥有正确的执行权限。
- en: 'Before we start to use `wp-cli`, we have one more bit of preparation work to
    do: create the database and user, which we will use with our WordPress installation.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 `wp-cli` 之前，我们还需要做一件准备工作：创建数据库和用户，这些将在我们安装 WordPress 时使用。
- en: Creating the WordPress database
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 WordPress 数据库
- en: 'The next part of the role creates the database our WordPress installation will
    use; as per the other tasks in this chapter, it uses a nested variable, which
    can be found in `roles/wordpress/defaults/main.yml`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 角色的下一部分创建我们 WordPress 安装将使用的数据库；和本章中的其他任务一样，它使用了一个嵌套变量，该变量可以在 `roles/wordpress/defaults/main.yml`
    中找到：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The tasks in `roles/wordpress/tasks/main.yml` to create the database are as
    follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `roles/wordpress/tasks/main.yml` 中创建数据库的任务如下：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now that the database has been created, we can add the user:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据库已经创建完毕，我们可以添加用户：
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Notice how we are using the `mariadb.hosts` variable from the previous role.
    Now that we have the database created, we can start downloading and installing
    WordPress.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用来自上一个角色的 `mariadb.hosts` 变量。现在数据库已经创建，我们可以开始下载和安装 WordPress。
- en: Downloading, configuring, and installing WordPress
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载、配置并安装 WordPress
- en: 'Now that we have everything in place to install WordPress, we can make a start,
    first by setting some default variables in `roles/wordpress/defaults/main.yml`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为安装 WordPress 做好了一切准备，可以开始了，首先在 `roles/wordpress/defaults/main.yml` 中设置一些默认变量：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now that we have our variables, we can start our download if we need to. To
    find out whether we need to download WordPress, we should check for the presence
    of an existing WordPress installation. The task to do this in `roles/wordpress/tasks/main.yml`
    looks like the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了变量，如果需要的话可以开始下载。为了判断是否需要下载 WordPress，我们应该检查是否已有 WordPress 安装。执行此操作的任务位于
    `roles/wordpress/tasks/main.yml` 文件中，内容如下：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, the first task uses the `ansible.builtin.stat` module to check
    for an `index.php` file in our system user’s home directory, which in our case
    is also the webroot.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第一个任务使用 `ansible.builtin.stat` 模块来检查系统用户主目录中是否存在 `index.php` 文件，在我们的情况下，这也是
    Web 根目录。
- en: 'If this is the first time that the playbook is being run against the host,
    then we will need to download WordPress:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是首次对主机运行此 playbook，那么我们需要下载 WordPress：
- en: '[PRE50]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This task uses the `ansible.builtin.shell` module to issue the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务使用 `ansible.builtin.shell` 模块发出以下命令：
- en: '[PRE51]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'There are a few arguments we should work through before moving on to the next
    task, which are the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个任务之前，我们需要处理一些参数，具体如下：
- en: '`args` and `chdir`: You can pass additional arguments to the `ansible.builtin.shell`
    module using `args`. Here, we are passing `chdir`, which instructs Ansible to
    change to the directory we specify before running the shell command we provide.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` 和 `chdir`：你可以通过 `args` 向 `ansible.builtin.shell` 模块传递额外的参数。在这里，我们传递了
    `chdir`，它指示 Ansible 在运行我们提供的 shell 命令之前切换到我们指定的目录。'
- en: '`become_user`: This is the user we want to run the command as. The command
    will run as the root user if we do not use this flag.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`become_user`：这是我们希望以其身份运行命令的用户。如果不使用此标志，命令将以 root 用户身份运行。'
- en: '`become`: This instructs Ansible to execute the task as the defined user.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`become`：该指令告诉 Ansible 以定义的用户身份执行任务。'
- en: 'The next task in the playbook sets the correct permissions on the user’s home
    directory:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook 中的下一个任务会设置用户主目录的正确权限：
- en: '[PRE52]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now that WordPress is downloaded, we can start the installation. First, we
    need to check whether this has already been done:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 WordPress 已经下载完成，我们可以开始安装。首先，我们需要检查是否已经完成安装：
- en: '[PRE53]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If there is no `wp-config.php` file, then the following task will be executed:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 `wp-config.php` 文件，则将执行以下任务：
- en: '[PRE54]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This is like you logging in and running the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像你登录并运行以下命令：
- en: '[PRE55]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As you can see, we are using Ansible to execute commands as if we had a local
    terminal open.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用 Ansible 执行命令，就好像我们打开了一个本地终端。
- en: Now that we have our `wp-config.php` file created, with the database credentials
    in place, we can install WordPress.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了 `wp-config.php` 文件，并设置了数据库凭证，我们可以安装 WordPress。
- en: 'First, we need to check whether WordPress has already been installed:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要检查 WordPress 是否已经安装：
- en: '[PRE56]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As you can see from the presence of the `ignore_errors` option, if WordPress
    is not installed, this command will give us an error. We are then using this to
    our advantage when registering the results, as you can see from the following
    task:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，存在 `ignore_errors` 选项，如果 WordPress 未安装，此命令将给出错误。我们正是利用这一点来注册结果，正如接下来的任务所示：
- en: '[PRE57]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This task is only executed if the previous task returns an error, which is what
    happens if WordPress is not installed.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当上一个任务返回错误时，此任务才会执行，如果 WordPress 未安装，便会发生这种情况。
- en: Now that our primary WordPress site is installed, we can continue installing
    the plugins.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的主 WordPress 网站已经安装完成，我们可以继续安装插件。
- en: WordPress plugins installation
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress 插件安装
- en: The final part of our WordPress installation is to download and install the
    plugins we defined in the `wordpress.plugins` variable.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 WordPress 安装的最后部分是下载并安装我们在 `wordpress.plugins` 变量中定义的插件。
- en: 'As per previous tasks, we will build a little logic into the tasks. First,
    we run the following task to see whether all the plugins are already installed:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的任务，我们会在任务中嵌入一点逻辑。首先，我们运行以下任务来查看所有插件是否已安装：
- en: '[PRE58]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: If the plugins are not installed, this task should fail, so we have `ignore_errors`
    in there.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件没有安装，这个任务应该失败，因此我们在其中加入了 `ignore_errors`。
- en: As you can see, we are registering the results of the entire task, because,
    if you remember, we are installing several plugins, such as `wp_plugin_installed`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在注册整个任务的结果，因为，如果你记得的话，我们正在安装多个插件，比如 `wp_plugin_installed`。
- en: 'The next two tasks take the results of `wp_plugin_installed` and use the `ansible.builtin.set_fact`
    module to set a fact depending on the results:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个任务会获取 `wp_plugin_installed` 的结果，并使用 `ansible.builtin.set_fact` 模块根据结果设置一个事实：
- en: '[PRE59]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The preceding task is set if we don’t need to install any of the plugins, and
    the following one is used if we need to install at least one of the plugins:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的任务是在我们不需要安装任何插件的情况下设置的，下面的任务则是在我们需要安装至少一个插件时使用的：
- en: '[PRE60]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'As you can see, we are setting `wp_plugin_installed_skip` to be `true` or `false`:
    if the fact is set to `false`, then the next task will loop through installing
    the plugins:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将 `wp_plugin_installed_skip` 设置为 `true` 或 `false`：如果该值设置为 `false`，则下一任务将循环安装插件：
- en: '[PRE61]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Now that we have the plugins’ tasks defined, we can have a go at running our
    playbook.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了插件任务，可以尝试运行我们的 playbook。
- en: Running the WordPress playbook
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 WordPress playbook
- en: 'To run the playbook and install WordPress, we need to finish walking through
    the files; `site.yml` should look as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 playbook 并安装 WordPress，我们需要完成对文件的查看；`site.yml` 应该如下所示：
- en: '[PRE62]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: With that out of the way, we can run the playbook.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 事情处理完毕后，我们可以运行 playbook。
- en: Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `Chapter05` folder in the GitHub repository accompanying this title contains
    the example `hosts` file and keys for launching a local virtual machine using
    Multipass. If you are following along, please refer to the instructions in [*Chapter
    1*](B21620_01.xhtml#_idTextAnchor017), *Installing and Running Ansible*; these
    detail how to launch the virtual machine and prepare your `hosts` file.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本书附带的 GitHub 仓库中的 `Chapter05` 文件夹包含了示例 `hosts` 文件以及使用 Multipass 启动本地虚拟机的密钥。如果你在跟随操作，请参考
    [*第 1 章*](B21620_01.xhtml#_idTextAnchor017)，*安装和运行 Ansible*；这部分详细介绍了如何启动虚拟机并准备你的
    `hosts` 文件。
- en: 'As we know, to run the playbook, we need to issue the following command once
    our Multipass virtual machine is up and running:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，要运行 playbook，我们需要在 Multipass 虚拟机启动并运行后执行以下命令：
- en: '[PRE63]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Let’s cover some of the highlights rather than go through the whole output
    here, starting with adding the NGINX repository:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从添加 NGINX 仓库开始，重点介绍一些亮点，而不是从头到尾浏览整个输出：
- en: '[PRE64]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: As you can see, the name of the Ubuntu release is added – in the example, this
    is `jammy`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Ubuntu 发行版的名称已被添加—在这个示例中是 `jammy`。
- en: 'When making changes to the `php.ini` file, only two of the three changes we
    defined need to be applied, as `expose_php` is already set to `Off`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改 `php.ini` 文件时，我们定义的三个更改中只有两个需要应用，因为 `expose_php` 已经设置为 `Off`：
- en: '[PRE65]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Remember that we set the `ignore_errors` flag for some of the checks when it
    came to installing and configuring WordPress; this is why:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当安装和配置 WordPress 时，我们为某些检查设置了 `ignore_errors` 标志；这就是原因：
- en: '[PRE66]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'As you can see, an error was ignored, and the task to install WordPress was
    triggered. The same thing happened for the plugins:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，错误被忽略了，安装 WordPress 的任务被触发了。插件也发生了同样的情况：
- en: '[PRE67]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'On first execution, the recap looked something like the following:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次执行时，回顾大致如下：
- en: '[PRE68]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Rerunning the playbook immediately after shows how the logic we have added
    throughout the task execution kicks in, which results in a lot of the later tasks
    being skipped entirely:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务执行过程中，重新运行 playbook 立即展示了我们所添加的逻辑如何生效，这导致许多后续任务被完全跳过：
- en: '[PRE69]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Note that, this time, the check for the plugins doesn’t result in an error:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这次对插件的检查没有导致错误：
- en: '[PRE70]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Now that WordPress is installed, we should be able to access it in a browser
    by going to the host you have defined in your `hosts` file, in my case, `http://192.168.64.26.nip.io/`;
    yours will be different.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 WordPress 已经安装，我们应该能够通过访问在 `hosts` 文件中定义的主机，在浏览器中打开它，在我的案例中是 `http://192.168.64.26.nip.io/`；你的地址会有所不同。
- en: 'You will see the default WordPress site:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到默认的 WordPress 网站：
- en: '![Figure 5.1 – Our freshly installed WordPress website](img/B21620_05_1.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 我们刚安装的 WordPress 网站](img/B21620_05_1.jpg)'
- en: Figure 5.1 – Our freshly installed WordPress website
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 我们刚安装的 WordPress 网站
- en: As you can see, the site’s description in the top left reads **WordPress installed
    by Ansible on Ubuntu 22.04**, which is what we set when installing WordPress.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，网站左上角的描述写着 **由 Ansible 在 Ubuntu 22.04 上安装的 WordPress**，这就是我们在安装 WordPress
    时设置的内容。
- en: 'Also, if you go to the WordPress admin area by appending `/wp-admin/` to the
    end of your URL, for example, `http://192.168.64.26.nip.io/wp-admin/`, you should
    be able to log in to WordPress using the username and password we defined:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你通过在 URL 末尾添加 `/wp-admin/` 访问 WordPress 管理区域，例如 `http://192.168.64.26.nip.io/wp-admin/`，你应该能够使用我们定义的用户名和密码登录
    WordPress：
- en: '![Figure 5.2 – The WordPress admin login page](img/B21620_05_2.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – WordPress 管理员登录页面](img/B21620_05_2.jpg)'
- en: Figure 5.2 – The WordPress admin login page
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – WordPress 管理员登录页面
- en: 'Once logged in, you should see a few messages about the plugins we installed
    during the playbook run needing to be configured:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你应该会看到一些关于我们在运行 playbook 时安装的插件需要配置的消息：
- en: '![Figure 5.3 – Prompts when first logging into WordPress](img/B21620_05_3.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 初次登录 WordPress 时的提示](img/B21620_05_3.jpg)'
- en: Figure 5.3 – Prompts when first logging into WordPress
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 初次登录 WordPress 时的提示
- en: Feel free to play with the WordPress installation and even, if you are so inclined,
    try and break it – if you needed to, you could delete and relaunch the Multipass
    virtual machine and quickly rerun the playbook to reinstall WordPress.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 随意玩转 WordPress 安装，甚至如果你有兴趣，可以尝试破坏它——如果需要，你可以删除并重新启动 Multipass 虚拟机，然后快速重新运行 playbook
    来重新安装 WordPress。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have reused many of the same principles we covered in the
    previous chapter and moved on to deploying a complete application. What is good
    about this is that the process is both repeatable and just a single command.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重复使用了前一章中介绍的许多相同的原则，并继续部署一个完整的应用程序。好的一点是，这个过程既可以重复执行，也只需一个命令。
- en: So far, we have been targeting an Ubuntu virtual machine. If we ran our playbook
    against a Red-Hat-based virtual machine, the playbook would give an error as commands
    and paths are different.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在针对 Ubuntu 虚拟机。如果我们将 playbook 运行在一个基于 Red-Hat 的虚拟机上，playbook 会报错，因为命令和路径不同。
- en: The next chapter will target multiple operating systems using the same playbook.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将使用相同的 playbook 来支持多个操作系统。
- en: Further reading
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find out more information on the technologies we have covered in this
    chapter at the following links:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接了解我们在本章中介绍的技术的更多信息：
- en: '**Colorlib WordPress** **statistics**: [https://colorlib.com/wp/wordpress-statistics](https://colorlib.com/wp/wordpress-statistics)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Colorlib WordPress** **statistics**: [https://colorlib.com/wp/wordpress-statistics](https://colorlib.com/wp/wordpress-statistics)'
- en: '**NGINX**: [http://nginx.org/](http://nginx.org/)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NGINX**: [http://nginx.org/](http://nginx.org/)'
- en: '**WordPress**: [https://wordpress.org/](https://wordpress.org/)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WordPress**: [https://wordpress.org/](https://wordpress.org/)'
- en: '**WP-CLI**: [http://wp-cli.org/](http://wp-cli.org/)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WP-CLI**: [http://wp-cli.org/](http://wp-cli.org/)'
- en: '**WordPress on** **NGINX**: [https://wordpress.org/documentation/article/nginx/](https://wordpress.org/documentation/article/nginx/)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WordPress on** **NGINX**: [https://wordpress.org/documentation/article/nginx/](https://wordpress.org/documentation/article/nginx/)'
- en: 'The project pages for the plugins we installed can be found at the following
    links:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装的插件的项目页面可以通过以下链接找到：
- en: '**Jetpack**: [https://en-gb.wordpress.org/plugins/jetpack/](https://en-gb.wordpress.org/plugins/jetpack/)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jetpack**: [https://en-gb.wordpress.org/plugins/jetpack/](https://en-gb.wordpress.org/plugins/jetpack/)'
- en: '**WP Super** **Cache**: [https://en-gb.wordpress.org/plugins/wp-super-cache/](https://en-gb.wordpress.org/plugins/wp-super-cache/)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WP Super** **Cache**: [https://en-gb.wordpress.org/plugins/wp-super-cache/](https://en-gb.wordpress.org/plugins/wp-super-cache/)'
- en: '**Yoast** **SEO**: [https://en-gb.wordpress.org/plugins/wordpress-seo/](https://en-gb.wordpress.org/plugins/wordpress-seo/)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Yoast** **SEO**: [https://en-gb.wordpress.org/plugins/wordpress-seo/](https://en-gb.wordpress.org/plugins/wordpress-seo/)'
- en: '**Wordfence**: [https://en-gb.wordpress.org/plugins/wordfence/](https://en-gb.wordpress.org/plugins/wordfence/)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wordfence**: [https://en-gb.wordpress.org/plugins/wordfence/](https://en-gb.wordpress.org/plugins/wordfence/)'
- en: '**NGINX** **Helper**: [https://wordpress.org/plugins/nginx-helper/](https://wordpress.org/plugins/nginx-helper/)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NGINX** **Helper**: [https://wordpress.org/plugins/nginx-helper/](https://wordpress.org/plugins/nginx-helper/)'
