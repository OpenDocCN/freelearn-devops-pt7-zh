- en: Chapter 8. Customizing the UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。自定义UI
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖：
- en: Changing the basic look and feel
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改基本的外观和感觉
- en: Adding new web sections in the UI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在UI中添加新的网页部分
- en: Adding new web items in the UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在UI中添加新的网页项
- en: Adding conditions for web fragments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网页片段添加条件
- en: Creating new velocity context for web fragments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网页片段创建新的Velocity上下文
- en: Adding a new drop-down on the top navigation bar
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在顶部导航栏中添加新的下拉菜单
- en: Dynamic creation of web items
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态创建网页项
- en: Adding new tabs in the **View** **Issue** screen
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**查看** **问题**屏幕中添加新的标签页
- en: Adding new tabs in the **Browse** **Project** screen
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**浏览** **项目**屏幕中添加新的标签页
- en: Creating the **Project Tab Panel** using fragments
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用片段创建**项目标签面板**
- en: Adding new tabs in the **Browse** **Version** screen
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**浏览** **版本**屏幕中添加新的标签页
- en: Adding new tabs in the **Browse** **Component** screen
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**浏览** **组件**屏幕中添加新的标签页
- en: Extending a webwork action to add UI elements
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展webwork操作以添加UI元素
- en: Displaying dynamic notifications/warnings on issues
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在问题上显示动态通知/警告
- en: Re-ordering issue operations in the **View** **Issue** page
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**查看** **问题**页面中重新排序问题操作
- en: Re-ordering fields in the **View** **Issue** page
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**查看** **问题**页面中重新排序字段
- en: Introduction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the good things about JIRA is that it has a simple but powerful user
    interface. A lot has changed between 3.13.x and 4.1.x in terms of the user interface,
    and it still continues to be one that keeps the users happy and plugin developers
    interested.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA的一个优点是它拥有一个简单但强大的用户界面。从3.13.x到4.1.x，用户界面发生了很大的变化，且它仍然是一个能让用户满意、插件开发者感兴趣的界面。
- en: While the existing JIRA interface works for many people, there are cases where
    we need to modify bits and pieces of it, add new UI elements, remove some, and
    so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现有的JIRA界面适合许多人使用，但也有一些情况需要我们修改界面的一部分，添加新的UI元素、删除一些元素等等。
- en: Normally, when we think of modifying a web application's user interface, the
    first thought that comes to our mind is to go and modify the JSPs, VMs, and many
    others involved. While it is true, in some cases, for JIRA as well, a lot of the
    user-interface changes can be introduced without even touching the JIRA code.
    JIRA helps us to do that with the help of a number of UI-related plugin modules.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们想到修改一个Web应用程序的用户界面时，首先想到的就是去修改JSP、VM以及其他相关文件。虽然在某些情况下，JIRA确实需要这么做，但许多UI的更改可以在不接触JIRA代码的情况下进行。JIRA通过多个与UI相关的插件模块帮助我们实现这一点。
- en: In this chapter, we will be looking at various recipes for enhancing the JIRA
    UI with the various plugin modules available, and also, in some cases, by modifying
    the JSPs or other files involved.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何利用各种可用的插件模块来增强JIRA UI的不同方法，并在某些情况下，通过修改JSP或其他相关文件来实现。
- en: Note that the look and feel can be changed to a big extent only by modifying
    the CSS files and other templates involved. But here we are talking about adding
    new web fragments, such as new sections and links, in the various parts of the
    UI without actually modifying the core JIRA files or with little modification
    of them. If we modify the JIRA files, it should be noted that maintaining the
    files over various JIRA versions, enabling or disabling of the changes, and so
    on, would be very difficult and worth considering!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，外观和感觉只能通过修改CSS文件和其他相关模板来大幅度改变。但是这里我们讨论的是在不实际修改核心JIRA文件或仅对其进行少量修改的情况下，在UI的各个部分添加新的网页片段，例如新的部分和链接。如果我们修改JIRA文件，需要注意的是，在不同JIRA版本之间维护这些文件、启用或禁用这些更改等，将会非常困难，值得考虑！
- en: Changing the basic look and feel
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改基本的外观和感觉
- en: As mentioned earlier, any big changes to the look and feel of JIRA can be achieved
    only by modifying the CSS files, JSPs, templates, and other tools involved. But
    JIRA lets its administrators make slightly simpler changes like changing the logo,
    coloring scheme, and so on, with some simple configurations. In this recipe, we
    will see some examples on how easy it is to make those changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，JIRA的外观和感觉的大幅变化只能通过修改CSS文件、JSP、模板和其他相关工具来实现。但是，JIRA允许管理员进行一些简单的更改，例如更改Logo、配色方案等，这些更改可以通过一些简单的配置来实现。在本例中，我们将看到如何轻松进行这些更改的一些示例。
- en: 'There are mainly four things that can be configured to change JIRA''s appearance:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 主要有四个方面可以配置来改变JIRA的外观：
- en: '**Logo**: Understandably, this is one thing everyone wants to change.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Logo**：可以理解的是，这是每个人都希望更改的内容。'
- en: '**Colors**: JIRA has a nice theme of colors revolving around a theme of blue.
    But we can easily change these colors to suit our taste or rather the company''s
    taste!'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：JIRA 拥有围绕蓝色主题的精美配色方案。但我们可以轻松地更改这些颜色以符合我们的口味，或者说是公司的口味！'
- en: '**Gadget colors**: For each gadget in JIRA, we can set a different color chosen
    from a predefined set of colors. We can easily change the predefined list of colors
    through simple configuration.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小工具颜色**：对于 JIRA 中的每个小工具，我们可以从预定义的颜色集中选择不同的颜色。我们可以通过简单的配置轻松更改预定义的颜色列表。'
- en: '**Date and Time formats**: The Date and Time formats in JIRA could be modified
    easily to suit our needs, provided it is a valid format supported by Java''s `SimpleDateFormat`
    ([http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html](http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html)).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期和时间格式**：JIRA 中的日期和时间格式可以轻松修改以满足我们的需求，前提是它是 Java 的 `SimpleDateFormat` 支持的有效格式
    ([http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html](http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html))。'
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following are the steps to make changes to the basic JIRA look and feel.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更改基本 JIRA 外观和感觉的步骤。
- en: Log in to JIRA as an administrator.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份登录 JIRA。
- en: Navigate to **Administration** | **Global** **Settings** | **Look** **and**
    **Feel**.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **管理** | **全局** **设置** | **外观** **和** **感觉**。
- en: Click on **Edit** **Configuration**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑** **配置**。
- en: 'Make the changes as appropriate:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要进行相应的更改：
- en: '**Logo**: Bundle your new logo as part of the JIRA WAR or drop it under the
    JIRA installation under the `images` folder or another valid directory. Refer
    to the new logo''s URL as a relative path to your new logo within the JIRA installation
    directory.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Logo**：将您的新 logo 与 JIRA WAR 一起打包，或者将其放在 JIRA 安装目录下的 `images` 文件夹或其他有效目录中。将新
    logo 的 URL 作为相对路径引用到 JIRA 安装目录中的新 logo。'
- en: For example, `/images/logo/mynewlogo.png` will refer to the `mynewlogo.png`
    image under the `images/logo` folder. Enter the new logo width or height as suitable.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，`/images/logo/mynewlogo.png` 将指向 `images/logo` 文件夹下的 `mynewlogo.png` 图片。根据需要输入新的
    logo 宽度或高度。
- en: '**Colors**: Specify the hexadecimal notations (HEX values) of the interested
    colors if the color scheme needs to be changed.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**颜色**：如果需要更改颜色方案，请指定感兴趣颜色的十六进制表示法（HEX 值）。'
- en: '**Gadget** **colors**: Here also, specify the hexadecimal notations (HEX values)
    of the interested colors so that gadget users can pick from the new set of colors.'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**小工具** **颜色**：在这里，同样指定感兴趣颜色的十六进制表示法（HEX 值），以便小工具用户可以从新的颜色集中选择。'
- en: '**Date** **and Time** **formats**: Enter the new Date and Time formats, provided
    it is a valid format supported by Java''s `SimpleDateFormat` ([http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html](http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html)).'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日期** **和时间** **格式**：输入新的日期和时间格式，前提是它是 Java 的 `SimpleDateFormat` 支持的有效格式 ([http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html](http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html))。'
- en: Click on **Update**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **更新**。
- en: Repeat the cycle until the desired result is achieved. We can always get back
    to the defaults by clicking on **Reset** **Defaults** while editing the configurations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重复该过程，直到达到预期的结果。我们始终可以通过点击 **重置** **默认值** 来恢复到默认设置，编辑配置时使用。
- en: 'With some simple changes, the JIRA UI can look a lot different from how it
    normally looks. The following screenshot is a small example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些简单的更改，JIRA UI 看起来可以与平时大不相同。以下截图就是一个小示例：
- en: '![How to do it...](img/1803-08-01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-08-01.jpg)'
- en: 'In this case, the **View** **issue** page will look like the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**查看** **问题** 页面将如下图所示：
- en: '![How to do it...](img/1803-08-02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-08-02.jpg)'
- en: This is a small, yet powerful change!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小而强大的改变！
- en: Adding new web sections in the UI
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 UI 中添加新的网页部分。
- en: A web *fragment* is a link or a section of links at a particular location of
    the JIRA web interface. It can be a menu in JIRA's top navigation bar, a new set
    of issue operations, or a new section in the **Admin** **UI** section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 网页 *片段* 是 JIRA 网页界面中特定位置的链接或链接部分。它可以是 JIRA 顶部导航栏中的一个菜单、一组新的问题操作，或者 **管理员** **UI**
    部分中的一个新区域。
- en: There are two types of plugin modules to add new web fragments in JIRA, namely,
    the **Web** **Section** plugin module and the **Web** **Item** plugin module.
    A **Web** **Section** is a collection of links that is displayed together at a
    particular location of the JIRA user interface. It maybe a group of buttons on
    the issue operations bar or a set of links separated by lines.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JIRA 中添加新的 web fragment 有两种类型的插件模块，即 **Web** **Section** 插件模块和 **Web** **Item**
    插件模块。**Web** **Section** 是一组链接，这些链接会一起显示在 JIRA 用户界面的某个特定位置。它可能是问题操作栏上的一组按钮，或者是由分隔线分开的链接组。
- en: In this recipe, we will see how to add a new web section to JIRA.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将看到如何将一个新的 web section 添加到 JIRA 中。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'The following are the steps to add a new web section into JIRA:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将新的 web section 添加到 JIRA 的步骤：
- en: Identify the *location* where the new sections should be added.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定*位置*，即新 sections 应该添加的地方。
- en: JIRA has a lot of identified locations in its user interface and it lets us
    add new web sections in any of these locations. A complete list of the available
    locations can be found at [http://confluence.atlassian.com/display/JIRA/Web+Fragments](http://confluence.atlassian.com/display/JIRA/Web+Fragments).
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: JIRA 在其用户界面中有许多已知的位置，并允许我们在这些位置添加新的 web sections。所有可用位置的完整列表可以在 [http://confluence.atlassian.com/display/JIRA/Web+Fragments](http://confluence.atlassian.com/display/JIRA/Web+Fragments)
    查找。
- en: Add the new `web-section` module into the `atlassian-plugin.xml`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 `web-section` 模块添加到 `atlassian-plugin.xml` 中。
- en: '[PRE0]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As with all other plugin modules, it has unique module `key`. Here, the two
    other important attributes of the `web-section` element are `location` and `weight`.
    `location` defines the location in the UI where the section should appear and
    `weight` defines the order in which it should appear.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与所有其他插件模块一样，它有一个唯一的模块 `key`。这里，`web-section` 元素的另外两个重要属性是 `location` 和 `weight`。`location`
    定义了 section 应该出现在 UI 中的位置，而 `weight` 定义了它应该出现的顺序。
- en: 'In the above example, location is `system.admin`, which will create a new web
    section under the administration screen, just like the existing sections: **Project**,
    **Global** **Settings**, and so on.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的示例中，location 是 `system.admin`，这将在管理屏幕下创建一个新的 web section，就像现有的部分：**Project**、**Global**
    **Settings** 等一样。
- en: The `web-section` module also has a set of child elements. The `condition` or
    `conditions` element can be used to define conditions, one or more, details of
    which we will see in the following recipes. The `context-provider` element can
    be used to add a new context provider which will then define the velocity context
    for the web section. `label` is what will be displayed to the user. `param` is
    another element that can be used to define key/value parameters and is handy if
    we want to use additional custom values from the UI. The `resource` element can
    be used to include resource files like JavaScript or CSS files and the `tooltip`
    element will provide a tooltip for the section. `label` is the only mandatory
    element.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`web-section` 模块也有一组子元素。`condition` 或 `conditions` 元素可以用于定义一个或多个条件，详细信息将在以下示例中展示。`context-provider`
    元素可以用来添加一个新的上下文提供者，从而定义 web section 的 velocity 上下文。`label` 是将显示给用户的内容。`param`
    是另一个元素，用于定义键值参数，若我们希望从 UI 中使用额外的自定义值，它会非常有用。`resource` 元素可用于包含如 JavaScript 或 CSS
    文件等资源文件，`tooltip` 元素则为该部分提供一个工具提示。`label` 是唯一的必需元素。'
- en: 'Elements such as `label` and `tooltip` can have optional key value parameters,
    as shown in the following code:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元素如 `label` 和 `tooltip` 可以拥有可选的键值参数，如以下代码所示：
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see in the example, label takes a `key/value` parameters where the
    value is dynamically populated from a velocity variable. The `param` will be passed
    to the text as `{0}` and will substitute that position in the label. Here, the
    parameters allow one to insert values into the `label` using Java's `MessageFormat`
    syntax, the details of which can be found at `http://download.oracle.com/javase/7/docs/api/java/text/MessageFormat.html`.Parameter
    names must start with `param` and will be mapped in alphabetical order to the
    substitutions in the format string, that is, `param0` is `{0}`, `param1` is `{1}`,
    `param2` is `{2`}, so on and so forth.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你在示例中看到的，`label` 接受一个 `key/value` 参数，其中值是动态从 velocity 变量中填充的。`param` 将作为 `{0}`
    被传递到文本中，并在标签中替代该位置。这里，参数允许使用 Java 的 `MessageFormat` 语法将值插入到 `label` 中，相关详情可以在
    `http://download.oracle.com/javase/7/docs/api/java/text/MessageFormat.html` 查找。参数名必须以
    `param` 开头，并按字母顺序映射到格式字符串中的替代位置，即 `param0` 对应 `{0}`，`param1` 对应 `{1}`，`param2`
    对应 `{2}`，以此类推。
- en: Deploy the plugin.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署插件。
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Once the plugin is deployed, we can see that a new section is created in the
    Admin screen of JIRA, as shown in the following screenshot. The web item is explained
    in detail in the next recipe.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署完成后，我们可以看到在JIRA的管理屏幕中创建了一个新部分，如下图所示。Web项目将在下一个实例中详细解释。
- en: '![How it works...](img/1803-08-03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-03.jpg)'
- en: We can add the section at many different places just by changing the `location`
    attribute. If we change the location alone to `opsbar-operations`, the new section
    will appear on the **View** **issue** page, as shown in the next screenshot.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改`location`属性在许多不同的位置添加部分。如果我们仅将位置更改为`opsbar-operations`，新的部分将出现在**查看**
    **问题**页面，如下图所示。
- en: The web item's section attribute must be changed to match the new location as
    well, that is, `opsbar-operations/jtricks-admin-section`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Web项目的部分属性也必须更改，以匹配新的位置，即`opsbar-operations/jtricks-admin-section`。
- en: '![How it works...](img/1803-08-04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-04.jpg)'
- en: Note that the web section label may not always be visible because in some cases
    the section is used to just group the links. For example, in the case of issue
    operations, the section is just used to group the links together as shown before.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Web部分标签可能并不总是可见，因为在某些情况下，部分只是用来将链接进行分组。例如，在问题操作的情况下，部分仅用于将链接分组，如前所示。
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Adding* *new* *web* *items* *in* *the* *UI*'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在* *UI中* *添加* *新的* *Web* *项目*'
- en: Adding new web items in the UI
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在UI中添加新的Web项目
- en: A *web* *item* is a new link that can be added at various places in the JIRA
    UI. A link will typically go under a *web* *section*. A link can simply point
    to a URL or can be used to invoke an action. In this recipe, we will see how to
    add a new web item to JIRA.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*Web* *项目*是一个可以在JIRA UI的多个位置添加的新链接。链接通常会放置在一个*Web* *部分*下。链接可以直接指向一个URL，也可以用于触发一个动作。在这个实例中，我们将展示如何将一个新的Web项目添加到JIRA中。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the steps to add a new web item into JIRA:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在JIRA中添加新Web项目的步骤：
- en: Identify the *web section* where the new link should be added.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定新链接应添加的*Web部分*。
- en: We have already seen how to create a new web section. A link is then added into
    a section created as above or into a predefined JIRA section. We can add the link
    directly to a location if it is a **non-sectioned** one. For **sectioned** locations,
    it is the location **key**, followed by a slash ('/'), and the **key** of the
    web section in which it should appear.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经看到如何创建一个新的Web部分。然后，链接被添加到上述创建的部分中，或添加到预定义的JIRA部分中。如果它是一个**非部分化**位置，我们可以直接将链接添加到该位置。对于**部分化**的位置，它是位置**key**，后面跟着一个斜杠('/')，然后是该链接应显示的Web部分的**key**。
- en: For example, if we want to place a link in the web section created before, the
    section element will have the value `system.admin/jtricks-admin-section`.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，如果我们想在之前创建的Web部分中放置一个链接，则该部分元素的值将为`system.admin/jtricks-admin-section`。
- en: Add the new web item module into the `atlassian-plugin.xml`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的Web项目模块添加到`atlassian-plugin.xml`中。
- en: '[PRE2]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A Web item module also has a unique `key`. The other two important attributes
    of a web-item are `section` and `weight`. `section` defines the web section where
    the link is placed, as mentioned above, and `weight` defines the order in which
    the link will appear.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个Web项目模块还拥有一个唯一的`key`。Web项目的另外两个重要属性是`section`和`weight`。`section`定义了链接所在的Web部分，如前所述，`weight`定义了链接显示的顺序。
- en: 'A web item also has all the elements of a web section: `condition`/`conditions`,
    `context`-`provider`, `description`, `param`, `resource`, and `toolitp`. In addition,
    a web item also has a `link` element that defines where the web item should link
    to. The link could be an action, a direct link, and so on, and can be created
    using velocity parameters dynamically, as shown in the examples below:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个Web项目还包含所有Web部分的元素：`condition`/`conditions`、`context`-`provider`、`description`、`param`、`resource`和`toolitp`。此外，Web项目还有一个`link`元素，用于定义Web项目的链接目标。链接可以是一个动作、一个直接链接等，还可以通过velocity参数动态创建，如下所示的示例：
- en: '[PRE3]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the third example, `user` is a variable available in the velocity context!
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第三个示例中，`user`是一个在velocity上下文中可用的变量！
- en: 'An `icon` element is used when we need to add an icon alongside the link:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们需要在链接旁边添加图标时，会使用`icon`元素：
- en: '[PRE4]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Deploy the plugin.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署插件。
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Once the plugin is deployed, we can see that a new web item is shown in the
    web section we created previously under the **Admin** screen of JIRA.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，我们可以看到一个新的Web项目显示在我们之前创建的Web部分下，位于JIRA的**Admin**屏幕中。
- en: '![How it works...](img/1803-08-03.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-03.jpg)'
- en: We can add the item under various different places, just by changing the section
    attribute. We have seen an example while creating a new issue operation in the
    previous recipe.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改部分属性，我们可以在不同位置添加项目。在前一个教程中创建新问题操作时，我们已经看到了一个示例。
- en: See also
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Adding* *new* *web* *sections* *in* *the* *UI*'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在UI中添加* *新的* *Web* *部分*'
- en: Adding conditions for web fragments
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Web片段的条件
- en: As we saw in the previous recipes, adding a web fragment is pretty easy. However,
    the job doesn't stop with that always. In many cases, we would want to limit the
    web item based on a set of conditions.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的教程中看到的，添加Web片段非常简单。但是，工作不总是停留在那里。在许多情况下，我们希望根据一组条件限制Web项目。
- en: For example, an **Edit** **Issue** link should only appear for people with edit
    permission on an issue. An admin link should appear only if the user is a JIRA
    Administrator. In this recipe, let us look at how we can implement conditions
    for displaying web fragments.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于具有问题编辑权限的人员，**编辑问题**链接应该显示。仅当用户是JIRA管理员时，才应显示管理员链接。在本教程中，让我们看看如何实现显示Web片段的条件。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现……
- en: It is possible to add one or more conditions to a web section or a web item.
    In the latter case, the `conditions` element is used, in this case, a collection
    of `condition/conditions` elements and a `type` attribute. The type attribute
    is either the logical `AND` or `OR`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向Web部分或Web项目添加一个或多个条件。在后一种情况下，使用`conditions`元素，此时包含一组`condition/conditions`元素和一个`type`属性。类型属性可以是逻辑`AND`或`OR`。
- en: 'For example, the following condition specifies that the user should have either
    the `admin` permission or `use` permission in a project before he/she can see
    the web fragment that has the following condition:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下条件指定用户在可以看到具有以下条件的Web片段之前，应在项目中具有`admin`权限或`use`权限：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Possible values of permission are `admin`, `use`, `sysadmin`, `project`, `browse`,
    `create`, `edit`, `scheduleissue`, `assign`, `assignable`, `attach`, `resolve`,
    `close`, `comment`, `delete`, `work`, `worklogdeleteall`, `worklogdeleteown`,
    `worklogeditall`, `worklogeditown`, `link`, `sharefilters`, `groupsubscriptions`,
    `move`, `setsecurity`, `pickusers`, `viewversioncontrol`, `modifyreporter`, `viewvotersandwatchers`,
    `managewatcherlist`, `bulkchange`, `commenteditall`, `commenteditown`, `commentdeleteall`,
    `commentdeleteown`, `attachdeleteall`, and `attachdeleteown`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 权限的可能值包括`admin`、`use`、`sysadmin`、`project`、`browse`、`create`、`edit`、`scheduleissue`、`assign`、`assignable`、`attach`、`resolve`、`close`、`comment`、`delete`、`work`、`worklogdeleteall`、`worklogdeleteown`、`worklogeditall`、`worklogeditown`、`link`、`sharefilters`、`groupsubscriptions`、`move`、`setsecurity`、`pickusers`、`viewversioncontrol`、`modifyreporter`、`viewvotersandwatchers`、`managewatcherlist`、`bulkchange`、`commenteditall`、`commenteditown`、`commentdeleteall`和`commentdeleteown`。
- en: 'Let us consider a simple example of how to write a condition and display the
    web items based on it. In this example, we will display a web item in the top
    navigation bar if, and only if, the user has logged in and belongs to the `jira-developer`
    group. The following are the steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的例子，介绍如何编写条件并基于它显示Web项目。在这个例子中，我们将在顶部导航栏中显示一个Web项目，前提是用户已登录并且属于`jira-developer`组。以下是步骤：
- en: Write the `condition` class. The class should extend the `AbstractJiraCondition`
    class and override the following abstract method.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`condition`类。该类应扩展`AbstractJiraCondition`类并重写以下抽象方法。
- en: '[PRE6]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In our example, all we need to check is that the user is not null and is a
    member of the group `jira-developers`. The class is implemented as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们只需检查用户不为空并且是`jira-developers`组的成员即可。该类的实现如下：
- en: '[PRE7]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the new condition class in the `web-item`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`web-item`中添加新的条件类：
- en: '[PRE8]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the section here is `system.top.navigation.bar`, which will
    place the new link on the Top Navigation bar. But the link will be visible only
    if the condition `DeveloperCondition` returns `true`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，此处的部分是`system.top.navigation.bar`，它将在顶部导航栏上放置新链接。但仅当`DeveloperCondition`条件返回`true`时，该链接才可见。
- en: 'We can easily invert a condition using the `invert` flag as follows:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用`invert`标志轻松地反转条件，如下所示：
- en: '[PRE10]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will display the link if the user is not logged in or not in the group
    of JIRA developers!
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果用户未登录或不属于JIRA开发者组，这将显示链接！
- en: Deploy the plugin.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署插件。
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何运作……
- en: Once the plugin is deployed, we can see that the new **JTricks** **Conditional**
    **Menu** is rendered in the Top Navigation bar only when the user is logged in
    and in the group of JIRA developers.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，我们可以看到新的**JTricks** **条件** **菜单**仅在用户登录并且属于JIRA开发者组时才会出现在顶部导航栏中。
- en: 'The following screenshot shows the dashboard of a user who is logged in and
    in the group of JIRA developers:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个已登录且属于JIRA开发者组的用户的仪表盘：
- en: '![How it works...](img/1803-08-06.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1803-08-06.jpg)'
- en: If the user is not logged in, the menu is not shown as seen in the following
    screenshot. In this case, we only have web items that don't have conditions defined
    for them!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户未登录，则菜单不会显示，如下截图所示。在这种情况下，我们只会看到没有定义条件的网页项！
- en: '![How it works...](img/1803-08-07.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1803-08-07.jpg)'
- en: Creating new velocity context for web fragments
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为网页片段创建新的velocity上下文
- en: As we have mentioned in the previous recipes, it is possible to add velocity
    variables while constructing a JIRA web fragment. JIRA supports a list of variables
    by default, which includes `user`, `req`, `baseurl`, and so on. The full list
    and the details of these variables can be found at [http://confluence.atlassian.com/display/JIRADEV/Web+Fragments#WebFragments-VelocityContext](http://confluence.atlassian.com/display/JIRADEV/Web+Fragments#WebFragments-VelocityContext).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的教程中提到的，在构建JIRA网页片段时，确实可以添加velocity变量。JIRA默认支持一系列变量，包括`user`、`req`、`baseurl`等。有关这些变量的完整列表和详细信息，请参见[http://confluence.atlassian.com/display/JIRADEV/Web+Fragments#WebFragments-VelocityContext](http://confluence.atlassian.com/display/JIRADEV/Web+Fragments#WebFragments-VelocityContext)。
- en: In this recipe, we will see how to add more variables to the velocity context
    with the use of the `context-provider` element.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何使用`context-provider`元素向velocity上下文添加更多变量。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The `context-provider` element adds to the Velocity context available to the
    web section and web item modules. Only one `context-provider` can be added for
    an item. The following steps show how we can make use of a context provider:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`context-provider`元素会将新的内容添加到网页区域和网页项模块的Velocity上下文中。每个项目只能添加一个`context-provider`。以下步骤展示了如何使用上下文提供者：'
- en: Create the new `ContextProvider` class.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的`ContextProvider`类。
- en: 'The class must implement `com.atlassian.plugin.web.ContextProvider`. To make
    things easy, it is enough to extend the `AbstractJiraContextProvider` class and
    override the following abstract method in it:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该类必须实现`com.atlassian.plugin.web.ContextProvider`。为了简化操作，只需扩展`AbstractJiraContextProvider`类，并覆盖其中的以下抽象方法：
- en: '[PRE11]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The following is what the `class` looks like if you want to add the full name
    of the user as a separate variable in the velocity context.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想将用户的全名作为一个单独的变量添加到velocity上下文中，下面是`class`的代码样式。
- en: '[PRE12]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Please note that the `$user` variable is already available in the velocity context
    of web fragments and so the full name can be retrieved easily using `$user.getFullName()`.
    This is just a simple example of how to use the context providers.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`$user`变量在网页片段的velocity上下文中已经可用，因此可以通过`$user.getFullName()`轻松获取用户的全名。这只是一个简单的示例，展示了如何使用上下文提供者。
- en: Use the variable which is added into the velocity context appropriately while
    constructing the web section/item.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建网页区域/项时，适当地使用添加到velocity上下文中的变量。
- en: In the example, let us create a new web section with the user's full name in
    the admin section with a single web item in it to link to the user's website.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，让我们创建一个新的网页区域，在管理员部分显示用户的全名，并且包含一个链接到用户网站的网页项。
- en: '[PRE13]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the web section refers to `$userName` in its label.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，网页区域在它的标签中引用了`$userName`。
- en: Deploy the plugin.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署插件。
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: Once the plugin is deployed, we can see that the new web section is created
    under JIRA Admin UI, as shown in the following screenshot. The `$userName` variable
    is dynamically replaced by the current user's full name.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，我们可以看到新的网页区域已在JIRA管理员UI下创建，如下截图所示。`$userName`变量将动态替换为当前用户的全名。
- en: '![How it works...](img/1803-08-08.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/1803-08-08.jpg)'
- en: Adding a new drop-down menu on the top navigation bar
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在顶部导航栏添加一个新的下拉菜单
- en: In this recipe, we will show how to use the web section and web-item modules
    quickly to add a new drop-down menu in JIRA's top navigation bar.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将展示如何快速使用网页区域和网页项模块，在JIRA的顶部导航栏中添加一个新的下拉菜单。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Here we need a *web* *item* first to be placed in the system's top navigation
    bar and then have a *web* *section* declared under it. The web section can then
    have a list of web items created under it which will then form the links on the
    drop-down menu.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先需要一个*网页* *项*，将其放置在系统的顶部导航栏中，然后在其下声明一个*网页* *部分*。这个网页部分可以在其下创建一个链接的网页项列表，进而形成下拉菜单上的链接。
- en: 'Following are the steps to do it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是执行此操作的步骤：
- en: 'Create a new web item under the system''s top navigation bar:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统的顶部导航栏中创建一个新的网页项：
- en: '[PRE14]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, the section is `system.top.navigation.bar`. It can have a link
    that is pointed to somewhere, in this case, the JTricks' website. Here, an important
    thing to notice is that the `linkId` should be same as the `key`. In this case,
    both come under `jtricks-menu`.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，网页部分是`system.top.navigation.bar`。它可以有一个指向某个位置的链接，在这个例子中是指向JTricks网站。需要注意的重要一点是，`linkId`应该与`key`相同。在这个例子中，两者都属于`jtricks-menu`。
- en: 'Define a web section located under the above web item:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述网页项下定义一个网页部分：
- en: '[PRE15]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Make sure the location is pointing to the `key` of the first web item which
    is also its `linkId`.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保位置指向第一个网页项的`key`，它也是其`linkId`。
- en: Now add the various web-items under the above web section.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在上述网页部分下添加各种网页项。
- en: '[PRE16]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that the section is pointed to `jtricks-menu/jtricks-section`, which is
    similar to a localized section. Here `jtricks-menu` is the key for the first web-item
    and `jtricks-section` is the key for the previous web section.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，该部分指向`jtricks-menu/jtricks-section`，这类似于一个本地化的部分。在这里，`jtricks-menu`是第一个网页项的`key`，而`jtricks-section`是前一个网页部分的`key`。
- en: Deploy the plugin.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署插件。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the plugin is deployed, we can see that the new web fragments are created
    in the top navigation banner. We have a web item, `JTricks` `Menu`, under which
    a list of links are grouped into a section, as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被部署，我们可以看到新的网页片段被创建在顶部导航条中。我们有一个网页项，`JTricks` `Menu`，在其下，链接列表被分组到一个部分中，正如下面的截图所示：
- en: '![How it works...](img/1803-08-09.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-09.jpg)'
- en: Dynamic creation of web items
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态创建网页项
- en: We have now seen quite a few recipes on how to create web items and place them
    at different places in the UI. But in all the cases, we knew what links we needed.
    How about creating these links on the fly?
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看了不少关于如何创建网页项并将它们放置在UI中的不同位置的食谱。但是在所有这些情况下，我们都知道需要哪些链接。那么如何在运行时动态创建这些链接呢？
- en: In this recipe, we will see how to create web items dynamically.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将看到如何动态创建网页项。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: Create a new web item, **Favourites**, in the system top navigation bar, as
    discussed in the previous recipe.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前面食谱中的讨论，在系统的顶部导航栏中创建一个新的网页项，**收藏夹**。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何执行...
- en: Let us assume we want to create some links in the system top navigation bar.
    We have seen the same thing in the previous recipe, but that works only when we
    know the links in advance. Let us consider a new scenario where the user sees
    different sets of links when he/she is logged in and not logged in! Here the links
    change based on the user's status and hence need to be created dynamically.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要在系统的顶部导航栏中创建一些链接。我们在之前的食谱中已经看过类似的内容，但那种方法仅在我们预先知道链接的情况下有效。现在让我们考虑一种新的场景：用户在登录和未登录时看到不同的链接集！在这种情况下，链接会根据用户的状态发生变化，因此需要动态创建。
- en: 'The following is a step-by-step process to do the same:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一步一步执行相同操作的过程：
- en: Create a **Favourites** web section in the system top navigation bar.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统的顶部导航栏中创建一个**收藏夹**网页部分。
- en: '[PRE17]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we did exactly what we saw in the previous recipe. A web-item is created
    in the top navigation bar under which a web section is created.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们做的正是我们在前一个食谱中看到的内容。一个网页项被创建在顶部导航栏下，其中创建了一个网页部分。
- en: Define a **simple** **link** **factory** in the `atlassian-plugin.xml`. A Simple
    Link Factory defines a new link factory that creates the set of links dynamically.
    It always hangs off an already declared web section, `favourites-section` in our
    case.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`atlassian-plugin.xml`中定义一个**简单**的**链接****工厂**。简单链接工厂定义了一个新的链接工厂，用于动态创建一组链接。它始终挂靠在一个已经声明的网页部分下，在我们的例子中是`favourites-section`。
- en: '[PRE18]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, a simple link factory has a unique `key` and it points to an
    already available `location`. In our case, the location is `favourites-menu/favourites-section`,
    which is declared in *Step* *1*.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，一个简单的链接工厂有一个独特的`key`，并且指向一个已经存在的`location`。在我们的例子中，位置是`favourites-menu/favourites-section`，它在*步骤*
    *1*中声明。
- en: The most important attribute is the `class` attribute, `FavouritesLinkFactory`.
    Also, notice that the attribute `lazy` is declared as `true` to represent lazy
    loading.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最重要的属性是`class`属性，`FavouritesLinkFactory`。另外，注意`lazy`属性被声明为`true`，表示懒加载。
- en: 'Create the **simple** **link** **factory** class. The class should implement
    the `SimpleLinkFactory` interface, as shown:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个**简单的** **链接** **工厂**类。该类应实现`SimpleLinkFactory`接口，如下所示：
- en: '[PRE19]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: All we need to do is to implement two methods, `getLinks` and `init`. The `init`
    method needs to be implemented only when you need to initialize anything in your
    plugin. This will be invoked only once, that is, at JIRA startup.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们只需要实现两个方法，`getLinks`和`init`。`init`方法只有在需要初始化插件中的某些内容时才需要实现。该方法仅在JIRA启动时调用一次。
- en: The `getLinks` method is the actual method that we need to implement.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`getLinks`方法是我们需要实现的实际方法。'
- en: Implement the `getLinks` method. In this method, we need to return a collection
    of links that will be then displayed as a `web-item` under the section we defined
    earlier.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`getLinks`方法。在此方法中，我们需要返回一个链接集合，这些链接将作为`web-item`显示在我们之前定义的部分下。
- en: Each link we return is an instance of the `SimpleLink` class. A `SimpleLink`
    object is the Java representation of a web item we normally declare in the `atlassian-plugin.xml`.
    It has all the same attributes such as the `label`, `title`, `iconUrl`, `style`,
    `url`, and an `accesskey`.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们返回的每个链接都是`SimpleLink`类的实例。`SimpleLink`对象是我们通常在`atlassian-plugin.xml`中声明的web项的Java表示。它具有与`label`、`title`、`iconUrl`、`style`、`url`和`accesskey`等属性相同的属性。
- en: 'The following is the method for our example:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是我们示例的方法：
- en: '[PRE20]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we just create different links based on whether the user is null or not.
    A user is null if he/she is not logged in. As you can see, each link has different
    attributes mentioned earlier.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们仅根据用户是否为空来创建不同的链接。如果用户为空，则表示用户未登录。如你所见，每个链接都有之前提到的不同属性。
- en: Package the plugin and deploy it.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它。
- en: The links should now be created dynamically.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，链接应动态创建。
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once the plugin is deployed, we can see that the new web fragments are created
    in the top navigation banner. If the user is not logged in, the **Favourites**
    menu is shown with the default link, as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署后，我们可以看到新的web片段已在顶部导航栏中创建。如果用户未登录，将显示默认链接的**收藏夹**菜单，如下图所示：
- en: '![How it works...](img/1803-08-10.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-08-10.jpg)'
- en: Once the user is logged in, he/she will see a different set of links, as per
    the `getLinks` method.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户登录，他/她将看到一组不同的链接，如`getLinks`方法所示。
- en: '![How it works...](img/1803-08-11.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-08-11.jpg)'
- en: The same idea can be used to create dynamic links based on a different criterion,
    and of course, at various different places in the UI.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的思路可以用来根据不同的标准创建动态链接，当然，也可以在UI中的不同位置使用。
- en: Adding new tabs in the View Issue screen
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在查看问题屏幕中添加新标签
- en: We have seen how to enhance the UI by adding new sections and links at various
    locations. In this recipe, we will see how to add a new tab panel under the view
    issue page, similar to the existing panels such as Comments, Change History, and
    so on.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何通过在不同位置添加新部分和链接来增强UI。在这个实例中，我们将看到如何在查看问题页面下添加一个新的标签面板，类似于现有的面板，例如评论、变更历史记录等。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new skeleton plugin using the Atlassian Plugin SDK.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Atlassian插件SDK创建一个新的插件骨架。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Adding a new tab panel to the **View** **Issue** page can be done by the **Issue**
    **Tab Panel** Plugin **Module**. Following are the steps to create a new issue
    tab panel that displays some static text with a greeting to the logged-in user.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 向**查看问题**页面添加新标签面板可以通过**问题** **标签面板**插件**模块**来完成。以下是创建一个新问题标签面板的步骤，该面板显示一些静态文本，并向登录用户问候。
- en: Define the `Issue` `Tab` `Panel` in the `atlassian-plugin.xml`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`atlassian-plugin.xml`中定义`Issue` `Tab` `Panel`。
- en: '[PRE21]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, the plugin module has a unique `key` and should define the `class` that
    implements the tab panel. It also has a list of elements, as explained as follows:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，插件模块具有唯一的`key`，并应定义实现标签面板的`class`。它还包含一个元素列表，如下所示：
- en: '`description`: A description of the tab panel'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`description`：标签面板的描述'
- en: '`label`: A human-readable label for the panel'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`label`：面板的人类可读标签'
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resource`：定义渲染标签面板视图的Velocity模板'
- en: '`order`: Defines the order in which the panels will appear on the view issue
    page'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`order`：定义面板在查看问题页面上出现的顺序'
- en: '`sortable`: Defines whether the contents of the panel is sortable or not. For
    example, sorting comments or the change history elements.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sortable`：定义面板内容是否可排序。例如，排序评论或更改历史元素。'
- en: Implement the `Issue` `Tab` `Panel` class.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`Issue` `Tab` `Panel`类。
- en: The class should extend the `AbstractIssueTabPanel` class, which in turn implements
    the `IssueTabPanel` interface. We need to implement the `showPanel` and `getActions`
    methods.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类应扩展`AbstractIssueTabPanel`类，而该类又实现`IssueTabPanel`接口。我们需要实现`showPanel`和`getActions`方法。
- en: Implement the `shownPanel` method to return `true` if the panel can be displayed
    to the user. This method can have complex logic to check whether the user can
    see the tab or not, but in the example we have, we just return `true`.
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`shownPanel`方法，如果面板可以显示给用户，则返回`true`。此方法可以有复杂的逻辑来检查用户是否可以看到选项卡，但在我们的示例中，我们只返回`true`。
- en: '[PRE22]'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Implement the `IssueAction` classes that need to be returned in the `getActions`
    method. It is in the `Action` classes that we populate the velocity context to
    render the view and also return the time performed to facilitate sorting if `sortable
    = true.`
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现需要在`getActions`方法中返回的`IssueAction`类。在`Action`类中，我们填充Velocity上下文以渲染视图，并返回执行时间以便于排序，如果`sortable
    = true`。
- en: 'In the example, let us create a single `Action` class as follows:'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，让我们创建一个单独的`Action`类，如下所示：
- en: '[PRE23]'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, the action class must extend the `AbstractIssueAction` class,
    which in turn implements the `IssueAction` interface.
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，操作类必须扩展`AbstractIssueAction`类，而该类又实现`IssueAction`接口。
- en: In the `getTimePerformed` method, it just returns the current date. `populateVelocityParams`
    is the important method where the velocity context is populated. In our example,
    we just include the current user's full name with key name as `user`.
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`getTimePerformed`方法中，它只是返回当前日期。`populateVelocityParams`是一个重要方法，在其中填充Velocity上下文。在我们的示例中，我们只是将当前用户的全名包含在`user`键中。
- en: Implement the `getActions` method in the `Tab` `Panel` class to return a list
    of `IssueActions`. In our example, we just return a list that contains the new
    `JTricksAction`.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Tab` `Panel`类中实现`getActions`方法，以返回`IssueActions`列表。在我们的示例中，我们只返回包含新`JTricksAction`的列表。
- en: '[PRE24]'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, the `descriptor` is an instance variable of the super class. All we do
    here is create an instance of the `Action` class and return a list of such actions.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`descriptor`是超类的实例变量。我们在这里做的只是创建一个`Action`类的实例并返回这样的操作列表。
- en: Create the view template in the location specified earlier.`Hey $user, sample
    Issue Tab Panel!` is all we need and the user here is populated into the context
    in the `Action` class.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前指定的位置创建视图模板。`嘿 $user，示例问题选项卡面板！`就是我们需要的，用户信息在`Action`类中填充到上下文中。
- en: Package the plugin and deploy it.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它。
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once the plugin is deployed, a new tab panel will appear in the **View** **Issue**
    page, as shown in the following screenshot.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，一个新的选项卡面板将出现在**查看** **问题**页面中，如下图所示。
- en: As you can see, the greeting message there is populated using the velocity context
    and the attributes in it.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，那里显示的问候消息是通过Velocity上下文及其中的属性填充的。
- en: '![How it works...](img/1803-08-12.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-12.jpg)'
- en: Adding new tabs in the Browse Project screen
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览项目屏幕中添加新选项卡
- en: In this recipe, we will see how to add a new tab in the **Browse** **Project**
    screen.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看到如何在**浏览** **项目**屏幕中添加一个新选项卡。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a new skeleton plugin using Atlassian Plugin SDK.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Atlassian插件SDK创建一个新的骨架插件。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the steps to create a new project tab panel:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目选项卡面板的步骤如下：
- en: Define the `Project` `Tab` `Panel` in the `atlassian-plugin.xml`.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`atlassian-plugin.xml`中定义`Project` `Tab` `Panel`。
- en: '[PRE25]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here, the plugin module has a unique `key` and should define the `class` that
    implements the tab panel. It also has a list of elements, as explained as follows:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，插件模块具有唯一的`key`，并应定义实现选项卡面板的`class`。它还包含一个元素列表，下面将解释：
- en: '`description`: A description of the tab panel'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`description`：选项卡面板的描述'
- en: '`label`: A human-readable label for the panel'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`label`：面板的人类可读标签'
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resource`：定义渲染选项卡面板视图的Velocity模板'
- en: '`order`: Defines the order in which the panels will appear on the browse project
    screen.'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`order`：定义面板在浏览项目屏幕中出现的顺序。'
- en: Implement the `Project` `Tab` `Panel` class.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`Project` `Tab` `Panel`类。
- en: The class should extend the `AbstractProjectTabPanel` class, which in turn implements
    the `ProjectTabPanel` interface. We need to implement only the `showPanel` method.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该类应扩展`AbstractProjectTabPanel`类，而`AbstractProjectTabPanel`类又实现`ProjectTabPanel`接口。我们只需要实现`showPanel`方法。
- en: The `showPanel` method should return `true` if the panel can be displayed to
    the user. This method can have complex logic to check whether the user can see
    the tab or not, but in the example we have, we just return `true`.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`showPanel`方法应该返回`true`，如果面板可以显示给用户。此方法可以包含复杂的逻辑来检查用户是否可以看到选项卡，但在我们的示例中，我们只返回`true`。'
- en: '[PRE26]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create the view template in the location specified earlier. The template we
    defined is as follows:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面指定的位置创建视图模板。我们定义的模板如下：
- en: '[PRE27]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: If we need extra velocity parameters in this context, it can be populated in
    the `Project` `Tab` `Panel` class by overriding the `createVelocityParams` method.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们在此上下文中需要额外的Velocity参数，可以通过重写`createVelocityParams`方法在`Project` `Tab` `Panel`类中填充它。
- en: Package the plugin and deploy it.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它。
- en: How it works...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the plugin is deployed, a new tab panel will appear in the **Browse**
    **Project** page, as shown in the following screenshot:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署后，新的选项卡面板将出现在**浏览** **项目**页面，如下所示的屏幕截图所示：
- en: '![How it works...](img/1803-08-13.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-13.jpg)'
- en: Creating Project Tab Panel using fragments
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用碎片创建项目选项卡面板
- en: We have seen how to create a new `Project` `Tab` `Panel` in the previous recipe.
    While this works in most cases, sometimes we would like to create the nice fragmented
    view in JIRA 4.1+. Here, each project tab panel has a list of fragments organized
    in two columns. We can create the fragments and order them so that they appear
    in a formatted way on clicking the new tab panel.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的食谱中已经看到如何创建新的`Project` `Tab` `Panel`。虽然这种方法在大多数情况下有效，但有时我们希望在JIRA 4.1+中创建漂亮的碎片化视图。在这里，每个项目选项卡面板都有一个按两列组织的碎片列表。我们可以创建碎片并对其排序，以便它们在点击新选项卡面板时以格式化的方式显示。
- en: In this recipe, we will see how to create the project tab panel using fragments.
    Before we start, there are a couple of things worth mentioning.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将看到如何使用碎片创建项目选项卡面板。在开始之前，有几件事值得一提。
- en: We need to use the same package structure, `com.atlassian.jira.plugin.projectpanel.impl`,
    to create the fragment class, as we need to override the protected methods in
    it.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要使用相同的包结构`com.atlassian.jira.plugin.projectpanel.impl`来创建碎片类，因为我们需要重写其中的受保护方法。
- en: The components used in creating the fragments are not available in the OSGI
    v2.0 plugins, and hence we have chosen to go with a v1.0 plugin.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建碎片所使用的组件在OSGI v2.0插件中不可用，因此我们选择使用v1.0插件。
- en: How to do it...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Following are the steps to create a fragmented `Project` `Tab` `Panel`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建碎片化`Project` `Tab` `Panel`的步骤。
- en: Add the project tab panel module in `atlassian-plugin.xml`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`atlassian-plugin.xml`中添加项目选项卡面板模块。
- en: '[PRE28]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The attributes and elements are similar to a normal `Project` `Tab` `Panel`,
    except that it doesn't have a view velocity resource defined. The HTML here is
    constructed with the help of fragments.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些属性和元素类似于普通的`Project` `Tab` `Panel`，只不过它没有定义视图Velocity资源。这里的HTML是通过碎片帮助构建的。
- en: Create the fragments needed in the project panel. Let us assume we need two
    fragments, `FragmentOne` and `FragmentTwo`, for our example.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目面板中所需的碎片。假设我们需要两个碎片，`FragmentOne`和`FragmentTwo`，作为示例。
- en: Each Fragment must extend the `AbstractFragment` class. We need to override
    three methods for a fragment.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个碎片必须扩展`AbstractFragment`类。我们需要为碎片重写三个方法。
- en: '`getId`: It defines the ID of the fragment, which will also be the name of
    the velocity template used to render this fragment.'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getId`：它定义了碎片的ID，这也将是用于渲染此碎片的Velocity模板的名称。'
- en: '`getTemplateDirectoryPath`: It returns the path where the velocity template
    is placed.'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getTemplateDirectoryPath`：它返回放置Velocity模板的路径。'
- en: '`showFragment`: It defines whether the fragment is visible to the user or not.'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`showFragment`：它定义了碎片是否对用户可见。'
- en: 'A fourth method, `createVelocityParams`, can be overridden if we need to pass
    extra parameters to the velocity context. Following is how `FragmentOne` looks:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们需要向Velocity上下文传递额外的参数，可以重写第四个方法`createVelocityParams`。以下是`FragmentOne`的代码：
- en: '[PRE29]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here the velocity template will be `fragmentone.vm`, placed under `templates/project/fragments/`.
    The fragment is always shown, but this can be modified to include complex logic.
    We also add a new variable, `user`, to the context which then holds the full name
    of the current user. Note that user variable is already in the context, but this
    is just for an example.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，Velocity 模板将是 `fragmentone.vm`，并放置在 `templates/project/fragments/` 下。碎片始终显示，但可以修改以包含复杂的逻辑。我们还将一个新的变量
    `user` 添加到上下文中，该变量存储当前用户的全名。请注意，`user` 变量已经在上下文中，但这里只是作为示例。
- en: '`FragmentTwo` will be similar, as shown in the next few lines of code:'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`FragmentTwo` 将类似于接下来的几行代码：'
- en: '[PRE30]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, the velocity template will be `templates/project/fragments/fragmenttwo.vm`.
    Note that we don't override the `createVelocityParams` method here as we don't
    need any extra parameter in the context.
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，Velocity 模板将是 `templates/project/fragments/fragmenttwo.vm`。请注意，由于我们不需要上下文中的任何额外参数，因此我们没有重写
    `createVelocityParams` 方法。
- en: 'Create the fragment-based project tab panel class. In our example, the class
    is `JTricksFragProjectTabPanel`. The class must extend the `AbstractFragmentBasedProjectTabPanel`
    class. We need to implement three methods in this class:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建基于碎片的项目标签面板类。在我们的示例中，类名为 `JTricksFragProjectTabPanel`。该类必须继承 `AbstractFragmentBasedProjectTabPanel`
    类。我们需要在此类中实现三个方法：
- en: '`getLeftColumnFragments`: This returns a list of `ProjectTabPanelFragment`
    classes that form to the left column of the panel.'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getLeftColumnFragments`：返回一个 `ProjectTabPanelFragment` 类的列表，构成面板的左侧列。'
- en: '`getRightColumnFragments`: This returns a list of `ProjectTabPanelFragment`
    classes that forms to the right column of the panel.'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`getRightColumnFragments`：返回一个 `ProjectTabPanelFragment` 类的列表，构成面板的右侧列。'
- en: '`showPanel`: This determines whether the panel can be shown or not.'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`showPanel`：确定面板是否可以显示。'
- en: 'The class will look like the following:'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该类将如下所示：
- en: '[PRE31]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, we just construct the fragment objects and return them to the appropriate
    column list.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们仅构造碎片对象并将它们返回到适当的列列表中。
- en: Create the velocity templates for the fragments.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为碎片创建 Velocity 模板。
- en: 'In our example, `fragmentone.vm` looks like the following:'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，`fragmentone.vm` 如下所示：
- en: '[PRE32]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Notice the use of `$user`, which was populated in the velocity context of the
    `FragmentOne` class. Also, the various `div` elements are used for the UI conformance.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意 `$user` 的使用，它是在 `FragmentOne` 类的 Velocity 上下文中填充的。此外，使用了各种 `div` 元素来确保 UI
    的一致性。
- en: 'Similarly, `fragmenttwo.vm` is as follows:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类似地，`fragmenttwo.vm` 如下所示：
- en: '[PRE33]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The only difference is that we don't use the `velocity` variable here.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 唯一的不同之处是这里不使用 `velocity` 变量。
- en: Package the plugin and deploy it.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署。
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once the plugin is deployed, a new fragment-based tab panel will appear in
    the **Browse** **Project** page, as shown in the following screenshot:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，**浏览** **项目** 页面将出现一个基于碎片的新标签面板，如下图所示：
- en: '![How it works...](img/1803-08-14.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-08-14.jpg)'
- en: Adding new tabs in the Browse Version screen
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览版本屏幕中添加新标签
- en: In this recipe, we will see how to add a new tab in the **Browse** **Version**
    screen. This screen holds details of a particular version in JIRA.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将展示如何在 **浏览** **版本** 屏幕中添加新标签。该屏幕显示 JIRA 中特定版本的详细信息。
- en: Getting ready
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new skeleton plugin using **Atlassian** **Plugin** **SDK**.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **Atlassian** **Plugin** **SDK** 创建一个新的骨架插件。
- en: How to do it...
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following are the steps to create a new version tab panel. It is much similar
    to creating a new project tab panel, except for the obvious changes in the files
    and keywords involved.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建新版本标签面板的步骤。它与创建新项目标签面板非常相似，除了涉及的文件和关键字的明显变化。
- en: Define the `Version` `Tab` `Panel` in the `atlassian-plugin.xml`.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `atlassian-plugin.xml` 中定义 `Version` `Tab` `Panel`。
- en: '[PRE34]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here, the plugin module has a unique `key` and should define the `class` that
    implements the tab panel. It also has a list of elements, as explained below:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，插件模块具有唯一的 `key`，并且应定义实现标签面板的 `class`。它还具有一个元素列表，如下所述：
- en: '`description`: A description of the tab panel'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`description`：标签面板的描述'
- en: '`label`: A human-readable label for the panel'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`label`：面板的可读标签'
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resource`：定义渲染标签面板视图的 Velocity 模板'
- en: '`order`: Defines the order in which the panels will appear on the Browse Version
    Screen.'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`order`：定义面板在浏览版本屏幕上显示的顺序。'
- en: Implement the `Version` `Tab` `Panel` class.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `Version` `Tab` `Panel` 类。
- en: The class should extend the `GenericTabPanel` class, which in turn would implement
    the `TabPanel` interface. We need to implement only the `showPanel` and `createVelocityParams`
    methods, the latter only if we need to add extra variables into the velocity context.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类应扩展`GenericTabPanel`类，该类又实现`TabPanel`接口。我们只需要实现`showPanel`和`createVelocityParams`方法，后者只有在需要将额外变量添加到velocity上下文时才需要实现。
- en: The `showPanel` method should return true if the panel can be displayed to the
    user. This method can have complex logic to check whether the user can see the
    tab or not, but in the example we have, we just return true.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果面板可以显示给用户，`showPanel`方法应该返回true。该方法可以包含复杂的逻辑来检查用户是否能看到标签，但在我们的示例中，我们只是返回true。
- en: '[PRE36]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This variable will now be available on the view template that we are using.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该变量现在将在我们使用的视图模板中可用。
- en: 'Create the view template in the location specified in the plugin descriptor.
    Let us just create a simple template with a greeting to the current user as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件描述符中指定的位置创建视图模板。让我们只创建一个简单的模板，向当前用户问好，如下所示：
- en: '**Welcome $user, This is your new Version Tab!**'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**欢迎 $user，这是你的新版本标签！**'
- en: Note that we have used the `$user` variable that we populated in the previous
    step.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们已经使用了在前一步中填充的`$user`变量。
- en: Package the plugin and deploy it.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它。
- en: How it works...
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the plugin is deployed, a new tab panel will appear in the **Browse**
    **Version** page, as shown in the next screenshot:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署，新标签面板将在**浏览** **版本**页面上显示，如下图所示：
- en: '![How it works...](img/1803-08-15.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-15.jpg)'
- en: Adding new tabs in the Browse Component screen
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览组件屏幕中添加新的标签
- en: In this recipe, we will see how to add a new tab in the **Browse** **Component**
    screen. This screen holds details of a particular component in JIRA, and the process
    of adding a new tab is much similar to adding a new version tab or project tab
    panel.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将看到如何在**浏览** **组件**屏幕中添加一个新的标签。此屏幕显示JIRA中特定组件的详细信息，添加新标签的过程与添加新版本标签或项目标签面板非常相似。
- en: Getting ready
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new skeleton plugin using **Atlassian** **Plugin** **SDK**.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Atlassian** **插件** **SDK**创建一个新的骨架插件。
- en: How to do it...
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following are the steps to create a new component tab panel.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建新组件标签面板的步骤。
- en: Define the `Component` `Tab` `Panel` in the `atlassian-plugin.xml`.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`atlassian-plugin.xml`中定义`Component` `Tab` `Panel`。
- en: '[PRE37]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As in the case of a version tab panel, component tab panel also has a unique
    key and should define the `class` that implements the tab panel. It also has a
    list of elements, as explained below:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与版本标签面板类似，组件标签面板也有一个唯一的键，并应定义实现标签面板的`class`。它还具有元素列表，如下所述：
- en: '`description`: A description of the tab panel'
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`description`：标签面板的描述'
- en: '`label`: A human-readable label for the panel'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`label`：面板的可读标签'
- en: '`resource`: Defines the velocity template that renders the tab panel view'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`resource`：定义渲染标签面板视图的velocity模板'
- en: '`order`: Defines the order in which the panels will appear on the Browse Component
    Screen.'
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`order`：定义面板在浏览组件屏幕中出现的顺序。'
- en: Implement the `Component` `Tab` `Panel` class.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`Component` `Tab` `Panel`类。
- en: The class should extend the `GenericTabPanel` class, which in turn implements
    the `ComponentTabPanel` interface. We need to implement only the `showPanel` method
    and `createVelocityParams` method, the latter only if we need to add extra variables
    into the velocity context.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类应扩展`GenericTabPanel`类，该类又实现`ComponentTabPanel`接口。我们只需要实现`showPanel`方法和`createVelocityParams`方法，后者只有在需要将额外变量添加到velocity上下文时才需要实现。
- en: The `showPanel` method should return true if the panel can be displayed to the
    user. This method can have complex logic to check whether the user can see the
    tab or not, but in the example we have, we just return true.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果面板可以显示给用户，`showPanel`方法应该返回true。该方法可以包含复杂的逻辑来检查用户是否能看到标签，但在我们的示例中，我们只是返回true。
- en: '[PRE39]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As in the previous recipe, let us override the `createVelocityParams` method
    to add a new variable, `user`, to the velocity context.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如同之前的步骤，我们将重写`createVelocityParams`方法，将一个新的变量`user`添加到velocity上下文中。
- en: '[PRE40]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This variable will now be available on the view template that we are using.
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该变量现在将在我们使用的视图模板中可用。
- en: 'Create the view template in the location specified in the plugin descriptor.
    Let us create a simple template, as in the previous recipe, as follows:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件描述符中指定的位置创建视图模板。让我们创建一个简单的模板，如前面所示，如下所示：
- en: '**Welcome $user, This is your new Component Tab!**'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**欢迎 $user，这是你的新组件标签！**'
- en: Note that we have used the $user variable, which we populated in the previous
    step.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们使用了 `$user` 变量，这是我们在前一步填充的。
- en: Package the plugin and deploy it.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它。
- en: How it works...
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the plugin is deployed, a new tab panel will appear in the Browse component
    page, as shown in the following screenshot:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被部署，在浏览组件页面上将出现一个新的标签面板，如下图所示：
- en: '![How it works...](img/1803-08-16.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-16.jpg)'
- en: Extending a webwork action to add UI elements
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Webwork动作以添加UI元素
- en: In the second chapter, we have seen how to extend a webwork action. In this
    recipe, let us build on it and see how we can add more UI elements to an existing
    JIRA form.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二章中，我们已经看到如何扩展Webwork动作。在这个实例中，让我们基于此，看看如何为现有的JIRA表单添加更多UI元素。
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a skeleton plugin using Atlassian plugin SDK .
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Atlassian插件SDK创建一个骨架插件。
- en: How to do it...
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let us consider a simple example for explaining this. The clone issue operation
    in JIRA creates a copy of the original issue with the value of almost all of its
    fields copied across, barring few fields like issue key, created date, updated
    date, estimates, number of votes, and so on.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以考虑一个简单的例子来解释这个过程。JIRA中的克隆问题操作会创建一个原始问题的副本，几乎所有字段的值都会被复制过去，除了少数几个字段，比如问题键、创建日期、更新日期、估算、投票数等。
- en: What if we want to copy across the number of votes on the issue as well? Let
    us say we want to add a checkbox on the clone issue form, leaving the decision
    to the user whether to copy the votes across or not. If the user selects the checkbox,
    votes will be copied across and if not, the cloned issue will be created with
    0 votes as it happens in JIRA by default. This example will give a rough idea
    on adding new UI elements on JIRA forms and using them in the action classes.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还想复制问题上的投票数量呢？假设我们想在克隆问题表单上添加一个复选框，让用户决定是否复制投票。如果用户勾选了该复选框，则投票会被复制；如果没有勾选，则克隆的任务将默认创建为0票，这与JIRA中的默认行为一致。这个例子将大致说明如何在JIRA表单中添加新的UI元素，并在操作类中使用它们。
- en: 'The following is the step-by-step process that can be used to implement our
    example:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现我们示例的逐步过程：
- en: Override the JIRA web action for `CloneIssue` by creating an entry for it in
    the `atlassian-plugin.xml`.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`atlassian-plugin.xml`中为`CloneIssue`创建条目，覆盖JIRA的Web动作。
- en: '[PRE41]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As we have seen in [Chapter 2](ch02.html "Chapter 2. Understanding Plugin Framework"),
    *Understanding* *Plugin* *Framework*, the alias of the action remains the same
    as that of the `Clone` `Issue` action. We have gone for a custom class `ExtendedCloneIssueDetails`
    that extends the JIRA action class `CloneIssueDetails`.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如我们在[第2章](ch02.html "第2章：理解插件框架")中所见，*理解* *插件* *框架*，动作的别名与`Clone` `Issue`动作保持一致。我们选择了一个自定义类`ExtendedCloneIssueDetails`，它继承了JIRA动作类`CloneIssueDetails`。
- en: Here, we also use a copy of the original JSP, named as `extended-cloneissue-start.jsp`,
    just to keep track of the modified files. It is entirely possible to modify directly
    on the JIRA-supplied `cloneissue-start.jsp`.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，我们还使用了原始JSP的副本，命名为`extended-cloneissue-start.jsp`，仅仅是为了追踪修改过的文件。完全可以直接修改JIRA提供的`cloneissue-start.jsp`。
- en: Create the new action class extending the original action class. It is also
    possible to create an entirely new action class, but extending the original action
    will be easier as it leaves us with the task of only adding the extra bits that
    are needed.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的动作类，继承原始动作类。虽然也可以创建一个全新的动作类，但继承原始动作类会更简单，因为这仅仅需要我们添加额外的部分。
- en: '[PRE42]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Declare a variable for the new field we are going to add in the Clone Issue
    form. The variable name will be same as the name of the UI element.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个变量用于我们将要添加的克隆问题表单的新字段。变量名将与UI元素的名称相同。
- en: The variable that we declare should match the type of the UI element. For example,
    a checkbox will have a Java Boolean as the variable type.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们声明的变量应该与UI元素的类型匹配。例如，复选框将有一个Java Boolean类型的变量。
- en: '[PRE43]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Different UI elements are mapped to different Java types like text fields to
    Java String, number fields to Long, and so on.
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不同的UI元素被映射到不同的Java类型，例如文本框映射到Java String，数字框映射到Long，等等。
- en: Create getters and setters for the new field.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新字段创建getter和setter。
- en: '[PRE44]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: These getter/setter methods will be used to get values to and from the JSPs.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些getter/setter方法将用于在JSP中获取和传递值。
- en: Add the new UI element into the JSP. In our case, the JSP is `extended-cloneissue-start.jsp`,
    which is a copy of `cloneissue-start.jsp`. The UI element that we add should follow
    the rules of the templates used in the version of JIRA we are using. This is important
    as the UI keeps changing between versions.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 UI 元素添加到 JSP 中。在我们的例子中，JSP 是 `extended-cloneissue-start.jsp`，它是 `cloneissue-start.jsp`
    的一个副本。我们添加的 UI 元素应该遵循我们使用的 JIRA 版本中的模板规则。这一点很重要，因为不同版本的 UI 会有所变化。
- en: 'As in JIRA 4.3, the new checkbox can be added as follows:'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 JIRA 4.3 中，新的复选框可以按如下方式添加：
- en: '[PRE45]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note that the checkbox field has the same `name` as that of the class variable
    in the Action class. The rest of the code revolves around the decorator to use,
    attributes and elements to be passed, and so on.
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，复选框字段的 `name` 与 Action 类中的类变量名称相同。其余的代码围绕着装饰器的使用、要传递的属性和元素等进行。
- en: Capture the checkbox value in the action class when the form is submitted. The
    value can be retrieved in the class using the getter method. We can now do all
    the things that we want using the checkbox value.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单提交时，在 action 类中捕获复选框的值。该值可以通过 getter 方法在类中获取。我们现在可以根据复选框的值进行所有需要的操作。
- en: In this case, if the cloneVotes checkbox is checked, the votes field should
    be copied across from the original issue to the cloned one. As we have seen in
    the previous chapter while discarding field values during cloning, we can override
    the `setFields` method to do that.
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，如果选中 cloneVotes 复选框，投票字段应该从原始问题复制到克隆问题。正如我们在前一章中看到的，在克隆时丢弃字段值的操作中，我们可以重写
    `setFields` 方法来实现这一点。
- en: '[PRE46]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The important bit here is that the checkbox value is passed across to the action
    class behind the scenes and we are using the same to decide whether to copy the
    votes' values across.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的关键是复选框的值会传递到后台的 action 类，我们使用这个值来决定是否复制投票的值。
- en: Package the plugin, deploy it, and see it in action. Don't forget to copy the
    modified JSP file to the `/secure/views` folder.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件，部署并查看其实际效果。别忘了将修改后的 JSP 文件复制到 `/secure/views` 文件夹。
- en: An action can be overridden only once. Care must be taken not to override it
    again in another plugin (might be a third party one), as only one will be picked
    up.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 action 只能被重写一次。需要小心，不要在另一个插件（可能是第三方插件）中再次重写它，因为只有一个会被选中。
- en: How it works...
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the plugin is deployed and the JSP file is copied across to the right
    location, we can find the modified UI while cloning an issue. The form will have
    the new field, **Clone** **Votes?**, as shown in the following screenshot:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成并且 JSP 文件被复制到正确的位置，我们可以在克隆问题时看到修改后的 UI。表单将新增 **克隆** **投票？** 字段，如下图所示：
- en: '![How it works...](img/1803-08-17.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-17.jpg)'
- en: 'Note that the issue we are cloning has one vote on it. If the cloneVotes field
    is checked, the cloned issue will have the votes on it, as shown in the following
    screenshot:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在克隆的问题上有一个投票。如果勾选了 cloneVotes 字段，克隆问题将会带有投票，如下图所示：
- en: '![How it works...](img/1803-08-18.jpg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-18.jpg)'
- en: A similar approach can be used to add any new fields into the JIRA forms and
    use the fields in the action classes, as required. You can find more information
    about the various elements and its attributes by looking at the `webwork.tld`
    file, residing in the `WEB-INF/tld/` folder.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似的方法可以将任何新字段添加到 JIRA 表单中，并根据需要在 action 类中使用这些字段。你可以通过查看 `WEB-INF/tld/` 文件夹中的
    `webwork.tld` 文件，找到关于各种元素及其属性的更多信息。
- en: See also
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Extending a webwork action in JIRA*'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*扩展 JIRA 中的 Webwork 动作*'
- en: Displaying dynamic notifications/warnings on issues
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在问题上显示动态通知/警告
- en: JIRA has an interesting feature, the Announcement Banner, which can be used
    to make announcements to its user community via JIRA itself. But sometimes, it
    isn't enough to satisfy all its users. Power users of JIRA sometimes want to see
    warnings or notifications while they are viewing an issue based on some attributes
    of the issue.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 有一个有趣的功能，公告横幅（Announcement Banner），可以通过 JIRA 本身向用户社区发布公告。但有时，这个功能并不足以满足所有用户的需求。JIRA
    的高级用户有时希望根据问题的一些属性，在查看问题时看到警告或通知。
- en: In this recipe, we will see how to add a warning or error message on an issue
    based on whether the issue has subtasks or not!
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将展示如何根据问题是否有子任务，在问题上添加警告或错误信息！
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a Skeleton plugin using Atlassian Plugin SDK. Here also, as in the previous
    recipe, the core logic is in extending the JIRA action and modifying the existing
    JSP files.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Atlassian Plugin SDK创建一个Skeleton插件。这里与前一个配方一样，核心逻辑是扩展JIRA操作并修改现有的JSP文件。
- en: How to do it...
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: The following are the steps to display warnings/errors based on the number of
    subtasks on a standard issue type.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是根据标准问题类型的子任务数量显示警告/错误的步骤。
- en: As in the previous recipe, extend the JIRA action (in this case, View action)
    by adding a webwork module in `atlassian-plugin.xml`.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，通过在`atlassian-plugin.xml`中添加一个webwork模块来扩展JIRA操作（在这种情况下是视图操作）。
- en: '[PRE47]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Override the action class `ViewIssue` with `ExtendedViewIssue`, mentioned above,
    and add a public method to check whether the issue has any subtasks or not. Make
    sure the method is public so that it can be invoked from the JSP.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`ViewIssue`操作类为`ExtendedViewIssue`，并添加一个公共方法来检查问题是否有子任务。确保该方法是公共的，以便可以从JSP中调用。
- en: '[PRE48]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: It just checks whether the issue is a subtask or not and returns `true` if it
    is a standard `issuetype` and has no subtasks of its own.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它仅检查问题是否是子任务，如果是标准的`issuetype`并且没有自己的子任务，则返回`true`。
- en: 'Modify the `extended-viewissue.jsp` file to add a warning at the top, if the
    issue has no subtasks. Here we add a condition to check if the public method returns
    `true`, and if so, the warning is added, as shown below:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`extended-viewissue.jsp`文件，在顶部添加警告，如果问题没有子任务。我们在这里添加了一个条件来检查公共方法是否返回`true`，如果是，则添加警告，如下所示：
- en: '[PRE49]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, we have used the JIRA styles to add a warning icon and a warning
    div container.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，我们已经使用了JIRA样式来添加警告图标和警告div容器。
- en: Package the plugin and deploy it to see it in action.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署，查看它的实际效果。
- en: How it works...
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once the plugin is deployed, if a standard issue has no subtasks, the user will
    see a warning, as shown below, if the warning code was added immediately after
    the summary field.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件部署完成，如果一个标准问题没有子任务，用户将在下方看到一个警告，如果警告代码紧接着出现在摘要字段之后。
- en: '![How it works...](img/1803-08-19.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-19.jpg)'
- en: 'Just by modifying the CSS to add error styles, the message will appear as shown:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 仅通过修改CSS来添加错误样式，消息将如图所示：
- en: '[PRE50]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![How it works...](img/1803-08-20.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-20.jpg)'
- en: See also
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: '*Extending* *a* *webwork* *action* *in* *JIRA*'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*扩展* *JIRA中的* *webwork* *操作*'
- en: Re-ordering Issue Operations in the View Issue page
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图问题页面中重新排序问题操作
- en: 'In the previous chapter, we have seen how to create new issue operations. All
    the existing issue operations in JIRA have a predefined order associated with
    it. Currently, in JIRA, the actions are ordered as shown in the following screenshot:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经了解了如何创建新的问题操作。所有现有的JIRA问题操作都有一个预定义的顺序。目前，在JIRA中，操作的排序如下所示：
- en: '![Re-ordering Issue Operations in the View Issue page](img/1803-08-21.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![重新排序视图问题页面中的操作](img/1803-08-21.jpg)'
- en: In this recipe, we will see how we can reorder those actions with out actually
    doing any coding! For example, let us assume we want to move **Delete** option
    to first in the list and then move the subtask operations up the chart!
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将展示如何在不做任何编码的情况下重新排序这些操作！例如，假设我们想把**删除**选项移到列表的最前面，然后将子任务操作上移！
- en: How to do it...
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Following is the step-by-step process to reorder the issue operations:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是重新排序问题操作的逐步过程：
- en: Go to the `system-issueoperations-plugin.xml` residing under the `WEB-INF/classes`
    folder. This is the file where all the issue operations are defined.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到位于`WEB-INF/classes`文件夹下的`system-issueoperations-plugin.xml`。这是定义所有问题操作的文件。
- en: Modify the `weight` attribute on the relevant plugin modules to order them.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改相关插件模块中的`weight`属性来排序它们。
- en: '`weight` is the attribute that defines the order of JIRA web fragments. Issue
    operations post JIRA 4.1.x are stored as web fragments and hence are reordered
    using weight.'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`weight`是定义JIRA网页片段顺序的属性。JIRA 4.1.x之后，问题操作作为网页片段存储，因此使用weight进行重新排序。'
- en: Prior to JIRA 4.1, issue operations were defined using Issue Operations plugin
    module instead of `web-items`. In those modules, the `order` attribute was used
    to define the ordering, which is an equivalent to the current `weight` attribute.
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在JIRA 4.1之前，问题操作是通过问题操作插件模块定义的，而不是`web-items`。在这些模块中，使用`order`属性来定义排序，这与当前的`weight`属性相当。
- en: Lower the `weight`, and the item will appear first.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 降低`weight`值，项目将排在最前面。
- en: Save the file and restart JIRA.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并重启JIRA。
- en: How it works...
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our example, we wanted the Delete operation to appear first. As 10 is the
    lowest weight value by default, if we give a weight of 5 to the `delete` web section,
    that is, `operations-delete`, it will appear first in the list, as shown below.
    Similarly, we can reorder every other action, as we have done for the subtask
    operations as well.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们希望“删除”操作排在最前面。由于10是默认的最低权重值，如果我们为`delete`网页部分（即`operations-delete`）赋予权重值5，它将在列表中排在最前面，如下所示。类似地，我们可以重新排序其他操作，就像我们对子任务操作所做的那样。
- en: '![How it works...](img/1803-08-22.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-08-22.jpg)'
- en: See also
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Adding* *new* *Issue* *Operations*'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加* *新* *问题* *操作*'
- en: Re-ordering fields in the View Issue page
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新排序查看问题页面中的字段
- en: It is always difficult to satisfy everyone in a big user community and that
    is what has happened with JIRA's view issue page. While some people love it, some
    think there are simple improvements possible, resulting in huge customer satisfaction.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 要满足一个大用户社区中的所有人总是很难的，这也是JIRA查看问题页面的情况。虽然一些人喜欢它，另一些人认为有简单的改进可以提高客户满意度。
- en: One such thing is the layout of the view issue page. While it is neatly organised
    in terms of the code, the order in which they appear seems to be a strong contender
    for change in many cases.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一件事是查看问题页面的布局。虽然在代码层面它被整洁地组织，但它们出现的顺序在很多情况下似乎是改变的有力候选项。
- en: For example, in the view issue page, the summary of the issue is followed by
    standard issue fields like Status, Priority, versions, components, and so on.
    It is then followed by the custom fields and then comes the description of the
    issue. This can sometimes be a pain, for example, in cases where description is
    the most important field.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在查看问题页面中，问题的摘要后面是标准问题字段，如状态、优先级、版本、组件等。接着是自定义字段，最后是问题描述。这样有时会有些麻烦，例如在描述是最重要字段的情况下。
- en: 'Following is how the view issue page looks when you have a large custom field:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个大型自定义字段时，以下是查看问题页面的样式：
- en: '![Re-ordering fields in the View Issue page](img/1803-08-23.jpg)'
  id: totrans-427
  prefs: []
  type: TYPE_IMG
  zh: '![重新排序查看问题页面中的字段](img/1803-08-23.jpg)'
- en: As you can see, the `Test` `Free` `Text` field has a huge value and the `description`
    field is not present anywhere on the screen. In this recipe, we will see how we
    can re-order some of the things.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`Test` `Free` `Text`字段的权重大，而`description`字段在页面上完全没有出现。在这个示例中，我们将展示如何重新排序一些字段。
- en: How to do it...
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As we saw in the previous recipe, the view issue action makes use of `/secure/views/issue/viewissue.jsp`.
    If we closely look at the JSP, it is neatly arranged by placing the different
    section of fields in different JSPs. For example, custom fields, description,
    attachments, linking, subtasks, and so on, all have different dedicated JSPs and
    are ordered in a manner that works for most.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一个示例中看到的，查看问题操作使用了`/secure/views/issue/viewissue.jsp`。如果我们仔细查看JSP，会发现它通过将不同字段部分放入不同的JSP中来进行整洁的安排。例如，自定义字段、描述、附件、链接、子任务等，都有各自专门的JSP，并按对大多数人有效的顺序排列。
- en: If we want to make `description` the very first field on the view issue page,
    we can do that by just moving the JSP rendering description, that is, `issue_descriptiontable.jsp`,
    higher up in the order.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望`description`成为查看问题页面的第一个字段，我们可以通过将负责渲染描述的JSP（即`issue_descriptiontable.jsp`）上移到更靠前的位置来实现。
- en: 'The page will then appear like this:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将如下所示：
- en: '![How to do it...](img/1803_08_24.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803_08_24.jpg)'
- en: We can even wrap the custom fields in a separate div with the appropriate CSS
    classes, as shown in the following screenshot. Make sure you don't duplicate the
    values.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将自定义字段包装在一个单独的`div`中，并使用适当的CSS类，如下图所示。确保不要重复值。
- en: '[PRE51]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![How to do it...](img/1803-08-25.jpg)'
  id: totrans-436
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-08-25.jpg)'
- en: Similarly, we can reorder the other UI fragments on JIRA's **View** **Issue**
    page as well!
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们也可以重新排序JIRA的**查看** **问题**页面上的其他UI组件！
