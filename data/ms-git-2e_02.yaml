- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Git Basics in Practice
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 基础实战
- en: This book is intended for intermediate and advanced Git users to help them on
    their road to mastering Git. Therefore, the chapters following this one will assume
    you know the basics of Git, and have advanced past the beginner stage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向中级和高级 Git 用户，旨在帮助他们掌握 Git。因此，本章之后的章节假设你已经掌握了 Git 的基础，并已超越初学者阶段。
- en: This chapter will serve as a reminder of version control basics with Git. The
    focus will be on providing practical aspects of the technology, showing and explaining
    basic version control operations on the example of the development of an example
    project, and the collaboration between two developers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将作为 Git 版本控制基础的回顾。重点将放在提供该技术的实用方面，通过示例项目的开发过程以及两位开发者之间的协作，展示和解释基本的版本控制操作。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: A brief introduction to version control and Git
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制和 Git 的简要介绍
- en: Setting up a Git environment and Git repository (**init** and **clone**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Git 环境和 Git 仓库（**init** 和 **clone**）
- en: Adding files, checking status, creating commits, and examining the history
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加文件、检查状态、创建提交和检查历史记录
- en: Interacting with other Git repositories (**pull** and **push**)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他 Git 仓库互动（**pull** 和 **push**）
- en: Creating and listing branches, switching to a branch, and merging changes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和列出分支，切换到分支，并合并更改
- en: Resolving a simple merge conflict
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决一个简单的合并冲突
- en: Creating and publishing a tag
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和发布标签
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the examples shown in this chapter, you will need Git: [https://git-scm.com/](https://git-scm.com/).
    You will also need an interactive shell (for example, Git Bash if you are using
    MS Windows), a text editor or an IDE for web development (for editing JavaScript
    and HTML), and a web browser.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章所示的示例，你需要安装 Git：[https://git-scm.com/](https://git-scm.com/)。你还需要一个交互式命令行工具（例如，如果你使用
    MS Windows，可以使用 Git Bash），一个文本编辑器或适用于 Web 开发的 IDE（用于编辑 JavaScript 和 HTML），以及一个网页浏览器。
- en: 'You can access the code of an example project used in this chapter at the following
    URLs: [https://github.com/PacktPublishing/Mastering-Git---Second-Edition/tree/main/chapter01](https://github.com/PacktPublishing/Mastering-Git---Second-Edition/tree/main/chapter01)
    and [https://github.com/jnareb/Mastering-Git---Second-Edition---chapter01-sample_project](https://github.com/jnareb/Mastering-Git---Second-Edition---chapter01-sample_project).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接访问本章中使用的示例项目的代码：[https://github.com/PacktPublishing/Mastering-Git---Second-Edition/tree/main/chapter01](https://github.com/PacktPublishing/Mastering-Git---Second-Edition/tree/main/chapter01)
    和 [https://github.com/jnareb/Mastering-Git---Second-Edition---chapter01-sample_project](https://github.com/jnareb/Mastering-Git---Second-Edition---chapter01-sample_project)。
- en: A brief introduction to version control and Git
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制和 Git 的简要介绍
- en: A **version control system** (sometimes called **revision control**) is a tool
    that lets you track the history and attribution of your project files over time
    (stored in a **repository**) and helps the developers in the team to work together.
    Modern version control systems give each developer their own sandbox, preventing
    their work in progress from conflicting, and all the while providing a mechanism
    to merge changes and synchronize work. They also allow us to switch between different
    lines of development, called **branches**; this mechanism allows the developer
    to change, for example, from working on introducing a new feature step by step
    to fixing the bug in an older, released version of the project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制系统**（有时称为**修订控制**）是一种工具，它可以让你跟踪项目文件随时间变化的历史记录和归属（存储在**仓库**中），并帮助团队中的开发者共同协作。现代版本控制系统为每个开发者提供自己的沙盒，防止他们的工作进展发生冲突，同时提供合并更改和同步工作的机制。它们还允许我们在不同的开发线之间切换，称为**分支**；这个机制使得开发者可以在不同的开发任务之间切换，例如从逐步引入新功能切换到修复项目的旧版本中的
    bug。'
- en: '**Distributed version control systems** (such as Git) give each developer their
    own copy of the project’s history, which is called a **clone** of a repository.
    This is what makes Git fast, because nearly all operations are performed locally.
    It is also what makes Git flexible because you can set up repositories in many
    ways. Repositories meant for development also provide a separate **working area**
    (or a **worktree**) with project files for each developer. Git’s branching model
    enables cheap local branching, allowing the use of branches for context switching
    by creating sandboxes for different tasks. It also makes it possible to use a
    very flexible *topic branch* workflow for collaboration.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式版本控制系统**（如 Git）为每个开发者提供项目历史记录的副本，这被称为仓库的**克隆**。这就是 Git 快速的原因，因为几乎所有操作都是在本地执行的。它也是
    Git 灵活的原因，因为你可以以多种方式设置仓库。面向开发的仓库还为每个开发者提供单独的**工作区**（或**工作树**），其中包含项目文件。Git 的分支模型使得本地创建分支变得便宜，从而可以通过为不同任务创建沙盒来进行上下文切换。它还使得使用非常灵活的*主题分支*工作流进行协作成为可能。'
- en: The fact that the whole history is accessible allows for a *long-term undo*,
    rewinding to the last working version, and so on. Tracking ownership of changes
    automatically makes it possible to find out who was responsible for any given
    area of code, and when each change was done. You can compare different revisions,
    go back to the revision a user is sending a bug report against, and even automatically
    find out which revision introduced a regression bug (with `git bisect`). Tracking
    changes to the tips of branches with **reflog** allows for easy undo and recovery.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 整个历史记录可访问的事实使得进行*长期撤销*成为可能，可以回到上一个工作版本，等等。自动跟踪变更的所有权使得可以找出谁对某个代码区域负责，以及每次变更是在何时完成的。你可以比较不同的版本，回到用户发送
    bug 报告时的版本，甚至可以自动找出是哪一版本引入了回归 bug（使用`git bisect`）。通过**reflog**跟踪分支的变更使得撤销和恢复变得更加简单。
- en: A unique feature of Git is that it enables explicit access to the **staging
    area** for creating **commits** (new revisions—that is, new versions of a project).
    This brings additional flexibility to managing your working area and deciding
    on the shape of a future commit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的一个独特特点是它允许显式访问**暂存区**来创建**提交**（新版本——即项目的新版本）。这为管理工作区和决定未来提交的形态带来了额外的灵活性。
- en: All this flexibility and power come at a cost. It is not easy to master using
    Git, even though it is quite easy to learn its basic use. This book will help
    you attain this expertise, but let us start with a reminder about the basics of
    Git.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些灵活性和强大功能是有代价的。尽管学习 Git 的基本使用非常简单，但要掌握它并不容易。本书将帮助你达到这一专业水平，但让我们先从 Git 的基础知识回顾开始。
- en: Git by example
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 示例
- en: Let’s follow a step-by-step, section-by-section, simple example of two developers
    using Git to work together on a simple project. You can find all three repositories
    (for two developers, and the bare server repository) with the example code files
    for this chapter, where you can examine the code, history, and reflog, at [https://github.com/PacktPublishing/Mastering-Git---Second-Edition](https://github.com/PacktPublishing/Mastering-Git---Second-Edition),
    in a `sample_project.zip` archive.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的示例，逐步展示两个开发者如何使用 Git 协同工作在一个简单项目中。你可以在[https://github.com/PacktPublishing/Mastering-Git---Second-Edition](https://github.com/PacktPublishing/Mastering-Git---Second-Edition)找到本章的所有三个代码仓库（包括两个开发者的仓库和裸仓库服务器），并且可以在`sample_project.zip`压缩包中查看代码、历史记录和
    reflog。
- en: Following the example
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随示例
- en: To follow this example of the team development process on a single computer,
    you can simply create three folders called, for example, **alice/**, **bob/**,
    and **server/**, and switch to the appropriate folder when following work done
    by Alice, Bob, and Carol, respectively.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 若要在一台计算机上跟随这个团队开发流程的示例，你只需创建三个文件夹，命名为**alice/**、**bob/**和**server/**，并在跟随 Alice、Bob
    和 Carol 的工作时切换到相应的文件夹。
- en: 'There are a few simple changes you need to make for this simulation to work.
    When creating a repository as Carol, you don’t need to create and switch to the
    **/srv/git** directory, so you can simply skip these commands. In Alice or Bob’s
    role, you need to create separate identities in the repository’s *local* configuration,
    either with the **git config** command without the **--user** option or by editing
    the **.git/config** file in the appropriate repository. In place of the **https://git.company.com/random**
    repository URL, which does not exist, simply use the path to the server repository:
    **../server/random.git**.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个模拟工作，你需要做一些简单的修改。在作为 Carol 创建仓库时，你不需要创建并切换到**/srv/git**目录，因此可以直接跳过这些命令。在
    Alice 或 Bob 的角色下，你需要在仓库的*本地*配置中创建单独的身份，方法是使用不带**--user**选项的**git config**命令，或者通过编辑适当仓库中的**.git/config**文件。在不存在的**https://git.company.com/random**仓库
    URL 处，直接使用服务器仓库的路径：**../server/random.git**。
- en: Additionally, if you plan on moving the directory with **alice/**, **bob/**,
    and **server/** subdirectories, you will need to edit the “origin” repository
    URL that is stored in repository config files by changing it from the absolute
    path to a relative path—namely, **../../server/random.git**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你计划移动包含**alice/**、**bob/**和**server/**子目录的目录，你需要编辑存储在仓库配置文件中的“origin”仓库
    URL，将其从绝对路径更改为相对路径——即**../../server/random.git**。
- en: Setup and initialization
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置和初始化
- en: A company has begun work on a new product. This product calculates a random
    number—an integer value of a specified range.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一家公司已经开始开发一款新产品。这个产品用于计算一个随机数——一个指定范围内的整数值。
- en: The company has assigned two developers to work on this new project, Alice and
    Bob. Both developers are telecommuting to the company’s corporate headquarters.
    After a bit of discussion, they have decided to implement their product as a simple
    web application in JavaScript and HTML and to use Git 2.41.0 ([git-scm.com](http://git-scm.com))
    for version control.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 公司指派了两位开发人员来参与这个新项目，Alice 和 Bob。两位开发人员都在远程办公，连接到公司总部。经过一番讨论，他们决定将他们的产品实现为一个简单的
    JavaScript 和 HTML Web 应用，并使用 Git 2.41.0 ([git-scm.com](http://git-scm.com)) 进行版本控制。
- en: Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This project and the code are intended for demonstration purposes only and will
    be much simplified. The details of code are not important here—what is important
    is how the code changes, and how Git is used to help with the development.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目和代码仅用于演示目的，因此将大大简化。代码的细节在这里并不重要——重要的是代码如何变化，以及 Git 如何帮助开发。
- en: Repository setup
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仓库设置
- en: With a small team, they have decided on the setup shown in the following diagram.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小团队，他们决定使用下图所示的设置。
- en: Important note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This is only one possible setup, with the **central canonical repository**,
    and without a dedicated maintainer responsible for this repository (all developers
    are equal in this setup). It is not the only possibility; other ways of configuring
    repositories will be shown in [*Chapter 6*](B21194_06.xhtml#_idTextAnchor140),
    *Collaborative Development* *with Git*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是可能的一种设置，使用**中心规范仓库**，且没有专门的维护人员负责此仓库（在此设置中，所有开发者平等）。这并不是唯一的选择；其他配置仓库的方式将在[*第6章*](B21194_06.xhtml#_idTextAnchor140)，*与
    Git 的协作开发*中展示。
- en: '![Figure 1.1 – Repository setup for the sample project (using a centralized
    workflow)](img/B21194_01_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 样本项目的仓库设置（使用集中式工作流）](img/B21194_01_01.jpg)'
- en: Figure 1.1 – Repository setup for the sample project (using a centralized workflow)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 样本项目的仓库设置（使用集中式工作流）
- en: Creating a Git repository
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Git 仓库
- en: 'Alice gets the project started by asking Carol, an administrator, to create
    a new repository specifically for collaborating on a project, to share work with
    the whole team:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 通过让管理员 Carol 创建一个新的仓库，专门用于与团队共同协作来启动项目，分享工作成果：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Command-line examples follow the Unix convention of having **user@host:directory**
    at the beginning of the command prompt, to make it easier to guess from first
    glance who performs a command, on what computer, and in which directory (here,
    the tilde, **~**, denotes the user’s home directory). This is the usual command
    prompt setup on Linux; a similar-looking prompt is used by Git Bash.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行示例遵循 Unix 约定，命令提示符以**user@host:directory**开头，以便一眼看出是谁在执行命令，在哪台计算机上，在哪个目录中（此处，波浪号**~**表示用户的主目录）。这是
    Linux 上通常的命令提示符设置；Git Bash 也使用类似的提示符。
- en: You can configure your command prompt to show Git-specific information, such
    as the name of the repository, the subdirectory within the repository, the current
    branch, and even the worktree status (see [*Chapter 13*](B21194_13_split_000.xhtml#_idTextAnchor320),
    *Customizing and* *Extending Git*).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以配置命令提示符，显示 Git 相关信息，例如仓库名称、仓库中的子目录、当前分支，甚至工作区状态（见 [*第 13 章*](B21194_13_split_000.xhtml#_idTextAnchor320)，*Git
    的定制与扩展*）。
- en: I consider the details of server configuration to be too much for this chapter.
    Just imagine that it happened, and nothing went wrong, or look at [*Chapter 14*](B21194_14.xhtml#_idTextAnchor349),
    *Git Administration*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为服务器配置的细节对于这一章来说太多了。请想象它已经完成，并且没有出错，或者参考 [*第 14 章*](B21194_14.xhtml#_idTextAnchor349)，*Git
    管理*。
- en: You can also use a tool to manage Git repositories (for example, `gitolite`);
    creating a public repository on a server would then, of course, look different.
    Often, though, it involves creating a Git repository with `git init` (without
    `--bare`) in your own home directory and then pushing it with an explicit URI
    to the server, which would then automatically create the public repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用工具来管理 Git 仓库（例如，`gitolite`）；在服务器上创建公共仓库的过程当然会有所不同。不过，通常这涉及在自己的主目录下使用 `git
    init`（没有 `--bare`）创建 Git 仓库，然后使用明确的 URI 推送到服务器，服务器会自动创建公共仓库。
- en: Or perhaps the repository was created through the web interface of tools such
    as GitHub, Bitbucket, or GitLab (either hosted in the cloud, or installed on-premises).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者该仓库可能是通过 GitHub、Bitbucket 或 GitLab 等工具的 web 界面创建的（可以是托管在云端，也可以是安装在本地的）。
- en: Cloning the repository and creating the first commit
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆仓库并创建第一次提交
- en: Bob gets the information that the project repository is ready, and he can start
    coding.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 得知项目仓库已经准备好，他可以开始编码了。
- en: 'Since this is Bob’s first time using Git, he first sets up his `~/.gitconfig`
    file with information that will be used to identify his commits (for example,
    with `git config --``global --edit`):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是 Bob 第一次使用 Git，他首先通过 `git config --global --edit` 设置了 `~/.gitconfig` 文件，配置了将用于标识其提交的信息。
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, he needs to get his own repository instance (which currently is empty):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，他需要获取自己的仓库实例（当前是空的）：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'All examples in this chapter use the command-line interface. Those commands
    might be given using a Git GUI or IDE integration, as explained in the *Graphical
    interfaces* section in [*Chapter 13*](B21194_13_split_000.xhtml#_idTextAnchor320),
    *Customizing and Extending Git*. The book *Git: Version Control for Everyone*,
    published by Packt Publishing, shows GUI equivalents for the command line.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '本章中的所有示例都使用命令行界面。你也可以通过 Git GUI 或 IDE 集成来执行这些命令，具体可参考 [*第 13 章*](B21194_13_split_000.xhtml#_idTextAnchor320)，*Git
    的定制与扩展* 中的 *图形界面* 部分。本书 *Git: 面向所有人的版本控制*，由 Packt Publishing 出版，展示了命令行的 GUI 对应操作。'
- en: Bob notices that Git said that it is an empty repository with no source code
    yet, and starts coding. He opens his text editor (or IDE of choice) and creates
    the starting point for their product.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 注意到 Git 提示这是一个空的仓库，尚未有源代码，他开始编码。他打开文本编辑器（或选择的 IDE），为他的产品创建起点。
- en: 'First, he creates an HTML file (`index.html`) with the simplest possible interface
    for the web application being created, just a button and an input field:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，他创建了一个 HTML 文件（`index.html`），该文件包含为正在创建的 web 应用程序设计的最简单的界面，仅有一个按钮和一个输入框：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, Bob writes JavaScript source code (`random.js`) that is responsible for
    web application behavior—in this case, generating and displaying a random integer
    number within a given range from 1 to a configurable maximum, inclusive:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Bob 编写了 JavaScript 源代码（`random.js`），负责处理 web 应用程序的行为——在这种情况下，生成并显示一个在给定范围内（1
    到可配置的最大值之间）的随机整数，包括最大值：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Typically, for most initial implementations, this version is missing a lot of
    features but it is a good place to begin. Before committing his code, Bob wants
    to make sure that it looks all right and that it works correctly. He opens the
    `index.html` file in a web browser or uses a live preview feature of his IDE,
    as shown in *Figure 1**.2*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于大多数初步实现版本而言，这个版本缺少很多功能，但它是一个不错的起点。在提交代码之前，Bob 想确保一切看起来正常且工作正确。他在 web 浏览器中打开
    `index.html` 文件，或使用 IDE 的实时预览功能，如 *图 1.2* 所示。
- en: '![Figure 1.2 – Preview of the first version of the example application](img/B21194_01_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 示例应用程序第一个版本的预览](img/B21194_01_02.jpg)'
- en: Figure 1.2 – Preview of the first version of the example application
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 示例应用程序第一个版本的预览
- en: 'Alright! It’s time to *add* both files to the repository:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！现在是时候*添加*两个文件到仓库中了：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Bob uses the `status` operation to make sure that the pending changeset (the
    future commit) looks proper.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 使用`status`操作确保待处理的更改集（未来的提交）看起来是正确的。
- en: 'We use a short form of `git status` here to reduce the amount of space taken
    by examples; you can find an example of a full `status` output further in the
    chapter:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了`git status`的简短形式，以减少示例占用的空间；你可以在本章后面找到`status`输出的完整示例：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now it’s time to *commit* to the current version:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候对当前版本进行*提交*了：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Normally, you would create a **commit message** not by using the **-m <message>**
    command-line option but by letting Git open an editor. We use this form here to
    make the examples more compact. In actual practice, it is recommended to provide
    a more detailed description of changes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会创建一个**提交信息**，不是通过使用**-m <message>**命令行选项，而是让 Git 打开一个编辑器。我们在这里使用这种形式是为了让示例更紧凑。在实际操作中，建议提供更详细的更改描述。
- en: The **-a**/**--all** option in the **git commit -a** command means to take *all*
    changes to the tracked files. This is not the only possible way of creating revisions;
    you can separate manipulating the staging area from creating a commit—this is,
    however, a separate issue, left for [*Chapter 3*](B21194_03_split_000.xhtml#_idTextAnchor049),
    *Managing* *Your* *Worktrees*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**git commit -a**命令中的**-a**/**--all**选项意味着对所有已追踪的文件进行*所有*更改。这并不是创建修订版本的唯一方式；你可以将操作暂存区与创建提交分开—然而，这是一个单独的问题，留给[*第3章*](B21194_03_split_000.xhtml#_idTextAnchor049)，*管理*
    *工作树*。'
- en: Now it’s time to make those changes visible to Alice.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候让这些更改对 Alice 可见了。
- en: Collaborative development
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协作开发
- en: One of the main goals of a version control system is to help developers work
    together on a common project. With a distributed version control system, such
    as Git, this involves an explicit step of publishing changes to be visible to
    others.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统的主要目标之一是帮助开发者在一个共同的项目中协作。使用分布式版本控制系统，如 Git，这涉及到一个明确的步骤，即发布更改以使其对其他人可见。
- en: Publishing changes
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布更改
- en: 'After finishing working on the initial version of the project, Bob decides
    that it is ready to be published (to be made available for other developers).
    He *pushes* the changes as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成项目的初始版本工作后，Bob 决定它已经准备好发布（供其他开发者使用）。他通过以下方式*推送*更改：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Note that, depending on the speed of the network, Git could show progress information
    during remote operations such as **clone**, **push**, and **fetch**. Such information
    is omitted from examples in this book, except where that information is actually
    discussed while examining the history and viewing changes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据网络速度的不同，Git 在进行远程操作时，如**克隆**、**推送**和**拉取**，可能会显示进度信息。本书中的示例省略了这些信息，除非在检查历史和查看更改时实际讨论了这些信息。
- en: Also, if you use an older Git version, it could require setting a **push.default**
    configuration variable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你使用的是旧版 Git，它可能需要设置**push.default**配置变量。
- en: 'Since it is Alice’s first time using Git on her desktop machine, she first
    tells Git how her commits should be identified:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是 Alice 第一次在她的桌面机器上使用 Git，她首先告诉 Git 如何识别她的提交：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, Alice needs to set up her own repository instance:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Alice 需要设置她自己的仓库实例：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Alice examines the working directory:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 检查工作目录：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The **.git** directory contains Alice’s whole copy (clone) of the repository
    in Git internal format and some repository-specific administrative information.
    See the **gitrepository-layout(5)** man page for details of the file layout, which
    can be done, for example, with the **git help** **repository-layout** command.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**.git**目录包含 Alice 的整个仓库副本（克隆），以 Git 内部格式存储，并包含一些仓库特定的管理信息。有关文件布局的详细信息，请参见**gitrepository-layout(5)**手册页，例如，可以通过**git
    help** **repository-layout**命令查看。'
- en: 'She wants to check the log to see the details (to examine the project history):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 她想查看日志以查看详细信息（检查项目历史）：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Naming revisions
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 命名修订版本
- en: At the lowest level, a Git version identifier is a SHA-1 hash, for example,
    **2b953b4e80**. Git supports various forms of referring to revisions, including
    unambiguously shortened SHA-1 (with a minimum of four characters)—see [*Chapter
    4*](B21194_04.xhtml#_idTextAnchor083), *Exploring Project History*, for more ways.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在最低级别，Git 版本标识符是一个 SHA-1 哈希值，例如，**2b953b4e80**。Git 支持多种引用修订版本的方式，包括明确缩短的 SHA-1（最少四个字符）—更多方式请参见[*第4章*](B21194_04.xhtml#_idTextAnchor083)，*探索项目历史*。
- en: When Alice decides to take a look at the application, she decides that using
    `alert()` to show the result is not a good user interface. To generate a new random
    number, the user needs to first close the window. It would be better if it was
    possible to generate a new result immediately.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当爱丽丝决定查看应用程序时，她认为使用`alert()`来显示结果并不是一个好的用户界面。为了生成一个新的随机数，用户需要先关闭窗口。如果可以立即生成一个新结果，那会更好。
- en: 'She decides that a better solution would be to put the result on the page,
    below the form. She adds a single line to `index.html` to make a place for it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 她决定一个更好的解决方案是将结果放到页面上，表单下方。她在`index.html`中添加了一行来为此留出位置：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'She then replaces the use of `alert()` in the JavaScript code by showing the
    result directly on the application page, using just the added `<div` `id="result"></div>`
    placeholder:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后她将JavaScript代码中的`alert()`替换为直接在应用页面上显示结果，仅使用新增的`<div id="result"></div>`占位符：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'She then opens her web browser to check that it works correctly. She clicks
    the **Generate number** button a few times to check that it really generates random
    numbers:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 她接着打开网页浏览器，检查它是否正常工作。她点击**生成数字**按钮几次，检查它是否真的生成了随机数：
- en: '![Figure 1.3 – Application after Alice’s changes, with the result on the page
    itself](img/B21194_01_03.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 爱丽丝更改后的应用程序，结果显示在页面上](img/B21194_01_03.jpg)'
- en: Figure 1.3 – Application after Alice’s changes, with the result on the page
    itself
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 爱丽丝更改后的应用程序，结果显示在页面上
- en: 'Everything looks alright, so she uses the `status` operation to see the pending
    changes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来正常，于是她使用`status`操作查看待处理的更改：
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'No surprise here. Git knows that `index.html` and `random.js` have been modified.
    She wants to double-check by reviewing the actual changes with the `diff` command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有惊讶。Git知道`index.html`和`random.js`已经被修改。她想通过`diff`命令重新检查实际更改：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, it’s time to commit the changes and push them to the public repository:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候提交更改并将它们推送到公共仓库了：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Renaming and moving files
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重命名和移动文件
- en: 'While this is happening, Bob moves on to his next task, which is to restructure
    the tree a bit. He doesn’t want the top level of the repository to get too cluttered,
    so he decides to follow one of the established conventions for the directory structure,
    and to move all the JavaScript source code files into the `scripts/` subdirectory:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，鲍勃继续进行下一个任务，即稍微调整树的结构。他不希望仓库的顶层过于杂乱，所以他决定遵循目录结构的既定惯例，并将所有的JavaScript源代码文件移动到`scripts/`子目录下：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'He then checks that everything works correctly, and it turns out that he needs
    to update the path to the JavaScript code in the `index.html` file, so he does
    that:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后他检查一切是否正常工作，结果发现需要更新`index.html`文件中JavaScript代码的路径，于是他做了这个更改：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'He checks that everything works fine now, examines the status, and commits
    changes:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 他检查一切现在都正常，查看状态并提交更改：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'While he’s at it, to minimize the impact of reorganization on the `diff` output,
    he configures Git to always use `rename` and copy detection:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，为了最小化重组对`diff`输出的影响，他配置了Git，使其始终使用`rename`和复制检测：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Bob then decides the time has come to add a `README.md` file for the project:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后鲍勃决定是时候为项目添加一个`README.md`文件了：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Bob decides to rename `random.js` to `gen_random.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃决定将`random.js`重命名为`gen_random.js`：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This, of course, also requires changes to `index.html`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这也需要更新`index.html`文件：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: He then commits those changes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，他提交了这些更改。
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Updating your repository (with merge)
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新你的仓库（带有合并）
- en: 'Reorganization done, now Bob tries to publish those changes:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重组完成后，鲍勃尝试发布这些更改：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: But Alice was working at the same time, and she had her change ready to commit
    and push first. Git is not allowing Bob to publish his changes because Alice has
    already pushed something to the `master` branch, and Git is preserving her changes.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 但爱丽丝同时也在工作，并且她的更改准备好提交并先行推送。Git不允许鲍勃发布他的更改，因为爱丽丝已经向`master`分支推送了内容，而Git在保留她的更改。
- en: Important note
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Hints and pieces of advice in Git command output will be skipped from here on
    for the sake of brevity.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，Git命令输出中的提示和建议将从此处开始跳过。
- en: 'Bob uses `pull` to bring in changes (as described in `hint` in the command
    output):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃使用`pull`命令拉取更改（如命令输出中的`hint`所述）：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `git pull` command fetched the changes, automatically merged them with Bob’s
    changes, and created a merge commit—opening editor to confirm committing the merge.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`git pull`命令拉取了更改，自动与鲍勃的更改合并，并创建了一个合并提交——打开编辑器以确认提交合并。'
- en: Important note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: From version 2.31 onward, Git asks the user to set the **pull.rebase** configuration
    variable; we assume that Alice and Bob set it to **false**. See [*Chapter 9*](B21194_09.xhtml#_idTextAnchor229),
    *Merging Changes Together*, the *Methods of combining changes* section, for a
    more detailed description of the difference between using merge commits and using
    rebasing to combine changes.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.31开始，Git要求用户设置**pull.rebase**配置变量；我们假设Alice和Bob将其设置为**false**。请参阅[*第9章*](B21194_09.xhtml#_idTextAnchor229)，*合并更改*，*合并更改的方法*部分，了解使用合并提交和使用变基来合并更改之间的区别。
- en: Everything now seems to be good. The merge commit is done. Apparently, Git was
    able to merge Alice’s changes directly into Bob’s moved and renamed copy of a
    file without any problems. Marvelous!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切看起来都很好。合并提交完成了。显然，Git能够直接将Alice的更改合并到Bob已经移动并重命名的文件副本中，没有任何问题。太棒了！
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Bob checks that it works correctly (because automatically merging does not
    necessarily mean that the merge output is correct). It works fine and he is ready
    to push the merge:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Bob检查它是否正常工作（因为自动合并不一定意味着合并结果是正确的）。它工作得很好，他准备推送合并：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Creating a tag – a symbolic name for the revision
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建标签 – 一个修订版的符号名称
- en: 'Alice and Bob decide that the project is ready for wider distribution. Bob
    creates a **tag** so they can more easily access and refer to the released version.
    He uses an **annotated tag** for this; an often-used alternative is to use a **signed
    tag**, where the annotation contains a PGP signature (which can later be verified):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Alice和Bob决定该项目已经准备好进行更广泛的发布。Bob创建了一个**标签**，以便他们可以更轻松地访问和引用发布的版本。他为此使用了**注释标签**；一个常用的替代方法是使用**签名标签**，其中注释包含PGP签名（以后可以进行验证）：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Of course, the `v0.1` tag wouldn’t help if it was only in Bob’s local repository.
    He, therefore, pushes the just-created tag:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果`v0.1`标签仅存在于Bob的本地仓库中，它是没有帮助的。因此，他推送了刚创建的标签：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Alice updates her repository to get the `v0.1` tag, and to start with up-to-date
    work:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Alice更新她的仓库，获取`v0.1`标签，并开始从最新的工作版本开始：
- en: '[PRE32]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Resolving a merge conflict
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决合并冲突
- en: 'Alice decides that it would be a good idea to add a piece of information about
    where the result of the random number generator would appear:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Alice决定添加一条关于随机数生成器结果将显示位置的信息：
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Grand! Let’s see that it works correctly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！让我们看看它是否正确工作。
- en: '![Figure 1.4 – After adding information about where the result would appear](img/B21194_01_04.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – 添加关于结果显示位置的信息之后](img/B21194_01_04.jpg)'
- en: Figure 1.4 – After adding information about where the result would appear
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 添加关于结果显示位置的信息之后
- en: 'Good. Time to commit the change:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。是时候提交更改了：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: No problems here.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有问题。
- en: 'Meanwhile, Bob notices that if one has JavaScript disabled in the web browser
    or uses a text browser without support for JavaScript, the web application as
    it is now does not work , without explaining why. It would be a good idea to notify
    the user about this issue:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，Bob注意到如果在网页浏览器中禁用JavaScript，或者使用不支持JavaScript的文本浏览器，则当前的网页应用程序无法正常工作，且未解释原因。通知用户这个问题会是个好主意：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'He decides to add a `<noscript>` tag to explain that JavaScript is required
    for the application to work:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 他决定添加一个`<noscript>`标签，解释该应用程序需要JavaScript才能正常工作：
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Bob uses the w3m text-based web browser to check that `<noscript>` works as
    intended:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Bob使用w3m文本浏览器检查`<noscript>`是否按预期工作：
- en: "![Figure 1.5 – Testing the application in w3m, a \uFEFFtext-based web browser\
    \ without JavaScript support](img/B21194_01_05.jpg)"
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – 在w3m中测试应用程序，一个不支持JavaScript的基于文本的网页浏览器](img/B21194_01_05.jpg)'
- en: Figure 1.5 – Testing the application in w3m, a text-based web browser without
    JavaScript support
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – 在w3m中测试应用程序，w3m是一个不支持JavaScript的基于文本的网页浏览器
- en: 'He then checks in a graphical web browser (or a live preview) that nothing
    changed for JavaScript-capable clients. He has his change ready to commit and
    push first:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他在图形化的网页浏览器（或实时预览）中检查，确认对于支持JavaScript的客户端没有任何变化。他准备好首先提交并推送他的更改：
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'So, when Alice is ready to push her changes, Git rejects them:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当Alice准备推送她的更改时，Git拒绝了她的推送：
- en: '[PRE38]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Ah. Bob must have pushed a new changeset already. Alice once again needs to
    pull and merge to combine Bob’s changes with her own:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，Bob肯定已经推送了一个新的更改集。Alice再次需要拉取并合并，以将Bob的更改与她自己的更改结合起来：
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The merge didn’t go quite as smoothly this time. Git wasn’t able to automatically
    merge Alice’s and Bob’s changes. Apparently, there was a conflict. Alice decides
    to open the `index.html` file in her editor to examine the situation (she could
    have used a graphical merge tool via `git` `mergetool` instead):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这次合并没有那么顺利。Git 无法自动合并 Alice 和 Bob 的更改。显然发生了冲突。Alice 决定在编辑器中打开 `index.html` 文件来检查情况（她也可以通过
    `git mergetool` 使用图形化的合并工具）：
- en: '[PRE40]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Git has included both Bob’s code (between the `<<<<<<<< HEAD` and `========`
    conflict markers) and Alice’s code (between `========` and `>>>>>>>>`). What we
    want as a final result is to include both blocks of code. Git couldn’t merge it
    automatically because those blocks were not separated. Alice work adding `Result:`
    can be simply included right before `<noscript>` added by Bob. After resolving
    the conflict, the changes look like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Git 已经包含了 Bob 的代码（在 `<<<<<<<< HEAD` 和 `========` 冲突标记之间）和 Alice 的代码（在 `========`
    和 `>>>>>>>>` 之间）。我们希望最终的结果是同时包含这两个代码块。Git 无法自动合并它们，因为这两个块没有被分隔开。Alice 在 `Result:`
    后添加的内容可以直接插入到 Bob 添加的 `<noscript>` 前面。解决冲突后，更改看起来是这样的：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'That should take care of the problem. Alice refreshes the web application in
    a web browser to check that it works correctly. She marks the conflict as resolved
    and commits changes:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能解决问题。Alice 在网页浏览器中刷新了 web 应用程序，检查其是否正常工作。她将冲突标记为已解决并提交了更改：
- en: '[PRE42]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And then she retries the push:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后她重试推送：
- en: '[PRE43]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: And… done.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了。
- en: Adding files in bulk and removing files
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批量添加文件和删除文件
- en: 'Bob decides to add a `COPYRIGHT` file with a copyright notice for the project.
    There was also a `NEWS` file planned (but not created), so he uses a bulk add
    to add all the files:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 决定为项目添加一个带有版权声明的 `COPYRIGHT` 文件。原本计划有一个 `NEWS` 文件（但尚未创建），于是他使用批量添加功能将所有文件添加进来：
- en: '[PRE44]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Oops! Because Bob didn’t configure his `COPYRIGHT~`, was caught too (such a
    system-specific pattern should go to the repository’s `.git/info/exclude` or personal
    ignore file, `~/.config/git/ignore`, as described in [*Chapter 3*](B21194_03_split_000.xhtml#_idTextAnchor049),
    *Managing Your* *Worktrees*, in the *Ignoring files* section). Let’s remove this
    file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！由于 Bob 没有配置他的 `COPYRIGHT~`，它也被捕获了（这种系统特有的模式应该放入仓库的 `.git/info/exclude` 文件或个人忽略文件
    `~/.config/git/ignore` 中，正如在 [*第3章*](B21194_03_split_000.xhtml#_idTextAnchor049)
    中所述，*管理你的工作树*，在 *忽略文件* 部分）。让我们删除这个文件：
- en: '[PRE45]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let’s check the status and commit the changes:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查状态并提交更改：
- en: '[PRE46]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Undoing changes to a file
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撤销对文件的更改
- en: 'A bit bored, Bob decides that their web application looks bland, and adds the
    Bootstrap CSS library ([https://getbootstrap.com](https://getbootstrap.com)) to
    the `index.html` header:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有点无聊，Bob 决定他们的 web 应用程序看起来很单调，于是将 Bootstrap CSS 库（[https://getbootstrap.com](https://getbootstrap.com)）添加到
    `index.html` 的头部：
- en: '[PRE47]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'He checks how much source code it changed:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 他检查了源代码更改的数量：
- en: '[PRE48]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'That looks all right; however, the application doesn’t look that much better
    without further changes, and now it requires access to the internet. Bob decides
    that it is not the time to move to the Bootstrap CSS framework, and undoes the
    changes to `index.html`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来一切都没问题；然而，应用程序在没有进一步修改的情况下并没有显著改善，而且现在还需要访问互联网。Bob 决定现在不是切换到 Bootstrap CSS
    框架的时机，于是他撤销了对 `index.html` 的更改：
- en: '[PRE49]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you can’t remember how to revert a particular type of change or to update
    what is to be committed (using `git commit` without `-a`), the output of `git
    status` (without `-s`) contains information about what commands to use. This is
    shown in the following example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不记得如何撤销某种类型的更改或更新要提交的内容（使用 `git commit` 而不加 `-a`），那么 `git status` （不加 `-s`）的输出会包含有关使用哪些命令的信息。以下是一个示例：
- en: '[PRE50]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Branching and merging
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分支和合并
- en: 'Developers often need to isolate a specific set of changes that is expected
    to not be ready for some time, to create another line of development: a branch.
    Usually, when the mentioned set of changes is ready, you would then want to join
    those branches, which can be done with a merge operation.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员常常需要隔离一组特定的更改，这些更改预计在一段时间内不会准备好，从而创建另一个开发分支：即分支（branch）。通常，当该组更改准备好后，你会希望将这些分支合并，这可以通过合并操作（merge）来完成。
- en: Creating a new branch
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个新分支
- en: Alice decides that it would be a good idea to provide a way for the user to
    configure the lower bound of the range the random number is chosen from (currently
    set to `1`)—that is, make both the minimum and maximum of the generated number
    configurable.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 决定提供一个方法，让用户配置随机数选择范围的下限（当前设置为 `1`），也就是说，让生成的数字的最小值和最大值都能配置。
- en: 'She needs to add a new input to the `index.html` file. Alice notices that labels
    for inputs need to be adjusted, too:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 她需要在 `index.html` 文件中添加一个新输入。Alice 还注意到需要调整输入的标签：
- en: '[PRE51]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, Alice needs to adjust the JavaScript code to read another input and to
    generate a random integer between two given values, inclusive:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，Alice 需要调整 JavaScript 代码来读取另一个输入，并在给定的两个值之间（包含端点）生成一个随机整数：
- en: '[PRE52]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Alice then checks that everything works correctly:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Alice 然后检查一切是否正常工作：
- en: '![Figure 1.6 – Upper and lower bounds are made configurable](img/B21194_01_06.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 上下界变得可配置](img/B21194_01_06.jpg)'
- en: Figure 1.6 – Upper and lower bounds are made configurable
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 上下界变得可配置
- en: However, during testing, she notices that the application does not ensure that
    the minimum is smaller than or equal to the maximum value, and does not behave
    correctly if the input’s order is switched.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在测试过程中，她注意到应用程序没有确保最小值小于或等于最大值，并且如果输入顺序交换，应用程序也不能正确运行。
- en: She decides to try to fix this issue. However, to make each commit small and
    self-contained, ensuring that the application works sanely in such cases (when,
    for example, the user provides `10` and `5` as the minimum and maximum, respectively)
    will be done as a separate change.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 她决定尝试解决这个问题。然而，为了确保每次提交都小且独立，并确保在这种情况下应用程序能够正常工作（例如，当用户分别提供 `10` 和 `5` 作为最小值和最大值时），她决定将其作为一个独立的更改来完成。
- en: 'To isolate this line of development from other changes and prevent integrating
    the feature that is not fully ready, she decides to create her own branch named
    ''`min-max''` (see also [*Chapter 8*](B21194_08_split_000.xhtml#_idTextAnchor196),
    *Advanced Branching Techniques*), and switch to it:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这一开发线与其他更改隔离，并防止集成未完全准备好的功能，她决定创建一个名为 '`min-max`' 的分支（另见 [*第 8 章*](B21194_08_split_000.xhtml#_idTextAnchor196)，*高级分支技巧*），并切换到该分支：
- en: '[PRE53]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Tip
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Instead of using the **git checkout –b min-max** or **git switch --create min-max**
    shortcut to create a new branch and switch to it in one command invocation, Alice
    could have first created a branch with **git branch min-max**, then switched to
    it with **git** **switch min-max**.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Alice 不使用 **git checkout –b min-max** 或 **git switch --create min-max** 快捷命令来创建新分支并切换到该分支，她本可以先用
    **git branch min-max** 创建分支，再用 **git switch min-max** 切换到该分支。
- en: 'She commits her changes and pushes them, knowing that the push will succeed
    because she is working on her private branch:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 她提交了自己的更改并推送，知道推送会成功，因为她正在自己的私有分支上工作：
- en: '[PRE54]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Alright! Git just wants Alice to set up a remote origin as the `push` strategy);
    this will also push this branch explicitly:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 好的！Git 只是希望 Alice 设置远程源作为`push`策略；这也会显式地推送这个分支：
- en: '[PRE55]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Tip
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If she wants to make her branch visible but private (so nobody but her can push
    to it), she needs to configure the server with **hooks** or use Git repository
    management software such as **gitolite** to manage it for her.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果她想让自己的分支既可见又私密（只有她自己能够推送到该分支），她需要使用**钩子**配置服务器，或者使用像**gitolite**这样的 Git 仓库管理软件来为她管理它。
- en: Merging a branch (no conflicts)
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并一个分支（无冲突）
- en: 'Meanwhile, over in the default branch, Bob decides to push his changes by adding
    the `COPYRIGHT` file:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，在默认分支中，Bob 决定通过添加 `COPYRIGHT` 文件来推送他的更改：
- en: '[PRE56]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'OK. Alice was busy working at making the minimum value of the range configurable
    to choose random integers from (and resolving a merge conflict), and she pushed
    her changes first:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，Alice 一直忙着使范围的最小值可配置，以便从中选择随机整数（并解决合并冲突），她首先推送了自己的更改：
- en: '[PRE57]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Git then opens the editor with the commit message for the merge. Bob exits
    the editor to confirm the default description:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Git 然后打开带有合并提交信息的编辑器。Bob 退出编辑器以确认默认描述：
- en: '[PRE58]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Well, Git has merged Alice’s changes cleanly, but there is a new branch present.
    Let’s take a look at what is in it, showing only those changes exclusive to the
    `min-max` branch (the double-dot syntax is described in [*Chapter 4*](B21194_04.xhtml#_idTextAnchor083),
    *Exploring* *Project History*):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，Git 已经干净地合并了 Alice 的更改，但现在出现了一个新分支。我们来看一下它的内容，只展示 `min-max` 分支独有的更改（双点语法在
    [*第 4 章*](B21194_04.xhtml#_idTextAnchor083)，*探索项目历史* 中有介绍）：
- en: '[PRE59]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Interesting! Bob decides he wants that. So, he asks Git to merge stuff from
    Alice’s branch (which is available in the respective remote tracking branch) into
    the default branch:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣！Bob 决定也想要这个功能。所以，他要求 Git 将 Alice 的分支中的内容（该分支在各自的远程追踪分支中可用）合并到默认分支中：
- en: '[PRE60]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Undoing an unpublished merge
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撤销未发布的合并
- en: 'Bob realizes that it should be up to Alice to decide when the feature is ready
    for inclusion (and hears that it is not ready yet). He decides to undo a merge.
    Because it is not published, it is as simple as **rewinding** to the previous
    state of the current branch:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Bob意识到应该由Alice决定何时将功能纳入（并且听说它还没准备好）。他决定撤销一次合并。因为它尚未发布，所以简单的做法是**回滚**到当前分支的先前状态：
- en: '[PRE61]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Important note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This example demonstrates the use of the **reflog** for undoing operations;
    another solution would be to go to a previous (pre-merge) commit following the
    first parent, with **HEAD^** instead of **@{1}**.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了使用**reflog**撤销操作；另一种解决方案是跟随第一个父提交，通过**HEAD^**而不是**@{1}**来回到一个之前（合并前）的提交。
- en: Bob then pushes his changes.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Bob随后推送了他的更改。
- en: Summary
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter walked us through the process of working on a simple example project
    by a small development team.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 本章带领我们通过了一个简单示例项目的过程，演示了一个小型开发团队的工作流程。
- en: We have recalled how to start working with Git, either by creating a new repository
    or by cloning an existing one. We have seen how to prepare a commit by adding,
    editing, moving, and renaming files, how to revert changes to the file, how to
    examine the current status and view changes to be committed, and how to tag a
    new release.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了如何开始使用Git，无论是创建一个新版本库还是克隆一个现有版本库。我们还看到了如何通过添加、编辑、移动和重命名文件来准备提交，如何撤销文件的更改，如何检查当前状态并查看待提交的更改，以及如何标记新版本。
- en: We have recalled how to use Git to work at the same time on the same project,
    how to make our work public, and how to get changes from other developers. Though
    using a version control system helps with simultaneous work, sometimes Git needs
    user input to resolve conflicts in work done by different developers. We have
    seen how to resolve a merge conflict.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了如何使用Git在同一项目上同时进行工作，如何将我们的工作公开，以及如何从其他开发者那里获取更改。尽管使用版本控制系统有助于同时进行工作，但有时Git需要用户输入来解决不同开发者工作之间的冲突。我们还看到了如何解决合并冲突。
- en: We have recalled how to create a tag marking a release, and how to create a
    branch starting an independent line of development. Git requires tags and new
    branches to be pushed explicitly, but it fetches them automatically. We have seen
    how to merge a branch.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了如何创建一个标记发布的标签，以及如何创建一个分支来开始独立的开发线路。Git要求显式推送标签和新分支，但它会自动拉取这些标签和分支。我们还看到了如何合并一个分支。
- en: The next chapter will cover creating new revisions and new lines of development
    in much more detail, and it will introduce and explain the concept of the staging
    area for commits.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将更详细地讲解如何创建新的版本和新的开发线路，并将介绍并解释提交的暂存区的概念。
- en: Questions
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题来测试你对本章内容的理解：
- en: Describe how to create a repository from existing files and how to get your
    own copy of an existing repository.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如何从现有文件创建一个版本库，以及如何获取现有版本库的副本。
- en: Describe how to create a new version of the project locally, and how to publish
    those changes.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如何在本地创建项目的新版本，以及如何发布这些更改。
- en: Explain how to get changes from other developers, and how to combine those changes.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释如何从其他开发者那里获取更改，并如何合并这些更改。
- en: What do merge conflict markers look like, and how can you resolve a merge conflict?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并冲突标记是什么样子的？你如何解决合并冲突？
- en: What can you do to make Git not show temporary backup files as unknown files
    in the status output? What about the products and byproducts of the build system?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以做些什么来让Git不在状态输出中显示临时备份文件作为未知文件？构建系统的产品和副产品呢？
- en: Where can you find information about how to undo adding a file, or how to undo
    changes to a file?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在哪里找到关于如何撤销添加文件或如何撤销文件更改的信息？
- en: How can you abandon the commit? What are the dangers of doing so?
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何放弃一次提交？这样做有什么风险？
- en: Explain how Git manages moving, copying, and renaming files.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释Git如何管理移动、复制和重命名文件。
- en: Answers
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'Here are the answers to the questions given above:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是上述问题的答案：
- en: Use **git init**, **git add .**, and **git commit** to create a repository from
    existing files. Use **git clone** to get your own copy of the existing repository.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**git init**、**git add .**和**git commit**从现有文件创建一个版本库。使用**git clone**获取现有版本库的副本。
- en: Use **git commit** or **git commit -a** to create a new revision, and use **git
    push** to publish changes.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**git commit**或**git commit -a**来创建一个新的版本，并使用**git push**来发布更改。
- en: Use **git fetch** to get updates from other developers, or **git pull** to get
    updates and merge them together. Use **git merge** (or, as mentioned in later
    chapters, **git rebase**) to combine changes.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**git fetch**从其他开发者那里获取更新，或者使用**git pull**获取更新并合并。使用**git merge**（或者在后续章节中提到的**git
    rebase**）来合并更改。
- en: Merge conflicts are presented using the **<<<<<<<**, **=======**, and **>>>>>>>**
    markers; you can also find the **|||||||** marker used, depending on the configuration.
    To resolve the conflicts, you need to edit files marked as conflicting into shape,
    use **git add** on them when finished, and then finalize the merge with **git
    commit** or **git merge --continue** (or rebase with **git** **rebase --continue**).
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并冲突通过**<<<<<<<**、**=======**和**>>>>>>>**标记来呈现；根据配置，你还可以看到**|||||||**标记。要解决冲突，你需要编辑标记为冲突的文件，处理完后使用**git
    add**将其添加，然后通过**git commit**或**git merge --continue**完成合并（或者使用**git rebase --continue**继续变基）。
- en: To make Git ignore specific types of files, you need to add appropriate glob
    patterns to one of the **ignore** files. It is a good practice to ignore byproducts
    of the build system and other generated files using the **.gitignore** file and
    add patterns for temporary files specific to one’s individual choice to a per-repository
    (**.git/info/ignore**) or per-user **ignore** file.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要让Git忽略特定类型的文件，你需要将适当的glob模式添加到其中一个**ignore**文件中。最好使用**.gitignore**文件忽略构建系统的副产品和其他生成的文件，并将针对临时文件的模式添加到每个仓库（**.git/info/ignore**）或每个用户的**ignore**文件中。
- en: All information about how to undo adding, removing, or staging a file can be
    found in the **git** **status** output.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于如何撤销添加、移除或暂存文件的所有信息都可以在**git** **status**输出中找到。
- en: You can abandon a commit with **git reset --hard HEAD^**, but it may lead to
    losing your changes (you can recover committed changes with the help of reflog
    if it did not expire; uncommitted changes are lost forever).
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用**git reset --hard HEAD^**放弃一次提交，但这可能会导致丢失你的更改（如果提交的更改没有过期，你可以通过reflog恢复它们；未提交的更改将永远丢失）。
- en: Git handles code movement, such as renaming, moving, and copying files, by using
    rename detection during merging and **diff** generation.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git通过在合并和生成**diff**时使用重命名检测来处理代码移动，如重命名、移动和复制文件。
- en: Further reading
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: If you need a reminder about Git basics, the following references might help
    you.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要复习Git的基础知识，以下参考资料可能会对你有所帮助。
- en: '*Everyday Git With 20 Commands or So*, part of the Git documentation as **giteveryday(7)**:
    [https://git-scm.com/docs/giteveryday](https://git-scm.com/docs/giteveryday)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*每天用20个命令左右的Git*，Git文档的一部分，作为**giteveryday(7)**：[https://git-scm.com/docs/giteveryday](https://git-scm.com/docs/giteveryday)'
- en: '*A tutorial introduction to Git*, part of the Git documentation as **gittutorial(7)**:
    [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Git教程介绍*，Git文档的一部分，作为**gittutorial(7)**：[https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)'
- en: '*The Git User’s Manual*, part of the Git documentation: [https://git-scm.com/docs/user-manual](https://git-scm.com/docs/user-manual)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Git用户手册*，Git文档的一部分：[https://git-scm.com/docs/user-manual](https://git-scm.com/docs/user-manual)'
- en: 'Eric Sink, *Version Control by Example*, Pyrenean Gold Press (2011): [https://ericsink.com/vcbe/index.html](https://ericsink.com/vcbe/index.html)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Eric Sink, *Version Control by Example*, Pyrenean Gold Press (2011): [https://ericsink.com/vcbe/index.html](https://ericsink.com/vcbe/index.html)'
- en: 'Scott Chacon and Ben Straub, *Pro Git, 2nd Edition*, Apress (2014): [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Scott Chacon和Ben Straub, *Pro Git, 2nd Edition*, Apress (2014): [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)'
