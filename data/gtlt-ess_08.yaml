- en: Chapter 8. Allowing Users to Create Repos
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 允许用户创建仓库
- en: Until now, everything we have seen indicates that the administrator is the only
    person who can create new repositories. He can share the load of doing this, simply
    by giving some trusted users the right to read and write the gitolite-admin repository,
    but that's as far as it goes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们看到的一切表明只有管理员能够创建新仓库。他可以通过授予一些受信任的用户读取和写入`gitolite-admin`仓库的权限来分担这项工作，但这也只是暂时的。
- en: In some environments, your users may need more flexibility. You could have several
    users who need not be administrators, in the sense that they neither want nor
    need to manage *all* repositories, but they do wish to be able to create their
    own repositories and control access to those repositories. In fact, we would like
    the administrator's role in this to be a one-time setup, after which no more changes
    to Gitolite's *conf* file would be required.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些环境中，用户可能需要更多的灵活性。你可能有一些用户，他们不需要是管理员，即他们不希望或不需要管理*所有*仓库，但他们确实希望能够创建自己的仓库并控制对这些仓库的访问。事实上，我们希望管理员的角色仅在初期设置时出现，之后就不需要再对Gitolite的*conf*文件进行更改。
- en: If there are several users who need to do this, it seems like a good idea to
    think about how we could allow this and still maintain the required security over
    the repositories that were created by the administrator in the usual way.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个用户需要这样做，那么思考如何在保持管理员通常方式创建的仓库的必要安全性的同时，允许这种操作似乎是个好主意。
- en: In this chapter, we'll work out a solution to the problem described in the introduction.
    We'll begin by talking about some features that help us with parts of the solution,
    and then add the missing pieces one by one to build up a solution.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解决引言中描述的问题。我们将从一些帮助我们解决部分问题的功能开始讨论，然后逐一添加缺失的部分，最终构建出完整的解决方案。
- en: Putting repositories in Sub-directories
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将仓库放入子目录
- en: 'The first part of the solution is that, as was hinted at in the first chapter,
    Gitolite allows you to group repositories in subdirectories, just like you can
    do with files in a filesystem. For example, you could put all the open source
    projects you''re managing under a subdirectory called `foss`, like the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案的第一部分是，如同第一章中所暗示的，Gitolite允许你将仓库分组到子目录中，就像在文件系统中管理文件一样。例如，你可以将所有正在管理的开源项目放到名为`foss`的子目录下，像这样：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can make use of this in solving our current problem. Let's say we had users
    Alice and Bob, and we wanted to let them create and manage repositories. We could
    come up with a way by which Alice's repositories would be in a subdirectory called,
    say `dev/alice`, and Bob's repositories would, similarly, be within `dev/bob`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这一点来解决当前的问题。假设我们有用户Alice和Bob，并且我们希望允许他们创建和管理仓库。我们可以想出一种方法，使得Alice的仓库位于一个名为`dev/alice`的子目录下，Bob的仓库同样会位于`dev/bob`中。
- en: Repository wildcards
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库通配符
- en: A repository wildcard is a regular expression that describes a whole range of
    possible repository names. For example, the line `repo` `dev/alice/[a-z].*` represents
    all repositories whose names start with `dev/alice/`, followed by an alphabetic
    character, followed optionally by anything else. The repository `dev/alice/foo`
    would qualify, but `dev/alice/123` would not, nor would just `dev/alice`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库通配符是描述一系列可能的仓库名称的正则表达式。例如，`repo` `dev/alice/[a-z].*`这一行表示所有仓库名称以`dev/alice/`开头，后跟一个字母字符，后面可选跟随其他内容。仓库`dev/alice/foo`符合条件，但`dev/alice/123`则不符合，`dev/alice`也不符合。
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Due to the need to properly represent repositories such as `gtk+` and `c++`,
    if the `+` character is the only regular expression metacharacter in the repo
    name, it will be taken to be a normal repository, not a repository wildcard. To
    specify `foo.+`, you should instead say `foo..*`. You can also say `[f]oo.+`—the
    presence of the bracket tells Gitolite it is a regular expression.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要正确表示诸如`gtk+`和`c++`这样的仓库名称，如果`+`字符是仓库名称中唯一的正则表达式元字符，它将被视为普通的仓库，而不是仓库通配符。要指定`foo.+`，你应该改为使用`foo..*`。你也可以使用`[f]oo.+`—方括号的存在告诉Gitolite它是一个正则表达式。
- en: 'Gitolite allows `repo` lines to use wildcards instead of individual repository
    names. This gives us the next step to our solution; we can now write:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite允许`repo`行使用通配符而不是单个仓库名称。这为我们的解决方案迈出了下一步；我们现在可以写：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This says that Bob can push (but not rewind or delete) branches to all of Alice's
    repositories, and vice versa, and that other authenticated users of the system
    can clone both those sets of repositories.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示 Bob 可以将分支推送（但不能回滚或删除）到 Alice 所有的仓库，反之亦然，而且系统中其他经过认证的用户可以克隆这两组仓库。
- en: Sadly, though, a wildcard repository specification by itself does not actually
    *create* any repositories, since the pattern itself can match billions of possible
    repository names!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜的是，通配符仓库规范本身并不会真正*创建*任何仓库，因为这个模式本身可以匹配数十亿个可能的仓库名称！
- en: Creating a wildcard repository
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建通配符仓库
- en: Now it's time to introduce the first part of the additional syntax that Gitolite
    provides to help in solving the problem we started this chapter with. As we noted,
    the wildcard specification lines don't actually create the repositories that Alice
    or Bob need.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候介绍 Gitolite 提供的额外语法的第一部分，以帮助解决我们在本章开始时提到的问题。正如我们所指出的，通配符规范行并不会真正创建 Alice
    或 Bob 需要的仓库。
- en: 'To enable that, we add a new line to the access rules specification:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个目标，我们在访问规则规范中添加了一行新的内容：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is different than the *create branch* permission we saw in the *Types of
    write operations* section in [Chapter 7](ch07.html "Chapter 7. Advanced Access
    Control and Configuration"), *Advanced Access Control and Configuration*. The
    one described here is the single letter `C` by itself, while the other can only
    exist as a modifier to `RW` or `RW+`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在《[第7章](ch07.html "第7章 高级访问控制与配置")》*高级访问控制与配置*部分看到的 *创建分支* 权限有所不同。这里描述的是单个字母
    `C`，而另一个只能作为 `RW` 或 `RW+` 的修饰符存在。
- en: 'This access rule says that, merely by cloning or pushing a repository with
    a matching name, Alice *can cause repositories to be created on the server*! In
    other words, Alice can run the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个访问规则表示，通过克隆或推送一个匹配名称的仓库，Alice *可以导致仓库在服务器上被创建*! 换句话说，Alice 可以运行以下命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It would be as if the administrator had added a new set of rules as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像管理员添加了一组新的规则，内容如下：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: except that the administrator doesn't have to!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 只是管理员不需要这么做！
- en: 'Don''t miss the `Initialized empty...` line in the preceding output; that came
    from the server, telling you a brand new repository was created as a result of
    this clone! In addition, if Alice ran the `info` command, she might see something
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了在前面的输出中看到`Initialized empty...`这一行；这是服务器的反馈，告诉你这个克隆操作创建了一个全新的仓库！此外，如果 Alice
    执行 `info` 命令，她可能会看到如下内容：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: which shows you the repository that was just created.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示的是刚刚创建的仓库。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'A downside is that a simple typo can cause useless repositories to be created.
    If you wish to prevent this, edit `$HOME/.gitolite.rc` and uncomment the `create`
    command as well as the `no-auto-create` option. Then your users can run the more
    explicit `create` command, for example: `ssh git@host create dev/alice/my-new-repo`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个缺点是，一个简单的拼写错误就可能导致创建无用的仓库。如果你希望防止这种情况发生，可以编辑 `$HOME/.gitolite.rc` 并取消注释 `create`
    命令以及 `no-auto-create` 选项。然后你的用户可以运行更明确的 `create` 命令，例如：`ssh git@host create dev/alice/my-new-repo`。
- en: Giving access to other users
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋予其他用户访问权限
- en: We have so far simply hardcoded the permissions—Alice and Bob have some access
    to each other's repositories, and everyone else can read both sets of repositories.
    This is clearly not flexible enough, Alice may want some repositories to be writable
    by David, and some should not be readable by `@all`, and so on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是硬编码了权限—Alice 和 Bob 可以互相访问对方的仓库，其他人可以读取这两个仓库。这显然不够灵活，Alice 可能希望某些仓库可以被
    David 写入，某些仓库不允许 `@all` 读取，等等。
- en: On the face of it, this is a difficult problem because it seems to imply that
    Alice might want to actually make changes or additions to the rules themselves,
    and thus, directly or indirectly, touch Gitolite's *conf* file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，这似乎是一个难题，因为这意味着 Alice 可能需要对规则本身进行更改或添加，因此直接或间接地触及到 Gitolite 的 *conf* 文件。
- en: 'The way Gitolite solves these problems is to allow the administrator to define
    roles, and then allow the user to specify which users she wants in each role.
    The following is an example using role names that are defined by default in Gitolite:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Gitolite 解决这些问题的方式是允许管理员定义角色，然后让用户指定她希望将哪些用户分配到每个角色。以下是使用 Gitolite 默认定义的角色名称的示例：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`READERS` and `WRITERS` are role names that are predefined in Gitolite. Note
    that the role names themselves don''t have any special meaning in terms of what
    access rights a role has—that is entirely up to the administrator.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`READERS`和`WRITERS`是Gitolite中预定义的角色名称。请注意，角色名称本身并没有特殊的含义，关于角色的访问权限完全由管理员决定。'
- en: At the moment, however, this is not complete. The rules do not actually say
    that Bob is a writer (and thus has `RW` permission on Alice's repositories) or
    that everyone else (`@all`) can read it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，然而，这还不完整。规则并没有明确说明Bob是一个写作者（因此在Alice的仓库上拥有`RW`权限），或者其他人（`@all`）可以读取它。
- en: 'This is where the `perms` command comes in. Here''s how Alice would use it
    to add Bob to the `WRITERS` role:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这时`perms`命令就派上用场了。以下是Alice如何使用它将Bob添加到`WRITERS`角色的方式：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, to add `@all` to the `READERS` role, she would run the following
    command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，要将`@all`添加到`READERS`角色，她将运行以下命令：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If she wishes to check what the current role assignments for her repository
    are, she can run.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果她希望检查当前仓库的角色分配情况，可以运行。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'which will dutifully print:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它将恭敬地打印：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: One advantage you should see right away is that now the role assignment is *per
    repository*. That is, Alice can have completely different role assignments for
    other repositories she owns. In fact, if she does not run the perms command on
    a repository, no one else will have any access­—it becomes her private repository.
    Or she can add multiple people to each role too if she wishes. The `perms` command
    can only be used to add one user to one role in one go. So Alice may have to run
    this multiple times. If she added someone whom she now wishes to remove, that
    is also possible. As normal for all Gitolite commands, `perms` responds to a single
    argument of `-h` to provide a usage message.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该立刻看到的一个优势是，现在角色分配是*按仓库来划分*的。也就是说，Alice可以为她拥有的其他仓库设置完全不同的角色分配。事实上，如果她没有在某个仓库上运行`perms`命令，其他人将无法访问该仓库——它将变成她的私人仓库。或者，如果她愿意，也可以为每个角色添加多个用户。`perms`命令一次只能添加一个用户到一个角色。因此，Alice可能需要多次运行这个命令。如果她添加了某个用户，现在又想移除他，也是可以的。与所有Gitolite命令一样，`perms`支持`-h`参数来提供用法说明。
- en: Generalizing the ruleset
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛化规则集
- en: 'We''ll now look at the ruleset as it stands for each user, and then discuss
    how to generalize it to any number of users. At this point, if you recall from
    the previous section, the rules look as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将查看每个用户当前的规则集，并讨论如何将其泛化到任意数量的用户。此时，如果你还记得上一节的内容，规则看起来如下：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You might notice that other than the word alice in the first three lines being
    replaced by Bob, this is precisely what you need for Bob's repositories as well.
    It certainly does not make sense to have to repeat this for every user who might
    need this feature!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，除了前面三行中的`alice`被替换成Bob外，这实际上正是你为Bob的仓库所需要的。显然，要求为每个可能需要此功能的用户重复这一点是没有意义的！
- en: 'The final part of the solution to allowing users to create, and (to some extent)
    manage, their own repositories is the `CREATOR` keyword. Here''s the canonical
    example again:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 允许用户创建并（在某种程度上）管理自己的仓库的解决方案的最后部分是`CREATOR`关键字。这里是经典的示例：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice the changes we made. First, the `C` permission line now lists all the
    users who are allowed to create their own repositories and manage it as we have
    described earlier. Only these four users can do this, in this ruleset. Alternatively,
    you can replace the four usernames with some group name that you may have defined,
    or even use `@all` to allow all authenticated users to use the facility of creating
    private repositories they can selectively open up to others.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们所做的更改。首先，`C`权限行现在列出了所有被允许创建和管理自己仓库的用户，正如我们之前所描述的那样。在这个规则集中，只有这四个用户可以执行此操作。或者，你也可以用某个已定义的组名替换这四个用户名，甚至使用`@all`来允许所有经过身份验证的用户使用创建私有仓库并选择性地向其他人开放的功能。
- en: Next, the repository name pattern contains `CREATOR` instead of `alice`, as
    does the `RW+` line. For repositories that do not yet exist, these are effectively
    treated as the name of the user who's trying to create the repository. For existing
    repositories, this is treated as the name of the user who created it, which is
    recorded and kept track of.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，仓库名称模式包含`CREATOR`而不是`alice`，`RW+`行也是如此。对于尚不存在的仓库，这些实际上被视为试图创建仓库的用户的名字。对于已存在的仓库，它被视为创建该仓库的用户的名字，并且该信息会被记录和追踪。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When a repository does not exist, the only permission that Gitolite cares about
    is the `C` permission that allows creating a repository. Whoever is on the right
    side of such a rule is allowed to create repositories matching the pattern. One
    error to watch out for is to put in `C = CREATOR`, instead of a list of actual
    users or user groups. Because, as described above, this is treated as the name
    of user attempting to create the repository, this allows any authenticated user
    to create such a repository. If that is what you want, it's better to be clear
    and actually use `@all` instead of `CREATOR`; the latter is just a side-effect
    and not supported behavior.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当仓库不存在时，Gitolite关心的唯一权限是允许创建仓库的`C`权限。符合规则右侧的任何人都可以创建匹配模式的仓库。要注意的一个错误是将`C = CREATOR`放入其中，而不是实际用户或用户组的列表。因为如上所述，这会被视为尝试创建仓库的用户的名称，这允许任何经过身份验证的用户创建这样的仓库。如果这是你想要的，最好明确说明，实际上使用`@all`而不是`CREATOR`；后者只是一个副作用，不是受支持的行为。
- en: Explaining wild repos to your users
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的用户解释野生仓库
- en: Your users, of course, do not need all of this explanation! In fact, one of
    the goals of this feature is that Gitolite users (as opposed to Gitolite *administrators*)
    should *not* be burdened with learning the nuances of `RW`, `RW+`, *deny* rules,
    and so on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你的用户并不需要所有这些解释！事实上，此功能的一个目标是使Gitolite用户（而不是Gitolite *管理员*）不必负担学习`RW`、`RW+`、*deny*规则等细微差别。
- en: 'The example setup we have been using till now is the canonical example: it
    contains an owner (who is the only user allowed to rewind or delete branches),
    a set of writers (who can push/create but not rewind/delete), and a set of readers
    who cannot push at all.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用的示例是经典示例：它包含一个所有者（只有该所有者被允许回滚或删除分支的用户），一组作者（可以推送/创建但不能回滚/删除），以及一组读者根本不能推送。
- en: The only thing left to do is to explain to the user what repositories she is
    allowed to create (most users do not know regular expressions very well, so it's
    best to keep your patterns simple enough to be explained in English), and that
    she can add or remove people from each of those *lists of users*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的事情就是向用户解释她被允许创建哪些仓库（大多数用户对正则表达式不是很熟悉，因此最好保持模式足够简单，可以用英语解释），以及她可以向每个*用户列表*添加或删除人员。
- en: The list names (in our example, `READERS` and `WRITERS`) should be supplied,
    and explained as representing what the users in each list can do.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 列表名称（在我们的示例中是`READERS`和`WRITERS`）应当提供，并解释为代表每个列表中的用户可以做什么。
- en: 'Finally, show them three examples of the `perms` command used to maintain these
    user lists:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，展示三个示例`perms`命令用于维护这些用户列表：
- en: '`ssh` git@host `perms dev/alice/repo + WRITERS dave` to add a user'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh` git@host `perms dev/alice/repo + WRITERS dave` 以添加一个用户'
- en: '`ssh` git@host `perms dev/alice/repo - WRITERS dave` to remove a user (notice
    the minus sign instead of the plus sign)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh` git@host `perms dev/alice/repo - WRITERS dave` 以移除一个用户（请注意减号而不是加号）'
- en: '`ssh` git@host `perms -l dev/alice/repo` to list current user lists'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh` git@host `perms -l dev/alice/repo` 列出当前用户列表'
- en: Managing with just wild repos
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只使用野生仓库进行管理
- en: If you think about the example we've been working on throughout this chapter,
    it does not allow the user to trust anyone *else* with `RW+` permissions; if any
    rewinding or deleting of branches is required it has to be the owner herself that
    does it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑我们在本章中一直在工作的示例，它不允许用户信任任何其他人拥有`RW+`权限；如果需要回滚或删除分支，必须是所有者自己执行。
- en: 'We can rectify this by changing the `RW+` permission line to:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将`RW+`权限行更改为以下内容来纠正这一点：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Thus, defining a new role (or list of users, if you will) called `TRUSTED`.
    Of course, for this to work, you—as the administrator—must log on to the server
    and edit `$HOME/.gitolite.rc` to add this new role to the list of roles defined
    in that file under the `ROLES` hash. Then you can tell your user that there is
    a third list of users, called `TRUSTED`, which she can use to specify users she
    would like to allow to rewind or delete branches or tags.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，定义一个名为`TRUSTED`的新角色（或者说用户列表）。当然，为了使其生效，作为管理员的你需要登录服务器，并编辑`$HOME/.gitolite.rc`文件，在`ROLES`哈希下的角色列表中添加这个新角色。然后你可以告诉你的用户，有一个名为`TRUSTED`的第三个用户列表，她可以用来指定她想要允许回滚或删除分支或标签的用户。
- en: Now that we have started going this route, we can go a little further and then
    a little more, until we end up with something that is essentially a one-time setup
    of Gitolite, requiring little to no further maintenance, from the administrator,
    once it has been set up. This can be very useful in sites where most of the users
    are somewhat autonomous.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经开始走这条路，那么我们可以继续走得更远，直到最终我们得到的东西基本上就是 Gitolite 的一次性设置，管理员在设置完后几乎不需要再进行任何维护。这在大多数用户相对自主的网站上非常有用。
- en: 'Here''s a comprehensive example of such a ruleset. To make things easier to
    copy and use, we''ve added the description of the rulesets as comments so you
    can copy them too:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个完整的规则集示例。为了方便复制和使用，我们在规则集的描述中添加了注释，这样你也可以复制它们：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Deleting wild repositories
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除不再需要的仓库
- en: 'With the example in the previous section, the administrator''s job is much
    lightened (albeit at the expense of *some* loss of control). However, there still
    remains one feature that your users will eventually want: deleting repositories
    that have served their purpose.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一节中的示例，管理员的工作负担大大减轻（尽管这是以*失去一些控制权*为代价的）。然而，仍然有一个功能是你的用户最终会需要的：删除那些已经完成任务的仓库。
- en: In order to allow users to delete repositories that they have created (it need
    not be said that a user cannot delete anything else!), the administrator needs
    to enable the `D` command by uncommenting the corresponding line in the list of
    commands in `$HOME/.gitolite.rc`. Then the user can run the `D` command to delete
    repositories.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户删除他们创建的仓库（无需提及用户不能删除其他任何内容！），管理员需要通过取消注释 `$HOME/.gitolite.rc` 文件中相应行的命令来启用
    `D` 命令。然后用户可以运行 `D` 命令删除仓库。
- en: 'Repositories are locked against accidental deletion by default, so every delete
    is actually two steps—the `unlock` sub-command, then the `rm` sub-command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，仓库会被锁定，防止意外删除，因此每次删除实际上分为两个步骤——`unlock` 子命令和 `rm` 子命令：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This may be one of the most important chapters in this book, since it talks
    about a very popular feature of Gitolite. While it is not suitable in sites where
    strict control and auditability are required, it is very useful in most other
    sites, not only saving the administrator a lot of time, but the users also do
    not have to wait on the administrator for something they need quickly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章可能是本书中最重要的一章，因为它讲解了 Gitolite 的一个非常流行的功能。虽然在需要严格控制和可审计性的网站上不适用，但在大多数其他站点中非常有用，不仅能为管理员节省大量时间，而且用户也不需要再等待管理员处理他们急需的事项。
- en: In the next chapter, we will talk about what **core** Gitolite is and what **non-core
    is**, look at some non-core programs that come with Gitolite, and discuss customizing
    Gitolite by adding our own non-core code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 **核心** Gitolite 和 **非核心** Gitolite 的区别，查看 Gitolite 附带的一些非核心程序，并讨论如何通过添加我们自己的非核心代码来自定义
    Gitolite。
