- en: Chapter 3. Polishing Your Routine – How to Increase Everyday Productivity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 打磨你的工作流程 – 如何提高每日生产力
- en: '*We scratched the surface of version control system concepts to understand
    how Git can make us more efficient in doing our work. Without any delay we also
    quickly grabbed a copy of it and got it up and running in our systems.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们只触及了版本控制系统概念的表面，以理解Git如何让我们在工作中更加高效。毫不拖延地，我们也迅速获取了它，并在我们的系统中成功运行起来。*'
- en: '*I hear you shouting with excitement, "Let''s dive in!".*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*我听见你激动地喊道：“让我们深入了解吧！”*'
- en: 'Aye aye, Captain, here we go. In this chapter you will look at five important
    concepts, which is all you really need most of the time in your workplace:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，船长，出发了。在这一章中，你将学习五个重要概念，这些概念通常是你在工作中所需的全部：
- en: Initiating the process
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动过程
- en: Adding your files to the cabin (repository)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的文件添加到仓库（目录）中
- en: Committing the added files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交已添加的文件
- en: Checking out
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检出
- en: Resetting
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置
- en: That's right, just five concepts are all you need to create a difference. And
    of course we shall learn how to get back on track with Git's built-in helper functions
    if you get lost along the way.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没错，仅仅五个概念就足以让你产生变化。当然，如果你在操作过程中迷失了方向，我们还将学习如何借助Git内建的帮助功能重新回到正轨。
- en: Suit up – getting ready for your Git
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装备好 - 为你的Git做好准备
- en: Let's say you have a magic wand, and it will do exactly what you order it to
    do! Yeah, that's right, you have Git now. You need to command Git to do what it
    has to do for you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一根魔杖，它将完美地执行你给它的命令！没错，就是这样，你现在拥有了Git。你需要命令Git执行它必须为你完成的任务。
- en: Sounds fun, right?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很有趣，对吧？
- en: We already read that to maintain multiple versions of files they have to be
    kept inside a directory (folder), so we shall create a directory called `Workbench`
    on your desktop to learn the concepts explained in chapters hands on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到，要保持多个文件的版本，它们必须保存在一个目录（文件夹）中，因此我们将在桌面上创建一个名为`Workbench`的目录，来学习本章实践中解释的概念。
- en: 'When it comes to handling computers there are people who would like to get
    the job done with either of the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 说到操作计算机，有些人希望通过以下任何一种方式完成任务：
- en: GUI mode (graphical user interface)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GUI模式（图形用户界面）
- en: CLI mode (command-line interface)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CLI模式（命令行接口）
- en: A combination of both can also be used. In the interest of serving a diverse
    audience, we shall try to cover both modes of implementation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以同时使用两者的组合。为了满足多样化的受众，我们将尝试涵盖这两种实现模式。
- en: Initiation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化
- en: Initiation is nothing but a process of pointing your finger towards that directory
    so that Git will know it has to monitor its contents for changes from then on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化其实就是指向那个目录，让Git知道从那时起它需要监控该目录的内容，以便捕捉变化。
- en: As we discussed earlier, we shall cover both ways (GUI and CLI) of performing
    these operations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将涵盖执行这些操作的两种方式（GUI和CLI）。
- en: Time for action – initiation in GUI mode
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 - 图形用户界面模式中的初始化
- en: 'To create/initiate a repository, perform the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建/初始化一个仓库，请执行以下步骤：
- en: Open **Git Gui** from your desktop or from your applications menu and select
    the option **Create New Repository**, as shown in the following screenshot:![Time
    for action – initiation in GUI mode](img/7522_03_01.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从桌面或应用程序菜单中打开**Git Gui**，并选择**创建新仓库**选项，如下图所示：![操作时间 - 图形用户界面模式中的初始化](img/7522_03_01.jpg)
- en: Git will present you with a new screen, expecting from you the location of the
    directory that you want to make a repository. So click the on the **Browse** button,
    select our **Workbench** directory from the desktop, and click on the **Create**
    button.![Time for action – initiation in GUI mode](img/7522_03_02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git会向你展示一个新屏幕，要求你提供你想要创建仓库的目录位置。所以点击**浏览**按钮，从桌面上选择我们的**工作台**目录，然后点击**创建**按钮。![操作时间
    - 图形用户界面模式中的初始化](img/7522_03_02.jpg)
- en: You should get a screen as follows:![Time for action – initiation in GUI mode](img/7522_03_03.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到如下的屏幕：![操作时间 - 图形用户界面模式中的初始化](img/7522_03_03.jpg)
- en: Now don't close this window; we shall continue from this screen for our remaining
    concepts.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在别关闭这个窗口；我们将继续从这个屏幕开始，继续讲解接下来的概念。
- en: '*What just happened?*'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: You have successfully commanded Git to monitor your `Workbench` directory and
    its contents.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功指示Git监控你的`Workbench`目录及其内容。
- en: 'The previous image showed the master page, which we will be interacting with
    very often. It consists of four panes; let''s call them the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图片展示了主页面，我们将经常与之交互。它由四个窗格组成，我们可以将它们称为：
- en: '**Unstaged Changes** pane (top left)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未暂存更改**窗格（左上角）'
- en: '**Staged Changes** pane (bottom left)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暂存更改**窗格（左下角）'
- en: '**Differential Content** pane (top right)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**差异内容**窗格（右上角）'
- en: '**Action** pane (bottom right)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**窗格（右下角）'
- en: In our example we created a new directory called `Workbench` and initiated it
    as a repository. You can also follow the same procedures to convert an existing
    directory that already holds your files into a repository for Git to monitor.
    When you do that, your files inside the repository will initially appear in the
    **Unstaged Changes** pane.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们创建了一个名为`Workbench`的新目录并将其初始化为一个仓库。您也可以按照相同的步骤将一个已有的包含文件的目录转换为仓库，以便Git进行监控。当您这么做时，仓库内的文件将初步出现在**未暂存更改**窗格中。
- en: Time for action – initiation in CLI mode
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在CLI模式下初始化
- en: For those who like to hear the sounds of more keystrokes instead of clicks,
    there's always **command-line interface** (**CLI**) mode.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些喜欢听按键声音而不是点击鼠标的人，总有**命令行界面**（**CLI**）模式可用。
- en: There has been a constant increase in the percentage of people who are quick
    with keyboard's key strokes, giving more priority to performing operations using
    keystrokes instead of mouse clicks wherever possible. This is also a main reason
    why **Gmail** introduced shortcut keys for almost all of its functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用键盘按键的速度越来越快的人比例不断增加，在可能的情况下，更多地优先使用按键而非鼠标点击操作。这也是**Gmail**为几乎所有功能引入快捷键的主要原因之一。
- en: 'To create or initiate the repository using the command-line interface mode
    you need to do the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 若要通过命令行界面模式创建或初始化仓库，您需要执行以下操作：
- en: Open your **shell** (command prompt in Windows or Terminal/Console in Mac/Linux).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的**shell**（Windows中的命令提示符或Mac/Linux中的终端/控制台）。
- en: Go to your `Workbench` directory on your desktop using the `cd`(change directory)
    command.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd`（更改目录）命令前往桌面上的`Workbench`目录。
- en: Once you are inside the `Workbench` directory type `git init` and hit *Enter*
    to complete the initiation process.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入`Workbench`目录，输入`git init`并按*Enter*键完成初始化过程。
- en: You should get a status message from Git saying **Initialized empty Git repository
    in your/path/to/Workbench/directory/goes/here**.![Time for action – initiation
    in CLI mode](img/7522_03_04.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会收到Git的状态信息，显示**已初始化空的Git仓库，在您的/路径/到/Workbench/目录/这里**。![行动时间 – 在CLI模式下初始化](img/7522_03_04.jpg)
- en: Ah! The sound of keystrokes, so good to hear.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 啊！按键的声音，真好听。
- en: '*What just happened?*'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: You have successfully commanded GIT to monitor our `Workbench` directory and
    its contents. `Init` is the operational keyword that initializes the repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功命令Git监视我们的`Workbench`目录及其内容。`Init`是初始化仓库的操作关键字。
- en: Behind the screen
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 屏幕背后
- en: This initiation process will create a directory called `.git` inside our `Workbench`
    directory. This directory is usually made **read-only** and **hidden** by Git
    to safeguard itself from accidental deletion or tampering by users. It's the place
    where Git will hold all the history about your files and changes made to them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个初始化过程将在我们的`Workbench`目录中创建一个名为`.git`的目录。Git通常会将这个目录设置为**只读**且**隐藏**，以防止用户意外删除或篡改它。它是Git存储有关您文件及其更改历史的地方。
- en: So be careful with that directory; deleting it will *wipe out* the entire history
    of your files present in that directory.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以要小心那个目录；删除它将*抹去*该目录下所有文件的历史记录。
- en: Configure Git
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Git
- en: Gear up your Git installation for usage by configuring it properly. There are
    several reasons why you should configure Git before starting to use it, but discussing
    all of them now would be premature, so we shall learn about them as and when the
    necessity occurs. For now, as a bare minimum configuration to get started, we
    will tell our name and e-mail address to Git so that it can log the changes under
    our identity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您的Git安装准备好使用，必须正确配置它。配置Git之前有几个原因，但现在讨论所有这些理由还为时过早，我们将在实际需要时了解它们。对于现在，为了最基本的配置并开始使用，我们将告诉Git我们的名字和电子邮件地址，以便它能够以我们的身份记录更改。
- en: Time for action – configure Git in GUI mode
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在GUI模式下配置Git
- en: 'To convey to Git our name and e-mail address using GUI mode follow these procedures:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过GUI模式向Git传达我们的名字和电子邮件地址，请按照以下步骤操作：
- en: Select **Options** from the **Edit** menu of the screen that you left open after
    the initiation process.![Time for action – configure Git in GUI mode](img/7522_03_05.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从初始化过程后留下的屏幕的**编辑**菜单中选择**选项**。![行动时间 – 在GUI模式下配置Git](img/7522_03_05.jpg)
- en: The configuration screen is divided into two halves.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置屏幕被分为两部分。
- en: Local configuration (left side – particularly our Workbench Repository)
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地配置（左侧 – 特别是我们的Workbench仓库）
- en: Global configuration (right side – applies to all the repositories created using
    this installation)
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局配置（右侧 – 适用于使用此安装创建的所有仓库）
- en: Don't let the big screen with numerous options overwhelm you. Let's focus on
    the top portion alone for now and type our name and e-mail address in both local
    and global configurations as shown in the previous image, and hit the **Save**
    button.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要让大屏幕上众多的选项让你感到不知所措。现在让我们先专注于屏幕的上半部分，按照之前的图示，输入我们的姓名和电子邮件地址在本地和全局配置中，然后点击**保存**按钮。
- en: '*What just happened?*'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: By giving out our username and e-mail address both locally and globally we have
    provided ways for Git to identify and group the changes made to files present
    in any repository.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供我们的用户名和电子邮件地址，无论是本地还是全局，我们已经为Git提供了识别和分组更改文件的方法，这些文件存在于任何仓库中。
- en: Out of flow
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脱离流程
- en: Just in case you closed the screen after the initiation process and were wondering
    how to go about getting to the same screen again, don't worry. There are two ways
    of getting back.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 万一你在初始化过程后关闭了屏幕，想知道如何重新进入相同的屏幕，不用担心。有两种方法可以回到之前的界面。
- en: Open up **Git Gui** where you will see a newly added option called **Open Recent
    Repository**, under which you can find our **Workbench** repository.![Out of flow](img/7522_03_06.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Git Gui**，你会看到一个新添加的选项叫做**Open Recent Repository**，在这里你可以找到我们的**Workbench**仓库。![脱离流程](img/7522_03_06.jpg)
- en: Locate the `Workbench`directory on the desktop and right-click with your mouse
    on the folder. In the menu select **Git GUI here**. Peoplewho want to switch from
    CLI mode to GUI mode can use this option as well.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在桌面上找到`Workbench`目录，并右键点击该文件夹。在菜单中选择**Git GUI here**。需要从命令行模式切换到图形界面模式的人也可以使用此选项。
- en: Time for action – configure Git in CLI mode
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在CLI模式下配置Git
- en: 'To configure Git using CLI you can use the following commands:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用CLI配置Git，你可以使用以下命令：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Time for action – configure Git in CLI mode](img/7522_03_07.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 在CLI模式下配置Git](img/7522_03_07.jpg)'
- en: '*What just happened?*'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: By giving out our username and e-mail address both locally and globally we have
    provided ways for Git to identify and group the changes made to files present
    in any repository.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供我们的用户名和电子邮件地址，无论是本地还是全局，我们已经为Git提供了识别和分组更改文件的方法，这些文件存在于任何仓库中。
- en: '`config` is the operational keyword that needs to be used with `git` to set
    up the configuration of Git. To set a global value we add the `--global` parameter
    with the command, and to set a local value we add the `--local` parameter with
    the command.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`是需要与`git`命令一起使用的操作关键字，用于设置Git的配置。要设置全局值，我们在命令中添加`--global`参数，而要设置本地值，则添加`--local`参数。'
- en: As the name indicates, global configuration is nothing but a global value for
    all repositories created in the system by that system user, whereas local configuration
    is the exact opposite. As you would have guessed by now, the parameters `user.name`
    and `user.email` are used to record the user's name and e-mail address, respectively.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，全局配置仅仅是为系统中由该用户创建的所有仓库提供的全局值，而本地配置则正好相反。正如你现在所猜到的，`user.name`和`user.email`这两个参数分别用来记录用户的姓名和电子邮件地址。
- en: To get a list of configurations set till date you can use the last command,
    which had the `–l` parameter. It lists all the configuration variables for you.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取迄今为止设置的配置列表，你可以使用上一个命令，其中包含`–l`参数。它会列出所有配置变量。
- en: Adding your files to your directory
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的文件添加到你的目录
- en: Now that you have set a perfect base to operate on, let's move one step ahead
    by adding your files to the repository that you have created.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经为操作打下了完美的基础，让我们通过将文件添加到你创建的仓库中迈出一步。
- en: Whoa, wait! What's that term that we often came across earlier – **repository**?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！那个我们之前常常遇到的术语是什么？**仓库**？
- en: Moving forward, we will address a directory/folder that has been pointed to
    Git to monitor as a repository.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍一个目录/文件夹，这个目录已经被Git指示作为仓库来监控。
- en: Yeah, baby, learn Git lingo and impress your date! The process of adding files
    is as simple as copying and pasting or creating your files inside our repository
    and asking Git to watch them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，宝贝，学习Git术语，给你的约会留下深刻印象！添加文件的过程就像复制粘贴，或者在我们的仓库中创建你的文件，并要求Git监控它们。
- en: Time for action – adding files to your directory (GUI and CLI mode)
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 将文件添加到你的目录（GUI和CLI模式）
- en: Let's create a Word document called **content.docx** that contains the text
    "I love working with Git. It's a simple, fast, and superb version control system`"`
    to learn and put in practice the functionalities mentioned at the beginning of
    our chapter (people who are not able to create a `.docx` file can proceed with
    any other document format such as `.odt`, `.txt`, and so on).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 **content.docx** 的 Word 文档，文档中包含文本 "I love working with Git. It's
    a simple, fast, and superb version control system`"`，以便学习和实践我们在本章开头提到的功能（无法创建
    `.docx` 文件的人可以使用任何其他文档格式，如 `.odt`、`.txt` 等）。
- en: '![Time for action – adding files to your directory (GUI and CLI mode)](img/7522_03_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![开始操作 – 将文件添加到你的目录（GUI 和 CLI 模式）](img/7522_03_08.jpg)'
- en: Git will report to you about the files that have been added to our repository
    and will stand by for your instructions to proceed. Now we can go ahead and tell
    Git to monitor these files for changes by performing the steps that we will discuss
    next.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Git 会向你报告已添加到我们仓库中的文件，并等待你的指示继续操作。现在，我们可以继续并告诉 Git 监视这些文件的变化，按照接下来我们将讨论的步骤进行操作。
- en: 'If you are using GUI mode, perform the following steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 GUI 模式，请执行以下步骤：
- en: Click on the **Rescan** button (or press *F5* on your keyboard) present in the
    **Action** pane.![Time for action – adding files to your directory (GUI and CLI
    mode)](img/7522_03_09.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **重新扫描** 按钮（或按键盘上的 *F5* 键）来刷新 **操作** 面板中的内容。![开始操作 – 将文件添加到你的目录（GUI 和 CLI
    模式）](img/7522_03_09.jpg)
- en: Click on the page-like icon next to the filename to push the file to the **Staged
    Changes** pane.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件名旁边像页面一样的图标，将文件推送到 **已暂存更改** 面板。
- en: 'If you are using the CLI mode ,use the following commands:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 CLI 模式，请使用以下命令：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*What just happened?*'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have successfully added our files to the repository.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地将文件添加到仓库中了。
- en: By clicking on the **Rescan** button or typing the `git status` command we ordered
    our slave to list the changes that were made to the repository since its previous
    state. These changes are called unstaged changes, meaning changes that have happened
    since our last confirmed state of the repository.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击 **重新扫描** 按钮或输入 `git status` 命令，我们命令 Git 列出自上次状态以来对仓库所做的更改。这些更改称为未暂存的更改，意味着自上次确认仓库状态以来发生的更改。
- en: These changes have to be confirmed by the user by moving them to the staged
    changes state, which is done by clicking on the file icon next to the filename
    or using the `git add` command.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 用户必须通过将它们移至已暂存更改状态来确认这些更改，可以通过点击文件名旁边的文件图标或使用 `git add` 命令来完成此操作。
- en: Ignore 'em
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忽略它们
- en: 'We just saw ways to put your files under Git''s radar but there are numerous
    situations where one might want to avoid adding certain files into one''s working
    repository. As a live case, after adding some content in the `content.docx` file
    and trying to add your files into the repository as seen in the previous step,
    some might have encountered the situation where Git reports (of course, after
    refreshing the Git GUI or using the `git status` command in CLI) changes made
    in two files, **content.docx** and **~$ontent.docx**, as shown in the following
    screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了一些将文件放入 Git 监视范围的方法，但也有许多情况下，人们可能希望避免将某些文件添加到工作仓库中。作为实际案例，在向 `content.docx`
    文件中添加一些内容，并尝试像前一步骤中一样将文件添加到仓库时，一些人可能遇到 Git 报告（当然，刷新 Git GUI 或在 CLI 中使用 `git status`
    命令之后）显示两个文件 **content.docx** 和 **~$ontent.docx** 的更改，如下图所示：
- en: '![Ignore ''em](img/7522_03_10.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![忽略它们](img/7522_03_10.jpg)'
- en: This happens only if the opened `content.docx` Word document is not closed before
    refreshing or hitting the `git status` command.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在打开的 `content.docx` Word 文档在刷新或执行 `git status` 命令之前没有关闭，才会发生这种情况。
- en: '![Ignore ''em](img/7522_03_11.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![忽略它们](img/7522_03_11.jpg)'
- en: This is because Microsoft's Word application has a habit of saving your current
    workspace at regular intervals (which can be configured) in a temporary file for
    disaster recovery.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 Microsoft 的 Word 应用程序有定期保存当前工作区（可以配置的）到临时文件中的习惯，用于灾难恢复。
- en: It is only because of this mechanism that Word prompts you with a file recovery
    dialog from where you can retrieve your latest changes when a proper save is not
    done before abrupt closure of the document.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为这个机制，当你没有在文档突然关闭之前妥善保存时，Word 会提示你一个文件恢复对话框，从中你可以恢复最近的更改。
- en: '![Ignore ''em](img/7522_03_12.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![忽略它们](img/7522_03_12.jpg)'
- en: Not only Microsoft Word but all smart applications and editors follow such a
    procedure to comfort the end users. These files are automatically deleted once
    the corresponding source file is saved and closed properly. There would be no
    value added in controlling the versions of these temporary files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅是 Microsoft Word，所有智能应用程序和编辑器都会遵循这样的程序，以便让最终用户感到舒适。这些文件会在相应的源文件保存并正确关闭后自动删除。控制这些临时文件的版本没有任何意义。
- en: So while adding files to your repository it is important that you exclude these
    temporary files before proceeding to the committing concept as the reversal would
    be a painful process.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在将文件添加到仓库时，重要的是在进行提交操作之前排除这些临时文件，否则撤销这个操作将是一个痛苦的过程。
- en: This way of adding files to Git holds good for a few files, but when it comes
    to handling several files in the repository, clicking on the icon next to each
    of them or performing a `git add` for each file is going to be a time consuming
    and tiresome activity.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种将文件添加到 Git 的方式适用于少量文件，但当涉及到处理存储库中的多个文件时，每次点击文件旁边的图标或对每个文件执行 `git add` 将是一个耗时且繁琐的操作。
- en: Bulk operations
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 批量操作
- en: 'When you want to move several files from the **Unstaged Changes** area to the
    **Staged Changes** area you can use the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想将多个文件从 **未暂存的更改** 区域移动到 **暂存的更改** 区域时，可以使用以下方法：
- en: '**GUI**: Press *Ctrl* + *I* and select **yes** if there is a prompt about adding
    unknown files instead of clicking at each and every icon next to that file.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GUI**：按 *Ctrl* + *I*，如果有提示要求添加未知文件，选择 **是**，而不是点击每个文件旁边的图标。'
- en: '**CLI**: The command `git add .`is the equivalent of pressing *Ctrl* + *I*
    when using GUI mode. It will stage all your changes at a single shot. The use
    of **wildcard characters** like `*.docx` is also permitted.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CLI**：命令 `git add .` 相当于在使用 GUI 模式时按 *Ctrl* + *I*。它会一次性将所有更改添加到暂存区。**通配符字符**（如
    `*.docx`）的使用也是允许的。'
- en: '[PRE2]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using these options we can eliminate our tiresome process of adding a single
    file at a time, but it defeats the objective of excluding the temporary files
    from being added to the repository. So how do we combine the power of bulk operations
    along with the control to exclude certain files or file types?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些选项，我们可以消除每次添加单个文件的繁琐过程，但这违背了排除临时文件不被添加到仓库的目标。那么，如何将批量操作的强大功能与排除某些文件或文件类型的控制结合起来呢？
- en: .gitignore to the rescue
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .gitignore 来拯救我们
- en: To handle this smartly, Git has a provision. By creating a file called `.gitignore`
    inside the repository and entering the names of files or pattern of the filenames
    we can make Git exclude them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了智能地处理这个问题，Git 提供了一个解决方案。通过在仓库中创建一个名为 `.gitignore` 的文件，并输入文件名或文件名模式，我们可以让 Git
    忽略它们。
- en: Time for action – usage of .gitignore
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻 - 使用 .gitignore
- en: 'Open your text editor and type the following:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文本编辑器并输入以下内容：
- en: '[PRE3]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save the file as `.gitignore` inside our **Workbench** repository, as shown
    in the following screenshot:![Time for action – usage of .gitignore](img/7522_03_13.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为 `.gitignore`，并将其放在我们的 **Workbench** 仓库中，如下图所示：![行动时刻 - 使用 .gitignore](img/7522_03_13.jpg)
- en: Make sure to select the **All Files** option from the **Save as type** listbox
    when you save the file.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存文件时，确保从 **保存类型** 下拉框中选择 **所有文件** 选项。
- en: '*What just happened?*'
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have successfully commanded Git to ignore the temporary file created by the
    Word application. Go ahead and refresh your GUI or get the status from your CLI
    now. The only addition to your `content.docx` file in the **Unstaged Changes**
    area would be the `.gitignore` file and not the temporary file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地指示 Git 忽略 Word 应用程序创建的临时文件。现在，可以刷新你的 GUI 或在 CLI 中获取状态。你在 **未暂存的更改** 区域中唯一看到的添加将是
    `.gitignore` 文件，而不是临时文件。
- en: Every time Git wants to check for new files (untracked changes) present in the
    repository it checks with the `.gitignore` file for exclusions. By observing the
    temporary file's name (`~$ontent.docx`) we can guess that any temporary file created
    by Word is going to start with the special character **~** so we put an entry
    in `.gitignore` to match all files starting with that character. The very entry
    `~*.*` under the `.gitignore` file says to exclude any filename starting with
    the character ~ with any extension.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 每当 Git 想要检查仓库中是否有新的文件（未跟踪的更改）时，它会检查 `.gitignore` 文件以排除文件。通过观察临时文件的名称（`~$ontent.docx`），我们可以猜测，Word
    创建的任何临时文件都会以特殊字符 **~** 开头，因此我们在 `.gitignore` 文件中加入一条规则，匹配所有以该字符开头的文件。`.gitignore`
    文件中的条目 `~*.*` 表示排除任何以字符 ~ 开头的文件，且无论其扩展名是什么。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Though addition of the `.gitignore` file itself is a one-time process, the exclusion
    rules inside the file have to be updated as per the nature and content type of
    the files added in the repository as required.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`.gitignore`文件的添加本身是一次性操作，但该文件中的排除规则必须根据仓库中添加的文件的性质和内容类型进行更新。
- en: Undo addition
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撤销添加
- en: 'At any given point of time before committing, if you want to move a file from
    the **Staged Changes** to the **Unstaged Changes** area you can do the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交之前的任何时刻，如果你想将文件从**暂存区更改**移动到**未暂存区更改**，你可以执行以下操作：
- en: '**GUI**: Click on the tick icon next to that particular filename present in
    the **Staged Changes** pane'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形用户界面（GUI）**：点击位于**暂存区更改**面板中相应文件名旁边的勾选图标'
- en: '**CLI**: Use the following command:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行界面（CLI）**：使用以下命令：'
- en: '[PRE4]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Committing the added files
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交已添加的文件
- en: Until now we have initiated the repository, added our files into the repository,
    and confirmed those changes by staging them (pushing them to the staged changes
    stage) but until they are committed the files are not said to be under version
    control. (This is because only when you commit does Git record the content of
    the files and save it as a new phase of that file/files, so that next time it
    can identify whether the files have any change of content by comparing the existing
    version to the last saved version).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，我们已经初始化了仓库，将文件添加到仓库，并通过暂存它们来确认这些更改（将它们推送到暂存区更改阶段），但在提交之前，这些文件还不算是处于版本控制之下。（这是因为只有在你提交时，Git
    才会记录文件的内容，并将其保存为该文件的一个新阶段，这样下次它就能通过比较现有版本与最后保存的版本来识别文件是否有任何内容更改）。
- en: 'This is a new addition to your Git lingo: This process is called **committing**.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Git 术语中的一个新概念：这个过程叫做**提交**。
- en: So let's make an initial commit of your files. The first time you add a file
    to the repository and make a commit, Git registers the new file. Any further commits
    made to these files inside the same repository will be a commit for the changes
    based on the previous version of the same file available in the repository.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们先进行一次文件的初始提交。当你第一次将文件添加到仓库并进行提交时，Git 会注册这个新文件。之后对这些文件进行的任何提交，都将基于仓库中相同文件的前一个版本进行更改提交。
- en: Though Git follows your orders it has a healthy habit of associating a comment
    at the time of every single commit so that it can learn about your behavior and
    moods with respect to various file types and build an artificially intelligent
    system based on observed patterns to automate your routines.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Git 执行你的命令，它有一个健康的习惯，就是在每次提交时都加上评论，这样它就能根据各种文件类型的行为和情绪建立一个基于观察模式的人工智能系统，从而自动化你的日常操作。
- en: Basically comments that you provide at each commit is just to help yourself
    or any other person reading the history of your repository understand the purpose
    of, and/or changes to, the files.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，你在每次提交时提供的评论仅仅是为了帮助你自己或其他阅读你仓库历史的人理解文件的目的和/或变更。
- en: It's good to make a comment, which can be anything informative. Having learned
    the theory behind it, let's see it in action.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最好写一个评论，内容可以是任何有用的信息。在了解了背后的理论后，我们来看一下实际操作。
- en: Time for action – committing files in GUI mode
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在 GUI 模式下提交文件
- en: Let's type our reason for this commit in the space provided under the **Initial
    Commit Message** label present in the **Action** pane.![Time for action – committing
    files in GUI mode](img/7522_03_14.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在**操作**面板下的**初始提交信息**标签提供的空白处输入本次提交的理由。 ![行动时间 – 在 GUI 模式下提交文件](img/7522_03_14.jpg)
- en: 'Click on the **Commit** button. Once the commit is done Git gives you a status
    message at the bottom of the pattern **status commit ID: your comment for the
    commit**.![Time for action – committing files in GUI mode](img/7522_03_15.jpg)'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击**提交**按钮。提交完成后，Git 会在底部显示状态消息，格式为**状态提交 ID: 你的提交评论**。 ![行动时间 – 在 GUI 模式下提交文件](img/7522_03_15.jpg)'
- en: Commit ID is nothing but a unique identifier for Git to recollect your commit
    in future. We will see the other usages of our comments on the commit and the
    Git commit ID in the oncoming functionalities.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提交 ID 只是一个唯一标识符，Git 用它来在未来回忆起你的提交。我们将在后续功能中看到评论和 Git 提交 ID 的其他用途。
- en: Time for action – committing files in CLI mode
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在 CLI 模式下提交文件
- en: 'Assuming you already have the command prompt opened by doing the steps mentioned
    under initiation process, give Git the following command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经按照初始化过程中的步骤打开了命令提示符，给 Git 输入以下命令：
- en: '[PRE5]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Time for action – committing files in CLI mode](img/7522_03_16.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间——在 CLI 模式下提交文件](img/7522_03_16.jpg)'
- en: If you see a status message similar to the one mentioned previously it's a sign
    of an affirmation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到一个类似之前提到的状态消息，那是确认的标志。
- en: '*What just happened?*'
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: You have successfully committed your files to the repository. Henceforth any
    changes made to these files will be relative.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功将文件提交到仓库。以后对这些文件的任何更改都会是相对的。
- en: Let's see what happens when you change the contents of the file inside the repository.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当你更改仓库中文件的内容时会发生什么。
- en: I suddenly feel that I need to convey how Git impacts my work instead of just
    saying "It's a simple, fast, and superb version control system" in our `content.docx`
    file. So I am replacing this with the text "It increases my productivity manyfold
    when working with files that have frequent content changes."
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我突然觉得我需要传达 Git 如何影响我的工作，而不仅仅是在我们的`content.docx`文件中说“它是一个简单、快速且出色的版本控制系统”。所以我将其替换为文本“在处理频繁更改的文件时，Git
    大大提高了我的工作效率。”
- en: Git tracks the change and indicates it to us when asked about a status update.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Git 会跟踪变化，并在我们询问状态更新时向我们展示。
- en: Time for action – rescan in GUI mode
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在 GUI 模式下重新扫描
- en: If you already have **Git Gui** open then just hit the **Rescan** button to
    get the latest status update from Git. If you don't have the tool opened already,
    I'm assuming you know how to open it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经打开了**Git Gui**，那么只需点击**重新扫描**按钮，就能从 Git 获取最新的状态更新。如果你还没有打开该工具，我想你知道如何打开它。
- en: And you see, it shows the files that have changed from their earlier state in
    the **Unstaged Changes** area.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它显示了在**未暂存的变更**区域中，从早期状态变更的文件。
- en: '![Time for action – rescan in GUI mode](img/7522_03_17.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间——在 GUI 模式下重新扫描](img/7522_03_17.jpg)'
- en: You recently learned how to stage a file's change and how to commit it, so I'll
    leave the rest to you. Just so that you know, my commit message for this commit
    was "Added more text that explains why I use Git."
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学会了如何暂存文件的更改并提交它，所以剩下的交给你了。只是让你知道，我这次提交的消息是“添加了更多解释为什么使用 Git 的文本”。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Content** pane shows the change that you have made in the file. Green
    text indicates addition and red text indicates deletion when compared to the previous
    version of the file. We shall explore more about this in later chapters.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容**面板显示了你在文件中所做的更改。与文件的先前版本相比，绿色文本表示新增，红色文本表示删除。我们将在后续章节中更详细地探讨这一点。'
- en: For CLI lovers, we have been using the `status` command from the time we added
    files to check the status of the repository, and it is no different here. Employ
    the `git status` command to get to know about the changes in your repository.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于命令行爱好者，我们从添加文件开始就一直在使用`status`命令来检查仓库的状态，这里也不例外。使用`git status`命令来了解仓库中的变更。
- en: Checking out
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检出
- en: Well, until now we have been moving forward in versioning our files by giving
    orders to Git with the concepts we learned. Whatever you have learned up to now
    is just a one way process!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，我们一直在通过向 Git 发出命令，使用我们学到的概念来前进版本管理。不管你到目前为止学到的是什么，这只是一个单向的过程！
- en: To make it clearer – *how do you feel about not knowing how to use the undo
    and redo features of your Word application?*
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚——*如果你不知道如何使用 Word 应用程序中的撤销和重做功能，你会有什么感受？*
- en: So let's learn how to travel back in time with respect to content using Git.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们学习如何使用 Git 根据内容回到过去。
- en: Checking out is one of the processes that helps you jump to and fro between
    the changes that you have made in any single file or the entire subset of files
    that you have in your repository at the time you committed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 检出是一个过程，它帮助你在你做出的任何单个文件或仓库中一组文件的更改之间来回切换。
- en: You can go back to a commit that you have made earlier to view the contents
    of a single file or group of files and return to the latest version of the same
    file with the latest changes – all in an instant.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以回到之前做过的提交，查看单个文件或一组文件的内容，并在瞬间返回到该文件的最新版本及其最新变更。
- en: How good is that?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这有多好呢？
- en: There are several things you can do other than just viewing the file in an earlier
    commit, which we will discuss in later chapters under the topic called branching.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 除了查看早期提交中的文件内容外，还有许多其他操作，我们将在后续章节中讨论，主题是分支。
- en: Having learned the theory behind it, let's put it in action.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了背后的理论之后，让我们付诸实践。
- en: Time for action – checking out using GUI mode
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在 GUI 模式下进行检出
- en: Select the **Repository** menu and then the **Visualize All Branch History**
    option in the opened **Git Gui** screen to open **gitk**; you will get a screen
    like the following:![Time for action – checking out using GUI mode](img/7522_03_18.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Repository**菜单，然后在打开的**Git Gui**屏幕中选择**Visualize All Branch History**选项以打开**gitk**；你将看到如下屏幕：![该是行动的时候了——使用
    GUI 模式进行检出](img/7522_03_18.jpg)
- en: Gitk is a powerful graphical repository browser allowing us to perform various
    kinds of operations such as visualizing the repository, tagging, resetting, and
    so on.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Gitk 是一个强大的图形化仓库浏览器，允许我们执行各种操作，如可视化仓库、标签、重置等。
- en: Again, don't worry about the overwhelming information on the screen; we shall
    get there step-by-step.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次提醒，不要担心屏幕上大量的信息；我们将一步步地进行。
- en: For now let's focus on the top-left pane, which shows a pathway in which the
    colored circles indicate the commits you have made; alongside the circles are
    your comments.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们聚焦在左上角的窗格，这里显示了路径，其中彩色圆圈代表你所做的提交；圆圈旁边是你的注释。
- en: And directly beneath it is a field called **SHA1 ID**, which shows you the commit
    ID for the commit that you have selected above. As we discussed earlier we will
    use this commit ID to identify a particular commit to travel back in time.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 紧接其下的是一个名为**SHA1 ID**的字段，它显示了你所选择的提交的提交 ID。如我们之前所讨论的，我们将使用此提交 ID 来标识某个特定的提交，回到过去。
- en: Select our first commit, which says **Initial commit to showcase the commit
    functionality of Git**, to get its commit ID displayed in the **SHA1 ID** field
    and copy the ID (by double-clicking to select the entire line's content and pressing
    *Ctrl* + *C* to copy it).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的第一个提交，内容为**Initial commit to showcase the commit functionality of Git**，即可在**SHA1
    ID**字段中显示其提交 ID，并复制该 ID（通过双击选中整行内容并按*Ctrl* + *C*复制它）。
- en: Switch to **Git Gui** and select **Branch | Checkout** to open the checkout
    operation window (alternatively you can press *Ctrl* + *O*). Paste the SHA1 ID
    that you have copied into the **Revision Expression** textbox and click on the
    **Checkout** button, as shown in the following screenshot:![Time for action –
    checking out using GUI mode](img/7522_03_19.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到**Git Gui**并选择**Branch | Checkout**打开检出操作窗口（或者你可以按*Ctrl* + *O*）。将你复制的 SHA1
    ID 粘贴到**Revision Expression**文本框中，并点击**Checkout**按钮，如下截图所示：![该是行动的时候了——使用 GUI
    模式进行检出](img/7522_03_19.jpg)
- en: Click on the **OK** button on the dialog window that appears (we will discuss
    more about the term detached checkout in later chapters under the branching topic).![Time
    for action – checking out using GUI mode](img/7522_03_20.jpg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击弹出窗口中的**OK**按钮（我们将在后面的章节中讨论“分离检出”一词，属于分支相关内容）。![该是行动的时候了——使用 GUI 模式进行检出](img/7522_03_20.jpg)
- en: '*What just happened?*'
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: You have successfully travelled back in time. If we open our document now, we
    can see the content we had initially created in the document.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功回到了过去。如果现在打开我们的文档，你可以看到我们最初创建的内容。
- en: At any given point of time you can revert to your latest changes by selecting
    **Branch** | **Checkout** | **Localbranch**; ensure **master** is selected, and
    click on the **Checkout** button.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，你都可以通过选择**Branch** | **Checkout** | **Localbranch**来恢复到最新的更改；确保选择了**master**，然后点击**Checkout**按钮。
- en: '![What just happened?](img/7522_03_21.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](img/7522_03_21.jpg)'
- en: As you can see, you have jumped back to your contents with the latest changes.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你已经跳回到了带有最新更改的内容。
- en: Yeah, awesome, isn't it?
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，厉害吧，怎么样？
- en: Time for action – checking out using CLI mode
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 该是行动的时候了——使用 CLI 模式进行检出
- en: Let's learn two more commands to add to your Git lingo.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再学习两个 Git 命令，丰富一下你的 Git 术语。
- en: '[PRE6]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Git log` is for showing the history of a repository; it gives us information
    such as commit ID, author, date, and the commit comment given by us.'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Git log` 用于显示仓库的历史记录；它为我们提供如提交 ID、作者、日期以及我们给出的提交注释等信息。'
- en: We need the commit ID for use later.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要这个提交 ID 以便稍后使用。
- en: '![Time for action – checking out using CLI mode](img/7522_03_22.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![该是行动的时候了——使用 CLI 模式进行检出](img/7522_03_22.jpg)'
- en: Don't worry about memorizing a sequence of 40 characters. Our magic wand, Git,
    does the hard work of filling in the remaining characters for you to identify
    a commit if you supply it with the first five characters.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不用担心记住40个字符的序列。我们的魔法棒 Git 会为你完成剩下的工作，只要你提供前五个字符，它就能帮你识别某个提交。
- en: Let's see it in action.![Time for action – checking out using CLI mode](img/7522_03_23.jpg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看实际操作。![该是行动的时候了——使用 CLI 模式进行检出](img/7522_03_23.jpg)
- en: Now you have travelled back to a previous commit, and your files will contain
    the contents of the previous commit. You can view the contents of the file now.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在你已经回到了先前的提交，文件将包含该提交的内容。你现在可以查看文件的内容。
- en: Note
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you have checked back to a previous commit you are hanging in the air;
    any changes to your files now will be lost once you go back to the master. We'll
    see how to handle this in later chapters with a concept called branching.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你回到先前的提交时，你就处于悬空状态；现在对文件所做的任何更改，一旦回到主分支将会丢失。稍后我们将通过一个叫做分支的概念来处理这种情况。
- en: To return to the latest changes run `git checkout master`; this will bring you
    to the latest changes.![Time for action – checking out using CLI mode](img/7522_03_24.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要返回到最新的更改，运行`git checkout master`；这将带你回到最新的更改。![该行动了——使用CLI模式查看](img/7522_03_24.jpg)
- en: If you see a message similar to the one in the previous screenshot, you have
    returned to your latest changes. Again, you can view the contents of the file.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你看到与前图类似的消息，那么你已经回到了最新的更改。你可以再次查看文件内容。
- en: Resetting
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重置
- en: Unlike the checkout function that we learned previously, resetting is a permanent
    travel back in time with respect to the content. There are three types of resetting.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前学习的checkout功能不同，重置是针对内容的永久回溯。重置有三种类型。
- en: Soft
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软重置
- en: Hard
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬重置
- en: Mixed
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合重置
- en: Our aim of ignoring all the changes made after a particular commit can be achieved
    only by performing a **hard reset**, so we will learn about the hard type alone
    in this chapter.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们忽略所有在特定提交后所做的更改的目标只能通过执行**硬重置**来实现，因此我们将在本章中仅学习硬重置类型。
- en: Time for action – reset using GUI mode
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 该行动了——使用GUI模式重置
- en: Select the **Repository** menu and then the **Visualize All Branch History**
    option on the opened **Git Gui** screen to open Gitk.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**仓库**菜单，然后在打开的**Git Gui**界面中选择**可视化所有分支历史**选项以打开Gitk。
- en: On the top-left panel you can see how your repository history is shaping up.
    Right now it's linear with two commits. Now right-click on the first commit, which
    has the commit message **Initial commit to showcase the commit functionality of
    Git**, and choose the **Reset master branch to here** option, as shown in the
    following screenshot:![Time for action – reset using GUI mode](img/7522_03_25.jpg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左上方的面板中，你可以看到你的仓库历史是如何演变的。目前它是线性的，包含两个提交。现在右键点击第一个提交，该提交信息为**最初提交以展示Git的提交功能**，然后选择**重置主分支至此**选项，如下图所示：![该行动了——使用GUI模式重置](img/7522_03_25.jpg)
- en: You will get a confirmation dialog box with three types of reset options as
    discussed earlier; let's select **Hard** and click on the **OK** button, as shown
    in the following screenshot:![Time for action – reset using GUI mode](img/7522_03_26.jpg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个确认对话框，其中有三种重置选项，如前所述；选择**硬重置**并点击**确定**按钮，如下图所示：![该行动了——使用GUI模式重置](img/7522_03_26.jpg)
- en: Gitk should automatically reload to show you the altered history of our repository.
    If it does not reload by itself we can manually do it by selecting the **File**
    | **Reload** option or pressing *Ctrl* + *F5*.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gitk应会自动重新加载，以显示我们仓库的更改历史。如果它没有自动重新加载，我们可以手动执行，通过选择**文件**|**重新加载**选项或按*Ctrl*
    + *F5*。
- en: Time for action – reset using CLI mode
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 该行动了——使用CLI模式重置
- en: 'Resetting can be done by using the following commands in the CLI mode:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 重置可以通过在CLI模式下使用以下命令来完成：
- en: '[PRE7]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Time for action – reset using CLI mode](img/7522_03_27.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![该行动了——使用CLI模式重置](img/7522_03_27.jpg)'
- en: '`Git log` is used to get to know the commit ID of the particular commit that
    you want to reset and the command `git reset --hard your_commitid` is to convey
    to Git that you want to reset all changes that have happened after the commit
    mentioned by its ID.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`Git log`用于查看特定提交的提交ID，命令`git reset --hard your_commitid`则告诉Git你希望重置自该提交ID之后发生的所有更改。'
- en: '*What just happened?*'
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: Congratulations! We have successfully reset our repository to an earlier state
    permanently. You can verify this by checking the content of your files and logs
    of your repository.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经成功地将仓库永久重置到早期状态。你可以通过检查文件内容和仓库日志来验证这一点。
- en: Git help
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git帮助
- en: 'Git is a continuous learning platform. No matter how good you are with it already,
    the chances are you will learn something new every time you use it because there
    are multiple ways of doing things. Any command you will need to get started with
    Git CLI to perform basic operations always has the following pattern: `git operation_keyword
    parameters and/or values`.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是一个持续学习的平台。无论你已经多么熟练，每次使用时，你都有可能学到新东西，因为总有多种方式可以完成同一件事。你需要用 Git CLI 执行基本操作的任何命令总是遵循以下模式：`git
    operation_keyword 参数和/或值`
- en: When we say that almost all operations are local/offline in Git, we mean it!
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说几乎所有的操作在 Git 中都是本地/离线时，我们是认真的！
- en: 'Git has a built-in help module that can help you whenever you are unsure about
    the usage of a specific command or even the command itself. You can immediately
    refer to the built-in documentation by using the following commands:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Git 内置了帮助模块，可以帮助你在不确定如何使用某个命令或命令本身时查阅相关内容。你可以使用以下命令立即参考内置文档：
- en: '`git help` to get a list of command-line parameters and most commonly used
    operation keywords with description'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git help` 获取命令行参数列表以及最常用的操作关键字和描述'
- en: '`git help operation_keyword` to get a complete reference sheet of that particular
    operation keyword opened in your default browser'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git help operation_keyword` 获取该特定操作关键字的完整参考表，并在你的默认浏览器中打开'
- en: Have a go hero – try out the help module
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄 – 使用帮助模块
- en: Try listing out the commonly used Git commands, pick one command, and try opening
    up the helper page for it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试列出常用的 Git 命令，挑选一个命令，尝试打开它的帮助页面
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We have learned how to do the following in both the GUI and CLI modes:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何在 GUI 和 CLI 模式下做以下操作：
- en: Initiate a repository
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化仓库
- en: Configure Git
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Git
- en: Add files to our repository
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件添加到我们的仓库中
- en: Ignore unwanted files being added to our repository
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略添加到我们仓库中的不需要的文件
- en: Commit the new files/changes in existing files
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交新文件/修改现有文件
- en: Check out to previous commits in case we need to refer old data
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查之前的提交，以防我们需要引用旧数据
- en: Reset the repository to permanently travel back to an earlier recorded state
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置仓库以永久返回到早期记录的状态
- en: Use the built-in help modules
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置帮助模块
- en: 'Very soon you will learn how to do the following and much more:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 很快你将学会如何做以下事情，以及更多内容：
- en: Maintain multiple environments and switch between them as though they are logged
    into multiple user accounts
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护多个环境，并在它们之间切换，就像它们是多个用户账户一样
- en: Continue making changes from a previous commit, thereby maintaining multiple
    routes (technically called branches) from one source
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从先前的提交继续修改，从而保持多个路线（在技术上称为分支）来源一致
