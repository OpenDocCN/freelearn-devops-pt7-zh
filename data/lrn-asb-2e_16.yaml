- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Introducing Ansible AWX and Red Hat Ansible Automation Platform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Ansible AWX 和 Red Hat Ansible Automation Platform
- en: 'This chapter will examine two graphical interfaces for Ansible: the commercial
    **Red Hat Ansible Automation Platform** and the open source **Ansible AWX** –
    or to give it its full name, **Ansible** **Web eXecutable**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨两种 Ansible 的图形化界面：商业版 **Red Hat Ansible Automation Platform** 和开源版 **Ansible
    AWX** —— 或者更完整的名称，**Ansible** **Web eXecutable**。
- en: This chapter will focus on the open source Ansible AWX because it is freely
    available and, outside of the resources required to run the tool, requires no
    upfront costs or contracts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍开源的 Ansible AWX，因为它是免费的，并且除了运行该工具所需的资源外，不需要预付费用或合同。
- en: We will discuss how to install Ansible AWX and why you would want to use it.
    After all, we are 16 chapters into our journey with Ansible and haven’t needed
    to use a graphical interface yet – so why now?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论如何安装 Ansible AWX 以及为什么要使用它。毕竟，我们已经在使用 Ansible 的过程中走了 16 章，还没有需要使用图形界面——那么，为什么现在要用呢？
- en: 'By the end of this chapter, we will have done the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，我们将完成以下任务：
- en: Discussed Red Hat Ansible Automation Platform versus Ansible AWX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了 Red Hat Ansible Automation Platform 与 Ansible AWX 的对比
- en: Installed and configured Ansible AWX
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并配置了 Ansible AWX
- en: Deployed our Microsoft Azure cloud application using Ansible AWX
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible AWX 部署了我们的 Microsoft Azure 云应用
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: While we will only deploy Ansible AWX in this chapter, its requirements are
    complex. Because of this, rather than running it locally, I will provide instructions
    for deploying a Kubernetes cluster in Microsoft Azure using the AKS service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章我们仅部署 Ansible AWX，但它的要求相对复杂。因此，我将提供在 Microsoft Azure 上使用 AKS 服务部署 Kubernetes
    集群的说明，而不是在本地运行。
- en: If you are following along, you will need access to a Microsoft Azure account
    and have the Azure CLI installed. For more information, see [*Chapter 9*](B21620_09.xhtml#_idTextAnchor411),
    *Moving to* *the Cloud*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在跟随本书，你需要拥有 Microsoft Azure 账户并安装 Azure CLI。有关更多信息，请参见 [*第 9 章*](B21620_09.xhtml#_idTextAnchor411)，*迁移到*
    *云端*。
- en: Red Hat Ansible Automation Platform versus AWX
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Red Hat Ansible Automation Platform 与 AWX 的对比
- en: Red Hat Ansible Automation Platform and Ansible AWX are two powerful tools Red
    Hat provides for managing and streamlining your Ansible deployments. Both tools
    offer web-based interfaces that simplify the execution and management of Ansible
    playbooks, making it easier for users to leverage Ansible’s automation capabilities
    without requiring extensive command-line knowledge.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat Ansible Automation Platform 和 Ansible AWX 是 Red Hat 提供的两个强大工具，用于管理和简化
    Ansible 部署。两者都提供了基于 Web 的界面，简化了 Ansible playbook 的执行和管理，使用户能够更容易地利用 Ansible 的自动化功能，而不需要深入的命令行知识。
- en: 'Red Hat Ansible Automation Platform, formerly known as **Ansible Tower**, is
    a comprehensive enterprise-grade solution that goes beyond the capabilities of
    Ansible Tower. It integrates various components to create a cohesive and expansive
    automation environment. Some key features of Red Hat Ansible Automation Platform
    are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat Ansible Automation Platform，前身为 **Ansible Tower**，是一款综合性的企业级解决方案，超越了
    Ansible Tower 的功能。它集成了多种组件，创建了一个紧密结合且广泛扩展的自动化环境。Red Hat Ansible Automation Platform
    的一些关键特性如下：
- en: '**Centralized control**: Red Hat Ansible Automation Platform provides a unified
    web-based dashboard for defining, scheduling, and monitoring automation jobs from
    a central location.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中控制**：Red Hat Ansible Automation Platform 提供了一个统一的基于 Web 的仪表板，用于从一个中心位置定义、调度和监控自动化任务。'
- en: '**Role-based access control** (**RBAC**): With granular access, you can ensure
    that your users have appropriate access to automation resources, enhancing security
    and control.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制**（**RBAC**）：通过精细化的访问控制，确保用户能够访问合适的自动化资源，从而增强安全性和控制性。'
- en: '**Workflow management**: Create complex workflows that combine multiple playbooks,
    job templates, and inventory sources, as well as supporting dependencies, conditionals,
    and approvals.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流管理**：创建复杂的工作流，结合多个 playbook、作业模板和库存源，并支持依赖关系、条件判断和审批流程。'
- en: '**Scalability and flexibility**: Automation can be scaled to meet the needs
    of large enterprises, supporting diverse infrastructures, including cloud platforms,
    containers, and network devices.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和灵活性**：自动化可以根据大型企业的需求进行扩展，支持多样化的基础设施，包括云平台、容器和网络设备。'
- en: '**Content collections**: Access pre-packaged modules and plugins that have
    been expertly curated to expedite the implementation of automation projects.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容集合**：访问经过精心策划的预包装模块和插件，以加速自动化项目的实施。'
- en: '**Automation Hub**: This centralized repository hosts certified, partner-supported,
    and community-driven content. It fosters collaboration and accessibility to high-quality
    resources.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化中心**：这个集中式的资源库托管了经过认证、合作伙伴支持和社区驱动的内容。它促进了合作，并使高质量资源更加易于访问。'
- en: '**Automation analytics**: Utilize sophisticated analytics tools to scrutinize
    performance, utilization, and various KPIs across different clusters and instances.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化分析**：利用复杂的分析工具来审视不同集群和实例的性能、利用率以及各种关键绩效指标（KPI）。'
- en: '**Integration with Red Hat ecosystem**: Seamless integration with other Red
    Hat products such as Red Hat Insights and Red Hat Satellite, fostering a cohesive
    environment.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 Red Hat 生态系统的集成**：与其他 Red Hat 产品（如 Red Hat Insights 和 Red Hat Satellite）无缝集成，促进了一个统一的环境。'
- en: On the other hand, Ansible AWX is the open source upstream project for Red Hat
    Ansible Automation Platform. It provides many of the platform’s core features
    but follows a community-driven development model with more frequent releases.
    While Ansible AWX offers a solid foundation for automation, Red Hat Ansible Automation
    Platform may need some enterprise-specific features and integrations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Ansible AWX 是 Red Hat Ansible 自动化平台的开源上游项目。它提供了该平台的许多核心功能，但遵循社区驱动的开发模型，发布频率较高。虽然
    Ansible AWX 为自动化提供了坚实的基础，但 Red Hat Ansible 自动化平台可能需要一些企业特定的功能和集成。
- en: The choice between Red Hat Ansible Automation Platform and Ansible AWX depends
    on your organization’s needs and requirements. Red Hat Ansible Automation Platform
    is ideal for enterprises seeking a robust, feature-rich solution with commercial
    support and seamless integration with the Red Hat ecosystem. It offers advanced
    features and is designed to handle complex automation needs across diverse environments.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Red Hat Ansible 自动化平台还是 Ansible AWX 取决于你们组织的需求和要求。Red Hat Ansible 自动化平台非常适合寻求稳健、功能丰富且拥有商业支持与无缝集成
    Red Hat 生态系统的企业。它提供了先进的功能，旨在处理跨不同环境的复杂自动化需求。
- en: On the other hand, Ansible AWX is a suitable choice for organizations that prefer
    an open source solution and are comfortable with community-driven support. It
    provides a solid foundation for automation and benefits from more frequent updates
    and community contributions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Ansible AWX 是适合那些偏好开源解决方案并且能够接受社区驱动支持的组织的合适选择。它为自动化提供了坚实的基础，并且得益于更频繁的更新和社区贡献。
- en: Both Red Hat Ansible Automation Platform and Ansible AWX allow organizations
    to automate at scale, reduce manual efforts, and improve the consistency and reliability
    of their IT operations. They provide user-friendly interfaces and enable effective
    team collaboration, increasing efficiency and improved compliance.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat Ansible 自动化平台和 Ansible AWX 都允许组织在大规模上实现自动化，减少手动工作，并提高 IT 运维的一致性和可靠性。它们提供了用户友好的界面，并使团队协作更加高效，提高了效率和合规性。
- en: Ansible AWX
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible AWX
- en: To say that installing Ansible AWX is complicated is an understatement. Since
    Red Hat first open sourced the project, deploying it has always been difficult.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 说安装 Ansible AWX 很复杂，简直是轻描淡写。自从 Red Hat 首次开源该项目以来，部署它一直都非常困难。
- en: Luckily, the first release was containerized, and it has slowly transitioned
    from running in a small number of containers to being able to run in a Kubernetes
    cluster and managed by the AWX Operator.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，第一次发布已经容器化，它从最初在少量容器中运行，逐步过渡到能够在 Kubernetes 集群中运行，并由 AWX Operator 管理。
- en: Information
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: A Kubernetes Operator uses custom resources to automate application and component
    management in Kubernetes clusters. It extends the cluster’s behavior without modifying
    the Kubernetes code itself. Operators can handle various tasks, such as deployment,
    backups, upgrades, and service discovery, reducing manual intervention and increasing
    the system’s reliability.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Operator 使用自定义资源来自动化 Kubernetes 集群中应用程序和组件的管理。它扩展了集群的行为，而无需修改 Kubernetes
    本身的代码。Operator 可以处理各种任务，例如部署、备份、升级和服务发现，从而减少了人工干预，提高了系统的可靠性。
- en: Let’s start by launching our own Kubernetes in Microsoft Azure and configuring
    our local machine so that we can deploy and configure the AWX Operator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在 Microsoft Azure 上启动自己的 Kubernetes 并配置本地机器，这样我们就可以部署并配置 AWX Operator。
- en: Deploying and configuring the Ansible AWX Operator
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署和配置 Ansible AWX Operator
- en: 'The first thing we need to do is deploy the Kubernetes cluster. To do this,
    we will use the Azure CLI to launch an AKS cluster. To start with, we need to
    set some variables on the command line to define the resource names, which Azure
    region we would like the cluster to deploy into, and how many compute nodes we
    require:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是部署 Kubernetes 集群。为此，我们将使用 Azure CLI 启动一个 AKS 集群。首先，我们需要在命令行中设置一些变量，以定义资源名称、选择要部署的
    Azure 区域以及所需的计算节点数量：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next up, let’s create the Azure Resource Group we will be deploying our cluster
    into; this will make it easy to remove once we have finished as we need to delete
    the group and its contents:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建要将集群部署到的 Azure 资源组；这将使我们在完成后更容易删除，因为我们需要删除该资源组及其内容：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the resource group in place, we can now launch the AKS cluster:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源组创建完成后，我们现在可以启动 AKS 集群：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will take around 5 minutes to deploy. If you don’t have the `kubectl`
    command installed on your local machine, then you can run the following command
    to have the Azure CLI install it for you:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将花费大约 5 分钟来部署。如果你没有在本地机器上安装 `kubectl` 命令，你可以运行以下命令，让 Azure CLI 为你安装它：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, with `kubectl` installed, you can configure the credentials and contexts
    by running the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装了 `kubectl` 后，你可以通过运行以下命令配置凭证和上下文：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With our cluster now launched and available, we must install and configure the
    AWX Operator using Helm.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群已经启动并可用，我们必须使用 Helm 安装并配置 AWX Operator。
- en: Information
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: '**Helm** is a package manager that simplifies Kubernetes deployment by packaging
    applications as charts and defining necessary resources and configurations. For
    more details and installation instructions, see [https://helm.sh/](https://helm.sh/).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Helm** 是一个软件包管理器，通过将应用程序打包成 charts 并定义必要的资源和配置，简化了 Kubernetes 部署。更多详细信息和安装说明，请参见
    [https://helm.sh/](https://helm.sh/)。'
- en: 'First, we need to enable the AWX repository and pull it down to our local machine:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要启用 AWX 仓库并将其拉取到本地机器：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we need to deploy the AWX Operator to our cluster:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将 AWX Operator 部署到集群中：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It will take a minute or two to deploy.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 部署过程需要一两分钟时间。
- en: Please note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意
- en: You might have noticed that the preceding command specifies an explicit version
    number because there are some known bugs with the current release, which is a
    major update from the version we are using.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到前面的命令指定了一个明确的版本号，因为当前版本存在一些已知的 bug，而这个版本是我们正在使用的版本的一个重大更新。
- en: 'You can run the following command to check the status of the deployment:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行以下命令来检查部署的状态：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once everything is ready, you should see something like the following screen:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，你应该看到如下屏幕：
- en: '![Figure 16.1 – Deploying the AWX Operator](img/B21620_16_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1 – 部署 AWX Operator](img/B21620_16_01.jpg)'
- en: Figure 16.1 – Deploying the AWX Operator
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – 部署 AWX Operator
- en: 'With the AWX Operator deployed with our cluster, we can request that the operator
    now deploy AWX itself. To do this, run the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 AWX Operator 已在集群中部署，我们可以要求该 Operator 现在部署 AWX 本身。为此，运行以下命令：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This command simply passes the following YAML configuration to the operator
    to instruct it how to deploy our AWX installation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令只是将以下 YAML 配置传递给 Operator，指示它如何部署我们的 AWX 安装：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, there’s not much to it, so please don’t consider this a production-ready
    AWX instance. All we are instructing the AWX Operator to do is deploy AWX and
    expose the service via a load balancer so that we can connect to it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，部署过程并不复杂，因此请不要将其视为一个生产环境下的 AWX 实例。我们只是指示 AWX Operator 部署 AWX 并通过负载均衡器公开服务，以便我们能够连接到它。
- en: Now, we wait; our AWX installation will take 15 to 20 minutes to deploy the
    application and bootstrap itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们等待；我们的 AWX 安装需要 15 到 20 分钟来部署应用程序并进行自引导。
- en: 'You can check the status of the containers and the load balancer service by
    running the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下代码来检查容器和负载均衡器服务的状态：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the basics have been deployed, you should see something like the following.
    These are the containers that service the AWX application. As you can see, there
    are ones for the database, task runner, and the web interface:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦基础设置完成，你应该能看到如下图所示的内容。这些是服务 AWX 应用程序的容器。正如你所看到的，它们分别用于数据库、任务运行器和 web 界面：
- en: '![Figure 16.2 – Checking the status of our AWX deployment](img/B21620_16_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.2 – 检查 AWX 部署状态](img/B21620_16_02.jpg)'
- en: Figure 16.2 – Checking the status of our AWX deployment
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.2 – 检查我们 AWX 部署的状态
- en: 'Once your deployment looks like the preceding output, the final step is to
    grab the admin password. To do this, run the following command – the secret will
    always be named `ansible-awx-admin-password`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的部署显示出与前述相同的输出，最后一步就是获取管理员密码。为此，运行以下命令——该密钥的名称始终为 `ansible-awx-admin-password`：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will grab the base64 encoded secret from the Kubernetes secret store and
    decode it for you – it should look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 Kubernetes 密钥存储中提取 base64 编码的密钥并为你解码——它应该看起来像这样：
- en: '![Figure 16.3 – Grabbing the admin password](img/B21620_16_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.3 – 获取管理员密码](img/B21620_16_03.jpg)'
- en: Figure 16.3 – Grabbing the admin password
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3 – 获取管理员密码
- en: As you may have noticed in the preceding output, there is a `%` icon at the
    end – this is not part of the password, and you need everything before that.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的输出中所见，末尾有一个 `%` 图标——这不是密码的一部分，你只需要前面的内容。
- en: 'Please make a note of the password and the `EXTERNAL-IP` value from the previous
    commands as this tells you where to go to log in and what credentials to use.
    In the preceding deployment (which has long since been terminated), these details
    are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请记录下密码和之前命令中的 `EXTERNAL-IP` 值，这些信息会告诉你在哪里登录以及使用什么凭证。在之前的部署（已经被终止）中，这些信息如下：
- en: '**URL**: http://4.158.66.251/'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL**：http://4.158.66.251/'
- en: '**Username**: admin'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**：admin'
- en: '**Password**: h6VBBzcnDTHiBbl7jZOmA30tpsjka8nF'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：h6VBBzcnDTHiBbl7jZOmA30tpsjka8nF'
- en: 'When you go to the URL, you should be greeted with a login page that looks
    like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 URL 后，你应该会看到一个登录页面，界面如下：
- en: '![Figure 16.4 – Grabbing the admin password](img/B21620_16_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.4 – 获取管理员密码](img/B21620_16_04.jpg)'
- en: Figure 16.4 – Grabbing the admin password
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4 – 获取管理员密码
- en: 'Once you log in, you will be taken to your empty AWX instance:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你将进入空的 AWX 实例：
- en: '![Figure 16.5 – Grabbing the admin password](img/B21620_16_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.5 – 获取管理员密码](img/B21620_16_05.jpg)'
- en: Figure 16.5 – Grabbing the admin password
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.5 – 获取管理员密码
- en: Now, let’s set up our playbook.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置我们的 playbook。
- en: Setting up our playbook
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置我们的 playbook
- en: Before running our playbook, we must import it into Ansible AWX and configure
    the supporting credentials, such as our Azure Service Principle. We’ll start with
    a project.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行我们的 playbook 之前，我们必须将其导入到 Ansible AWX 并配置支持的凭证，如我们的 Azure 服务主体。我们将从一个项目开始。
- en: Adding a new project
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新项目
- en: First, we need to add a new project, where we tell Ansible AWX about the repository
    hosting our playbook. As mentioned previously, we will use a GitHub repository
    that houses the code. To add a new project, click on **Projects** under **Resources**
    in the left menu and then click on the **Add** button.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要添加一个新项目，在这里告诉 Ansible AWX 我们的 playbook 存放的代码仓库。如前所述，我们将使用一个托管代码的 GitHub
    仓库。要添加新项目，点击左侧菜单中的 **资源** 下的 **Projects**，然后点击 **添加** 按钮。
- en: 'Here, you will be asked for several bits of information; enter the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你需要提供几个信息；请填写以下内容：
- en: '`Azure WordPress`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure WordPress`'
- en: '`Deploy WordPress` `in Azure`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`在 Azure 部署 WordPress`'
- en: '`Default`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default`'
- en: '**Execution Environment**: Select **AWX** **EE (latest)**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行环境**：选择 **AWX** **EE（最新）**'
- en: '`GIT`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GIT`'
- en: 'When you select the **Source Control Type** value a second section will appear
    that asks for details about where your source is hosted:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择 **源代码控制类型** 时，将会出现第二部分，询问你的源代码托管位置的详细信息：
- en: '`https://github.com/PacktPublishing/Learn-Ansible-Second-Edition.git`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://github.com/PacktPublishing/Learn-Ansible-Second-Edition.git`'
- en: '**Source Control Branch/Tag/Commit**: Leave blank'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码控制分支/标签/提交**：留空'
- en: '**Source Control Refspec**: Leave blank'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码控制引用规范**：留空'
- en: '**Source Control Credential**: Leave blank'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码控制凭证**：留空'
- en: '`Clean`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Clean`'
- en: 'Once you have entered these details, click **Save**. Now, if you return to
    the **Projects** page, you should see that Ansible has already downloaded the
    source for the playbook:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这些信息后，点击 **保存**。现在，如果你返回 **项目** 页面，你应该会看到 Ansible 已经下载了 playbook 的源代码：
- en: '![Figure 16.6 – Adding the project and downloading the code from GitHub](img/B21620_16_06.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.6 – 添加项目并从 GitHub 下载代码](img/B21620_16_06.jpg)'
- en: Figure 16.6 – Adding the project and downloading the code from GitHub
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.6 – 添加项目并从 GitHub 下载代码
- en: Adding credentials
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加凭证
- en: 'Next, we must tell Ansible AWX the credentials to use when accessing our Azure
    environment; to add these, click **Credentials**. This can also be found under
    the **Resources** section of the left-hand menu. Click **Add** and enter the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须告诉 Ansible AWX 在访问 Azure 环境时使用哪些凭证；为添加这些凭证，点击 **凭证**。此选项也可以在左侧菜单的 **资源**
    部分找到。点击 **添加**，并输入以下内容：
- en: '`Azure`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure`'
- en: '`Credentials` `for Azure`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure 凭证`'
- en: '`Default`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default`'
- en: '**Credential Type**: Select **Microsoft Azure** **Resource Manager**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭证类型**：选择 **Microsoft Azure** **资源管理器**'
- en: 'As before, this will open a separate section; here, you will need to enter
    details of the service principle we created in [*Chapter 15*](B21620_15.xhtml#_idTextAnchor641),
    *Using Ansible with GitHub Actions and* *Azure DevOps*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这将打开一个单独的部分；在此，您需要输入我们在 [*第 15 章*](B21620_15.xhtml#_idTextAnchor641) 中创建的服务主体的详细信息，章节名为
    *使用 Ansible 与 GitHub Actions 和 Azure DevOps*：
- en: '`e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea`'
- en: '**Username**: Leave blank'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名**：留空'
- en: '**Password**: Leave blank'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：留空'
- en: '`appId` value that was returned when you created the service principle; in
    the previous chapter’s example, this was `2616e3df-826d-4d9b-9152-3de141465a69`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务主体时返回的 `appId` 值；在前一章的示例中，这个值是 `2616e3df-826d-4d9b-9152-3de141465a69`
- en: '`password` value that was returned when you created the service principle;
    in the previous chapter’s example, this was `Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务主体时返回的 `password` 值；在前一章的示例中，这个值是 `Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw`
- en: '`tenant` ID; in the example from the previous chapter, this was `c5df827f-a940-4d7c-b313-426cb3c6b1fe`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tenant` ID；在前一章的示例中，这个值是 `c5df827f-a940-4d7c-b313-426cb3c6b1fe`'
- en: 'Once the form has been filled in, click **Save**. Once saved, you will notice
    that the **Client Secret** value is marked as **Encrypted**:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完表单后，点击 **保存**。保存后，您会注意到 **客户端密钥** 值被标记为 **已加密**：
- en: '![Figure 16.7 – Adding our Service Principle to Ansible AWX](img/B21620_16_07.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.7 – 将我们的服务主体添加到 Ansible AWX](img/B21620_16_07.jpg)'
- en: Figure 16.7 – Adding our Service Principle to Ansible AWX
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7 – 将我们的服务主体添加到 Ansible AWX
- en: When you save sensitive information in Ansible AWX, it is encrypted, and you
    only have the option to **Replace** or **Revert** it. At no point can you view
    this information again.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在 Ansible AWX 中保存敏感信息时，它会被加密，您只有 **替换** 或 **还原** 的选项。在任何时候，您都无法再次查看这些信息。
- en: 'Next, we need to create a credential that contains the private portion of the
    SSH key we generated in [*Chapter 15*](B21620_15.xhtml#_idTextAnchor641)*, Using
    Ansible with GitHub Actions and Azure DevOps*. To do this click on **Add** again,
    but this time, enter the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个凭证，包含我们在[*第 15 章*](B21620_15.xhtml#_idTextAnchor641)中生成的 SSH 密钥的私有部分，章节名为
    *使用 Ansible 与 GitHub Actions 和 Azure DevOps*。为此，请再次点击 **添加**，但这次输入以下内容：
- en: '`AzureVM`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AzureVM`'
- en: '`Private SSH Key for` `Azure VMs`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure 虚拟机的私有 SSH 密钥`'
- en: '`Default`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default`'
- en: '**Credential Type**: Select **Machine**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭证类型**：选择 **机器**'
- en: 'In the additional information boxes, enter the following information:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在附加信息框中，输入以下信息：
- en: '`azureadmin`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azureadmin`'
- en: '**Password**: Leave blank'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：留空'
- en: '**SSH Private Key**: Copy and paste the contents of the private key or upload
    the private key file'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSH 私钥**：复制并粘贴私钥的内容，或者上传私钥文件'
- en: '**Remaining options**: Leave blank'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剩余选项**：留空'
- en: 'Once filled in, click **Save**. Once back on the **Credentials** screen, click
    **Add** once more and enter the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完毕后，点击 **保存**。返回到 **凭证** 屏幕后，再次点击 **添加**，并输入以下内容：
- en: '`Ansible Galaxy`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ansible Galaxy`'
- en: '`Ansible Galaxy creds for` `Default org`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`默认组织的 Ansible Galaxy 凭证`'
- en: '`Default`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default`'
- en: '**Credential Type**: Select **Ansible Galaxy/Automation Hub** **API Token**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭证类型**：选择 **Ansible Galaxy/Automation Hub** **API Token**'
- en: 'Then, enter this information:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下信息：
- en: '`https://galaxy.ansible.com`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://galaxy.ansible.com`'
- en: '**Remaining options**: Leave blank'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剩余选项**：留空'
- en: 'Again, click **Save**. Now, it’s time to add our final set of credentials:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击 **保存**。现在，是时候添加我们的最后一组凭证了：
- en: '`WordPress Vault`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WordPress Vault`'
- en: '`Vault Password for` `WordPress secrets`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WordPress 秘密的 Vault 密码`'
- en: '`Default`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Default`'
- en: '**Credential Type**: Select **Vault**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭证类型**：选择 **Vault**'
- en: 'In the **Type Details** section, enter the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **类型详细信息** 部分，输入以下内容：
- en: '`group_vars/common.yml` in the `Chapter16` playbook. Because of that, you must
    enter a password of `wibble` here – if you don’t enter this, the example playbook
    will fail.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Chapter16` 剧本中的 `group_vars/common.yml`。因此，您必须在此输入密码 `wibble` —— 如果不输入该密码，示例剧本将失败。
- en: '**Vault Identifier**: Leave blank.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vault 标识符**：留空。'
- en: That was our final credentials. So, let’s move on to the next configuration
    step.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 那是我们的最后一个凭据。所以，让我们继续进行下一个配置步骤。
- en: Adding an inventory
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加库存
- en: 'Now that we have all our credentials in place, we need to recreate the content
    of the `production` inventory file within Ansible AWX. As a reminder, the inventory
    file we have been using looks like this (minus the comments):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有凭据设置，我们需要在 Ansible AWX 中重新创建 `production` 库存文件的内容。提醒一下，我们一直在使用的库存文件如下所示（注释除外）：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To add the inventory, click on **Inventories**, which is again in the left-hand
    menu. The **Add** button now brings up a drop-down list; we want to select **Add
    inventory** from that list.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加库存，请点击左侧菜单中的**库存**。**添加**按钮现在会弹出一个下拉列表；我们需要从列表中选择**添加库存**。
- en: 'In the form that opens, enter the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的表单中，输入以下内容：
- en: '`Azure Inventory`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure 库存`'
- en: '`Azure Inventory`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Azure 库存`'
- en: '`Default`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`默认`'
- en: '**Instance Groups**: We will add these in a moment'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例组**：我们稍后将添加这些'
- en: '**Labels**: Leave blank'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：保持空白'
- en: '**Variables**: Enter the values listed here:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：输入这里列出的值：'
- en: '[PRE13]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once entered, click **Save**; this will create the inventory. Now, we can add
    the two groups we need. To do this, click **Groups**, which can be found in the
    row on the buttons above the details of the inventory:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，点击**保存**；这将创建库存。现在，我们可以添加我们需要的两个组。为此，点击**组**，可以在库存详细信息上方的按钮行中找到：
- en: '![Figure 16.8 – Adding the inventory to Ansible AWX](img/B21620_16_08.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.8 – 将库存添加到 Ansible AWX](img/B21620_16_08.jpg)'
- en: Figure 16.8 – Adding the inventory to Ansible AWX
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.8 – 将库存添加到 Ansible AWX
- en: 'Click **Add** and enter the following details:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加**并输入以下详细信息：
- en: '`vmgroup`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vmgroup`'
- en: '`vmgroup`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vmgroup`'
- en: '**Variables**: Leave blank'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：保持空白'
- en: 'Then, click **Save**, repeat the process, and add a second group using the
    following details:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**保存**，重复该过程，使用以下详细信息添加第二个组：
- en: '`azure_vms`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azure_vms`'
- en: '`azure_vms`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azure_vms`'
- en: '**Variables**: Leave blank'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：保持空白'
- en: Again, click **Save**; you should now have two groups listed.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**保存**；现在，您应该已经列出了两个组。
- en: Now that we have our project, inventory, and some credentials for accessing
    our Azure environment, we need to add the templates to launch and configure the
    cluster and terminate it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了项目、库存和访问 Azure 环境的一些凭据，我们需要添加启动和配置集群以及终止它的模板。
- en: Adding the templates
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加模板
- en: Let’s look at adding the templates.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何添加模板。
- en: Information
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: We will pass a runtime variable to our playbook, which will contain the public
    part of the SSH key – we added the private portion as a credential earlier in
    this chapter – and will be called `ssh_key_public`. Please ensure you have the
    public key when filling out these details.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的剧本传递一个运行时变量，该变量将包含 SSH 密钥的公钥部分 —— 我们已经在本章前面将私钥部分作为凭据添加 —— 并将被命名为`ssh_key_public`。请确保在填写这些细节时，您已经拥有公钥。
- en: 'Click **Templates** in the left-hand menu and, in the drop-down menu of the
    **Add** button, select **Job Template**. This is the most extensive form we have
    encountered; however, parts will be populated automatically when we fill in the
    details. Let’s make a start:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的**模板**，然后在**添加**按钮的下拉菜单中选择**作业模板**。这是我们遇到的最复杂的表单；然而，当我们填写细节时，部分内容将自动填充。让我们开始吧：
- en: '`Launch WordPress`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`启动 WordPress`'
- en: '`Launch WordPress` `in Azure`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`在 Azure 中启动 WordPress`'
- en: '**Job Type**: Select **Run**'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业类型**：选择**运行**'
- en: '**Inventory**: Select **Azure Inventory**'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库存**：选择**Azure 库存**'
- en: '**Project**: Select **Azure WordPress**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：选择**Azure WordPress**'
- en: '**Execution Environment**: Select **AWX** **EE (latest)**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行环境**：选择**AWX** **EE（最新）**'
- en: '**Playbook**: Choose **Chapter16/site.yml** from the drop-down list'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剧本**：从下拉列表中选择**Chapter16/site.yml**'
- en: '**Credentials**: Select the following:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭据**：选择以下内容：'
- en: '**Machine**: **AzureVM**'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器**：**AzureVM**'
- en: '**Microsoft Azure Resource** **Manager**: **Azure**'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Azure 资源** **管理器**：**Azure**'
- en: '**Vault**: **WordPress Vault**'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保管库**：**WordPress 保管库**'
- en: '`ssh_key_public` variable here; a truncated version of what to enter is shown
    here:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh_key_public`变量在此处；这里显示的是要输入的简化版本：'
- en: '[PRE14]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Remaining options**: Leave blank'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剩余选项**：保持空白'
- en: 'Click **Save**; you will be taken to the overview of the template:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存**；您将被带到模板的概览页面：
- en: '![Figure 16.9 – The completed template](img/B21620_16_09.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.9 – 完整的模板](img/B21620_16_09.jpg)'
- en: Figure 16.9 – The completed template
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.9 – 完整的模板
- en: 'Once added, we need to repeat this process with the following details for the
    Playbook that terminates our deployment:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 添加后，我们需要使用以下详细信息重复该过程，针对终止我们部署的剧本：
- en: '`Terminate WordPress`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`终止 WordPress`'
- en: '`Terminate WordPress` `in Azure`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`终止 WordPress` `在 Azure 中`'
- en: '**Job Type**: Select **Run**'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业类型**: 选择 **运行**'
- en: '**Inventory**: Select **Azure Inventory**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库存**: 选择 **Azure 库存**'
- en: '**Project**: Select **Azure WordPress**'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**: 选择 **Azure WordPress**'
- en: '**Execution Environment**: Select **AWX** **EE (latest)**'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行环境**: 选择 **AWX** **EE（最新）**'
- en: '**Playbook**: Choose **Chapter16/destroy.yml** from the drop-down list'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Playbook**: 从下拉列表中选择 **Chapter16/destroy.yml**'
- en: '**Credentials**: Select the following:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭据**: 选择以下内容：'
- en: '**Microsoft Azure Resource** **Manager**: **Azure**'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Azure 资源** **管理器**: **Azure**'
- en: '**Remaining options**: Leave blank'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剩余选项**: 留空'
- en: Once you’ve filled in these details, click **Save**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完这些细节后，点击 **保存**。
- en: We have everything we need to run our playbooks, so let’s do that.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好运行我们的 playbook，接下来就执行它吧。
- en: Running our playbooks
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行我们的 playbook
- en: 'Back on the **Templates** page, you should see the two templates we have configured
    listed:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 回到 **模板** 页面，你应该能看到我们配置的两个模板：
- en: '![Figure 16.10 – Our two templates](img/B21620_16_10.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.10 – 我们的两个模板](img/B21620_16_10.jpg)'
- en: Figure 16.10 – Our two templates
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.10 – 我们的两个模板
- en: 'To run the playbook from this page, click on the **Rocket** icon on the **Launch
    WordPress** template; this will initiate the playbook run and take you to a job
    page where you will be able to review the status of the playbook job:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要从此页面运行 playbook，请点击 **Launch WordPress** 模板上的 **火箭** 图标；这将启动 playbook 运行，并将你带到一个作业页面，你可以在这里查看
    playbook 作业的状态：
- en: '![Figure 16.11 – Launching WordPress in Azure using Ansible AWX](img/B21620_16_11.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.11 – 使用 Ansible AWX 在 Azure 中启动 WordPress](img/B21620_16_11.jpg)'
- en: Figure 16.11 – Launching WordPress in Azure using Ansible AWX
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.11 – 使用 Ansible AWX 在 Azure 中启动 WordPress
- en: 'If everything has worked as planned, after about 5 minutes, you should get
    confirmation that the playbook has been completed and that your resources have
    been launched:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，大约 5 分钟后，你应该能收到确认，表示 playbook 已完成且资源已启动：
- en: '![Figure 16.12 – Ansible AWX has finished running the playbook](img/B21620_16_12.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.12 – Ansible AWX 已完成运行 playbook](img/B21620_16_12.jpg)'
- en: Figure 16.12 – Ansible AWX has finished running the playbook
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.12 – Ansible AWX 已完成运行 playbook
- en: From here, you can re-run the launch playbook again, and it should pick up the
    newly deployed resources as it did when we re-ran the playbook on our local machine.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以重新运行启动 playbook，它应该会像在本地机器上重新运行时一样，识别到新部署的资源。
- en: Given the number of Azure resources we have launched, before we review the changes
    to the playbook code to run it in Ansible AWX, we should terminate the WordPress
    resources. Click on the **Rocket** icon next to the **Terminate WordPress** template
    to tear down the resources we just launched.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们已经启动的 Azure 资源数量，在我们审查 playbook 代码的更改之前，应该先终止 WordPress 资源。点击 **Terminate
    WordPress** 模板旁边的 **火箭** 图标，销毁我们刚刚启动的资源。
- en: Terminating the Kubernetes cluster
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终止 Kubernetes 集群
- en: 'Before terminating the Azure AKS resources, I recommend clicking around and
    exploring the Ansible AWX interface. Once you’ve finished, you can remove the
    Azure resources and tidy up your local configuration by running the following
    commands:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在终止 Azure AKS 资源之前，我建议你先点击并探索一下 Ansible AWX 界面。完成后，你可以删除 Azure 资源，并通过运行以下命令清理本地配置：
- en: '[PRE15]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The cluster will take about 5 minutes to remove. To be safe, please don’t close
    any windows until it has finished.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 集群将需要大约 5 分钟时间来移除。为了安全起见，请在完成之前不要关闭任何窗口。
- en: Information
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: As always, please double-check that your cloud resources have been terminated
    – you don’t want to incur any unexpected costs.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，请再次确认你的云资源已经终止 – 你不希望产生任何意外费用。
- en: Now that we’ve terminated all the cost-incurring resources, let’s discuss some
    of the considerations we had to make in our Playbook.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经终止了所有可能产生费用的资源，让我们来讨论一下在 Playbook 中需要考虑的一些事项。
- en: Playbook considerations
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Playbook 注意事项
- en: While we touched very lightly on some of the changes that we had to make to
    our playbook so that it runs on Ansible AWX, let’s do a deeper dive now.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经轻轻触及了一些需要对 playbook 进行更改的地方，以便它能在 Ansible AWX 中运行，现在让我们深入探讨一下。
- en: Changes to the existing playbook
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对现有 playbook 的更改
- en: As we were running the code locally, to keep the playbook simple, we created
    a file called `secrets.yml` and loaded the variables from there. Now that we are
    running Ansible in a shared environment, we should treat our Ansible execution
    environment as if it were ephemeral, meaning that we cannot rely on this approach.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本地运行代码时，为了保持 playbook 简单，我们创建了一个名为 `secrets.yml` 的文件，并从中加载变量。现在我们在共享环境中运行
    Ansible，我们应该将 Ansible 执行环境视为临时性的，这意味着我们不能依赖这种方法。
- en: 'I used Ansible Vault to encrypt the passwords and ship them within the code
    to get around this. To do this, I ran the following commands:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 Ansible Vault 对密码进行了加密，并将其随代码一起传输以解决这个问题。为此，我运行了以下命令：
- en: '[PRE16]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When prompted to enter the Vault password, I entered `wibble` as the password,
    which we then set the Vault password in Ansible AWX when adding credentials. You
    can see the results of the preceding command in the `group_vars/common.yml` file.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在被提示输入 Vault 密码时，我输入了 `wibble` 作为密码，然后我们在 Ansible AWX 中添加凭据时设置了 Vault 密码。你可以在
    `group_vars/common.yml` 文件中查看前面命令的结果。
- en: 'Going back to the playbook code when we ran the playbook from our local machine
    in [*Chapter 9*](B21620_09.xhtml#_idTextAnchor411), *Moving to the Cloud*, the
    variable that contains the data for the public SSH key looked like this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们从本地机器运行 playbook 时的代码，在 [*第 9 章*](B21620_09.xhtml#_idTextAnchor411)，*迁移到云端*，包含公钥数据的变量看起来像这样：
- en: '[PRE17]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, we populate the `vm_config.key.data` variable by reading in
    the contents of the `~/.ssh/id_rsa.pub` file. However, when we moved our playbook
    to Ansible AWX, this file no longer exists.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们通过读取 `~/.ssh/id_rsa.pub` 文件的内容来填充 `vm_config.key.data` 变量。然而，当我们将
    playbook 移到 Ansible AWX 时，这个文件不再存在。
- en: 'Because of that, we added the `ssh_key_public` variable, which contains the
    public portion of the private key we uploaded when adding the machine credential
    when we configured the template. This launches the resources in Azure. This meant
    the code needed to be updated to the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们添加了 `ssh_key_public` 变量，其中包含我们在添加机器凭证时上传的私钥的公钥部分，这样就可以在 Azure 上启动资源。这意味着代码需要更新为如下所示：
- en: '[PRE18]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As far as changes go, there’s nothing too dramatic and hopefully not unexpected.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 就变更而言，没有什么太戏剧性的内容，希望也不是什么出乎意料的事情。
- en: Ansible Galaxy collections
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible Galaxy 集合
- en: You may not have noticed, but we didn’t have to consider the modules that interact
    with Azure, one of the initial things we covered in [*Chapter 9*](B21620_09.xhtml#_idTextAnchor411),
    *Moving to* *the Cloud*.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能没有注意到，但我们不需要考虑与 Azure 交互的模块，这是我们在 [*第 9 章*](B21620_09.xhtml#_idTextAnchor411)，*迁移到云端*
    中讨论的初步内容之一。
- en: Ansible AWX does not support these and other collections of modules we need
    for our playbook to run out of the box, so how did our playbook work without giving
    an error?
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 不支持这些以及其他我们需要的模块集合，无法让我们的 playbook 直接运行，那么我们的 playbook 是如何在没有报错的情况下工作的呢？
- en: When we first added the project, we configured it to use the GitHub repository
    that supports this book and contains all the code we have discussed so far. This
    repository can be found at [https://github.com/packtPublishing/Learn-Ansible-Second-Edition/](https://github.com/packtPublishing/Learn-Ansible-Second-Edition/).
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次添加项目时，我们配置它使用支持本书的 GitHub 仓库，里面包含了我们到目前为止讨论的所有代码。该仓库可以在 [https://github.com/packtPublishing/Learn-Ansible-Second-Edition/](https://github.com/packtPublishing/Learn-Ansible-Second-Edition/)
    找到。
- en: We only instructed Ansible AWX to use the `site.yml` and `destory.yml` files
    from the `Chapter16` folder, but in the background, Ansible AWX also used the
    `requirements.yml` file, which can be found in the `collections` folder in the
    repository’s root.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是指示 Ansible AWX 使用 `Chapter16` 文件夹中的 `site.yml` 和 `destory.yml` 文件，但在后台，Ansible
    AWX 还使用了 `requirements.yml` 文件，该文件位于仓库根目录中的 `collections` 文件夹中。
- en: 'This file contains the following code:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含以下代码：
- en: '[PRE19]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, this is letting Ansible AWX know that it needs to download the
    `azure.azcollection`, `community.general` and `community.mysql` collections from
    Ansible Galaxy and, in the background, install their prerequisites.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这让 Ansible AWX 知道它需要从 Ansible Galaxy 下载 `azure.azcollection`、`community.general`
    和 `community.mysql` 集合，并在后台安装它们的先决条件。
- en: The only thing we needed to do to get this to work was to create the Ansible
    Galaxy credential and attach it to our default organization. This means that whenever
    Ansible AWX comes across a `collections/requirements.yml` file, it will authenticate
    against Ansible Galaxy using the credentials provided, which in our case were
    anonymous as we weren’t pulling a private collection.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所需要做的就是创建 Ansible Galaxy 凭证，并将其附加到我们的默认组织上。这意味着每当 Ansible AWX 遇到一个 `collections/requirements.yml`
    文件时，它将使用提供的凭证向 Ansible Galaxy 进行身份验证，在我们的情况下，由于我们没有拉取私有集合，所以使用的是匿名凭证。
- en: 'We can also do things such as pin collections to a particular version or add
    a role:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以做一些事情，比如将集合固定在特定版本上，或者添加角色：
- en: '[PRE20]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can also provide different URLs if you are self-hosting an installation
    of Ansible Galaxy or even provide links to Git repos containing your roles and
    collections.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是自托管 Ansible Galaxy 的安装版本，或者甚至提供包含角色和集合的 Git 仓库链接，你也可以提供不同的 URL。
- en: This means that Ansible AWX can be as flexible as running Ansible from your
    local machine.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，Ansible AWX 可以像从本地机器运行 Ansible 一样灵活。
- en: Before we finish discussing Ansible AWX, let’s look at the pros and cons of
    running it.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论完 Ansible AWX 之前，让我们看看运行它的优缺点。
- en: Ansible AWX’s advantages and disadvantages
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible AWX 的优缺点
- en: I am sure you will agree from our time with Ansible AWX that it looks like a
    great tool. However, there are some advantages and disadvantages to running it.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你会同意，基于我们在 Ansible AWX 上的使用经验，它看起来是一个很棒的工具。然而，运行它也有一些优点和缺点。
- en: Open source
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开源
- en: Ansible AWX is an open source project, which means it is freely available for
    anyone to use, modify, and contribute to. This can significantly reduce costs
    compared to proprietary solutions. However, it has limited Enterprise features.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 是一个开源项目，这意味着任何人都可以免费使用、修改和贡献。这与专有解决方案相比，可以显著降低成本。然而，它的企业级功能较为有限。
- en: Ansible AWX offers a good range of features. Still, some advanced enterprise-specific
    capabilities in Red Hat Ansible Automation Platform, such as advanced reporting,
    **service-level agreement** (**SLA**) management, and more comprehensive integrations,
    may be needed.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 提供了广泛的功能，然而，一些 Red Hat Ansible Automation Platform 中的高级企业特定功能，如高级报告、**服务级别协议**（**SLA**）管理，以及更全面的集成，可能是必需的。
- en: Community-driven development
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 社区驱动的开发
- en: Being open source, Ansible AWX has a strong community of developers and users
    actively contributing to its development, providing support, and sharing best
    practices.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开源项目，Ansible AWX 拥有一个强大的开发者和用户社区，积极地为其开发做出贡献，提供支持并分享最佳实践。
- en: However, as an open source project, Ansible AWX relies on community support
    rather than official commercial support. The community is generally active and
    helpful, but there are no guaranteed response times or even that someone will
    be able to help outside of the commercial Red Hat Ansible Automation Platform
    offering.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，作为一个开源项目，Ansible AWX 依赖于社区支持，而非官方商业支持。社区通常很活跃且乐于助人，但没有保证的响应时间，甚至无法确保有人能够在
    Red Hat Ansible Automation Platform 的商业支持之外提供帮助。
- en: Frequent updates and improvements
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 频繁的更新和改进
- en: Ansible AWX follows a more frequent release cycle than Red Hat Automation Platform.
    This means that you can gain access to new features, bug fixes, and improvements
    more quickly.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 的发布周期比 Red Hat Automation Platform 更频繁。这意味着你可以更快地获得新功能、bug 修复和改进。
- en: Ansible AWX’s frequent release cycle means you may need to update more often
    to access the latest features and bug fixes. Upgrading Ansible AWX can require
    more effort to ensure compatibility and stability, especially in production environments.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 的频繁发布周期意味着你可能需要更频繁地更新，以访问最新的功能和 bug 修复。升级 Ansible AWX 可能需要更多的工作来确保兼容性和稳定性，尤其是在生产环境中。
- en: Updates and Ansible AWX have always been challenging; they have always been
    more of a migration than an in-place update.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 更新和 Ansible AWX 一直是一个挑战；它们通常更像是迁移而非就地更新。
- en: Using our quick deployment of Ansible AWX as an example, we would need a way
    to upgrade it. We would have to deploy an external database server outside of
    our Kubernetes cluster for a more production-like environment – this would contain
    and persist all our data and configuration.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们快速部署 Ansible AWX 为例，我们需要一种方法来升级它。我们必须在 Kubernetes 集群外部部署一个外部数据库服务器，以创建一个更接近生产环境的环境——这个数据库服务器将存储并持久化我们所有的数据和配置。
- en: To *update* Ansible AWX, we would need to tear down all of the resources in
    the cluster (minus the database), update the AWX Operator, and then redeploy Ansible
    AWX running the latest version – this would then connect to our external database
    and run all of the necessary database migration scripts to update our schema and
    data to make it compatible with the new version.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 要*更新* Ansible AWX，我们需要销毁集群中的所有资源（数据库除外），更新 AWX Operator，然后重新部署运行最新版本的 Ansible
    AWX —— 这将连接到我们的外部数据库，并运行所有必要的数据库迁移脚本，以更新我们的架构和数据，使其与新版本兼容。
- en: Solid foundation
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扎实的基础
- en: Ansible AWX provides robust features for managing and executing Ansible playbooks,
    making it a solid choice for organizations starting their automation journey or
    having more straightforward automation requirements.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 提供了强大的功能，用于管理和执行 Ansible Playbook，使其成为那些开始自动化之旅或有更简单自动化需求的组织的稳固选择。
- en: Flexibility and customization
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 灵活性与定制化
- en: While Ansible AWX integrates with various tools and systems, it may have a different
    level of out-of-the-box integrations and certified content than Red Hat Automation
    Platform, which is designed to work seamlessly with other Red Hat products and
    has a broader ecosystem of supported integrations.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Ansible AWX 可以与各种工具和系统集成，但它可能与 Red Hat 自动化平台相比，具有不同程度的即插即用集成和认证内容。Red Hat
    自动化平台旨在与其他 Red Hat 产品无缝协作，并且支持更广泛的集成生态系统。
- en: Ansible AWX may also have limitations when managing large-scale deployments
    or complex enterprise environments. Additional setup, configuration, and resources
    may be required to handle high-volume automation tasks effectively.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible AWX 在管理大规模部署或复杂企业环境时也可能存在限制。可能需要额外的设置、配置和资源来有效地处理高流量的自动化任务。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explored Ansible AWX and touched upon Red Hat Automation Platform,
    two powerful graphical interfaces for managing and streamlining Ansible deployments.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Ansible AWX，并简要提到了 Red Hat 自动化平台，这两个强大的图形界面用于管理和简化 Ansible 部署。
- en: We learned about their differences, the benefits they offer, and how to install
    and configure Ansible AWX on a Kubernetes cluster in Microsoft Azure. We successfully
    ran our playbook to launch and terminate WordPress running in Azure using Ansible
    AWX by setting up a project, credentials, inventory, and templates.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了它们的不同之处、所提供的优势，以及如何在 Microsoft Azure 上的 Kubernetes 集群中安装和配置 Ansible AWX。我们成功地运行了
    Playbook，通过设置项目、凭证、库存和模板，使用 Ansible AWX 启动和终止在 Azure 上运行的 WordPress。
- en: Throughout the process, we discovered the necessary playbook considerations
    and modifications, such as using Ansible Vault for sensitive information, handling
    SSH keys, and leveraging Ansible Galaxy collections.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们发现了必要的 Playbook 考虑事项和修改，例如使用 Ansible Vault 保护敏感信息、处理 SSH 密钥，并利用 Ansible
    Galaxy 集合。
- en: While Ansible AWX offers numerous advantages, including its open source nature,
    community-driven development, and solid foundation, it is essential to be aware
    of its potential limitations in enterprise environments and the challenges associated
    with updating the platform.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Ansible AWX 提供了许多优点，包括其开源特性、社区驱动开发和扎实的基础，但在企业环境中仍然需要意识到其潜在的限制，以及与平台更新相关的挑战。
- en: The only thing we didn’t discuss was the costs of running the commercially supported
    enterprise-grade Red Hat Automation Platform. Red Hat does not publicly publish
    them on its website. You must contact one of its partners or Red Hat directly
    for details.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一我们没有讨论的是运行商业支持的企业级 Red Hat 自动化平台的成本。Red Hat 并未在其官网公开发布这些费用。你需要联系其合作伙伴或直接联系
    Red Hat 获取详情。
- en: In our next and final chapter, we will look at some of the ways you can integrate
    Ansible into your daily workflows, debug your playbooks as they run, and some
    real-world examples of how I have used Ansible.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章，也是最后一章中，我们将探讨如何将 Ansible 集成到日常工作流程中，如何在运行时调试 Playbook，以及我如何在实际应用中使用
    Ansible 的一些例子。
- en: Further reading
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多本章中涉及的主题，请查看以下资源：
- en: '**Ansible AWX** **Project**: [https://github.com/ansible/awx](https://github.com/ansible/awx)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible AWX** **项目**：[https://github.com/ansible/awx](https://github.com/ansible/awx)'
- en: '**Ansible AWX** **Operator**: [https://github.com/ansible/awx-operator](https://github.com/ansible/awx-operator)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible AWX** **Operator**：[https://github.com/ansible/awx-operator](https://github.com/ansible/awx-operator)'
- en: '**Ansible AWX** **documentation**: [https://ansible.readthedocs.io/projects/awx/en/latest/](https://ansible.readthedocs.io/projects/awx/en/latest/)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible AWX** **文档**: [https://ansible.readthedocs.io/projects/awx/en/latest/](https://ansible.readthedocs.io/projects/awx/en/latest/)'
- en: '**Red Hat Ansible Automation** **Platform**: [https://www.redhat.com/en/technologies/management/ansible](https://www.redhat.com/en/technologies/management/ansible)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**红帽 Ansible 自动化** **平台**: [https://www.redhat.com/en/technologies/management/ansible](https://www.redhat.com/en/technologies/management/ansible)'
