- en: Chapter 4. Programming Workflows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：编程工作流
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论：
- en: Writing a workflow condition
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写工作流条件
- en: Writing a workflow validator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写工作流验证器
- en: Writing a workflow post function
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写工作流后置功能
- en: Editing an active workflow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑活动中的工作流
- en: Making issue editable/non-editable based on workflow status
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据工作流状态使问题可编辑/不可编辑
- en: Including/excluding resolutions for specific transitions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括/排除特定转换的解析
- en: Permissions based on workflow status
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于工作流状态的权限
- en: Internationalization in workflow transitions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流转换中的国际化
- en: Getting available workflow actions programmatically
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序化地获取可用的工作流操作
- en: Programmatically progressing on workflows
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序化地推进工作流
- en: Getting workflow history from database
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库获取工作流历史
- en: Re-ordering workflow actions in JIRA
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JIRA 中重新排序工作流操作
- en: Creating common transitions in workflows
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作流中创建公共转换
- en: Jelly escalation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jelly 升级
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Workflows are one standout feature which help users to transform JIRA into
    a user-friendly system. It helps users to define a lifecycle for the issues, depending
    on the issue type, the purpose for which they are using JIRA, and so on. As the
    Atlassian documentation says at [http://confluence.atlassian.com/display/JIRA/Configuring+Workflow](http://confluence.atlassian.com/display/JIRA/Configuring+Workflow):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流是一个突出的功能，它帮助用户将 JIRA 转变为一个更易用的系统。它帮助用户根据问题类型、使用 JIRA 的目的等来定义问题的生命周期。正如 Atlassian
    文档中所说的，见 [http://confluence.atlassian.com/display/JIRA/Configuring+Workflow](http://confluence.atlassian.com/display/JIRA/Configuring+Workflow)：
- en: A JIRA workflow is the set of steps and transitions an issue goes through during
    its lifecycle. Workflows typically represent business processes.
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: JIRA 工作流是一个问题在其生命周期中经历的步骤和转换的集合。工作流通常代表业务流程。
- en: JIRA uses Opensymphony's OSWorkflow which is highly configurable, and more importantly
    pluggable, to cater for the various requirements. JIRA uses three different plugin
    modules to add extra functionalities into its workflow, which we will see in detail
    through this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 使用 Opensymphony 的 OSWorkflow，这是一个高度可配置且更重要的是可插拔的工具，能够满足各种需求。JIRA 使用三个不同的插件模块来向工作流添加额外功能，我们将在本章中详细讨论。
- en: To make things easier, JIRA ships with a default workflow. We can't modify the
    default workflow, but can copy it into a new workflow and amend it to suit our
    needs. Before we go into the development aspect of a workflow, it makes sense
    to understand the various components of a workflow.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，JIRA 提供了一个默认的工作流。我们不能修改默认工作流，但可以将其复制到新的工作流中并进行修改以满足我们的需求。在深入开发工作流之前，理解工作流的各种组件是有意义的。
- en: The two most important components of a JIRA workflow are **Step** and **Transition**.
    At any point of time, an **Issue** will be in a step. Each step in the workflow
    is linked to a workflow Status ([http://confluence.atlassian.com/display/JIRA/Defining+%27Status%27+Field+Values](http://confluence.atlassian.com/display/JIRA/Defining+%27Status%27+Field+Values))
    and it is this status that you will see on the issue at every stage. A transition,
    on the other hand, is a link between two steps. It allows the user to move an
    issue from one step to another (which essentially moves the issue from one status
    to another).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 工作流中最重要的两个组件是**步骤**和**转换**。在任何时候，**问题**都将处于某个步骤中。工作流中的每个步骤都与工作流状态（[http://confluence.atlassian.com/display/JIRA/Defining+%27Status%27+Field+Values](http://confluence.atlassian.com/display/JIRA/Defining+%27Status%27+Field+Values)）相关联，这个状态你将在每个阶段看到的问题上显示。另一方面，转换是两个步骤之间的链接。它允许用户将问题从一个步骤移动到另一个步骤（本质上将问题从一个状态移动到另一个状态）。
- en: 'Few key points to remember or understand about a workflow:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于工作流需要记住或理解的几点关键事项：
- en: An issue can exist in only one step at any point in time
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个问题在任何时候只能存在于一个步骤中
- en: A status can be mapped to only one step in the workflow
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个状态只能映射到工作流中的一个步骤
- en: A transition is always one-way. So if you need to go back to the previous step,
    you need a different transition
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换总是单向的。因此，如果需要返回到上一步，则需要一个不同的转换
- en: A transition can optionally specify a screen to be presented to the user with
    the right fields on it
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换可以选择指定一个屏幕，向用户展示正确的字段
- en: 'OSWorkflow, and hence JIRA, provides us with the option of adding various elements
    into a workflow transition which can be summarized as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: OSWorkflow，因此 JIRA，提供了将各种元素添加到工作流转换中的选项，简要总结如下：
- en: '**Conditions**: A set of conditions that need to be satisfied before the user
    can actually see the workflow action (transition) on the issue'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件**：一组在用户能够在问题上实际看到工作流操作（转换）之前需要满足的条件。'
- en: '**Validators**: A set of validators which can be used to validate the user
    input before moving to the destination step'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证器**：一组验证器，用于在执行目标步骤之前验证用户输入。'
- en: '**Post Functions**: A set of actions which will be performed after the issue
    is successfully moved to the destination step'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后置功能**：一组在问题成功移动到目标步骤后执行的操作。'
- en: These three elements give us the flexibility of handling the various use cases
    when an issue is moved from one status to another. JIRA ships with a few built-in
    conditions, validators, and post functions. There are plugins out there which
    also provide a wide variety of useful workflow elements. And if you still don't
    find the one you are looking for, JIRA lets us write them as plugins. We will
    see how to do it in the various recipes in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个元素赋予我们在问题从一个状态迁移到另一个状态时处理各种用例的灵活性。JIRA 提供了几个内置的条件、验证器和后置功能。也有许多插件提供了各种有用的工作流元素。如果你仍然找不到你需要的，JIRA
    允许我们将其作为插件编写。我们将在本章中的多个实例中看到如何做到这一点。
- en: Hopefully, that gives you a fair idea about the various workflow elements. A
    lot more on JIRA workflows can be found in the JIRA documentation at [http://confluence.atlassian.com/display/JIRA/Configuring+Workflow](http://confluence.atlassian.com/display/JIRA/Configuring+Workflow),
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能让你对各种工作流元素有一个大致的了解。有关 JIRA 工作流的更多内容，可以在 JIRA 文档中找到，网址是 [http://confluence.atlassian.com/display/JIRA/Configuring+Workflow](http://confluence.atlassian.com/display/JIRA/Configuring+Workflow)。
- en: Writing a workflow condition
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写工作流条件
- en: What are workflow conditions? They determine whether a workflow action is available
    or not. Considering the importance of a workflow in installations and how there
    is a need to restrict the actions either to a set of people, roles, and so on,
    or based on some criteria (for example, the field is not empty!), writing workflow
    conditions is inevitable.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是工作流条件？它们决定了一个工作流操作是否可用。考虑到工作流在安装中的重要性以及需要根据某些标准（例如，字段不能为空！）或将操作限制为特定人员、角色等的需求，编写工作流条件是不可避免的。
- en: Workflow conditions are created with the help of the `workflow-condition` module.
    The following are the key attributes and elements supported. See [http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Conditions](http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Conditions)
    for more details.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流条件是通过 `workflow-condition` 模块创建的。以下是支持的关键属性和元素。有关更多详细信息，请参见 [http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Conditions](http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Conditions)。
- en: '**Attributes**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**：'
- en: '| Name | Description |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Name | 描述 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `key` | This should be unique within the plugin. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `key` | 该值在插件中应该是唯一的。 |'
- en: '| `class` | Class to provide contexts for rendered velocity templates. Must
    implement the `com.atlassian.jira.plugin.workflow.WorkflowPluginConditionFactory`
    interface. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `class` | 提供渲染的 Velocity 模板上下文的类。必须实现 `com.atlassian.jira.plugin.workflow.WorkflowPluginConditionFactory`
    接口。 |'
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `i18n-name-key` | 插件模块的可本地化名称的键。 |'
- en: '| `name` | Human-readable name of the workflow condition. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 工作流条件的可读名称。 |'
- en: '**Elements**:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**：'
- en: '| Name | Description |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Name | 描述 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `description` | Description of the workflow condition. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 工作流条件的描述。 |'
- en: '| `condition-class` | Class to determine whether the user can see the workflow
    transition. Must implement `com.opensymphony.workflow.Condition`. Recommended
    to extend the `com.atlassian.jira.workflow.condition.AbstractJiraCondition` class.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `condition-class` | 用于确定用户是否能看到工作流转换的类。必须实现 `com.opensymphony.workflow.Condition`。推荐继承
    `com.atlassian.jira.workflow.condition.AbstractJiraCondition` 类。 |'
- en: '| `resource type="velocity"` | Velocity templates for the workflow condition
    views. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `resource type="velocity"` | 工作流条件视图的 Velocity 模板。 |'
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As usual, create a skeleton plugin. Create an eclipse project using the skeleton
    plugin and we are good to go!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，创建一个骨架插件。使用骨架插件创建一个 Eclipse 项目，我们就可以开始了！
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In this recipe, let''s assume we are going to develop a workflow condition
    that limits a transition only to the users belonging to a specific project role.
    The following are the steps to write our condition:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，假设我们要开发一个工作流条件，只允许属于特定项目角色的用户执行某个过渡。以下是编写条件的步骤：
- en: Define the inputs needed to configure the workflow condition.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置工作流条件所需的输入项。
- en: We need to implement the `WorkflowPluginFactory` interface, which mainly exists
    to provide velocity parameters to the templates. It will be used to extract the
    input parameters that are used in defining the condition. To make it clear, the
    inputs here are not the inputs while performing the workflow action, but the inputs
    in defining the condition.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要实现`WorkflowPluginFactory`接口，该接口主要用于向模板提供速度参数。它将用于提取定义条件时所需的输入参数。为了明确，这里的输入项不是执行工作流操作时的输入，而是定义条件时的输入。
- en: The condition factory class, `RoleConditionFactory` in this case, extends the
    `AbstractWorkflowPluginFactory`, which implements the `WorkflowPluginFactory`
    interface. There are three abstract methods that we should implement, that is,
    `getVelocityParamsForInput`, `getVelocityParamsForEdit`, and `getVelocityParamsForView`.
    All of them, as the name suggests, are used for populating the velocity parameters
    for the different scenarios.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 条件工厂类，在此案例中为`RoleConditionFactory`，继承自`AbstractWorkflowPluginFactory`，并实现了`WorkflowPluginFactory`接口。我们需要实现三个抽象方法，分别是`getVelocityParamsForInput`、`getVelocityParamsForEdit`和`getVelocityParamsForView`。顾名思义，它们用于填充不同场景下的速度参数。
- en: 'In our example, we need to limit the workflow action to a certain project role,
    and so we need to select the project role while defining the condition. The three
    methods will be implemented as follows:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们需要将工作流操作限制为特定项目角色，因此在定义条件时，我们需要选择项目角色。以下是三种方法的实现：
- en: '[PRE0]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s look at the methods in detail:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们详细看看这些方法：
- en: '`getVelocityParamsForInput`: This method defines the velocity parameters for
    input scenario, that is, when the user initially configures the workflow. In our
    example, we need to display all the project roles so that the user can select
    one to define the condition. The method `getProjectRoles` merely returns all the
    project roles and the collection of roles is then put into the velocity parameters
    with the key `ROLES`.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForInput`：此方法定义了输入场景的速度参数，即用户初次配置工作流时的参数。在我们的示例中，我们需要展示所有项目角色，以便用户可以选择一个来定义条件。方法`getProjectRoles`仅返回所有项目角色，然后将角色集合以`ROLES`键放入速度参数中。'
- en: '`getVelocityParamsForView`: This method defines the velocity parameters for
    the view scenario, that is, how the user sees the condition after it is configured.
    In our example, we have defined a role and so we should display it to the user
    after retrieving it back from the workflow descriptor. If you have noticed, the
    descriptor, which is an instance of `AbstractDescriptor`, is available as an argument
    in the method. All we need is to extract the role from the descriptor, which can
    be done as follows:'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForView`：此方法定义了视图场景的速度参数，即用户在配置后如何查看条件。在我们的示例中，我们定义了一个角色，因此在从工作流描述符中提取后，我们应该将其展示给用户。如果你注意到，描述符是`AbstractDescriptor`的一个实例，并作为方法的参数提供。我们只需从描述符中提取角色，方法如下所示：'
- en: '[PRE1]'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Just check if the descriptor is a condition descriptor or not, and then extract
    the role as shown in the preceding snippet.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只需检查描述符是否为条件描述符，然后按前面的代码片段提取角色。
- en: '`getVelocityParamsForEdit`: This method defines the velocity parameters for
    the edit scenario, that is, when the user modifies the existing condition. Here
    we need both the options and the selected value. Hence, we put both the project
    roles collection and the selected role on to the velocity parameters.'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForEdit`：此方法定义了编辑场景的速度参数，即用户修改现有条件时的参数。在这里，我们需要选项和已选值。因此，我们将项目角色集合和选中的角色都放入速度参数中。'
- en: 'The second step is to define the velocity templates for each of the three aforementioned
    scenarios: **input**, **view**, and **edit**. We can use the same template here
    for input and edit with a simple check to keep the old role selected for the edit
    scenario. Let us look at the templates:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是为上述三种场景（**输入**、**视图**和**编辑**）定义速度模板。我们可以在这里为输入和编辑场景使用相同的模板，并通过简单的检查保持旧角色在编辑场景中的选中状态。让我们看看这些模板：
- en: '`edit-roleCondition.vm`: Displays all project roles and highlights the already-selected
    one in the edit mode. In the input mode, the same template is reused, but the
    selected role will be null and hence a null check is done:'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit-roleCondition.vm`：显示所有项目角色，并在编辑模式中突出显示已选中的角色。在输入模式中，使用相同的模板，但所选角色将为null，因此需要进行null检查：'
- en: '[PRE2]'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`view-roleCondition.vm`: Displays the selected role:'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view-roleCondition.vm`：显示所选的角色：'
- en: '[PRE3]'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The third step is to write the actual condition. The condition class should
    extend the `AbstractJiraCondition` class. Here we need to implement the `passesCondition`
    method. In our case, we retrieve the project from the issue, check if the user
    has the appropriate project role, and return true if the user does:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步是编写实际的条件。条件类应扩展`AbstractJiraCondition`类。在这里，我们需要实现`passesCondition`方法。在我们的例子中，我们从议题中检索项目，检查用户是否具有适当的项目角色，如果用户有，返回true：
- en: '[PRE4]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The issue on which the condition is checked can be retrieved using the `getIssue`
    method implemented in the `AbstractJiraCondition` class. Similarly, the user can
    be retrieved using the `getCaller` method. In the preceding method, `projectRoleManager`
    is injected in the constructor, as we have seen before.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用在`AbstractJiraCondition`类中实现的`getIssue`方法来获取检查条件的议题。同样，可以使用`getCaller`方法来获取用户。在前面的这个方法中，`projectRoleManager`是在构造函数中注入的，正如我们之前所见。
- en: 'We can see that the `ROLE` key is used to retrieve the project role ID from
    the `args` parameter in the `passesCondition` method. In order for the `ROLE`
    key to be available in the `args` map, we need to override the `getDescriptorParams`
    method in the condition factory class, `RoleConditionFactory` in this case. The
    `getDescriptorParams` method returns a map of sanitized parameters, which will
    be passed into workflow plugin instances from the values in an array form submitted
    by velocity, given a set of `name:value` parameters from the plugin configuration
    page (that is, the ''input-parameters'' velocity template). In our case, the method
    is overridden as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以看到，`ROLE`键被用来从`args`参数中检索项目角色ID，在`passesCondition`方法中使用。为了使`ROLE`键能够在`args`映射中使用，我们需要在条件工厂类中重写`getDescriptorParams`方法，在这个例子中是`RoleConditionFactory`类。`getDescriptorParams`方法返回一个已清理的参数映射，这些参数将通过velocity提交的数组形式的值传递给工作流插件实例，该数组包含插件配置页面中的一组`name:value`参数（即“input-parameters”velocity模板）。在我们的案例中，该方法被重写如下：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The method here builds a map of the `key:value` pair, where key is `ROLE` and
    the value is the role value entered in the input configuration page. The `extractSingleParam`
    method is implemented in the `AbstractWorkflowPluginFactory` class. The `extractMultipleParams`
    method can be used if there is more than one parameter to be extracted!
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的方法构建了一个`key:value`对的映射，其中key是`ROLE`，值是输入配置页面中输入的角色值。`extractSingleParam`方法在`AbstractWorkflowPluginFactory`类中实现。如果有多个参数需要提取，可以使用`extractMultipleParams`方法！
- en: 'All that is left now is to populate the `atlassian-plugin.xml` file with the
    aforementioned components. We use the `workflow-condition` module and it looks
    like the following block of code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在只剩下将上述组件填充到`atlassian-plugin.xml`文件中。我们使用`workflow-condition`模块，代码块如下：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Package the plugin and deploy it!
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署！
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'After the plugin is deployed, we need to modify the workflow to include the
    condition. The following screenshot is how the condition looks when it is added
    initially. This, as you now know, is rendered using the input template:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署后，我们需要修改工作流以包含该条件。以下截图展示了最初添加条件时的样子。正如你现在所知道的，这是使用输入模板呈现的：
- en: '![How it works...](img/1803-04-01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/1803-04-01.jpg)'
- en: 'After the condition is added (that is, after selecting the **Developers** role),
    the view is rendered using the view template and looks as shown in the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 条件添加后（即选择了**开发人员**角色后），视图将使用视图模板渲染，如下图所示：
- en: '![How it works...](img/1803-04-02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/1803-04-02.jpg)'
- en: 'If you try to edit it, the screen will be rendered using the edit template,
    as shown in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试编辑它，屏幕将使用编辑模板渲染，如下图所示：
- en: '![How it works...](img/1803-04-03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![How it works...](img/1803-04-03.jpg)'
- en: Note that the **Developers** role is already selected.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**开发人员**角色已经被选择。
- en: After the workflow is configured, when the user goes to an issue, he/she will
    be presented with the transition only if he/she is a member of the project role
    where the issue belongs. It is while viewing the issue that the `passesCondition`
    method in the `condition` class is executed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作流配置完成后，当用户访问某个问题时，只有在该用户是问题所属项目角色的成员时，才会显示过渡操作。在查看问题时，`condition`类中的`passesCondition`方法将被执行。
- en: See also
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Creating a skeleton plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process"), *Plugin Development Process*'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章 插件开发过程")中*创建骨架插件*，*插件开发过程*。
- en: '*Deploying your plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章 插件开发过程")中*部署你的插件*
- en: Writing a workflow validator
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写工作流验证器
- en: Workflow validators are specific validators that check whether some pre-defined
    constraints are satisfied or not while progressing on a workflow. The constraints
    are configured in the workflow and the user will get an error if some of them
    are not satisfied. A typical example would be to check if a particular field is
    present or not before the issue is moved to a different status.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流验证器是特定的验证器，用于检查在工作流过程中是否满足某些预定义的约束条件。这些约束在工作流中进行配置，如果未满足某些条件，用户将收到错误提示。一个典型的例子是在问题被移至不同状态之前，检查某个特定字段是否存在。
- en: Workflow validators are created with the help of the `workflow- validator` module.
    The following are the key attributes and elements supported.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流验证器是通过`workflow-validator`模块创建的。以下是支持的关键属性和元素。
- en: '**Attributes**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**：'
- en: '| Name | Description |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `key` | This should be unique within the plugin. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `key` | 该值应在插件内唯一。 |'
- en: '| `class` | Class to provide contexts for rendered velocity templates. Must
    implement the `com.atlassian.jira.plugin.workflow.WorkflowPluginValidatorFactory`
    interface. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `class` | 提供渲染的Velocity模板上下文的类。必须实现`com.atlassian.jira.plugin.workflow.WorkflowPluginValidatorFactory`接口。
    |'
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `i18n-name-key` | 插件模块的可本地化名称的键。 |'
- en: '| `name` | Human-readable name of the workflow validator. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 工作流验证器的可读名称。 |'
- en: '**Elements**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**：'
- en: '| Name | Description |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `description` | Description of the workflow validator. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 工作流验证器的描述。 |'
- en: '| `validator-class` | Class which does the validation. Must implement `com.opensymphony.workflow.Validator`.
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `validator-class` | 执行验证的类。必须实现`com.opensymphony.workflow.Validator`接口。 |'
- en: '| `resource type="velocity"` | Velocity templates for the workflow validator
    views. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `resource type="velocity"` | 用于工作流验证器视图的Velocity模板。 |'
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See [http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Validators](http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Validators)
    for more details.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Validators](http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Validators)了解更多详细信息。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As usual, create a skeleton plugin. Create an eclipse project using the skeleton
    plugin and we are good to go!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，创建一个骨架插件。使用骨架插件创建一个eclipse项目，然后我们就可以开始了！
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us consider writing a validator that checks whether a particular field
    has a value entered on the issue or not! We can do this using the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要编写一个验证器，检查问题上是否已填写某个特定字段！我们可以通过以下步骤来完成：
- en: 'Define the inputs needed to configure the workflow validator:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置工作流验证器所需的输入：
- en: We need to implement the `WorkflowPluginValidatorFactory` interface, which mainly
    exists to provide velocity parameters to the templates. It will be used to extract
    the input parameters that are used in defining the validator. To make it clear,
    the inputs here are not the input while performing the workflow action, but the
    inputs in defining the validator.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要实现`WorkflowPluginValidatorFactory`接口，主要是为了向模板提供Velocity参数。它将用于提取定义验证器时使用的输入参数。为了明确一点，这里的输入并不是执行工作流操作时的输入，而是定义验证器时的输入。
- en: The validator factory class, `FieldValidatorFactory` in this case, extends the
    `AbstractWorkflowPluginFactory` interface and implements the `WorkflowPluginValidatorFactory`
    interface. Just like conditions, there are three abstract methods that we should
    implement. They are `getVelocityParamsForInput`, `getVelocityParamsForEdit`, and
    `getVelocityParamsForView`. All of them, as the names suggest, are used for populating
    the velocity parameters in different scenarios.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证器工厂类，在此案例中是`FieldValidatorFactory`，扩展了`AbstractWorkflowPluginFactory`接口，并实现了`WorkflowPluginValidatorFactory`接口。与条件类似，这里有三个我们需要实现的抽象方法。它们分别是`getVelocityParamsForInput`、`getVelocityParamsForEdit`和`getVelocityParamsForView`。正如名称所示，它们用于在不同场景中填充速度参数。
- en: 'In our example, we have a single input field, which is the name of a custom
    field. The three methods will be implemented as follows:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们有一个单独的输入字段，即自定义字段的名称。这三个方法将如下实现：
- en: '[PRE7]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You may have noticed that the methods look quite similar to the ones in a workflow
    condition, except for the business logic! Let us look at the methods in detail:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能已经注意到，这些方法与工作流条件中的方法非常相似，除了业务逻辑不同！让我们详细看看这些方法：
- en: '`getVelocityParamsForInput`: This method defines the velocity parameters for
    input scenario, that is, when the user initially configures the workflow. In our
    example, we need to display all the custom fields, so that the user can select
    one to use in the validator. The method `getCFFields` returns all the custom fields
    and the collection of fields is then put into the velocity parameters with the
    key fields.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForInput`：此方法定义了输入场景的速度参数，也就是用户初次配置工作流时的场景。在我们的示例中，我们需要显示所有的自定义字段，以便用户选择一个用于验证器。方法`getCFFields`返回所有自定义字段，然后将字段集合放入速度参数中，键为fields。'
- en: '`getVelocityParamsForView`: This method defines the velocity parameters for
    the view scenario, that is, how the user sees the validator after it is configured.
    In our example, we have defined a field and so we should display it to the user
    after retrieving it back from the workflow descriptor. You may have noticed that
    the descriptor, which is an instance of `AbstractDescriptor`, is available as
    an argument in the method. All we need is to extract the field name from the descriptor,
    which can be done as follows:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForView`：此方法定义了查看场景的速度参数，也就是用户在配置验证器后看到的内容。在我们的示例中，我们已经定义了一个字段，因此我们应该在从工作流描述符中检索回来后将其展示给用户。你可能已经注意到，描述符`AbstractDescriptor`的实例作为方法中的参数提供。我们需要做的就是从描述符中提取字段名称，方法如下：'
- en: '[PRE8]'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Just check if the descriptor is a validator descriptor or not and then extract
    the field as shown in the preceding snippet.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只需检查描述符是否是验证器描述符，然后像前面示例所示提取字段即可。
- en: '`getVelocityParamsForEdit`: This method defines the velocity parameters for
    the edit scenario, that is, when the user modifies the existing validator. Here
    we need both the options and the selected value. Hence we put both the custom
    fields'' collection and the field name onto the velocity parameters.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForEdit`：此方法定义了编辑场景的速度参数，也就是当用户修改现有验证器时的场景。这里我们需要既有选项，也有选中的值。因此，我们将自定义字段的集合和字段名称都放入速度参数中。'
- en: 'The second step is to define the velocity templates for each of the three aforementioned
    scenarios, namely, input, view, and edit. We can use the same template here for
    input and edit with a simple checking to keep the old field selected for the edit
    scenario. Let us look at the template:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是为上述三个场景定义速度模板，分别是输入、查看和编辑。我们可以在这里对输入和编辑使用相同的模板，只需进行简单检查，以确保在编辑场景中保持选中的旧字段。让我们来看一下这个模板：
- en: '`edit-fieldValidator.vm`: Displays all custom fields and highlights the already
    selected one in edit mode. In input mode, the field variable will be null, and
    so nothing is pre-selected:'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit-fieldValidator.vm`：在编辑模式下显示所有自定义字段，并高亮显示已选中的字段。在输入模式下，字段变量为null，因此没有任何字段被预选中：'
- en: '[PRE9]'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`view-fieldValidator.vm`: Displays the selected field:'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view-fieldValidator.vm`：显示选中的字段：'
- en: '[PRE10]'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The third step is to write the actual validator. The validator class should
    implement the `Validator` interface. All we need here is to implement the `validate`
    method. In our example, we retrieve the custom field value from the issue and
    throw an `InvalidInputException` if the value is null (empty):'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步是编写实际的验证器。验证器类应该实现`Validator`接口。我们需要做的就是实现`validate`方法。在我们的示例中，我们从问题中获取自定义字段的值，如果该值为null（空），则抛出`InvalidInputException`：
- en: '[PRE11]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The issue on which the validation is done can be retrieved from the `transientVars`
    map. `customFieldManager` is injected in the constructor as usual.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行验证的议题可以从`transientVars`映射中获取。`customFieldManager`像往常一样在构造函数中注入。
- en: 'All that is left now is to populate the `atlassian-plugin.xml` file with these
    components. We use the `workflow-validator` module, and it looks like the following
    block of code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在只需将这些组件填充到 `atlassian-plugin.xml` 文件中即可。我们使用 `workflow-validator` 模块，代码块如下所示：
- en: '[PRE12]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Package the plugin and deploy it!
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署它！
- en: Note that we have stored the role name instead of the ID in the workflow, unlike
    what we did in the workflow condition. However, it is safe to use the ID because
    administrators can rename the roles, which would then need changes in the workflows.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在工作流中存储的是角色名称，而不是角色 ID，这与我们在工作流条件中所做的不同。然而，使用 ID 是安全的，因为管理员可以重命名角色，这样就需要在工作流中进行相应的更改。
- en: How it works...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After the plugin is deployed, we need to modify the workflow to include the
    validator. The following screenshot is how the validator looks when it is added
    initially. This, as you now know, is rendered using the input template:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署后，我们需要修改工作流以包含验证器。以下截图展示了验证器初次添加时的样子。正如你现在所知道的，这通过输入模板渲染：
- en: '![How it works...](img/1803-04-04.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-04.jpg)'
- en: 'After the validator is added (after selecting the **Test Number** field), it
    is rendered using the view template and looks as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加验证器后（选择了**测试编号**字段后），它将通过视图模板进行渲染，显示如下：
- en: '![How it works...](img/1803-04-05.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-05.jpg)'
- en: 'If you try to edit it, the screen will be rendered using the edit template,
    as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试编辑它，屏幕将使用编辑模板进行渲染，正如以下截图所示：
- en: '![How it works...](img/1803-04-06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-06.jpg)'
- en: Note that the **Test Number** field is already selected.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**测试编号**字段已被选中。
- en: After the workflow is configured, when the user goes to an issue and tries to
    progress it, the validator will check if the **Test Number** field has a value
    or not. It is at this point that the `validate` method in the `FieldValidator`
    class is executed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完工作流后，当用户进入议题并尝试推进时，验证器将检查**测试编号**字段是否有值。正是在这个时候，`FieldValidator` 类中的 `validate`
    方法被执行。
- en: 'If the value is missing, you will see an error, as shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值缺失，你将看到一个错误，正如以下截图所示：
- en: '![How it works...](img/1803-04-07.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-07.jpg)'
- en: See also
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Creating a skeleton plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 1 章](ch01.html "第 1 章 插件开发过程")中*创建骨架插件*。
- en: '*Deploying your plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第 1 章](ch01.html "第 1 章 插件开发过程")中*部署你的插件*。
- en: Writing a workflow post function
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写工作流后置功能
- en: Let us now look at workflow post functions. Workflow post functions are very
    effective and heavily used. They allow you to do a lot of things when you progress
    on the workflow on an issue. A lot of customizations and workarounds take this
    route!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下工作流后置功能。工作流后置功能非常有效且广泛使用。它们允许你在处理议题的工作流时执行很多操作。许多自定义和解决方法都是通过这条路径实现的！
- en: Workflow post functions are created with the help of the `workflow-function`
    module. The following are the key attributes and elements supported.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流后置功能是通过 `workflow-function` 模块创建的。以下是支持的关键属性和元素。
- en: '**Attributes**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**：'
- en: '| Name | Description |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `key` | This should be unique within the plugin. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `key` | 这在插件中应该是唯一的。 |'
- en: '| `Class` | Class to provide contexts for rendered velocity templates. Must
    implement the `com.atlassian.jira.plugin.workflow.WorkflowNoInputPluginFactory`
    interface if the function doesn''t need input, or `com.atlassian.jira.plugin.workflow.WorkflowPluginFunctionFactory`
    if it needs input. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `Class` | 提供渲染 velocity 模板上下文的类。如果功能不需要输入，则必须实现 `com.atlassian.jira.plugin.workflow.WorkflowNoInputPluginFactory`
    接口；如果需要输入，则必须实现 `com.atlassian.jira.plugin.workflow.WorkflowPluginFunctionFactory`
    接口。 |'
- en: '| `i18n-name-key` | The localization key for the human-readable name of the
    plugin module. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `i18n-name-key` | 插件模块的本地化名称键。 |'
- en: '| `name` | Human-readable name of the workflow function. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 工作流功能的可读名称。 |'
- en: '**Elements**:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**：'
- en: '| Name | Description |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `description` | Description of the workflow function. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `description` | 工作流功能的描述。 |'
- en: '| `function-class` | Class which does the validation. Must implement `com.opensymphony.workflow.FunctionProvider`.
    Recommended to extend `com.atlassian.jira.workflow.function.issue.AbstractJiraFunctionProvider`,
    as it already implements many useful methods. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `function-class` | 执行验证的类。必须实现`com.opensymphony.workflow.FunctionProvider`。推荐扩展`com.atlassian.jira.workflow.function.issue.AbstractJiraFunctionProvider`，因为它已经实现了许多有用的方法。
    |'
- en: '| `resource type="velocity"` | Velocity templates for the workflow function
    views. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `resource type="velocity"` | 工作流功能视图的Velocity模板。 |'
- en: 'There are three other elements that can be used with a post function. They
    are explained as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 还有三个其他元素可以与后置功能一起使用。它们的说明如下：
- en: '`orderable` – (true/false) Specifies if this function can be re-ordered within
    the list of functions associated with a transition. The position within the list
    determines when the function actually executes.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderable` – （true/false）指定该功能是否可以在与转换关联的功能列表中重新排序。列表中的位置决定了功能的执行顺序。'
- en: '`unique` – (true/false) Specifies if this function is unique, that is, if it
    is possible to add multiple instances of this post function on a single transition.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique` – （true/false）指定该功能是否唯一，即是否可以在单个转换中添加多个该后置功能实例。'
- en: '`deletable` – (true/false) Specifies if this function can be removed from a
    transition.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deletable` – （true/false）指定该功能是否可以从转换中删除。'
- en: Note
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See [http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Functions](http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Functions)
    for more details.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看[http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Functions](http://confluence.atlassian.com/display/JIRADEV/Workflow+Plugin+Modules#WorkflowPluginModules-Functions)以获取更多详细信息。
- en: Getting ready
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As usual, create a skeleton plugin. Create an eclipse project using the skeleton
    plugin and we are good to go!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，创建一个骨架插件。使用骨架插件创建一个Eclipse项目，我们就可以开始了！
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Assume we have a user custom field and we want to set the current user or a
    specified user name on to the custom field when a particular transition happens.
    A typical use case for this will be to store the name of the user who last resolved
    an issue. The following are the steps to write a generic post function that sets
    the current username or a username provided by the user on a user custom field:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个用户自定义字段，并且我们希望在特定的转换发生时，将当前用户或指定的用户名设置到该自定义字段中。一个典型的应用场景是存储最后解决问题的用户的姓名。以下是编写一个通用后置功能的步骤，该功能会将当前用户名或用户提供的用户名设置到用户自定义字段中：
- en: 'Define the inputs needed to configure the workflow post function:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置工作流后置功能所需的输入：
- en: As opposed to workflow conditions and validators, there are two interfaces available
    for a workflow post function factory class. If there are no inputs needed to configure
    the function, the factory class must implement `WorkflowNoInputPluginFactory`.
    An example will be to set the current user's name as the custom field value instead
    of the user configured name. If inputs are needed to configure the post function,
    the factory class must implement `WorkflowPluginFunctionFactory`. In our example,
    we take the username as the input.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与工作流条件和验证器不同，工作流后置功能工厂类有两个可用的接口。如果该功能不需要任何输入进行配置，则工厂类必须实现`WorkflowNoInputPluginFactory`。一个例子是将当前用户的姓名设置为自定义字段的值，而不是用户配置的姓名。如果需要输入来配置后置功能，则工厂类必须实现`WorkflowPluginFunctionFactory`。在我们的示例中，我们将用户名作为输入。
- en: Both the interfaces mainly exist to provide velocity parameters to the templates.
    They will be used to extract the input parameters that are used in defining the
    functions. To make it clear, the inputs here are not the input while performing
    the workflow action, but the inputs in defining the post function.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个接口主要用于为模板提供Velocity参数。它们将用于提取定义功能时使用的输入参数。为了明确，输入这里指的不是执行工作流操作时的输入，而是定义后置功能时的输入。
- en: 'The function factory class, `SetUserCFFunctionFactory` in this case, extends
    the `AbstractWorkflowPluginFactory` and implements the `WorkflowPluginFunctionFactory`
    interface. Just like conditions, there are three abstract methods that we should
    implement, namely, `getVelocityParamsForInput`, `getVelocityParamsForEdit`, and
    `getVelocityParamsForView`. All of them, as the names suggest, are used for populating
    the velocity parameters for the different scenarios:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 函数工厂类，`SetUserCFFunctionFactory`在此情况下，扩展了`AbstractWorkflowPluginFactory`并实现了`WorkflowPluginFunctionFactory`接口。与条件一样，我们需要实现三个抽象方法，分别是`getVelocityParamsForInput`、`getVelocityParamsForEdit`和`getVelocityParamsForView`。如同名字所示，它们用于为不同场景填充速度参数：
- en: '[PRE13]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You may have noticed that the methods look very similar to the ones in workflow
    conditions or validators, except for the business logic! Let us look at the methods
    in detail:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能已经注意到，这些方法看起来与工作流条件或验证器中的方法非常相似，除了业务逻辑之外！让我们详细看看这些方法：
- en: '`getVelocityParamsForInput` : This method defines the velocity parameters for
    input scenario, that is, when the user initially configures the workflow. In our
    example, we need to use a text field that captures the username to be added on
    the issue.'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForInput`：此方法定义了输入场景下的速度参数，即当用户首次配置工作流时。在我们的示例中，我们需要使用一个文本字段来捕获需要添加到问题中的用户名。'
- en: '`getVelocityParamsForView`: This method defines the velocity parameters for
    the view scenario, that is, how the user sees the post function after it is configured.
    In our example, we have defined a field, and so we should display it to the user
    after retrieving it from the workflow descriptor. You may have noticed that the
    descriptor, which is an instance of `AbstractDescriptor`, is available as an argument
    in the method. All we need is to extract the username from the descriptor, which
    can be done as follows:'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForView`：此方法定义了视图场景下的速度参数，即在配置后用户如何查看后置函数。在我们的示例中，我们定义了一个字段，因此在从工作流描述符中检索到该字段后，我们应将其显示给用户。你可能已经注意到，描述符是`AbstractDescriptor`的一个实例，它作为方法中的一个参数提供。我们只需要从描述符中提取用户名，代码如下所示：'
- en: '[PRE14]'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Just check if the descriptor is a validator descriptor or not, and then extract
    the field as shown in the preceding snippet.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只需要检查描述符是否为验证器描述符，然后按照前面的代码提取字段。
- en: '`getVelocityParamsForEdit`: This method defines the velocity parameters for
    the edit scenario, that is, when the user modifies the existing validator. Here
    we need both the options and the selected value. Hence, we put both the custom
    fields'' collection and the field name on to the velocity parameters.'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getVelocityParamsForEdit`：此方法定义了编辑场景下的速度参数，即当用户修改现有的验证器时。在这里，我们需要选项和已选择的值。因此，我们将自定义字段集合和字段名称都放入速度参数中。'
- en: 'The second step is to define the velocity templates for each of the three scenarios:
    input, view, and edit. We can use the same template here for input and edit with
    a simple checking to keep the old field selected for the edit scenario. Let us
    look at the templates:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是为每个场景（输入、视图和编辑）定义速度模板。我们可以在输入和编辑中使用相同的模板，只需简单检查以确保在编辑场景中保留已选的字段。让我们来看看这些模板：
- en: '`edit-userCFFunction.vm`: Displays all custom fields and highlights the already
    selected one in the edit mode:'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit-userCFFunction.vm`：显示所有自定义字段，并在编辑模式下高亮显示已选中的字段：'
- en: '[PRE15]'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`view-userCFFunction.vm` .displays the selected field:'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view-userCFFunction.vm` 显示已选中的字段：'
- en: '[PRE16]'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The third step is to write the actual function. The function class must extend
    the `AbstractJiraFunctionProvider` interface. All we need here is to implement
    the `execute` method. In our example, we retrieve the username from the issue
    and set it on the `Test User` custom field:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步是编写实际的函数。函数类必须扩展`AbstractJiraFunctionProvider`接口。我们只需要在这里实现`execute`方法。在我们的示例中，我们从问题中检索用户名并将其设置到`Test
    User`自定义字段上：
- en: '[PRE17]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Like a validator, the issue on which the post function is executed can be retrieved
    using the `transientVars` map. The user can be retrieved from the `args` map.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像验证器一样，执行后置函数的议题可以通过`transientVars`映射来获取。用户则可以从`args`映射中获取。
- en: 'Here the `setUserValue` method simply sets the username on the passed custom
    field, as shown in the following block of code:'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`setUserValue`方法仅仅是将用户名设置到传递的自定义字段中，如下所示的代码块：
- en: '[PRE18]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'All that is left now is to populate the `atlassian-plugin.xml` file with these
    components. We use the `workflow-condition` module and it looks like the following
    block of code:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在剩下的就是将这些组件填充到`atlassian-plugin.xml`文件中。我们使用`workflow-condition`模块，代码如下所示：
- en: '[PRE19]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Package the plugin and deploy it!
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包插件并部署！
- en: How it works...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After the plugin is deployed, we need to modify the workflow to include the
    function. The following is where the function appears along with the built-in
    ones:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 插件部署后，我们需要修改工作流以包含该功能。以下是该功能与内置功能一同出现的地方：
- en: '![How it works...](img/1803-04-08.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-08.jpg)'
- en: 'Clicking on our post function takes us to the configuration page, shown next.
    This, as you now know, is rendered using the input template:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 点击我们的后置功能将带我们进入配置页面，如下所示。正如你现在知道的，这个页面是使用输入模板渲染的：
- en: '![How it works...](img/1803-04-09.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-09.jpg)'
- en: 'After the function is added (after entering in the **UserName** field), it
    looks as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 添加功能后（在**UserName**字段中输入后），显示如下：
- en: '![How it works...](img/1803-04-10.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-10.jpg)'
- en: 'If you try to edit, the screen will be rendered using the edit template, as
    shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试编辑，屏幕将使用编辑模板渲染，如以下截图所示：
- en: '![How it works...](img/1803-04-11.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-11.jpg)'
- en: Note that the **UserName** field is already populated.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**UserName**字段已经填充。
- en: After the workflow is configured, when the user executes the workflow action,
    the **Test User** custom field is set with the value **jobinkk**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作流配置完成后，当用户执行工作流操作时，**Test User**自定义字段将设置为值**jobinkk**。
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Creating a skeleton plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 插件开发过程")中*创建一个骨架插件*。
- en: '*Deploying your plugin* in [Chapter 1](ch01.html "Chapter 1. Plugin Development
    Process")'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 插件开发过程")中*部署你的插件*。
- en: Editing an active workflow
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑一个活动工作流
- en: We have seen how the workflow plays an important role in configuring our JIRA
    and how we can write plugins to add more workflow conditions, validators, and
    post functions. Once these plugins are added, we need to modify the workflow to
    include the newly created components at the appropriate transitions.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了工作流在配置JIRA中的重要作用，以及如何编写插件来添加更多的工作流条件、验证器和后置功能。一旦这些插件被添加，我们需要修改工作流，以在适当的转换点包含新创建的组件。
- en: Modifying an inactive workflow or creating a new workflow is pretty easy. You
    can add the conditions/validators/post functions when you create the transition
    or just click on the transition to modify them. But to edit an active workflow,
    there are a few more steps involved which we will see in this recipe.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 修改一个非活动工作流或创建一个新工作流非常容易。你可以在创建转换时添加条件/验证器/后置功能，或者只需点击转换来修改它们。但是，编辑一个活动工作流则涉及更多的步骤，我们将在本食谱中看到这些步骤。
- en: A workflow is active when it is being used in an active workflow scheme that
    is tied to a project. You can check whether a workflow is active by navigating
    to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流在被用于与项目相关联的活动工作流方案时处于活动状态。你可以通过导航到**管理** | **全局** **设置** | **工作流**来检查工作流是否处于活动状态。
- en: How to do it...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the steps to edit an active workflow:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是编辑活动工作流的步骤：
- en: Login as a JIRA Administrator.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以JIRA管理员身份登录。
- en: Navigate to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**管理** | **全局** **设置** | **工作流**。
- en: Click on the **Create a draft workflow** link on the workflow you want to edit.
    The link can be found under the **Operations** column.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你想要编辑的工作流上的**创建草稿工作流**链接。该链接可以在**操作**栏下找到。
- en: Click on the *step* or *transition* that you want to modify.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你想要修改的*步骤*或*转换*。
- en: Make the changes. The changes won't be effective until the workflow is published.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行更改。更改将在工作流发布之前不会生效。
- en: After all the changes are made, click on the **publish this draft** link at
    the top of the page if you are still viewing the modified workflow. You can also
    click on **Publish** under the **Operations** column while viewing all the workflows.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成所有更改后，如果你仍在查看修改后的工作流，请点击页面顶部的**发布此草稿**链接。你也可以在查看所有工作流时，在**操作**栏目下点击**发布**。
- en: Make a copy of the old workflow, when prompted, if you need a backup, and click
    on **Publish**.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要备份，请在提示时复制旧的工作流，然后点击**发布**。
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After making changes on the draft and clicking on **Publish**, the new workflow
    will be active. However, there are some limitations to this procedure, which are
    detailed as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在草稿上进行更改并点击**发布**后，新工作流将生效。然而，这个过程有一些限制，具体如下：
- en: You can't delete an existing workflow step
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能删除现有的工作流步骤。
- en: You can't edit the status associated with an existing step
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能编辑与现有步骤关联的状态。
- en: If an existing step has no outgoing transitions, you can't add any new outgoing
    transitions
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果现有步骤没有出站转换，你不能添加任何新的出站转换。
- en: You can't change the step IDs for any existing steps
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能更改任何现有步骤的步骤 ID。
- en: If you want to overcome these limitations, you need to copy the workflow, modify
    the copy, and make it active by migrating the projects on to the new workflow.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想克服这些限制，你需要复制工作流，修改副本，并通过将项目迁移到新工作流来使其生效。
- en: After the new workflow is active, any transitions on the issue will be based
    on the new workflow.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在新工作流生效后，任何问题的转换都会基于新的工作流进行。
- en: There's more...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: If you want to modify an active workflow, thus overcoming some of the limitations
    aforementioned but don't want to go through the pain of migrating all the projects
    involved, you might want to look at modifying it directly in the JIRA database.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想修改一个活动的工作流，从而克服上述的一些限制，但又不想经历迁移所有相关项目的痛苦，你可以考虑直接在 JIRA 数据库中进行修改。
- en: Note that we should be careful about the workflow changes when we do this. For
    example, if there are issues in a status that is removed in the modified workflow,
    those issues will be stuck at the removed status. The same can happen for the
    removed steps.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在进行此操作时，我们应小心工作流的更改。例如，如果在修改后的工作流中移除了某个状态，而某些问题仍处于该状态，则这些问题将被卡在该移除的状态下。同样的情况也会发生在移除的步骤上。
- en: Modifying workflows in JIRA database
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改 JIRA 数据库中的工作流
- en: 'The following are the steps to modify the workflows in the database:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是修改数据库中工作流的步骤：
- en: Export the workflow that needs to be modified into XML. You can do it using
    the XML link under the **Operations** column of a workflow.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将需要修改的工作流导出为 XML 文件。你可以通过工作流的**操作**列下的 XML 链接来完成此操作。
- en: Modify the XML to include your changes (or alternatively, make changes in a
    copy of the JIRA workflow and export that as XML).
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 XML 文件以包含你的更改（或者，选择在 JIRA 工作流的副本中进行更改，并将其导出为 XML）。
- en: Stop the JIRA instance.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止 JIRA 实例。
- en: Connect to your JIRA database.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到你的 JIRA 数据库。
- en: Take a backup of the existing database. We can revert to this backup if anything
    goes wrong.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 备份现有的数据库。如果出现问题，我们可以恢复到这个备份。
- en: Update the `JIRAWORKFLOWS` table to modify the `descriptor` column with the
    new XML file for the appropriate workflow. When the workflow XML is huge, it might
    be useful to rely on database-specific methods to update the table. For example,
    we can use Oracle XML database utilities ([http://download.oracle.com/docs/cd/B12037_01/appdev.101/b10790/xdb01int.htm](http://download.oracle.com/docs/cd/B12037_01/appdev.101/b10790/xdb01int.htm)),
    if JIRA is connected to the Oracle database.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `JIRAWORKFLOWS` 表，将 `descriptor` 列修改为适当工作流的新 XML 文件。当工作流的 XML 非常庞大时，可能需要依赖于数据库特定的方法来更新表。例如，如果
    JIRA 连接到 Oracle 数据库，我们可以使用 Oracle XML 数据库工具 ([http://download.oracle.com/docs/cd/B12037_01/appdev.101/b10790/xdb01int.htm](http://download.oracle.com/docs/cd/B12037_01/appdev.101/b10790/xdb01int.htm))。
- en: Commit the changes and disconnect from the database.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改并断开与数据库的连接。
- en: Start the JIRA instance.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 JIRA 实例。
- en: Re-index JIRA.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新索引 JIRA。
- en: Making an issue editable/non-editable based on workflow status
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于工作流状态使问题可编辑/不可编辑
- en: We know that the edit permission on an issue is controlled through the **Edit
    Issue** **Permission**. This is used within the permissions schemes tied to a
    project and it blocks/allows editing of the issue, irrespective of which status
    it is in! But many a times the need arises to block an issue being edited at a
    specific status. An example would be to prevent editing on a closed issue.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，问题的编辑权限是通过**编辑问题** **权限**来控制的。这些权限是通过与项目关联的权限方案进行设置的，能够阻止或允许编辑问题，无论问题处于什么状态！但很多时候，我们需要在特定状态下阻止编辑问题。例如，防止编辑已关闭的问题。
- en: We will have a quick look at how to achieve this using workflow properties.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍如何使用工作流属性来实现这一点。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can make an issue editable or non-editable using the `jira.issue.editable`
    workflow property. The following is the step-by-step procedure:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `jira.issue.editable` 工作流属性来使问题可编辑或不可编辑。以下是逐步的操作流程：
- en: Login as a JIRA Administrator.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 JIRA 管理员身份登录。
- en: Navigate to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **Administration** | **Global** **Settings** | **Workflows**。
- en: Create a draft of the workflow, if it is active. Navigate to the *step* which
    needs to be modified.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流是活动的，请创建工作流的草稿。导航到需要修改的 *步骤*。
- en: Click on the **View step's properties** link.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **查看步骤属性** 链接。
- en: Enter **jira.issue.editable** into the **Property Key** field.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Property Key** 字段中输入 **jira.issue.editable**。
- en: Enter **false** in the **Property Value** field, if you want to prevent editing
    on the issue after this transition is performed. Use **true** as the value, if
    you want to make it as editable.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果希望在此转换操作执行后禁止编辑该问题，请在 **Property Value** 字段中输入 **false**。如果希望使其可编辑，请输入 **true**
    作为值。
- en: Go back and publish the workflow if it was active. If not, associate the workflow
    with the appropriate schemes.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流是活动的，请返回并发布工作流。如果不是，请将工作流与相应的方案关联。
- en: Note that the property is added on a workflow *step* and not a *transition*.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，该属性是添加在工作流的 *步骤* 上，而不是 *转换* 上。
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When an issue is viewed, the edit operation is available only if you have the
    edit permission and the workflow manager passes the issue as editable. The workflow
    manager retrieves the list of properties added onto the issue's current status
    (that is, the step linked to the status) and checks the value of the `jira.issue.editable`
    property to see if it set to `false` or not before passing the issue as editable.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看问题时，只有在你拥有编辑权限且工作流经理将问题标记为可编辑时，编辑操作才可用。工作流经理会获取当前状态（即链接到该状态的步骤）上添加的属性列表，并检查
    `jira.issue.editable` 属性的值，看它是否设置为 `false`，然后再将问题标记为可编辑。
- en: 'The properties against an issue workflow step are retrieved as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 关联到问题工作流步骤的属性可以通过以下方式获取：
- en: '[PRE20]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `jira.issue.editable` property value is retrieved as `properties.get(JiraWorkflow.JIRA_META_ATTRIBUTE_EDIT_ALLOWED)`,
    where `JiraWorkflow.JIRA_META_ATTRIBUTE_EDIT_ALLOWED = "jira.issue.editable"`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`jira.issue.editable` 属性值是通过 `properties.get(JiraWorkflow.JIRA_META_ATTRIBUTE_EDIT_ALLOWED)`
    获取的，其中 `JiraWorkflow.JIRA_META_ATTRIBUTE_EDIT_ALLOWED = "jira.issue.editable"`。'
- en: The same approach can be used to retrieve any other property added on a workflow
    step.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法可以用于获取在工作流步骤中添加的任何其他属性。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Permissions based on workflow status*'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于工作流状态的权限*'
- en: Including/excluding resolutions for specific transitions
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为特定转换包含/排除解决方案
- en: If you haven't noticed already, resolutions in JIRA are global. If you have
    a resolution **Resolved**, it appears whenever the resolution field is added on
    a transition screen. This might not make sense in some cases. For example, it
    doesn't make sense to add the resolution **Resolved** when you are rejecting an
    issue.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没注意到，JIRA 中的解决方案是全局性的。如果你有一个 **Resolved** 的解决方案，它将在转换屏幕中添加解决方案字段时出现。在某些情况下，这可能没有意义。例如，在拒绝问题时，添加
    **Resolved** 解决方案是没有意义的。
- en: Let us see how we can pick and choose resolutions based on workflow transitions.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何基于工作流转换选择解决方案。
- en: How to do it...
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can include/exclude specific resolutions on workflow transitions using the
    `jira.field.resolution.include` and `jira.field.resolution.exclude` properties.
    The following is the step-by-step procedure:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `jira.field.resolution.include` 和 `jira.field.resolution.exclude` 属性在工作流转换中包含/排除特定的解决方案。以下是逐步操作流程：
- en: Login as a JIRA Administrator
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 JIRA 管理员身份登录。
- en: Navigate to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **Administration** | **Global** **Settings** | **Workflows**。
- en: Create a draft of the workflow, if it is active. Navigate to the transition
    which needs to be modified.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流是活动的，请创建工作流的草稿。导航到需要修改的转换。
- en: Click on the **View properties of this transition** link.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **查看此转换的属性** 链接。
- en: Enter **jira.field.resolution.include** or **jira.field.resolution.exclude**
    into the **Property Key** field, depending on whether you want to include or exclude
    a specific resolution.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据是否想要包含或排除特定的解决方案，在 **Property Key** 字段中输入 **jira.field.resolution.include**
    或 **jira.field.resolution.exclude**。
- en: Enter the comma-separated list of resolution IDs that you want to include/exclude,
    under the **Property Value** field. The resolution ID can be obtained by navigating
    to **Administration** | **Issue** **Settings** | **Resolutions**, and hovering
    over the **Edit** link:![How to do it...](img/1803-04-12.jpg)
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Property Value** 字段下输入要包含/排除的分隔符为逗号的解决方案 ID 列表。解决方案 ID 可以通过导航到 **Administration**
    | **Issue** **Settings** | **Resolutions**，并悬停在 **Edit** 链接上获取：![如何操作...](img/1803-04-12.jpg)
- en: You can also find the resolution ID by querying the `resolutions` table in the
    database.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以通过查询数据库中的 `resolutions` 表来查找分辨率 ID。
- en: Click on **Add**.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**。
- en: Go back and publish the workflow if it was active. If not, associate the workflow
    with the appropriate schemes.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流已激活，返回并发布工作流。如果没有，关联工作流与相应的方案。
- en: Note that the property is added on a workflow *transition* and not a *step*.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，该属性是在工作流的*过渡*阶段添加的，而不是在*步骤*中添加的。
- en: How it works...
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: When the `jira.field.resolution.exclude` property is added, all the resolutions
    whose IDs are entered as a comma-separated values under the `Property Value` field
    are excluded from the screen during that transition.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `jira.field.resolution.exclude` 属性被添加时，在 `属性值`字段下以逗号分隔的分辨率 ID 将在该过渡期间从屏幕上排除。
- en: On the other hand, if `jira.field.resolution.include` is added, only the resolutions
    whose IDs are entered as a comma-separated values under the `Property Value` field
    are shown in the screen.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果添加了 `jira.field.resolution.include`，则仅在 `属性值`字段下输入的分辨率 ID 会在屏幕上显示。
- en: Permissions based on workflow status
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于工作流状态的权限
- en: We have seen how to restrict editing on an issue based on the workflow status.
    JIRA gives us an even bigger set of options to restrict many of these operations
    (such as edit, comment, and so on) on the issue or its subtasks, depending on
    the issue status.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何根据工作流状态限制对问题的编辑。JIRA 还提供了更多选项，可以限制许多操作（如编辑、评论等）对问题或其子任务的权限，具体取决于问题的状态。
- en: Let us see this in detail.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解一下。
- en: How to do it...
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This is done in a similar way to making an issue editable/non-editable. Here,
    also, we add a property on the concerned workflow step. The following are the
    steps:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这与使问题可编辑/不可编辑的方式类似。在这里，我们也在相关的工作流步骤上添加了一个属性。以下是步骤：
- en: Log in as a JIRA Administrator
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 JIRA 管理员身份登录。
- en: Navigate to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**管理** | **全局** **设置** | **工作流**。
- en: Create a draft of the workflow, if it is active. Navigate to the step which
    needs to be modified.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流已激活，创建工作流草稿。转到需要修改的步骤。
- en: Click on the **View step's properties** link.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查看步骤属性**链接。
- en: 'Enter the permission property into the **Property Key** field. The property
    is of the form – `jira.permission.[subtasks.]{permission}.{type}[.suffix]` where:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将权限属性输入到**属性键**字段中。该属性的形式为 – `jira.permission.[subtasks.]{permission}.{type}[.suffix]`，其中：
- en: '`subtasks` – This is optional. If included, the permission is applied on the
    issue''s subtasks. If not, the permission is applied on the actual issue.'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subtasks` – 这是可选项。如果包含该项，则权限应用于问题的子任务。如果没有，则权限应用于实际的问题。'
- en: '`permission` – A short name specified in the `Permissions` ([http://docs.atlassian.com/software/jira/docs/api/latest/com/atlassian/jira/security/Permissions.html](http://docs.atlassian.com/software/jira/docs/api/latest/com/atlassian/jira/security/Permissions.html))
    class.'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`permission` – 在 `Permissions` ([http://docs.atlassian.com/software/jira/docs/api/latest/com/atlassian/jira/security/Permissions.html](http://docs.atlassian.com/software/jira/docs/api/latest/com/atlassian/jira/security/Permissions.html))
    类中指定的简短名称。'
- en: 'The following are the permitted values, as of JIRA 4.2: `admin`, `use`, `sysadmin`,
    `project`, `browse`, `create`, `edit`, `scheduleissue`, `assign`, `assignable`,
    `attach`, `resolve`, `close`, `comment`, `delete`, `work`, `worklogdeleteall`,
    `worklogdeleteown`, `worklogeditall`, `worklogeditown`, `link`, `sharefilters`,
    `groupsubscriptions`, `move`, `setsecurity`, `pickusers`, `viewversioncontrol`,
    `modifyreporter`, `viewvotersandwatchers`, `managewatcherlist`, `bulkchange`,
    `commenteditall`, `commenteditown`, `commentdeleteall`, `commentdeleteown`, `attachdeleteall`,
    `attachdeleteown`.'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是 JIRA 4.2 中的允许值：`admin`、`use`、`sysadmin`、`project`、`browse`、`create`、`edit`、`scheduleissue`、`assign`、`assignable`、`attach`、`resolve`、`close`、`comment`、`delete`、`work`、`worklogdeleteall`、`worklogdeleteown`、`worklogeditall`、`worklogeditown`、`link`、`sharefilters`、`groupsubscriptions`、`move`、`setsecurity`、`pickusers`、`viewversioncontrol`、`modifyreporter`、`viewvotersandwatchers`、`managewatcherlist`、`bulkchange`、`commenteditall`、`commenteditown`、`commentdeleteall`、`commentdeleteown`、`attachdeleteall`、`attachdeleteown`。
- en: '`type` – Type of permission granted/denied. The values can be `group`, `user`,
    `assignee`, `reporter`, `lead`, `userCF`, `projectrole`.'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type` – 授予/拒绝的权限类型。可选值有 `group`、`user`、`assignee`、`reporter`、`lead`、`userCF`、`projectrole`。'
- en: '`suffix` – An optional suffix to make the property unique when you have the
    same type added more than once! `jira.permission.edit.group.1`, `jira.permission.edit.group.2`,
    and so on. This is because of the OSWorkflow restriction that the property value
    should be unique.'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`suffix` – 可选后缀，用于在添加相同类型多次时使属性唯一！例如 `jira.permission.edit.group.1`、`jira.permission.edit.group.2`
    等。因为 OSWorkflow 限制了属性值必须唯一。'
- en: Enter the appropriate value in the **Property Value** field. If the type is
    group, enter a group. If it is a user, enter a username, and so on.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性值** 字段中输入适当的值。如果类型是组，输入一个组。如果是用户，输入用户名，依此类推。
- en: 'It might be useful to give a few examples here:'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里提供一些例子可能会很有用：
- en: '`jira.permission.comment.group=some-group`'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.comment.group=some-group`'
- en: '`jira.permission.comment=denied`'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.comment=denied`'
- en: '`jira.permission.edit.group.1=some-group-one`'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.edit.group.1=some-group-one`'
- en: '`jira.permission.edit.group.2=some-group-two`'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.edit.group.2=some-group-two`'
- en: '`jira.permission.modifyreporter.user=username`'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.modifyreporter.user=username`'
- en: '`jira.permission.delete.projectrole=10000`'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.delete.projectrole=10000`'
- en: '`jira.permission.subtasks.delete.projectrole=10000`'
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jira.permission.subtasks.delete.projectrole=10000`'
- en: You can even use the value as 'denied' when the type is not used. For example,
    `jira.permission.comment=denied` means the comment feature is disabled at this
    state.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当类型未使用时，你甚至可以将值设置为 'denied'。例如，`jira.permission.comment=denied` 意味着在此状态下禁用评论功能。
- en: Go back and publish the workflow, if it was active. If not, associate the workflow
    with the appropriate schemes.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流是激活的，返回并发布该工作流。如果没有，关联该工作流与适当的方案。
- en: How it works...
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a particular permission property is tied to a workflow status, JIRA looks
    at it and enforces it. It is to be noted that workflow permissions can only restrict
    permissions set in the permission scheme, not grant permissions.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 当特定的权限属性与工作流状态绑定时，JIRA 会查看并强制执行该权限。需要注意的是，工作流权限只能限制权限方案中设置的权限，而不能授予权限。
- en: For example, if you have the edit permission restricted to `jira-administrators`
    in the permission scheme, adding `jira.permission.edit.group=jira-users` wouldn't
    grant the permission to `jira-users`.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在权限方案中将编辑权限限制为 `jira-administrators`，添加 `jira.permission.edit.group=jira-users`
    并不会授予 `jira-users` 编辑权限。
- en: But instead, if you had both of these groups with the edit permission, only
    `jira-users` will be allowed to edit, as defined in the workflow permission.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你有两个拥有编辑权限的组，那么只有 `jira-users` 会被允许编辑，这由工作流权限定义。
- en: See also
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Making an issue editable/non-editable based on workflow status*'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*根据工作流状态使问题可编辑/不可编辑*'
- en: Internationalization in workflow transitions
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流转换中的国际化
- en: If your JIRA instance is used by people around the world speaking different
    languages, it is likely that you use internationalization to convert JIRA into
    their own language. But things like the workflow action name, button name, and
    so on are configured in the workflows and not as i18n properties. And therefore,
    they are limited to a single language.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 JIRA 实例被全球各地讲不同语言的人使用，你可能会使用国际化将 JIRA 转换为他们自己的语言。但像工作流操作名称、按钮名称等配置是在工作流中，而不是作为
    i18n 属性。因此，它们是限定于单一语言的。
- en: This is where workflow properties come to our rescue, again!
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是工作流属性再次为我们提供帮助的地方！
- en: How to do it...
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can modify the workflow action submit button name or the action name using
    the properties `jira.i18n.submit` or `jira.i18n.title` respectively. The following
    are the steps:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用属性 `jira.i18n.submit` 或 `jira.i18n.title` 分别修改工作流操作提交按钮的名称或操作名称。以下是步骤：
- en: Open the jar file `atlassian-jira/WEB-INF/lib/language_<language code>_<country
    code>.jar`. From JIRA 4.3, the jar filename is of the form `jira-lang-<language
    code>_<country code>-<jira version>.jar`.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 jar 文件 `atlassian-jira/WEB-INF/lib/language_<语言代码>_<国家代码>.jar`。从 JIRA 4.3
    开始，jar 文件名的格式为 `jira-lang-<语言代码>_<国家代码>-<jira 版本>.jar`。
- en: Edit the file `\com\atlassian\jira\web\action\JiraWebActionSupport_<language
    code>_<country code>.properties` inside the jar. You can use a utility such as
    7zip to edit the file inside the jar. Alternatively, you can extract the jar,
    modify the file, and archive it again!
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 jar 文件中的 `\com\atlassian\jira\web\action\JiraWebActionSupport_<语言代码>_<国家代码>.properties`
    文件。你可以使用 7zip 等工具编辑 jar 文件中的文件。或者，你也可以解压 jar 文件，修改文件后再重新归档！
- en: 'Add your i18n property and its value: `my.submit.button=My Submit Button in
    English`.'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加你的 i18n 属性及其值：`my.submit.button=我的提交按钮（英语）`。
- en: Update the file and restart JIRA to pick up the new property.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新文件并重启 JIRA 以使新属性生效。
- en: Log in as a JIRA Administrator.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 JIRA 管理员身份登录。
- en: Navigate to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **管理** | **全局** **设置** | **工作流**。
- en: Create a draft of the workflow, if it is active. Navigate to the transition
    which needs to be modified.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流处于活动状态，请创建工作流草稿。导航到需要修改的转换。
- en: Click on the **View properties of this transition** link.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **查看此转换的属性** 链接。
- en: Enter **jira.i18n.submit** or **jira.i18n.title** into the **Property Key**
    field, depending on whether you want to modify submit button name or action name.
    Let us consider the example of the Submit button
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你希望修改提交按钮名称或操作名称，分别在 **属性键** 字段中输入 **jira.i18n.submit** 或 **jira.i18n.title**。让我们以提交按钮为例。
- en: Enter i18n key that we used in the property file, under the **Property Value**
    field. In our example, the key is **my.submit.button**.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性值** 字段中输入我们在属性文件中使用的 i18n 键。在我们的示例中，键是 **my.submit.button**。
- en: Click on **Add**.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加**。
- en: Go back and publish the workflow, if it was active. If not, associate the workflow
    with the appropriate schemes.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流处于活动状态，请返回并发布工作流。如果不是，请将工作流与适当的方案关联。
- en: How it works...
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Once the workflow is published, JIRA will populate the submit button name from
    the i18n property file the next time the transition happens. In our example, the
    transition screen will look like the following screenshot:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦工作流发布，JIRA 将从 i18n 属性文件中填充提交按钮名称，当下次发生转换时。在我们的示例中，转换屏幕将显示如下截图：
- en: '![How it works...](img/1803-04-13.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-13.jpg)'
- en: As you can see, the button name is changed to **My Submit Button in English**.
    All you need to do now is modify the other language jars to include the proper
    translations!
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，按钮名称已经更改为 **My Submit Button in English**。现在你需要做的就是修改其他语言的 jar 文件，以包含正确的翻译！
- en: See also
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Internationalization in v2 plugins*'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*v2 插件中的国际化*'
- en: Obtaining available workflow actions programmatically
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程方式获取可用的工作流操作
- en: Often in our programs, we may come across the need to retrieve the current workflow
    actions, available on the issue. Let us have a look at how to do this using the
    JIRA API.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的程序中，我们经常遇到需要检索当前工作流操作的情况，特别是可用的操作。让我们看看如何使用 JIRA API 来实现这一点。
- en: How to do it...
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Retrieve the JIRA workflow object associated with the issue:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索与问题关联的 JIRA 工作流对象：
- en: '[PRE21]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, issue is the current issue, which is an instance of `com.atlassian.jira.issue.Issue`
    class.
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，issue 是当前的问题，它是 `com.atlassian.jira.issue.Issue` 类的一个实例。
- en: 'Get the issue status and use it to retrieve the current workflow step linked
    to the issue:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取问题状态，并使用它检索当前与问题关联的工作流步骤：
- en: '[PRE22]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Retrieve the set of available actions from the current step:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从当前步骤中检索可用操作集：
- en: '[PRE23]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, `actions` is a list of `com.opensymphony.workflow.loader.ActionDescriptor`.
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`actions` 是一个 `com.opensymphony.workflow.loader.ActionDescriptor` 列表。
- en: 'Iterate on the `ActionDescriptors` and get the details for each action, depending
    on the requirement! The name of the available action can be printed as follows:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历 `ActionDescriptors` 并根据需求获取每个操作的详细信息！可用操作的名称可以按如下方式打印：
- en: '[PRE24]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '**WorkflowManager** is used to perform a lot of operations related to workflows
    such as creating/updating/deleting a workflow, copying it, creating a draft, and
    so on. Here we use it to retrieve the workflow object, based on the issue selected.
    Please check the API ([http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowManager.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowManager.html))
    for a full list of available operations using `WorkflowManager`.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**WorkflowManager** 用于执行与工作流相关的许多操作，如创建/更新/删除工作流、复制工作流、创建草稿等。在这里，我们使用它根据选定的问题来检索工作流对象。请查看
    API（[http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowManager.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowManager.html)）以获取
    `WorkflowManager` 可用操作的完整列表。'
- en: Once we retrieve the JIRA workflow, we get the current step using the status.
    As you have seen before in this chapter, a workflow *status* is linked to one
    and only one workflow *step*. Once we get the *step*, we can get a load of information
    from it, including the available actions from that *step*.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们检索到 JIRA 工作流，我们通过状态获取当前步骤。正如你在本章之前所看到的，工作流 *状态* 与一个且仅一个工作流 *步骤* 相关联。一旦我们获取到
    *步骤*，就可以从中获取大量信息，包括该 *步骤* 可用的操作。
- en: Jolly good?
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 好极了？
- en: There's more...
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: There's more to it…
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: Getting the Action IDs, given name
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取给定名称的操作 ID
- en: The same method can be used to retrieve the action ID, given an action name.
    Remember, it is the action ID that we use while programmatically progressing on
    the workflows.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法也可以用来根据操作名称检索操作 ID。记住，我们在程序化推进工作流时使用的是操作 ID。
- en: 'Once the action name is available, you can easily retrieve the action ID by
    iterating on the list of actions, as shown in the following lines of code:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦操作名称可用，你可以通过迭代操作列表轻松获取操作 ID，如以下代码行所示：
- en: '[PRE25]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Programmatically progressing on workflows
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作流上进行程序化进度
- en: Another operation that we perform normally on workflows is to programmatically
    transit the issues through its workflows. Let us have a look at how to do this
    using the JIRA API.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常对工作流执行的另一个操作是通过编程方式将问题通过工作流过渡。让我们来看一下如何使用 JIRA API 执行此操作。
- en: How to do it...
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到……
- en: 'Since JIRA 4.1, transitioning issues is done using the `IssueService` ([http://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/issue/IssueService.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/issue/IssueService.html)).
    Here''s is how you do it:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 从 JIRA 4.1 起，转换问题是通过`IssueService`完成的（[http://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/issue/IssueService.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/bc/issue/IssueService.html)）。下面是如何做到的：
- en: 'Get the `IssueService` object either by injecting it in the constructor or
    as follows:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过构造函数注入或如下所示获取`IssueService`对象：
- en: '[PRE26]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Find out the action ID for the action to be executed. You can either get it
    by looking at the workflows (the number within brackets alongside the transition
    name), if you know it is not going to change or retrieve it using the action name
    (refer to the previous recipe).
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找要执行的操作的操作 ID。你可以通过查看工作流（括号内的数字以及转换名称）来获取，如果你确定它不会改变，或者使用操作名称来检索它（参考之前的步骤）。
- en: 'Populate the `IssueInputParameters` if you want to modify anything on the issue
    such as assignee, reporter, resolution, and so on! It represents an issue builder
    and is used to provide parameters that can be used to update the issue during
    the transition:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想修改问题的任何内容，例如指派人、报告人、解决方案等，请填充`IssueInputParameters`！它代表一个问题构建器，用于提供可在转换过程中更新问题的参数：
- en: '[PRE27]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A full list of supported fields can be found at [http://docs.atlassian.com/jira/latest/com/atlassian/jira/issue/IssueInputParameters.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/issue/IssueInputParameters.html).
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的支持字段列表可以在[http://docs.atlassian.com/jira/latest/com/atlassian/jira/issue/IssueInputParameters.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/issue/IssueInputParameters.html)找到。
- en: 'Validate the transition:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证转换：
- en: '[PRE28]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`User` – The current user or the user who will be performing the transition'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User` – 当前用户或将执行转换的用户'
- en: '`12345L` – The issue ID'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`12345L` – 问题 ID'
- en: '`10000L` – The action ID'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`10000L` – 操作 ID'
- en: '`issueInputParameters` – The parameters we populated in the previous step'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`issueInputParameters` – 我们在之前步骤中填充的参数'
- en: If `transitionValidationResult` is valid, invoke the transition operation. Handle
    it if it is not valid. Make sure you use the same user.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`transitionValidationResult`有效，调用转换操作。如果无效，请处理它。确保使用相同的用户。
- en: '[PRE29]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We need to do a final check on the result as well to see if it is valid!
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要对结果进行最后的检查，以查看它是否有效！
- en: That will transit the issue to the appropriate state.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将使问题转换到适当的状态。
- en: Prior to `IssueService`, the transition was done using `WorkflowTransitionUtil`
    ([http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowTransitionUtil.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowTransitionUtil.html)).
    It is still supported, but `IssueService` is recommended.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在`IssueService`之前，转换是通过`WorkflowTransitionUtil`完成的（[http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowTransitionUtil.html](http://docs.atlassian.com/jira/latest/com/atlassian/jira/workflow/WorkflowTransitionUtil.html)）。它仍然被支持，但推荐使用`IssueService`。
- en: 'The following is how the transitioning is done using `WorkflowTransitionUtil`:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用`WorkflowTransitionUtil`进行转换的示例：
- en: 'Get the `WorkflowTransitionUtil` object:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`WorkflowTransitionUtil`对象：
- en: '[PRE30]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a map of parameters that need to be updated on the issue:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个需要更新的参数映射：
- en: '[PRE31]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Populate the `workflowTransitionUtil` with the details:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下详细信息填充`workflowTransitionUtil`：
- en: '[PRE32]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Validate the transition:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 验证转换：
- en: '[PRE33]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If there is no error, progress with the workflow. Handle the errors, if any:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，继续工作流。处理错误（如果有的话）：
- en: '[PRE34]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: And we should have the issue in its new status! Check the error collection to
    handle errors, if any.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该看到问题处于新的状态！检查错误集合以处理错误（如果有的话）。
- en: How it works...
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Once the action ID is correct and the parameters are validated properly, `IssueService`
    or `WorkflowTransitionUtil` will do the background work of transitioning the issues.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦操作ID正确且参数经过正确验证，`IssueService`或`WorkflowTransitionUtil`将进行后台工作，完成问题的状态转换。
- en: Obtaining workflow history from the database
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库获取工作流历史记录
- en: JIRA captures changes on an issue in its "change history". It is pretty easy
    to find them by going to the change history tab on the view issue page.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA会在其“更改历史”中捕捉问题的更改。通过访问问题查看页面的“更改历史”标签，你可以轻松找到它们。
- en: But often, we would like to find out specific details about the various workflow
    statuses that an issue has gone through in its lifecycle. Going through the change
    history and identifying the status changes is a painful task when there are tens
    of hundreds of changes on an issue. People normally write plugins to get around
    this or go directly to the database.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们通常希望了解问题在生命周期中经过的各种工作流状态的具体细节。当一个问题有成百上千次更改时，通过更改历史记录找出状态变化是一个痛苦的任务。人们通常编写插件来绕过这个问题，或者直接访问数据库。
- en: Even when it is achieved using plugins, the background logic is to look at the
    tables in the database. In this recipe, we will look at the tables involved and
    writing the SQL query to extract workflow changes for a given issue.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是通过插件实现的，后台逻辑也是查看数据库中的表。在本教程中，我们将查看相关表，并编写SQL查询以提取给定问题的工作流更改。
- en: Getting ready
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have an SQL client installed and configured that will help you
    to connect to the JIRA database.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已安装并配置了一个SQL客户端，它将帮助你连接到JIRA数据库。
- en: How to do it...
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Connect to the JIRA database.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到JIRA数据库。
- en: 'Find out the `id` of the issue for which you want to extract the workflow changes.
    If you don''t have the ID in hand, you can get it from the database using the
    issue key as follows:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出你想提取工作流更改的`id`。如果你手头没有ID，可以通过如下方式使用问题关键字从数据库中获取它：
- en: '[PRE35]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Where `JIRA-123` is the issue key.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中，`JIRA-123`是问题的关键字。
- en: 'Extract all the change groups created for the issue. Every set of changes made
    on an issue during a single operation (for example, edit, workflow transition,
    and so on) are grouped in to a single `changegroup` by JIRA. It is on the `changegroup`
    record that JIRA stores the associated `issueid` and the `created` date (date
    when the change was made):'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取为问题创建的所有更改组。每次对问题进行的更改（例如，编辑、工作流转换等）都会被JIRA分组到一个单独的`changegroup`中。JIRA在`changegroup`记录中存储相关的`issueid`和`created`日期（即更改发生的日期）：
- en: '[PRE36]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Where `10010` is the `issue` `id`, the ID we extracted in the previous step.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中，`10010`是`issue`的`id`，即我们在前一步中提取的ID。
- en: While extracting the change groups, we can even mention the created date if
    you want to see only changes on a specific date! Use the author field to restrict
    this to changes made by a user.
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在提取更改组时，我们甚至可以提到创建日期，如果你只想查看特定日期的更改，可以使用`author`字段限制只查看某个用户做出的更改。
- en: 'Extract `status` changes for the group/groups selected:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取所选组的`status`更改：
- en: '[PRE37]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Here the `groupid` `10000`, `10010`, and so on are IDs extracted in the previous
    step. Here, `oldstring` is the original value on the issue and `newstring` is
    the updated value.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的`groupid` `10000`、`10010`等是前一步中提取的ID。这里，`oldstring`是问题上的原始值，`newstring`是更新后的值。
- en: Include `oldvalue` and `newvalue`, if you want to get the status IDs as well.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想获取状态ID，也可以包括`oldvalue`和`newvalue`。
- en: You can write it in a single query, as shown next, or modify it to include more
    details. But hopefully, this gives you a starting point!
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像下面那样编写一个单独的查询，或者修改它以包含更多的细节。但希望这能为你提供一个起点！
- en: '[PRE38]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Another example to extract the details along with the created date is to use
    inner join as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个提取细节以及创建日期的示例是使用内连接，如下所示：
- en: '[PRE39]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Over to you DBAs now!
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 现在交给你们，DBA们！
- en: How it works...
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As mentioned, the changes at any single operation on an issue are stored as
    a `changegroup` record in the JIRA database. The main three columns `issueid`,
    `author`, and `created` are all parts of this table.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对问题进行的每次操作的更改都会作为`changegroup`记录存储在JIRA数据库中。主要的三个列`issueid`、`author`和`created`都是这个表的一部分。
- en: The actual changes are stored in the `changeitem` table with its foreign key
    `groupid` pointing to the `changegroup` record.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的更改存储在`changeitem`表中，其外键`groupid`指向`changegroup`记录。
- en: In our case, we are looking specifically at the workflow statuses, and hence
    we query for records that have the `fieldtype` value of `jira` and `field` of
    `status`.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们专门查看工作流状态，因此我们查询具有 `fieldtype` 值为 `jira` 且 `field` 为 `status` 的记录。
- en: 'The output of the query (that uses an inner join) is as follows:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 查询结果（使用内连接）如下：
- en: '![How it works...](img/1803-04-14.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-04-14.jpg)'
- en: See also
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: '*Retrieving workflow details from a table*'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从表格中获取工作流详细信息*'
- en: Re-ordering workflow actions in JIRA
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JIRA 中重新排序工作流操作
- en: On a JIRA workflow, the available actions that appear in the **View Issue**
    page are normally ordered in the sequence those transitions were created. This
    works fine most of the time, but in some cases, we will want to change the order
    in which it appears on the issue screen!
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JIRA 工作流中，显示在 **查看问题** 页面上的可用操作通常按这些过渡创建的顺序排列。大多数时候这种方式是有效的，但在某些情况下，我们可能需要改变它在问题页面上显示的顺序！
- en: To achieve this logical ordering of workflow actions on the **View Issue** page,
    JIRA provides us with a workflow property named `opsbar-sequence`. Let us see
    how we modify the ordering using this property instead of tampering with the workflow.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 **查看问题** 页面上实现工作流操作的逻辑排序，JIRA 为我们提供了一个名为 `opsbar-sequence` 的工作流属性。让我们看看如何使用此属性来修改顺序，而不是直接修改工作流。
- en: How to do it...
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤操作：
- en: Log in as a JIRA Administrator
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 JIRA 管理员身份登录
- en: Navigate to **Administration** | **Global** **Settings** | **Workflows**.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **管理** | **全局** **设置** | **工作流**。
- en: Create a draft of the workflow, if it is active. Navigate to the transition
    which needs to be modified.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果工作流是活动状态，则创建工作流的草稿。导航到需要修改的过渡。
- en: Click on the **View properties of this transition** link.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **查看此过渡的属性** 链接。
- en: Enter **opsbar-sequence** into the **Property Key** field.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性键** 字段中输入 **opsbar-sequence**。
- en: Enter the **sequence** value under the **Property Value** field. This value
    should be relative to the values entered in the other transitions.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **属性值** 字段下输入 **序列** 值。此值应相对于其他过渡中输入的值。
- en: Click on **Add**.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加**。
- en: Go back and publish the workflow, if it was active. If not, associate the workflow
    with the appropriate schemes.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回并发布工作流，如果它处于活动状态。如果没有，将工作流与适当的方案关联。
- en: Note that the property is added on a workflow *transition* and not a *step*.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，属性是添加在工作流 *过渡* 上，而不是 *步骤* 上。
- en: How it works...
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us consider the following example where the **Reject this** workflow action
    appears first:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例，其中 **拒绝此操作** 工作流操作出现在最前面：
- en: '![How it works...](img/1803-04-15.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-04-15.jpg)'
- en: Normally, people would want to see this as the last option because it is most
    likely the least used operation.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，人们会希望将此作为最后一个选项，因为它很可能是最少使用的操作。
- en: 'As there are four operations here, we can order them as shown in the following
    table with the sequence values against them:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这里有四个操作，我们可以按照下表所示的顺序进行排列，并对其进行序列值标注：
- en: '| Workflow action | Sequence |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| 工作流操作 | 序列 |'
- en: '| --- | --- |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Start Progress** | 10 |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| **开始进度** | 10 |'
- en: '| **Resolve Issue** | 20 |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| **解决问题** | 20 |'
- en: '| **Close Issue** | 30 |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| **关闭问题** | 30 |'
- en: '| **Reject this** | 40 |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| **拒绝此操作** | 40 |'
- en: Note that the sequence numbers can even be 1, 2, 3, and 4\. There are no restrictions
    on how and where the numbers should start. It is advised to keep 10, 20, and so
    on so that we can insert new transitions in between, if required in future.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，序列号甚至可以是 1、2、3 和 4。没有限制数字从何处开始或如何排列。建议使用 10、20 等序列，以便在将来需要时可以插入新的过渡。
- en: 'After we modify the workflow using the property and the aforementioned sequence
    numbers, as we saw in the previous section, the actions are ordered as follows:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用属性和前述的序列号修改工作流之后，正如我们在前一节所看到的，操作顺序如下：
- en: '![How it works...](img/1803-04-16.jpg)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-04-16.jpg)'
- en: Remember, the order of the workflow actions is changed only in the **View Issue**
    page and not in the **View Workflow Steps** page, where you modify the workflow
    steps.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，工作流操作的顺序仅在 **查看问题** 页面中更改，而不是在 **查看工作流步骤** 页面中更改，后者是你修改工作流步骤的地方。
- en: Creating common transitions in workflows
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在工作流中创建常见的过渡
- en: Configuring workflows can be a painful thing. Especially when there are similar
    transitions used in 10 different places and those get changed every now and then.
    The change might be the simplest thing possible, such as editing just the name
    of the transition, but we end up modifying it in 10 places.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 配置工作流可能是件痛苦的事情，尤其是在 10 个不同位置使用了相似的过渡，而且这些过渡时常发生变化。变更可能是最简单的事情，比如仅仅修改过渡的名称，但我们最终还是需要在
    10 个地方进行修改。
- en: This is where OSWorkflow's common actions come to our rescue. A little bit on
    the theory can be read at [http://www.opensymphony.com/osworkflow/3.3%20Common%20and%20Global%20Actions.html](http://www.opensymphony.com/osworkflow/3.3%20Common%20and%20Global%20Actions.html).
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 OSWorkflow 的常见操作来拯救我们的地方。可以在[http://www.opensymphony.com/osworkflow/3.3%20Common%20and%20Global%20Actions.html](http://www.opensymphony.com/osworkflow/3.3%20Common%20and%20Global%20Actions.html)阅读一些理论内容。
- en: 'JIRA already makes use of common actions in its default workflow. We can''t
    modify the default workflow, but if we make a copy of it and rename the **Resolve**
    transition to **New Resolve**, it appears as shown in the following screenshot:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 已经在其默认工作流中使用了常见操作。我们无法修改默认工作流，但如果我们复制一份并将 **Resolve** 过渡重命名为 **New Resolve**，它将显示如下截图所示：
- en: '![Creating common transitions in workflows](img/1803-04-17.jpg)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
  zh: '![在工作流中创建常见过渡](img/1803-04-17.jpg)'
- en: Note that the transition is renamed at all the three places where it appears!
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，过渡在出现的三个地方都被重命名了！
- en: In this recipe, let us look at adding a new common transition.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，让我们来看看如何添加一个新的常见过渡。
- en: How to do it...
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: There are two ways of adding common transitions.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 添加常见过渡有两种方式。
- en: Copy the JIRA default workflow and modify it to suit our needs.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 JIRA 默认工作流并修改以适应我们的需求。
- en: Create workflow using XML.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 XML 创建工作流。
- en: The first one is useful only if our workflow needs are limited, that is, only
    if we can live by modifying the existing transitions.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法仅在我们的工作流需求有限时才有用，也就是说，只有在我们可以通过修改现有过渡来解决问题时才适用。
- en: 'If we need to configure a bigger workflow with new common transitions, we need
    to take the XML route. Let us see the steps:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要配置一个包含新常见过渡的大型工作流，我们需要采取 XML 路径。让我们来看一下步骤：
- en: To make things easier, export the existing workflow that needs to be modified
    into an XML. You can do this using the XML link on the view workflows page. You
    could create a workflow XML from scratch, but that needs lot of effort and knowledge
    of OSWorkflow. In this case, we export the standard JIRA workflow.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了简化操作，将需要修改的现有工作流导出为 XML。你可以通过查看工作流页面上的 XML 链接来完成此操作。你也可以从零开始创建工作流 XML，但这需要大量的努力和对
    OSWorkflow 的了解。在本例中，我们导出了标准的 JIRA 工作流。
- en: Identify the `common-actions` section in the workflow XML. It comes in the starting
    immediately after `initial-actions`.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作流 XML 中找到 `common-actions` 部分，它位于 `initial-actions` 后面紧接着出现。
- en: Add our new `common-action`. There are a few things that we need to notice here.
    The action ID should be a unique ID within the XML. You will find examples of
    all this in the standard workflow XML or you can read more about them in the OSWorkflow
    documentation.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加我们新的 `common-action`。在这里有几点需要注意。操作 ID 应该是 XML 中唯一的 ID。你可以在标准工作流 XML 中找到所有这些的示例，或者你也可以在
    OSWorkflow 文档中阅读更多内容。
- en: 'The following is how a simple action looks:'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个简单操作的样子：
- en: '[PRE40]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Make sure you modify the name, description, status, step, eventTypeId, and the
    post functions. Here we used `Finished` as the `old-status` as it is used in the
    other common actions in the JIRA standard workflow. You can also add new meta
    attributes, conditions, validators, and so on, but it probably is a good idea
    to start simple and modify everything else in the JIRA UI once it is imported
    to JIRA.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你修改名称、描述、状态、步骤、eventTypeId 和后置功能。在这里我们使用 `Finished` 作为 `old-status`，因为它在 JIRA
    标准工作流的其他常见操作中也被使用。你还可以添加新的元数据属性、条件、验证器等等，但通常最好从简单开始，并在导入到 JIRA 后通过 JIRA UI 修改其他所有内容。
- en: 'Include the common action in the other steps, wherever required:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其他步骤中根据需要加入常见操作：
- en: '[PRE41]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that the ID here should be the action ID of the `common-action` we added
    in the previous steps. Also, the `common-actions` should appear before the `action`
    elements in the *step* in order to comply with the OSWorkflow syntax.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这里的 ID 应该是我们在前面步骤中添加的 `common-action` 的操作 ID。此外，`common-actions` 应该出现在 *step*
    中的 `action` 元素之前，以符合 OSWorkflow 语法。
- en: Import the modified XML as a workflow to JIRA. You can do this using the **Import
    a Workflow from XML** link. Check out [http://confluence.atlassian.com/display/JIRA/Configuring+Workflow#ConfiguringWorkflow-UsingXMLtocreateaworkflow](http://confluence.atlassian.com/display/JIRA/Configuring+Workflow#ConfiguringWorkflow-UsingXMLtocreateaworkflow)
    for details.
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将修改过的 XML 作为工作流导入到 JIRA 中。你可以通过 **从 XML 导入工作流** 链接来完成。有关详细信息，请查看[http://confluence.atlassian.com/display/JIRA/Configuring+Workflow#ConfiguringWorkflow-UsingXMLtocreateaworkflow](http://confluence.atlassian.com/display/JIRA/Configuring+Workflow#ConfiguringWorkflow-UsingXMLtocreateaworkflow)。
- en: The workflow is now ready to use.
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，工作流已经准备好使用。
- en: How i works...
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: JIRA workflows are fundamentally using OpenSymphony's OSWorkflow, as we saw
    in [Chapter 2](ch02.html "Chapter 2. Understanding Plugin Framework"), *Understanding
    Plugin Framework*. OSWorkflow gives us the flexibility to add common actions by
    modifying the workflow XML. We have used this feature by modifying the existing
    workflow XML and importing it back in to JIRA.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 的工作流本质上使用 OpenSymphony 的 OSWorkflow，正如我们在[第二章](ch02.html "第二章.理解插件框架")，*理解插件框架*中所见。OSWorkflow
    使我们能够通过修改工作流 XML 来添加常见的操作。我们已经通过修改现有的工作流 XML 并将其导入回 JIRA 来使用此功能。
- en: 'The following screenshot is how the updated workflow looks:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了更新后的工作流：
- en: '![How i works...](img/1803-04-18.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-18.jpg)'
- en: 'Note that the new transition **Start Again** is added to all the steps other
    than the last one. Suppose we want to modify the name to **Start Again & Again**,
    it can be done just by editing one of these transitions. The modified workflow
    looks as follows:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，新的过渡 **重新开始** 已添加到除最后一个步骤之外的所有步骤。如果我们想将其名称修改为 **重新开始 & 再次开始**，只需编辑其中一个过渡即可。修改后的工作流如下所示：
- en: '![How i works...](img/1803-04-19.jpg)'
  id: totrans-492
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1803-04-19.jpg)'
- en: We can similarly modify any attributes on the transition, and it will be reflected
    in all the places where the transition is used.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以类似地修改过渡中的任何属性，它将在所有使用该过渡的地方得到反映。
- en: Jelly escalation
  id: totrans-494
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jelly 升级
- en: Before winding up this chapter, let us have a quick look at how we can use one
    of the useful features of JIRA to escalate inactive issues by transitioning them
    to a pre-defined workflow status.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，让我们快速看一下如何使用 JIRA 的一个有用功能，通过将问题转移到预定义的工作流状态来提升非活动问题的优先级。
- en: '**Jelly Service** is a built-in service in JIRA using which we can run useful
    Jelly scripts at regular intervals. Atlassian explains in its documentation at
    [http://confluence.atlassian.com/display/JIRA/Jelly+Escalation](http:// http://confluence.atlassian.com/display/JIRA/Jelly+Escalation)
    about running a Jelly script to move issues that were not updated in the last
    seven days to an inactive status.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jelly 服务**是 JIRA 中的一个内置服务，使用它我们可以在定时的间隔运行有用的 Jelly 脚本。Atlassian 在其文档中解释了如何运行
    Jelly 脚本，将在过去七天内没有更新的任务移至非活动状态，具体请见[http://confluence.atlassian.com/display/JIRA/Jelly+Escalation](http://confluence.atlassian.com/display/JIRA/Jelly+Escalation)。'
- en: Let us have a look at this recipe at how to modify the script and transition
    issues in to different workflow statuses.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下如何修改脚本，并将问题转移到不同的工作流状态的这个示例。
- en: Getting ready
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure Jelly is turned on in your JIRA instance. It is disabled by default
    due to security concerns. You can turn it ON by setting the `jira.jelly.on` property
    to `true`.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的 JIRA 实例中启用了 Jelly。由于安全原因，默认情况下它是禁用的。你可以通过将 `jira.jelly.on` 属性设置为 `true`
    来启用它。
- en: You can set the property by adding `-Djira.jelly.on=true` into the `JAVA_OPTS`
    variable. Adding this variable depends on the server and operating system.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将 `-Djira.jelly.on=true` 添加到 `JAVA_OPTS` 变量中来设置此属性。添加此变量取决于服务器和操作系统。
- en: For example, the property can be set on the Tomcat server in Windows by adding
    it into `setenv.bat` under the `/bin` folder.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以通过将其添加到 `/bin` 文件夹下的 `setenv.bat` 中，在 Windows 上的 Tomcat 服务器上设置该属性。
- en: How to do it...
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the steps to close issues that have been inactive for the
    last 15 days:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关闭过去 15 天内没有活动的任务的步骤：
- en: 'Create a filter that displays issues that are not updated for the last 15 days.
    You can do this by executing the following JQL query:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个筛选器，显示过去 15 天内未更新的任务。你可以通过执行以下 JQL 查询来做到这一点：
- en: '[PRE42]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Save the filter with some name and make a note of the filter ID.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存筛选器并记录筛选器 ID。
- en: '![How to do it...](img/1803-04-20.jpg)'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1803-04-20.jpg)'
- en: You can find the filter ID by hovering over the **Edit** link, as shown. The
    URL will be like `http://localhost:8080/secure/EditFilter!default.jspa?atl_token=084b891405e500819d6443d8378ed37a5bbe4c72&filterId=10010&returnUrl=ManageFilters.jspa`
    where `filterId` is `10010`.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过将鼠标悬停在**编辑**链接上来找到过滤器 ID，如图所示。URL 将类似于 `http://localhost:8080/secure/EditFilter!default.jspa?atl_token=084b891405e500819d6443d8378ed37a5bbe4c72&filterId=10010&returnUrl=ManageFilters.jspa`，其中
    `filterId` 为 `10010`。
- en: Modify the Jelly script provided by Atlassian in order to include the new filter
    ID, workflow step name, username, and password. Also modify the comment accordingly.
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改由 Atlassian 提供的 Jelly 脚本，以包含新的过滤器 ID、工作流步骤名称、用户名和密码。同时相应地修改注释。
- en: 'Here is the modified script:'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是修改后的脚本：
- en: '[PRE43]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Save the script and put it under some location in the server where JIRA is running.
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并将其放置在 JIRA 运行的服务器上的某个位置。
- en: Go to **Administration** | **System** | **Services** **in** **JIRA**.
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**管理** | **系统** | **服务** **在** **JIRA** 中。
- en: 'Add the escalation service:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加升级服务：
- en: '**Name**: Escalation Task'
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：升级任务'
- en: '**Class**: Click on **Built-in services** and select **Run Jelly Script**.
    The class will be selected as `com.atlassian.jira.jelly.service.JellyService`'
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：点击**内置服务**并选择**运行 Jelly 脚本**。类将被选为 `com.atlassian.jira.jelly.service.JellyService`'
- en: '**Delay**: Select a suitable delay, in minutes.'
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：选择一个合适的延迟时间（以分钟为单位）。'
- en: Click on **Add Service**
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**添加服务**
- en: 'On the **Add Service** page, enter the following details:'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加服务**页面，输入以下详细信息：
- en: '**Input File**: Path to the script file we saved in the server'
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入文件**：我们在服务器中保存的脚本文件路径'
- en: '**Output File**: Path to an output log file.'
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出文件**：输出日志文件的路径。'
- en: '**Delay**: Modify if required.'
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：如有需要，进行修改。'
- en: The script will now run the configured delay.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本现在将运行配置的延迟。
- en: How it works...
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'JIRA has its own API for the **Jelly Scripting**. As you can see from the script,
    following are the steps executed:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: JIRA 有自己专用的**Jelly 脚本** API。从脚本中可以看到，以下是执行的步骤：
- en: The script runs the search request on the filter we saved in the first step
    using the `RunSearchRequest` method. It then stores the retrieved results in variable
    issues.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本使用 `RunSearchRequest` 方法在我们在第一步保存的过滤器上运行搜索请求。然后它将检索到的结果存储在变量 issues 中。
- en: Script then iterates on the issues and transitions each of them in the workflow
    using the `TransitionWorkflow` method. It makes use of the key from the issue,
    the workflow user we configured, and the workflow action. It also adds the comment
    we entered in the script.
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本会遍历所有问题，并使用 `TransitionWorkflow` 方法在工作流中对每个问题进行过渡。它使用问题的键、我们配置的工作流用户和工作流操作。同时它还会添加我们在脚本中输入的评论。
- en: Note that the workflow action should be available on the issue from its current
    status. If it is not, the transition will not work. For example, Close workflow
    action will throw an error if attempted on an issue that is already Closed.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，工作流操作应当在问题的当前状态下可用。如果不可用，过渡将无法执行。例如，如果在已经关闭的任务上尝试使用关闭工作流操作，将会抛出错误。
- en: We can modify the script to transition the issue to any workflow status based
    on any filter criteria.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改脚本，以根据任何过滤器条件将问题过渡到任何工作流状态。
- en: A lot of other useful things about Jelly Scripting can be found at [http://confluence.atlassian.com/display/JIRA/Jelly+Tags](http://confluence.atlassian.com/display/JIRA/Jelly+Tags).
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Jelly 脚本的更多有用信息可以在 [http://confluence.atlassian.com/display/JIRA/Jelly+Tags](http://confluence.atlassian.com/display/JIRA/Jelly+Tags)
    中找到。
