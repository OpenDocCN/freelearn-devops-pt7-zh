- en: Chapter 7.  Creating a Custom Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章 创建自定义模块
- en: This chapter will focus on how to write and test custom modules. We've already
    discussed how modules work and how to use them within your tasks. Well, just for
    a quick recap, a module in Ansible is a piece of code, which is transferred and
    executed on your remote host every time you run an Ansible task (it can also run
    locally if you've used `local_action`).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍如何编写和测试自定义模块。我们已经讨论了模块是如何工作的以及如何在任务中使用它们。简单回顾一下，Ansible 中的模块是一段代码，每次运行
    Ansible 任务时，它都会被传输并在远程主机上执行（如果你使用了 `local_action`，它也可以在本地执行）。
- en: From my experience, I've seen custom modules being written whenever a certain
    functionality needs to be exposed as a first-class task. The same functionality
    could have been achieved without the module, but it would have required a series
    of tasks with existing modules to accomplish the end goal and often also command
    and shell modules. For example, let's say you wanted to provision a server via
    **Preboot Execution Environment** (**PXE**). Without a custom module, you would
    have probably used a few shell or command tasks to accomplish the same. However,
    with a custom module, you would just pass the required parameters to it and the
    business logic will be embedded within the custom module in order to perform the
    PXE boot. This gives you the ability to write playbooks that are much simpler
    to read and a bigger reusability of the code, since you create the module once
    and you can use it everywhere, in your roles and playbooks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，每当需要将某些功能暴露为一等任务时，我看到过自定义模块的编写。虽然没有模块也能实现相同的功能，但这通常需要通过一系列现有模块的任务来完成目标，而且通常还需要命令和
    shell 模块。例如，假设你想通过**预启动执行环境**（**PXE**）来配置一个服务器。如果没有自定义模块，你可能会使用一些 shell 或命令任务来完成同样的事情。然而，使用自定义模块，你只需将所需参数传递给它，业务逻辑将嵌入到自定义模块中以执行
    PXE 启动。这使得你能够编写更易读的 playbook，并且代码的重用性更高，因为你只需要创建一次模块，就可以在角色和 playbook 中随处使用它。
- en: The arguments that you pass to a module, provided they are in a key-value format,
    will be forwarded in a separate file along with the module. Ansible expects at
    least two variables in your module output, (that is, the result of the module
    run) whether it passed or failed, and a message for the user, and they both have
    to be in the JSON format. If you adhere to this simple rule, you can customize
    as much as you want!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给模块的参数，只要它们是键值格式，就会与模块一起转发到一个单独的文件中。Ansible 期望在模块的输出中至少有两个变量（即模块执行结果），无论是成功还是失败，还需要包含一个给用户的消息，这两个变量必须采用
    JSON 格式。如果你遵循这个简单的规则，你就可以根据需要进行定制！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Python modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 模块
- en: Bash modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash 模块
- en: Ruby modules
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby 模块
- en: Testing modules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试模块
- en: When you choose a particular technology or tool, you generally start with what
    it offers. You slowly understand the philosophy behind building the tool and what
    problems it helps you solve. However, you truly feel comfortable and in control
    only when you understand in depth how it works. At some stage, to utilize the
    complete power of a tool, you'll have to customize it in ways and means that suit
    your particular needs. Over a period of time, tools that provide you with an easy
    way to plug in new functionalities stay, and those that don't, disappear from
    the market. It's a similar story with Ansible as well. All tasks in Ansible playbooks
    are modules of some kind and it comes loaded with hundreds of modules. You will
    find a module for almost everything you might need. However, there are always
    exceptions. This is where the power to extend it comes in.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择一种特定的技术或工具时，通常会从它所提供的功能开始。你慢慢理解构建该工具背后的理念，以及它能帮助你解决什么问题。然而，只有当你深入理解它的工作原理时，你才会真正感到舒适并掌控全局。在某个阶段，为了充分利用工具的所有功能，你将不得不以适应自己需求的方式和手段来定制它。随着时间的推移，能够轻松插入新功能的工具会留下来，而不能做到这一点的工具则会消失在市场上。Ansible
    也有类似的故事。Ansible playbook 中的所有任务都是某种类型的模块，它自带数百个模块。你几乎可以找到满足你所有需求的模块。然而，总是会有一些例外，这时扩展它的能力就显得尤为重要。
- en: Chef provides **Lightweight Resources and Providers** (**LWRPs**) to perform
    this activity and Ansible allows you to extend its functionality using custom
    modules. The significant difference, however, is that you can write the module
    in any language of your choice (provided you have an interpreter of that language),
    whereas in Chef, the module has to be in Ruby. Ansible developers recommend using
    Python for any complex module, as there is out-of-the-box support to parse arguments;
    almost all ***nix** systems have Python installed by default and Ansible itself
    is written in Python. To be complete, in this chapter we will also see how you
    can write modules in other languages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Chef提供了**轻量级资源和提供者**（**LWRPs**）来执行此活动，而Ansible允许你使用自定义模块扩展其功能。然而，显著的区别在于，你可以用任何你选择的语言编写模块（只要你有该语言的解释器），而在Chef中，模块必须用Ruby编写。Ansible开发者推荐对任何复杂模块使用Python，因为它支持开箱即用的参数解析；几乎所有***nix**系统都默认安装Python，而Ansible本身就是用Python编写的。为了完整起见，本章还将介绍如何用其他语言编写模块。
- en: 'To make your custom modules available to Ansible, you can do one of the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 若要使你的自定义模块对Ansible可用，你可以执行以下操作之一：
- en: Specify the path to your custom module in the environment variable `ANSIBLE_LIBRARY`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在环境变量`ANSIBLE_LIBRARY`中指定自定义模块的路径
- en: Use the `--module-path` command-line option
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--module-path`命令行选项
- en: Drop the modules in the `library` directory in your Ansible top-level directory
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模块放入Ansible顶级目录中的`library`目录
- en: With this background information, let's look at some code!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些背景信息，接下来我们来看一些代码！
- en: Using Python modules
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python模块
- en: 'Ansible intends to allow users to write modules in any language. Writing the
    module in Python, however, has its own advantages. You can take advantage of Ansible''s
    libraries to shorten your code, an advantage not available for modules in other
    languages. Parsing user arguments, handling errors, and returning the required
    values becomes easier with the help of the Ansible libraries. We will see two
    examples for a custom Python module, one with and one without using the Ansible
    library, to give you a glimpse of how custom modules work. Make sure you organize
    your directory structure as mentioned in the previous section before creating
    the module. The first example creates a module named `check_user`. To do so, we
    will need to create the `check_user` file in the `library` folder within the Ansible
    top-level directory, with the following content:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible旨在允许用户用任何语言编写模块。然而，使用Python编写模块有其独特的优势。你可以利用Ansible的库来简化代码，这是其他语言模块无法享有的优势。借助Ansible库，解析用户参数、处理错误和返回所需值变得更加容易。我们将通过两个自定义Python模块的例子来展示模块的工作方式，一个使用了Ansible库，另一个没有使用。请确保在创建模块之前，按前一节提到的方式组织好目录结构。第一个例子创建了一个名为`check_user`的模块。为此，我们需要在Ansible顶级目录中的`library`文件夹中创建`check_user`文件，内容如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding custom module, `check_user`, will check whether a user exists
    on a host. The module expects a user argument from Ansible. Let''s break down
    the preceding module and see what it does. We first declare the **Interpreter**
    (Python) and import the libraries required to parse the arguments:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的自定义模块`check_user`将检查主机上是否存在某个用户。该模块期望Ansible传入一个用户参数。让我们分解前面的模块，看看它是如何工作的。我们首先声明**解释器**（Python），并导入解析参数所需的库：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the `sys` library, we then parse the arguments, which are passed in a
    file by Ansible. The arguments are in the format `param1=value1 param2=value2`
    where `param1` and `param2` are parameters and `value1` and `value2` are values
    of the parameters. There are multiple ways to split arguments and create a dictionary
    and we''ve chosen an easy way to perform the operation. We first create a list
    of arguments by splitting the arguments with a whitespace character, and then
    separate the key and value by splitting the arguments with an `=` character and
    assigning it to a Python dictionary. For example, if you have a string such as
    `user=foo gid=1000`, then you will first create a list, which will look like `["user=foo",
    "gid=1000"]` and then loop over this list to create a dictionary. This dictionary
    will look like `{"user": "foo", "gid": 1000}`. This is performed by the following
    lines:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '使用`sys`库，我们然后解析由Ansible在文件中传递的参数。参数的格式为`param1=value1 param2=value2`，其中`param1`和`param2`是参数，`value1`和`value2`是参数的值。有多种方法可以分割参数并创建字典，我们选择了一种简单的方式来执行操作。我们首先通过空白字符分割参数创建参数列表，然后通过`=`字符分割参数并将其赋值给Python字典中的键和值。例如，如果您有一个字符串如`user=foo
    gid=1000`，那么您首先创建一个列表，看起来像`["user=foo", "gid=1000"]`，然后循环遍历此列表以创建一个字典。此字典将看起来像`{"user":
    "foo", "gid": 1000}`。这是通过以下行执行的：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We separate the arguments based on a whitespace character because this is the
    standard followed by core Ansible modules. You can use any separator instead of
    a whitespace, but we would encourage you to maintain uniformity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基于空白字符分隔参数，因为这是核心Ansible模块遵循的标准。您可以使用任何分隔符代替空格，但我们建议保持统一性。
- en: 'Once we have the user argument, we then check whether that user exists on the
    host as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了用户参数，我们就检查该用户是否存在于主机上，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We use the `pwd` library to check the `passwd` file for the user. For the sake
    of simplicity, we use two variables: one to store the success or failure message
    and the other to store the message for the user. Finally, we use the variables
    created in the `try-catch` block to check if the module succeeded or failed, as
    you can see in this snippet:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`pwd`库来检查用户的`passwd`文件。为简单起见，我们使用两个变量：一个用于存储成功或失败消息，另一个用于存储用户的消息。最后，我们使用在`try-catch`块中创建的变量来检查模块是否成功或失败，正如您在这个片段中所看到的：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If the module succeeds, then we will exit the execution with an exit code 0
    [`exit(0)`]; else, we will exit with a non-zero code. Ansible will look for the
    failed variable and if it is set to `True`, it will exit unless you have explicitly
    asked Ansible to ignore errors using the `ignore_errors` parameter. You can use
    customized modules like any other core module of Ansible. To test the custom module,
    we will need a playbook, so let''s create the file `playbooks/check_user.yaml`
    with the following content:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块成功，则将以退出码0退出执行[`exit(0)`]；否则，将以非零代码退出。Ansible将查找失败变量，如果设置为`True`，则将退出，除非您显式要求Ansible使用`ignore_errors`参数忽略错误。您可以像使用Ansible的任何其他核心模块一样使用自定义模块。要测试自定义模块，我们将需要一个playbook，所以让我们创建文件`playbooks/check_user.yaml`，内容如下：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we used the `check_user` module like any other core module.
    Ansible will execute this module on the remote host by copying the module to the
    remote host with arguments in a separate file. Let''s see how this playbook runs
    with the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们像任何其他核心模块一样使用了`check_user`模块。Ansible将通过将模块和参数复制到远程主机上执行此模块，并存储在一个单独的文件中。让我们看看以下playbook是如何运行的：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We should receive the following output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该收到以下输出：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As expected, since we have the `root` user, but not the `this_user_does_not_exists`,
    it passed the first check, but failed at the second.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，由于我们有`root`用户，但没有`this_user_does_not_exists`，它通过了第一个检查，但在第二个检查时失败了。
- en: 'Ansible also provides a Python library to parse user arguments and handle errors
    and returns. It''s time to see how the Ansible Python library is useful to make
    your code shorter, faster, and less error prone. To do so, let''s create a file
    called `library/check_user_py2.py` with the following content:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还提供了一个Python库来解析用户参数并处理错误和返回。现在是时候看看Ansible Python库如何帮助您使代码更短、更快且更不容易出错了。为此，让我们创建一个名为`library/check_user_py2.py`的文件，内容如下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s break down the preceding module and see how it works, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解上述模块并看看它是如何工作的，如下所示：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we do not import `sys`, `shlex` and `json`; we are not using
    them anymore, since all the operations that required them are now done by Ansible
    `module_utils`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们没有导入`sys`、`shlex`和`json`；我们不再使用它们，因为所有需要它们的操作现在都由Ansible的`module_utils`完成。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Previously, we performed a lot of processing on the argument file to get the
    final user arguments. Ansible makes it easy by providing an `AnsibleModule` class,
    which does all the processing on its own and provides us with the final arguments.
    The `required=True` parameter means that the argument is mandatory and the execution
    will fail if the argument is not passed. The default value for required is `False`,
    which will allow users to skip the argument. You can then access the value of
    the arguments through the `module.params` dictionary by calling the `get` method
    on `module.params`. The logic to check users on the remote host will remain the
    same, but the error handling and return aspect will change as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们对参数文件进行了大量处理以获取最终的用户参数。Ansible通过提供一个`AnsibleModule`类使这一过程变得简单，它会自动处理所有操作并提供最终的参数。`required=True`参数表示该参数是必需的，如果没有传递该参数，执行将失败。`required`的默认值是`False`，这意味着用户可以跳过该参数。然后，你可以通过调用`module.params`字典上的`get`方法来访问这些参数的值。远程主机上的用户检查逻辑将保持不变，但错误处理和返回部分将如下所示：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: One of the advantages of using the `AnsibleModule` object, is that you have
    very nice facility to handle returning values to the playbook. We will go into
    more depth in the next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AnsibleModule`对象的一个优点是，它提供了非常好的功能来处理返回值到playbook。我们将在下一节深入探讨这一点。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We could have condensed the logic to check user and the return section, but
    we kept them divided for readability.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以将检查用户的逻辑和返回部分合并，但为了可读性，我们保持了它们分开。
- en: 'To verify that everything works as expected, we can create a new playbook in
    `playbooks/check_user_py2.yaml` with the following content:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证一切是否按预期工作，我们可以在`playbooks/check_user_py2.yaml`中创建一个新的playbook，内容如下：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run it with the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We should receive the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该收到以下输出：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Which is consistent with our expectations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们的预期一致。
- en: Working with exit_json and fail_json
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`exit_json`和`fail_json`处理
- en: Ansible provides a shorter way to handle success and failure by providing the
    `exit_json` and `fail_json` methods, respectively. You can directly pass a message
    to these methods and Ansible will take care of the rest. You can also pass additional
    variables to these methods and Ansible will print those variables to `stdout`.
    For example, apart from the message, you might also want to print the `uid` and
    `gid` parameters of the user. You can do this by passing these variables to the
    `exit_json` method separated by a comma.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible通过提供`exit_json`和`fail_json`方法，提供了一种更简便的方式来处理成功和失败。你可以直接将消息传递给这些方法，Ansible会处理其余部分。你还可以向这些方法传递额外的变量，Ansible会将这些变量打印到`stdout`。例如，除了消息外，你可能还想打印用户的`uid`和`gid`参数。你可以通过将这些变量与逗号分隔后传递给`exit_json`方法来实现。
- en: 'Let''s see how you can return multiple values to `stdout`, which is demonstrated
    in the following code placed in `library/check_user_id.py`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将多个值返回到`stdout`，这在以下代码中得以演示，该代码位于`library/check_user_id.py`中：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, we return the `uid` and `gid` of the user along with the message,
    `msg`. You can have multiple values and Ansible will print all of them in a dictionary
    format. We can create a playbook in `playbooks/check_user_id.yaml` with the following
    content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们返回了用户的`uid`和`gid`以及消息`msg`。你可以有多个值，Ansible会以字典格式打印所有这些值。我们可以在`playbooks/check_user_id.yaml`中创建一个playbook，内容如下：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run it with the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We should receive the following output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该收到以下输出：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Testing Python modules
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试Python模块
- en: 'As we have seen, you can test your modules creating very simple playbooks that
    run them. You can also test your module by running it more directly. To do so,
    we''ll need to clone the Ansible official repository (if you haven''t done it
    yet):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，你可以通过创建非常简单的playbook来测试你的模块。你也可以通过更直接的方式来测试你的模块。为此，我们需要克隆Ansible的官方仓库（如果你还没有克隆的话）：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Source an environmental file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 引入环境文件：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can now use the `test-module` utility to run the script passing the filename
    as a command-line argument:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用`test-module`工具运行脚本，并将文件名作为命令行参数传递：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result will be something like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将类似于以下内容：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's also simple to execute the script directly, if you have not used the `AnsibleModule`,
    this is due the fact that this module requires lots of Ansible-specific variables,
    so it's more complex to "simulate" an Ansible run than to actually run Ansible
    itself.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用`AnsibleModule`，直接执行脚本也很简单，这主要是因为该模块需要大量的Ansible特定变量，因此模拟Ansible的运行比直接运行Ansible本身要复杂。
- en: Using bash modules
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bash模块
- en: Bash modules in Ansible are no different than any other bash scripts, except
    the way it prints the data on `stdout`. Bash modules could be as simple as checking
    if a process is running on the remote host to running some complex commands.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible中的Bash模块与其他Bash脚本没有什么不同，区别仅在于它打印数据的方式，即打印到`stdout`。Bash模块可以非常简单，比如检查远程主机上是否有进程在运行，也可以运行一些复杂的命令。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As previously stated, the general recommendation is to use Python for modules.
    In my opinion the second-best choice (only for very easy modules) is `bash` module
    due to its simplicity and user base.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，一般建议使用Python编写模块。在我看来，第二个最佳选择（仅适用于非常简单的模块）是`bash`模块，因为它简单且有广泛的用户基础。
- en: 'Let''s create the file `library/kill_java.sh` with the following content:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`library/kill_java.sh`的文件，内容如下：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding `bash` module will take the `service_name` argument and forcefully
    kill all of the Java processes that belong to that service. As you know, Ansible
    passes the argument file to the module. We then source the arguments file using
    source `$1`. This will actually set the environment variable with the name, `service_name`.
    We then access this variable using `$service_name` as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`bash`模块将获取`service_name`参数，并强制终止属于该服务的所有Java进程。正如你所知道的，Ansible将参数文件传递给模块。然后，我们使用`source
    $1`来加载参数文件，这实际上会将名为`service_name`的环境变量设置好。接着，我们通过`$service_name`来访问该变量，如下所示：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We then check to see if we obtained any PIDs for the service and run a loop
    over it to forcefully kill all of the Java processes that match `service_name`.
    Once they''re killed, we exit the module with `failed=False` and a message with
    an exit code of `0`, as you can see here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们检查是否获得了任何该服务的PID，并对其进行循环操作，强制终止所有与`service_name`匹配的Java进程。进程结束后，我们以`failed=False`和退出码`0`退出模块，并附带一条消息，正如你在这里看到的：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we do not find any running process for the service, we will still exit the
    module with an exit code of `0` because terminating the Ansible run might not
    make sense; this is in the following part:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有找到任何正在运行的服务进程，我们仍然会以退出码`0`退出模块，因为终止Ansible的运行可能没有意义；这一部分代码如下：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also terminate the Ansible run by printing `failed=True` with an exit
    code of `1`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过打印`failed=True`并退出码为`1`来终止Ansible的运行。
- en: 'Ansible allows you to return a key-value output if the language itself doesn''t
    support JSON. This makes Ansible more developer/sysadmin-friendly and allows custom
    modules to be written in any language of one''s choice. Let''s test the `bash`
    module by passing the arguments file to the module. We can now create an arguments
    file in `/tmp/arguments` that has the `service_name` parameter set to Jenkins,
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible允许你返回键值输出，即使语言本身不支持JSON。这使得Ansible对开发者和系统管理员更友好，并允许用任何自己选择的语言编写自定义模块。让我们通过将参数文件传递给模块来测试`bash`模块。现在，我们可以在`/tmp/arguments`目录下创建一个参数文件，并将`service_name`参数设置为Jenkins，如下所示：
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, you can run the module like any other bash script. Let''s see what happens
    when we run it with:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以像运行其他Bash脚本一样运行该模块。让我们看看当我们运行它时会发生什么：
- en: '[PRE28]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We should receive the following output:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该收到以下输出：
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As expected, the module did not fail even though there was no Jenkins process
    running on the localhost.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，即使本地主机上没有Jenkins进程运行，模块也没有失败。
- en: Using Ruby modules
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ruby模块
- en: 'Writing modules in Ruby is as easy as writing a module in Python or bash. You
    just need to take care of the arguments, errors, return statements, and of course,
    know basic Ruby! Let''s create the `library/rsync.rb` file with the following
    code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ruby中编写模块和在Python或Bash中编写模块一样简单。你只需要处理好参数、错误、返回语句，当然，还需要掌握基本的Ruby！让我们创建一个名为`library/rsync.rb`的文件，并写入以下代码：
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding module, we first process the user arguments, then copy the
    file using the `rsync` library, and finally, return the output. Let's break down
    the preceding code and see how it works.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的模块中，我们首先处理用户的参数，然后使用`rsync`库复制文件，最后返回输出。让我们分解前面的代码，看看它是如何工作的。
- en: 'We first wrote a method, `print_message`, which will print the output in a
    JSON format. By doing this, we can reuse the same code in multiple places. Remember,
    the output of your module should contain `failed=true` if you want the Ansible
    run to fail; otherwise, Ansible will think that the module succeeded and will
    continue with the next task. The output obtained is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先编写了一个方法 `print_message`，该方法将输出以 JSON 格式打印。通过这样做，我们可以在多个地方重用相同的代码。记住，如果你希望
    Ansible 运行失败，你的模块输出应包含 `failed=true`；否则，Ansible 会认为模块成功，并继续执行下一个任务。得到的输出如下：
- en: '[PRE31]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We then process the arguments file, which contains a key-value pair separated
    by a whitespace character. This is similar to what we did with the Python module
    earlier, where we took care of parsing out the arguments. We also perform some
    checks to make sure that the user has not missed any required argument. In this
    case, we check if the `src` and `dest` parameters have been specified and print
    a message if the arguments are not provided. Further checks could include the
    format and type of arguments. You can add these checks and any other checks you
    deem important. For example, if one of your parameters is a `date`, then you''d
    like to verify that the input is actually the right date. Consider the following
    piece of code, which shows the discussed parameters:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们处理参数文件，该文件包含由空格分隔的键值对。这与我们之前使用 Python 模块的方式类似，我们也要解析出这些参数。同时，我们进行一些检查，确保用户没有遗漏任何必需的参数。在此例中，我们检查是否已指定
    `src` 和 `dest` 参数，并在参数未提供时打印消息。进一步的检查可以包括参数的格式和类型。你可以添加这些检查以及任何你认为重要的检查。例如，如果某个参数是
    `date`，你可能希望验证输入的确是正确的日期。考虑以下代码片段，它展示了讨论过的参数：
- en: '[PRE32]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once we have the required arguments, we will go ahead and copy the file using
    the `rsync` library as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获取到所需的参数，我们将使用 `rsync` 库来复制文件，如下所示：
- en: '[PRE33]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, we check if the `rsync` task passed or failed and call the `print_message`
    function to print the output on `stdout` as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查 `rsync` 任务是通过还是失败，并调用 `print_message` 函数将输出打印到 `stdout`，如下所示：
- en: '[PRE34]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can test your Ruby module by simply passing the arguments file to the module.
    To do so, we can create the file `/tmp/arguments` with the following content:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过简单地将参数文件传递给模块来测试 Ruby 模块。为此，我们可以创建一个名为 `/tmp/arguments` 的文件，内容如下：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s now run the module, as shown:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行该模块，如下所示：
- en: '[PRE36]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We will receive the following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将收到以下输出：
- en: '[PRE37]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We will leave the `serverspec` testing for you to complete.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将留给你完成 `serverspec` 测试部分。
- en: Testing modules
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试模块
- en: Testing is often undervalued due to lack of understanding of its purpose and
    the benefits it can bring to the business. Testing modules is as important as
    testing any other part of the Ansible playbook because a small change in a module
    can break your entire playbook. We will take an example of the Python module that
    we wrote in the first section of this chapter and write an integration test using
    Python's nose test framework. Unit tests are also encouraged, but for our scenario
    where we check if a user exists remotely, an integration test makes more sense.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 测试往往被低估，因为对其目的和带来的好处缺乏理解。测试模块和测试 Ansible 剧本的其他部分一样重要，因为模块中的一个小改动可能会破坏整个剧本。我们将以本章第一部分编写的
    Python 模块为例，使用 Python 的 nose 测试框架编写集成测试。单元测试也是被推荐的，但对于我们的场景——检查某个用户是否存在远程主机，集成测试更加合适。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: '`nose` is a Python test framework. For more information, visit [https://nose.readthedocs.org/en/latest/](https://nose.readthedocs.org/en/latest/).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`nose` 是一个 Python 测试框架。更多信息，请访问 [https://nose.readthedocs.org/en/latest/](https://nose.readthedocs.org/en/latest/)。'
- en: 'To `test` the module, we convert our previous module into a Python class so
    that we can directly import the class in our test, and run only the main logic
    of the module. The following code shows the `library/check_user_py3.py` restructured
    module, which will check whether a user exists on a remote host:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了 `test` 模块，我们将之前的模块转换为 Python 类，以便我们可以在测试中直接导入该类，只运行模块的主要逻辑。以下代码展示了重新结构化后的
    `library/check_user_py3.py` 模块，它将检查远程主机上是否存在某个用户：
- en: '[PRE38]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As you can see in the preceding code, we created a class named `User`. We instantiated
    the class, and called the `check_if_user_exists` method to check if the user actually
    exists on the remote machine. It''s time to write an integration test now. We
    assume that you have the `nose` package installed on your system. If not, don''t
    worry! You can still install the package by using the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在上面的代码中看到的，我们创建了一个名为 `User` 的类。我们实例化了该类，并调用 `check_if_user_exists` 方法来检查用户是否实际存在于远程机器上。现在是时候编写集成测试了。我们假设你已经在系统上安装了
    `nose` 包。如果没有，不用担心！你仍然可以通过以下命令安装该包：
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s now write the integration test file in `library/test_check_user_py3.py`
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在编写集成测试文件 `library/test_check_user_py3.py`，内容如下：
- en: '[PRE40]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding integration test, we import the `nose` package and our module,
    `check_user`. We call the `User` class by passing the user we want to check. We
    then check whether the user exists on the remote host by calling the `check_if_user_exists()`
    method. The `nose` methods, `assert_true`, `assert_false`, and `assert_equals`
    can be used to compare the expected value against the actual. Only if the assert
    methods pass, will the test pass. You can have multiple tests inside the same
    file by having multiple methods whose names start with `test_`, for example, the
    `test_check_user_positive()` and `test_check_user_negative()` methods. Nose tests
    will take all the methods that start with `test_` and execute them.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的集成测试中，我们导入了 `nose` 包和我们的模块 `check_user`。我们通过传入要检查的用户来调用 `User` 类。然后，我们通过调用
    `check_if_user_exists()` 方法来检查用户是否存在于远程主机上。`nose` 的方法 `assert_true`、`assert_false`
    和 `assert_equals` 可以用于将预期值与实际值进行比较。只有当断言方法通过时，测试才会通过。你可以在同一个文件中编写多个测试方法，只需让这些方法的名称以
    `test_` 开头，例如 `test_check_user_positive()` 和 `test_check_user_negative()` 方法。Nose
    测试会执行所有以 `test_` 开头的方法。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you can see, we actually created two tests for just one function. This is
    a key part of tests. Always try cases where you know it will work, but also do
    not forget to test cases where you expect it to fail.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们实际上为一个函数创建了两个测试。这是测试的一个关键部分。始终尝试测试你知道肯定能成功的情况，但也不要忘记测试那些你预期会失败的情况。
- en: 'We can now test if it works running nose in the following way:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下方式运行 nose 来测试它是否有效：
- en: '[PRE41]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You should receive output similar to this:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会收到类似下面的输出：
- en: '[PRE42]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: As you can see, the test passed because the `root` user existed on the host
    while the `this_user_does_not_exists` user does not exist.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，测试通过了，因为 `root` 用户存在于主机上，而 `this_user_does_not_exists` 用户则不存在。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We use the `-v` option with  `nose` tests for the **verbose** mode.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `nose` 测试中使用了 `-v` 选项来开启 **详细模式**。
- en: For more complicated modules, we recommend that you write unit tests and integration
    tests. You might wonder why we didn't use `serverspec` to test the module.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的模块，我们建议你编写单元测试和集成测试。你可能会想，为什么我们不使用 `serverspec` 来测试这个模块。
- en: We still recommend running `serverspec` tests for functional testing as part
    of playbooks, but for unit and integration tests, it's recommended to use well-known
    frameworks. Similarly, if you write Ruby modules, we recommend you write tests
    for them with a framework such as `rspec`. If your custom Ansible module has multiple
    parameters with multiple combinations, then you will write more tests to test
    each scenario. Finally, we recommend that your run all these tests as part of
    your CI system, be it Jenkins, Travis, or any other system.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然建议在 playbooks 中作为功能测试运行 `serverspec` 测试，但对于单元和集成测试，建议使用知名的框架。同样，如果你编写 Ruby
    模块，我们建议你使用诸如 `rspec` 的框架来为它们编写测试。如果你的自定义 Ansible 模块有多个参数和多个组合，那么你将需要编写更多的测试来测试每种场景。最后，我们建议你将所有这些测试作为
    CI 系统的一部分来运行，无论是 Jenkins、Travis 还是任何其他系统。
- en: Questions
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 问题
- en: 'A couple of questions to think about are given in the this section:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本节给出了一些问题供你思考：
- en: Can you think of common tasks that you perform daily and how you would write
    Ansible modules for them? List them down in terms of how you would invoke the
    module from a playbook.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能想到你每天执行的常见任务以及如何为这些任务编写 Ansible 模块吗？请按你如何在 playbook 中调用模块的方式列出这些任务。
- en: Which language do you think your team would be comfortable using for your modules?
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你认为你的团队会使用哪种语言来编写模块？
- en: Can you revisit the roles that you might have written after [Chapter 3](ch03.html
    "Chapter 3. Scaling to Multiple Hosts"), *Scaling to Multiple Hosts*, and see
    which of them can potentially be converted into custom modules?
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能回顾一下你在[第3章](ch03.html "第3章. 扩展到多个主机")《扩展到多个主机》中可能编写的角色，并查看哪些可以潜在地转换为自定义模块吗？
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With this, we come to the end of this rather small but important chapter, which
    focused on how you can extend Ansible by writing your own custom modules. You
    learned how to use Python, Bash, and Ruby in order to write your modules. We've
    also seen how to write integration tests for modules so that they can be integrated
    into your CI system. In future, hopefully, extending your Ansible functionality
    using modules should be way easier!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这部分内容，我们来到了这个较小但重要的章节的结束，这一章的重点是如何通过编写自定义模块来扩展 Ansible。你学习了如何使用 Python、Bash
    和 Ruby 来编写你的模块。我们还看到了如何为模块编写集成测试，以便它们能够集成到你的 CI 系统中。未来，扩展你的 Ansible 功能通过模块应该会变得更加简单！
- en: Next, we will step into the world of provisioning, deployment, and orchestration
    and look at how Ansible solves our infrastructure problems when we provision new
    instances or want to deploy software updates to various instances in our environments.
    We promise that the journey is going to be fun!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进入配置、部署和编排的世界，看看 Ansible 如何解决我们在配置新实例或想要将软件更新部署到我们环境中各个实例时遇到的基础设施问题。我们保证这段旅程会很有趣！
