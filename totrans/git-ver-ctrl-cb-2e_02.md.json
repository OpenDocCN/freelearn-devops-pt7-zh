["```\n$ git clone https://git.eclipse.org/r/jgit/jgit\n$ cd jgit\n```", "```\n$ git config --list --system\ncore.symlinks=false\ncore.autocrlf=true\ncolor.diff=auto\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=true\npack.packsizelimit=2g\nhelp.format=html\nhttp.sslcainfo=/bin/curl-ca-bundle.crt\nsendemail.smtpserver=/bin/msmtp.exe\ndiff.astextplain.textconv=astextplain\nrebase.autosquash=true\n\n# list the global configuration    \n$ git config --list --global\nmerge.tool=kdiff3\nmergetool.kdiff3.path=C:/Program Files (x86)/KDiff3/kdiff3.exe\ndiff.guitool=kdiff3\ndifftool.kdiff3.path=C:/Program Files (x86)/KDiff3/kdiff3.exe\ncore.editor=\"C:/Program Files (x86)/GitExtensions/GitExtensions.exe\" fileeditor\ncore.autocrlf=true\ncredential.helper=!\"C:/Program Files (x86)/GitExtensions/GitCredentialWinStore/git-credential-winst\nore.exe\"\nuser.name=John Doe\nuser.email=john.doe@example.com \n# list the configuration for this repository\n$ git config --list --local\ncore.repositoryformatversion=0\ncore.filemode=false\ncore.bare=false\ncore.logallrefupdates=true\ncore.symlinks=false\ncore.ignorecase=true\ncore.hidedotfiles=dotGitOnly\nremote.origin.url=https://git.eclipse.org/r/jgit/jgit\n    remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n    branch.master.remote=origin\n    branch.master.merge=refs/heads/master\n```", "```\n$ git config --global user.email\njohn.doe@example.com \n```", "```\n$ git config --local user.email john@example.com \n```", "```\n$ git config --global core.editor vim  \n```", "```\n$ cd jgit\n```", "```\n$ git config --list\nuser.name=John Doe\nuser.email=john.doe@example.com\ncore.repositoryformatversion=0\ncore.filemode=false\ncore.bare=false\ncore.logallrefupdates=true\nremote.origin.url=https://git.eclipse.org/r/jgit/jgit\n    remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\n    branch.master.remote=origin\n    branch.master.merge=refs/heads/master\n```", "```\n$ git config user.name\nJohn Doe\n$ git config remote.origin.url\nhttps://git.eclipse.org/r/jgit/jgit\n```", "```\n$ cat .git/config\n  [core]\n    repositoryformatversion = 0\n    filemode = false\n    bare = false\n    logallrefupdates = true\n  [remote \"origin\"]\n    url = https://git.eclipse.org/r/jgit/jgit\n    fetch = +refs/heads/*:refs/remotes/origin/*\n  [branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n```", "```\ngit config user.email john.doe@example.com\n```", "```\ngit config user.name \"John Doe\"\n```", "```\n$ git config my.own.config \"Whatever I need\"  \n```", "```\n$ git config my.own.config \nWhatever I need  \n```", "```\n$ git config --unset my.own.config  \n```", "```\n$ git config my.own.config \n```", "```\n$ git clone https://github.com/PacktPublishing/Git-Version-Control-Cookbook-Second-Edition.git\n$ cd Git-Version-Control-Cookbook-Second-Edition  \n```", "```\nShort description of commit \n\nLonger explanation of the motivation for the change Fixes-Bug: Enter bug-id or delete line \nImplements-Requirement: Enter requirement-id or delete line \n```", "```\n$ git config --global commit.template $HOME/.gitcommitmsg.txt\n```", "```\n$ git commit\n\nShort description of commit\n\nLonger explanation of the motivation for the change\n\nFixes-Bug: Enter bug-id or delete line\nImplements-Requirement: Enter requirement-id or delete line\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#  modified:   another-file.txt\n#\n~\n~\n\".git/COMMIT_EDITMSG\" 13 lines, 396 characters\n```", "```\n$ mkdir ~/.git_template\n```", "```\n$ mkdir ~/.git_template/{hooks,info}\n```", "```\n$ cd ~/.git_template/hooks\n$ cp /usr/share/git-core/templates/hooks/* .\n```", "```\n#!/bin/sh\nMSG_FILE=\"$1\"\necho \"\\nHi from the template commit-msg hook\" >> $MSG_FILE\n```", "```\nchmod +x ~/.git_template/hooks/commit-msg\n```", "```\n$ echo \"*.txt\" > ~/.git_template/info/exclude\n```", "```\n$ git config --global init.templatedir ~/.git_template\n```", "```\n$ git init template-example\n$ cd template-example\n```", "```\n$ echo \"this is the readme file\" > README.txt\n$ git status \n```", "```\n$ echo \"something to commit\" > somefile\n$ git add somefile\n$ git commit -m \"Committed something\"\n```", "```\n$ git log -1\ncommit 1f7d63d7e08e96dda3da63eadc17f35132d24064\nAuthor: John Doe <john.doe@example.com>\nDate:   Mon Jan 6 20:14:21 2014 +0100\n\n  Committed something\n\n  Hi from the template commit-msg hook\n```", "```\n$ cd Git-Version-Control-Cookbook-Second-Edition  \n```", "```\n$ git config pull.rebase true  \n```", "```\n$ git config branch.autosetuprebase always\n```", "```\n$ git config branch.feature/2.rebase true\n```", "```\n$ git config gc./refs/remote/*.reflogexpire never\n$ git config gc./refs/remote/*.reflogexpireunreachable \"2 months\"  \n```", "```\n$ git config gc.pruneexpire 3.days.ago  \n```", "```\n$ git statis\ngit: 'statis' is not a git command. See 'git --help'.\n\nDid you mean this?\n status \n```", "```\n$ git config help.autocorrect 5\n$ git statis\nWARNING: You called a Git command named 'statis', which does not exist.\nContinuing under the assumption that you meant 'status'\nin 0.5 seconds automatically...\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   another-file.txt\n#\n```", "```\n$ git clone https://git.eclipse.org/r/jgit/jgit\n$ cd jgit\n$ git checkout master && git reset --hard b14a939  \n```", "```\n$ git config --global alias.co checkout \n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status \n```", "```\n$ git st\n# On branch master\nnothing to commit, working directory clean  \n```", "```\n$ git config --global alias.unstage 'reset HEAD --' \n```", "```\n$ git st\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   README.md\n#  \n```", "```\n$ git unstage README.md\nUnstaged changes after reset:\nM       README.md\n\n$ git st\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   README.md\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```", "```\n$ git config --global alias.ll \"log --pretty=format:\"%C(yellow)%h%Cred%d %Creset%s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --numstat\"\n```", "```\n$ git ll\nb14a939 (HEAD, master) Prepare 3.3.0-SNAPSHOT builds (8 days ago) <Matthias Sohn>\n6       6       org.eclipse.jgit.ant.test/META-INF/MANIFEST.MF\n1       1       org.eclipse.jgit.ant.test/pom.xml\n3       3       org.eclipse.jgit.ant/META-INF/MANIFEST.MF\n1       1       org.eclipse.jgit.ant/pom.xml\n4       4       org.eclipse.jgit.archive/META-INF/MANIFEST.MF\n2       2       org.eclipse.jgit.archive/META-INF/SOURCE-MANIFEST.MF\n1       1       org.eclipse.jgit.archive/pom.xml\n6       6       org.eclipse.jgit.console/META-INF/MANIFEST.MF\n1       1       org.eclipse.jgit.console/pom.xml\n12      12      org.eclipse.jgit.http.server/META-INF/MANIFEST.MF\n...\n```", "```\neditconflicted = \"!f() {git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR 'f'\"\n```", "```\n$ git branch A 03f78fc\n$ git branch B 9891497\n$ git checkout A\nSwitched to branch 'A'\n\n$ git merge B  \n```", "```\naddconflicted = \"!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add 'f'\"  \n```", "```\n$ git st\nOn branch A\nAll conflicts fixed but you are still merging.\n (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n modified:   org.eclipse.jgit.console/META-INF/MANIFEST.MF\n modified:   org.eclipse.jgit.console/pom.xml\n modified:   org.eclipse.jgit.http.server/META-INF/MANIFEST.MF\n modified:   org.eclipse.jgit.http.server/pom.xml\n modified:   org.eclipse.jgit.http.test/META-INF/MANIFEST.MF\n modified:   org.eclipse.jgit.http.test/pom.xml\n ...\nNow we can conclude the merge with git commit:\n$ git commit\n[A 94344ae] Merge branch 'B' into A\n```", "```\n[remote \"origin\"]\n url = https://git.eclipse.org/r/jgit/jgit\n fetch = +refs/heads/*:refs/remotes/origin/*\n```", "```\n$ git clone --bare https://git.eclipse.org/r/jgit/jgit jgit-bare.git\n$ git init refspec-tests\nInitialized empty Git repository in /Users/john.doe/refspec-tests/.git/\n$ cd refspec-tests\n$ git remote add origin ../jgit-bare.git\n```", "```\n$ for br in $(git branch  -a | grep \"stable-\"); do new=$(echo $br| sed 's/-///'); git branch $new $br; done\n```", "```\n[remote \"origin\"]\n url = ../jgit-bare.git\n  fetch = +refs/heads/master:refs/remotes/origin/master\n```", "```\n$ git pull\nremote: Counting objects: 44033, done.\nremote: Compressing objects: 100% (6927/6927), done.\nremote: Total 44033 (delta 24063), reused 44033 (delta 24063)\nReceiving objects: 100% (44033/44033), 9.45 MiB | 5.70 MiB/s, done.\nResolving deltas: 100% (24063/24063), done.\nFrom ../jgit-bare\n     * [new branch]      master     -> origin/master\nFrom ../jgit-bare\n     * [new tag]         v0.10.1    -> v0.10.1\n     * [new tag]         v0.11.1    -> v0.11.1\n     * [new tag]         v0.11.3    -> v0.11.3\n    ...\n$ git branch -a\n    * master\n      remotes/origin/master\n```", "```\n[remote \"origin\"]\n url = ../jgit-bare.git\n  fetch = +refs/heads/master:refs/remotes/origin/master\n  fetch = +refs/heads/stable/*:refs/remotes/origin/stable/*\n```", "```\n$ git fetch\nFrom ../jgit-bare\n     * [new branch]      stable/0.10 -> origin/stable/0.10\n     * [new branch]      stable/0.11 -> origin/stable/0.11\n     * [new branch]      stable/0.12 -> origin/stable/0.12\n     * [new branch]      stable/0.7 -> origin/stable/0.7\n     * [new branch]      stable/0.8 -> origin/stable/0.8\n     * [new branch]      stable/0.9 -> origin/stable/0.9\n     * [new branch]      stable/1.0 -> origin/stable/1.0\n     * [new branch]      stable/1.1 -> origin/stable/1.1\n     * [new branch]      stable/1.2 -> origin/stable/1.2\n     * [new branch]      stable/1.3 -> origin/stable/1.3\n     * [new branch]      stable/2.0 -> origin/stable/2.0\n     * [new branch]      stable/2.1 -> origin/stable/2.1\n     * [new branch]      stable/2.2 -> origin/stable/2.2\n     * [new branch]      stable/2.3 -> origin/stable/2.3\n     * [new branch]      stable/3.0 -> origin/stable/3.0\n     * [new branch]      stable/3.1 -> origin/stable/3.1\n     * [new branch]      stable/3.2 -> origin/stable/3.2\n```", "```\n$ git checkout -b develop\nSwitched to a new branch 'develop'\n$ echo \"This is the developer setup, read carefully\" > readme-dev.txt\n$ git add readme-dev.txt\n```", "```\n$ git commit -m \"adds readme file for developers\"\n[develop ccb2f08] adds readme file for developers\n 1 file changed, 1 insertion(+)\n create mode 100644 readme-dev.txt\n```", "```\n[remote \"origin\"]\n url = ../jgit-bare.git\n  fetch = +refs/heads/master:refs/remotes/origin/master\n  fetch = +refs/heads/stable/*:refs/remotes/origin/stable/*\n  push = refs/heads/develop:refs/remotes/origin/integration/master\n```", "```\n$ git push\nCounting objects: 4, done.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 345 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nTo ../jgit-bare.git\n* [new branch]      develop -> origin/integration/master\n```", "```\nfetch = +refs/heads/stable*:refs/remotes/origin/stable*\n```", "```\nfetch = +refs/heads/stable/*:refs/remotes/origin/stable/*\n```"]