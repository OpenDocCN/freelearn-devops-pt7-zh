- en: Brief Repository Overview and Usage of the Issue Tracker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简要介绍仓库概述和问题追踪器的使用
- en: Almost everything that happens on GitHub happens in the context of the repository.
    A repository is like a folder that contains all the files of your project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有在 GitHub 上发生的事情都与仓库有关。仓库就像一个包含您项目所有文件的文件夹。
- en: The landing page of a repository on GitHub depicts the content of a person's
    local Git repository. Apart from the tree-like structure of the files, GitHub
    also provides some additional features that bring the most well-known and frequently
    used Git commands to your browser. Among others, these include the branches, commits,
    and tags of your repository.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上仓库的登陆页面展示了一个人的本地 Git 仓库的内容。除了文件的树状结构外，GitHub 还提供了一些附加功能，将最著名和最常用的 Git
    命令带到您的浏览器中。其他功能包括仓库的分支、提交和标签。
- en: In addition to these features, GitHub also provides an issue tracker for each
    repository. This is where the discussions take place, bugs are tracked and reported,
    features are requested, and pretty much anything else that is relevant to the
    project is discussed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些功能，GitHub 还为每个仓库提供了问题追踪器。这是讨论发生的地方，跟踪和报告错误，提出功能请求，以及几乎所有与项目相关的内容都会在这里讨论。
- en: 'GitHub has also implemented many other features that sit on top of the issue
    tracker, such as labels and milestones that provide the better visualization and
    categorization of issues. We will explore all the features extensively, so don''t
    worry if you aren''t familiar with these terms yet. Here''s what we''ll cover
    in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 还实现了许多其他功能，位于问题追踪器之上，例如标签和里程碑，这些功能提供了更好的可视化和问题的分类。我们将广泛地探索所有这些功能，所以即使您还不熟悉这些术语，也不用担心。以下是我们将在本章中介绍的内容：
- en: Exploring the repository's main page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索仓库的主页
- en: Learning how to use the powerful benefits of the issue tracker
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用强大的问题追踪器功能
- en: The terms **project** and **repository**, although not the same thing, will
    be considered to have equal meaning, and will be used interchangeably throughout
    this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目** 和 **仓库** 这两个术语，尽管不完全相同，但在本书中会被视为同义词并交替使用。'
- en: Exploring the repository's main page
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索仓库的主页
- en: The main page of a repository is the place where people spend most of their
    time when visiting a project. In this section, you will learn how to create a
    repository, and then we will explore the vast features of GitHub that bring Git's
    command line to your browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库的主页是访问项目时大多数人停留的地方。在本节中，您将学习如何创建一个仓库，接着我们将探索 GitHub 的广泛功能，这些功能将 Git 的命令行带入您的浏览器。
- en: Creating a new repository
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新仓库
- en: Assuming you have already signed up to GitHub through [https://github.com/join](https://github.com/join),
    we will now explore the main repository's page and learn how to create a new repository
    that will host your code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经通过 [https://github.com/join](https://github.com/join) 注册了 GitHub，我们现在将探索仓库的主页，并学习如何创建一个新的仓库来托管您的代码。
- en: 'Navigate to the top-right of the page, click on the little cross beside your
    username, and choose New repository, as shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到页面的右上角，点击您用户名旁的小十字，选择“新建仓库”，如以下截图所示：
- en: '![](img/00005.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: 'You will then be taken to a page where you need to provide some information
    about your new repository:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将进入一个页面，您需要提供一些关于新仓库的信息：
- en: '![](img/00006.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: Fill in a name under Repository name, which will ultimately form the URL under
    which your repository will be registered. This is the minimum action you need
    to perform in order to create a repository.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在“仓库名称”下填写一个名称，该名称最终将形成您的仓库注册的 URL。这是您创建仓库时需要执行的最基本操作。
- en: 'All the repositories on GitHub have the following URL scheme: `https://github.com/<username>/<repository_name>`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上的所有仓库都具有以下 URL 结构：`https://github.com/<username>/<repository_name>`
- en: It is optional, but recommended, for you to provide a description for your repository.
    That way, other users can tell at a glance what your project is all about.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 提供仓库描述是可选的，但建议您这样做。这样，其他用户可以一目了然地了解您的项目内容。
- en: The next setting to choose is whether your repository will be Public or Private.
    Generally, you go with public, unless you do not want your files to be seen by
    everybody. However, the private repositories come with a price.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的设置是选择您的仓库是公开还是私有。通常，您可以选择公开，除非您不希望所有人看到您的文件。但是，私有仓库是需要付费的。
- en: The very next thing GitHub provides is the ability to create the repository
    with a `README` file. Readme files usually include comprehensive information about
    the project you are hosting under your repository, such as installation guides,
    and build and usage instructions, as well as guidelines on how you can contribute.
    You can always add a `README` file later, so leave this option unchecked for the
    time being.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 提供的下一个功能是创建一个包含 `README` 文件的仓库。README 文件通常包含关于你托管在仓库中的项目的全面信息，如安装指南、构建和使用说明，以及如何贡献的指南。你可以随时添加
    `README` 文件，所以暂时可以不选这个选项。
- en: Another nice feature is the ability to choose and include a `gitignore` file
    upon creation. You can choose from a collection of the useful `.gitignore` templates
    taken from [https://github.com/github/gitignore](https://github.com/github/gitignore).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不错的功能是可以在创建时选择并包含一个 `gitignore` 文件。你可以从[https://github.com/github/gitignore](https://github.com/github/gitignore)提供的一系列有用的`.gitignore`模板中选择。
- en: Ultimately, the code that you will host on GitHub will be able to be forked
    and reused by third parties. If you are starting a fresh, new repository, you
    can choose a license to include upon creation. Again, this is optional, and you
    can always manually add a license file later.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，你在 GitHub 上托管的代码将能够被第三方派生和重用。如果你是从一个全新的仓库开始，可以选择在创建时包含一个许可证。这是可选的，你也可以稍后手动添加许可证文件。
- en: 'Let''s hit the Create repository button and finish the repository creation.
    Here''s what it looks like so far:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击“创建仓库”按钮并完成仓库的创建。到目前为止，它看起来是这样的：
- en: '![](img/00007.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: You can see that GitHub provides useful information on what to do next. If you
    already have an existing Git repository locally on your computer, you can push
    its code to GitHub or start fresh by following the on-screen instructions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 GitHub 提供了关于下一步该做什么的有用信息。如果你本地计算机上已经有一个现有的 Git 仓库，你可以将其代码推送到 GitHub，或者按照屏幕上的指示从头开始创建。
- en: Since we will be working from the command line later, it is highly recommended
    that you generate an SSH key to use with your GitHub account. Follow the guide
    at [https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/).
    Also, make sure that you properly configure your Git username and email settings.
    For more information, see [https://help.github.com/articles/setting-your-username-in-git/](https://help.github.com/articles/setting-your-username-in-git/)
    and [https://help.github.com/articles/setting-your-email-in-git/](https://help.github.com/articles/setting-your-email-in-git/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们稍后将从命令行工作，强烈建议你生成一个 SSH 密钥并将其与 GitHub 账户关联。请参阅[https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/)上的指南。此外，请确保正确配置你的
    Git 用户名和电子邮件设置。更多信息，请参见[https://help.github.com/articles/setting-your-username-in-git/](https://help.github.com/articles/setting-your-username-in-git/)和[https://help.github.com/articles/setting-your-email-in-git/](https://help.github.com/articles/setting-your-email-in-git/)。
- en: Congratulations on creating your first repository!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你创建了第一个仓库！
- en: 'The next goal is to explore the repository''s main page. This is the page you
    see when you navigate to `https://github.com/<username>/<repository>`, where you
    should see the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个目标是浏览仓库的主页。当你访问 `https://github.com/<username>/<repository>` 时，你应该能看到以下内容：
- en: '`<username>`: This is the username you registered with (found in the top-right
    corner)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<username>`：这是你注册时使用的用户名（在右上角可以找到）。'
- en: '`<repository>`: This is the Repository name you entered in the previous steps'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<repository>`：这是你在前面步骤中输入的仓库名称'
- en: The commits page and a comparison with the git log command
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交页面与 git log 命令的比较
- en: GitHub has a nice web UI that many common `git` commands can be entered in.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 有一个很不错的 Web 用户界面，许多常见的 `git` 命令都可以在其中输入。
- en: 'Let''s first create a `README.md` file and push it to GitHub in order to explore
    the commits page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 `README.md` 文件并将其推送到 GitHub，以便浏览提交页面：
- en: 'Create the directory that will hold your code and `cd` into it:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录来存放你的代码并 `cd` 进入该目录：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, follow GitHub''s instructions on creating a new project:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按照 GitHub 提供的指示创建一个新项目：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that I use the Git protocol ([https://github.com/](https://github.com/))
    that uses SSH underneath, so I don't have to type my username and password each
    time (see the previous note on how to achieve this).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我使用的是 Git 协议（[https://github.com/](https://github.com/)），它在底层使用 SSH，这样我就不需要每次输入用户名和密码（请参阅前面关于如何实现这一点的说明）。
- en: The directory name (in our example, `github-essentials`) could be totally different
    from the repository name you entered upon creation. It is the remote URL you set
    with `git remote add` that must match with the repository URL GitHub provides.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 目录名（在我们的例子中是`github-essentials`）可能与创建时输入的仓库名称完全不同。必须与你通过`git remote add`设置的远程URL匹配GitHub提供的仓库URL。
- en: 'Every time you add more commits, their total number will also appear on the
    project''s main page. In the preceding steps, we did our first commit, so the
    count is set to one, hence the 1 commit option shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你添加更多提交时，它们的总数也会出现在项目的主页上。在之前的步骤中，我们进行了第一次提交，因此提交计数为1，所以截图中显示了1个提交选项：
- en: '![](img/00008.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: Click on the 1 commit link as shown in the preceding screenshot to enter the
    commits page.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 点击前面截图中显示的1个提交链接，进入提交页面。
- en: 'From here, you can browse the list of commits (so far, we only have one) and
    visualize the output of `git log`. Let''s compare those two commits. Type `git
    log` in your local repository; the output should be similar to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以浏览提交列表（目前我们只有一个提交），并可视化`git log`的输出。让我们对比这两个提交。在本地仓库中输入`git log`；输出应该类似于以下内容：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, head over to the commits page on GitHub. Here, you can see the same information
    depicted in a nice interface:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前往GitHub的提交页面。在这里，你可以看到以一种友好的界面呈现的相同信息：
- en: '![](img/00009.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'We can see the commit message and the date and time it was committed, as well
    as the SHA of the commit. Note that the SHA is stripped down to the first 7 characters
    out of 40\. Clicking on either the SHA or the commit message will show the changes
    introduced by that specific commit. Let''s do that and compare what GitHub shows
    for the `git show <commit>` command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到提交信息、提交的日期和时间，以及该提交的SHA。注意，SHA被简化为40个字符中的前7个。点击SHA或提交信息会显示该提交所做的更改。我们来尝试一下，并对比GitHub显示的`git
    show <commit>`命令的结果：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result of the preceding code is shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的结果如下面截图所示：
- en: '![](img/00010.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: The commit message is shown in big bold letters, since it conveys an important
    message. Right under it, there are the branches where the commit is included (currently,
    it is only master).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 提交信息以大号粗体字显示，因为它传达了一个重要信息。在它下面，是包含该提交的分支（目前只有master分支）。
- en: You can see the commit SHA, the author name, and the date right under the blue
    area. GitHub also tells you how many files changed during the last commit and
    how many additions/deletions were made during that commit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到提交的SHA、作者名以及日期，显示在蓝色区域的下方。GitHub还会告诉你，在上次提交中，有多少文件发生了变化，并且做了多少次添加或删除。
- en: Lastly, we can see the added changes in green. If, instead, you remove something,
    it will be shown in a pinkish color, as we will see later on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看到以绿色标示的新增内容。如果你删除了某些内容，它将以粉红色显示，稍后我们会看到这一点。
- en: The branches page and a comparison with the git branch command
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支页面和与git branch命令的对比
- en: 'Let''s create a branch named `add_description` and `checkout` into it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来创建一个名为`add_description`的分支，并切换到该分支：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, edit `README.md`, add some text, make a new commit, and push it to GitHub:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑`README.md`，添加一些文本，进行新的提交，并将其推送到GitHub：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s create a second branch named `new_feature` out of the master branch
    and just push it to GitHub:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从master分支创建一个名为`new_feature`的第二个分支，并将其推送到GitHub：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now its time to switch to GitHub and see how all this information is presented.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候切换到GitHub，查看所有这些信息是如何呈现的。
- en: In the main repository page, you can now see that there are three branches.
    Click on the branch link to get more information.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在主仓库页面，你现在可以看到有三个分支。点击分支链接以获取更多信息。
- en: The Overview page is, as the title suggests, an overview of the other tabs you
    see next to it. It tells us what the default branch is, what branches you have
    pushed from your account (same as the Yours tab), and the most active branches
    in the last three months, sorted by date (same as the Active tab). The Stale tab
    represents the branches that haven't been updated for more than three months.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 概览页面正如其标题所示，是你在其旁边看到的其他标签的概览。它告诉我们默认分支是什么，你从你的账户推送了哪些分支（与“你的”标签相同），以及过去三个月中最活跃的分支（按日期排序，与“活跃”标签相同）。而“过时”标签代表的是那些超过三个月未更新的分支。
- en: You can change the default branch that appears on your project's homepage in
    the project's settings. This is covered in detail in [Chapter 6](part0149.html#4E33Q0-184576c1044a4350bd24f18b869c0732),
    *Exploring the User and Repository Settings*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在项目的设置中更改默认分支，它会出现在项目首页。这在[第 6 章](part0149.html#4E33Q0-184576c1044a4350bd24f18b869c0732)《探索用户和仓库设置》中有详细讲解。
- en: You may notice that although we pushed the new_feature branch after we pushed
    add_description, its update time appears to be before add_description. This is
    only natural, since new_feature has the same commit date as our master branch,
    which is dated before the add_description branch.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，尽管我们在推送 `add_description` 后推送了 `new_feature` 分支，但它的更新时间似乎出现在 `add_description`
    之前。这是正常现象，因为 `new_feature` 的提交日期与我们的 master 分支相同，而该日期早于 `add_description` 分支。
- en: Now, if you look closely at the tab where the branches are shown, you can see,
    written in a small font, the number of commits that the branches are behind or
    ahead of the default branch by—in our case, the default branch is master.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你仔细观察显示分支的标签，你会看到，在小字体中，显示了各个分支相对于默认分支的提交数——在我们的例子中，默认分支是 master。
- en: 'From the branches page, you can delete all the branches, except for the one
    you have set as default. Let''s try and delete the new_feature branch. Click on
    the red trash icon and watch what happens. GitHub gives you the chance to restore
    a recently deleted branch:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在分支页面，你可以删除所有分支，除了你设置为默认的分支。我们来试着删除 `new_feature` 分支。点击红色的垃圾桶图标，看看会发生什么。GitHub
    会给你恢复最近删除分支的机会：
- en: '![](img/00011.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: If you refresh the page or browse in another area of the page where you deleted
    the branch, the Restore button will disappear.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刷新页面或浏览删除分支的页面其他部分，Restore 按钮会消失。
- en: The New pull request button will be explored in a different chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 新建拉取请求按钮将在后续章节中讲解。
- en: The Raw, Blame, and History buttons
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raw、Blame 和 History 按钮
- en: Now that we have explored how GitHub sees branches, let's take a look at some
    other Git functionalities that GitHub provides.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 GitHub 如何看待分支，让我们来看看 GitHub 提供的其他 Git 功能。
- en: 'The Raw, Blame, and History buttons appear when viewing a single file of a
    repository. For example, let''s visit the `README.md` file by clicking on it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Raw、Blame 和 History 按钮会出现在查看仓库的单个文件时。例如，我们可以通过点击来查看 `README.md` 文件：
- en: '![](img/00012.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: The Raw button, like the name suggests, opens the file in a raw form, meaning
    that any HTML formatting disappears. This is particularly useful when you want
    to download a single file. You will notice that many guides on the internet use
    this raw file format when they tell you to download something using command-line
    tools, such as `wget` or `curl`. If you have ever tried to download a file from
    GitHub and all you got was an HTML file, remember the usage of raw.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Raw 按钮顾名思义，会以原始形式打开文件，这意味着任何 HTML 格式都会消失。当你想下载单个文件时，这特别有用。你会注意到，互联网上的许多指南都会告诉你使用命令行工具（例如
    `wget` 或 `curl`）下载文件时，使用的就是这种原始文件格式。如果你曾尝试从 GitHub 下载文件，而得到的只是一个 HTML 文件，请记得使用
    raw 格式。
- en: The Blame button makes use of Git's blame function. Basically, for each line
    of a file, Git informs you about who modified that line and when that line was
    modified. If you want to know more, visit [https://git-scm.com/docs/git-blame](https://git-scm.com/docs/git-blame).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Blame 按钮利用了 Git 的 blame 功能。基本上，对于文件的每一行，Git 会告诉你是谁修改了该行以及修改的时间。如果你想了解更多信息，可以访问
    [https://git-scm.com/docs/git-blame](https://git-scm.com/docs/git-blame)。
- en: 'In order to properly see how that works, I will not use our previously created
    `README.md` file, since there is not much information there to see how GitHub
    uses this Git function. Instead, I will use a file from another repository with
    more commits. Take, for example, [https://github.com/gitlabhq/gitlabhq/blame/master/app/models/ability.rb](https://github.com/gitlabhq/gitlabhq/blame/master/app/models/ability.rb),
    as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确查看该功能的使用，我不会使用我们之前创建的 `README.md` 文件，因为其中没有太多信息可以展示 GitHub 如何使用这个 Git 功能。相反，我将使用另一个仓库中的文件，这个文件有更多的提交。例如，可以查看
    [https://github.com/gitlabhq/gitlabhq/blame/master/app/models/ability.rb](https://github.com/gitlabhq/gitlabhq/blame/master/app/models/ability.rb)，如下所示：
- en: '![](img/00013.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: Downloading the example code
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在[http://www.packtpub.com](http://www.packtpub.com)的账户中下载所有已购买的Packt书籍的示例代码文件。如果你在其他地方购买了本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)，注册后将文件直接发送到你的邮箱。
- en: 'Compared to invoking `git blame` in the terminal, you can feel the superiority
    of GitHub''s feature. Every line of code is annotated so you can see when and
    what commit changed a particular line of the file and who changed it. There is
    also the nice little feature of hotness: Older commits get a brown line whereas
    newer ones are colored yellow.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 相比在终端中调用`git blame`，你可以感受到GitHub功能的优越性。每一行代码都有注释，你可以看到哪一行文件在什么提交下被修改，谁修改的。还有一个很棒的小功能——热度：较旧的提交会显示为棕色线条，而较新的则显示为黄色。
- en: Finally, the History button is nothing more than what `git log` does for a particular
    file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，History按钮不过就是`git log`在特定文件中的作用。
- en: The Watch, Star, and Fork buttons
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Watch、Star 和 Fork 按钮
- en: You've probably spotted the three buttons sitting at the top-right corner of
    your repository page. These appear for every public repository, not only your
    own.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，位于仓库页面右上角的三个按钮。这些按钮在每个公共仓库中都会出现，不仅仅是你自己的仓库。
- en: 'The Watch button manages the level of subscription in a repository. GitHub
    notifies you with an email whenever an action takes place in a repository you
    follow and, at the same time, it lists them in the Notifications area ([https://github.com/notifications](https://github.com/notifications))
    where you can later mark them as read, as shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Watch按钮管理仓库中订阅的级别。每当你关注的仓库发生操作时，GitHub会通过邮件通知你，同时将这些操作列出在通知区域（[https://github.com/notifications](https://github.com/notifications)），你可以稍后将它们标记为已读，如下图所示：
- en: '![](img/00014.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00014.jpeg)'
- en: There are three levels of subscription, ranging from "never be notified" to
    "Big Brother". You can choose to be notified only if you explicitly take part
    in a conversation or if someone mentions you (Not watching). This is the mid level
    of notification you can get, and is the default behavior when you create a new
    repository. The next level is to always be notified, for example, whenever a conversation
    begins, or a new issue is created, or someone leaves a comment in a line of code,
    or someone mentions you (Watching). Finally, the third option is to never be notified
    (Ignoring).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅有三个级别，从“永不通知”到“大哥”不等。你可以选择仅在你明确参与对话或某人提到你时才收到通知（不关注）。这是你可以得到的中级通知，也是创建新仓库时的默认行为。下一个级别是始终收到通知，例如每当开始对话，或创建新问题，或某人在代码行中留下评论，或某人提到你时（关注）。最后，第三个选项是永不接收通知（忽略）。
- en: You can mention someone by prefixing their username with the *at* sign (`@`).
    This is the special way in which GitHub can understand that you need someone's
    attention. Start typing the username and GitHub will be smart enough to autocomplete
    it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在用户名之前加上*at*符号（`@`）来提到某人。这是GitHub理解你需要某人注意的特殊方式。开始输入用户名时，GitHub会智能地自动完成它。
- en: The Star button is a way to show your appreciation to a repository and its creator.
    It depicts the popularity of a project. Whenever you star a repository, it gets
    added to your list of starred repositories. You can see all your starred repositories
    at [https://github.com/stars](https://github.com/stars).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Star按钮是向仓库及其创作者表示感谢的一种方式。它表示项目的受欢迎程度。每当你给一个仓库加星，它会被添加到你的星标仓库列表中。你可以在[https://github.com/stars](https://github.com/stars)查看你所有的星标仓库。
- en: A list with the most starred projects on GitHub can be found at [https://github.com/search?utf8=%E2%9C%93&q=stars%3A%3E1&type=Repositories](https://github.com/search?utf8=%E2%9C%93&q=stars%3A%3E1&type=Repositories).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上，你可以在[https://github.com/search?utf8=%E2%9C%93&q=stars%3A%3E1&type=Repositories](https://github.com/search?utf8=%E2%9C%93&q=stars%3A%3E1&type=Repositories)找到按星标数排序的项目列表。
- en: 'You can see the people who have starred a repository by clicking the number
    next to the Star/Unstar button. For the repository I just created, you can see
    that I am the only stargazer:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击Star/Unstar按钮旁边的数字，查看谁给仓库加过星。对于我刚创建的仓库，你可以看到我就是唯一的“星标者”：
- en: '![](img/00015.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00015.jpeg)'
- en: The Fork button and its purpose is what made GitHub excel in the first place.
    As we will see later in this book, its main use is when you wants to contribute
    to a project. When you fork a repository, it gets copied in your own namespace,
    and that way you have full ownership of that copy; thus, you are able to modify
    anything you want. Go ahead and try it. Go to [https://github.com/axilleas/github-essentials](https://github.com/axilleas/github-essentials)
    and press the Fork button. After a short while (depending on the size of the repository),
    you will be redirected to your own copy of this repository that you fully own.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Fork 按钮及其作用是 GitHub 能够脱颖而出的原因。正如我们在本书后面会看到的，它的主要用途是当你想要为某个项目做贡献时。当你 Fork 一个仓库时，它会复制到你自己的命名空间中，这样你就完全拥有了该副本；因此，你可以修改任何你想要的内容。试试看吧，前往
    [https://github.com/axilleas/github-essentials](https://github.com/axilleas/github-essentials)，点击
    Fork 按钮。稍等片刻（根据仓库大小不同），你将被重定向到你完全拥有的该仓库副本。
- en: Changing the description and URL
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改描述和网址
- en: Previously, we learned how to add a description to our project. This was optional
    when creating a new repository, so if you opted out of creating it, let's see
    how to add it now.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们学习了如何为我们的项目添加描述。这在创建新仓库时是可选的，如果你选择跳过创建，我们来看一下现在如何添加它。
- en: 'Head over to the main repository page. You will be presented with two blank
    forms. In the Description field, put a descriptive note of your project; in Website,
    put the website URL that your project might have. This could also be your GitHub
    repository''s URL. Here''s what it looks like:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前往主仓库页面，你会看到两个空白表单。在描述字段中，写下你项目的描述性注释；在网站字段中，填写你的项目可能拥有的网址。这也可以是你的 GitHub 仓库网址。如下所示：
- en: '![](img/00016.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00016.jpeg)'
- en: After you hit Save, you will immediately see the changes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存后，你会立即看到更改。
- en: Learning how to use the powerful benefits of the issue tracker
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习如何利用问题追踪器的强大功能
- en: GitHub provides a fully featured issue tracker, tightly tied to each repository.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 提供了一个功能全面的问题追踪器，紧密关联到每个仓库。
- en: 'Its primary use is that of a bug tracker, since reporting and discussing bugs
    play a vital role in the growth of your project. It can also be used to make feature
    requests, serve as a discussion board of a blog or a project, and even be used
    as a notepad for repairing your house! For this, you can refer to the following
    links:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它的主要用途是作为一个错误追踪器，因为报告和讨论错误在你项目的成长中起着至关重要的作用。它也可以用来提交功能请求，作为博客或项目的讨论板，甚至可以作为修理房屋的记事本！有关这方面的更多内容，请参阅以下链接：
- en: '[http://github.com/andreareginato/betterspecs/issues](http://github.com/andreareginato/betterspecs/issues)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://github.com/andreareginato/betterspecs/issues](http://github.com/andreareginato/betterspecs/issues)'
- en: '[https://github.com/frabcus/house/issues](https://github.com/frabcus/house/issues)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/frabcus/house/issues](https://github.com/frabcus/house/issues)'
- en: Creating a new issue
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新问题
- en: Go to `https://github.com/<username>/<repository>/issues` for an overview of
    all issue activity. If no one has ever opened an issue in your project, you will
    be presented with a blank page with GitHub prompting you to open a new issue.
    Let's go ahead and do this. Click on the big green button that says New issue.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 `https://github.com/<用户名>/<仓库>/issues`，可以查看所有问题的活动概览。如果没有人曾在你的项目中打开过问题，你将看到一个空白页面，GitHub
    会提示你打开一个新问题。我们现在来做这个操作。点击那个写着“新建问题”的大绿色按钮。
- en: An issue can be created when you provide the minimum of a title. Look at the
    following screenshot carefully where the Submit new issue button is grayed out
    and cannot be clicked. The title should be as descriptive as possible of the message
    you are trying to pass when creating an issue.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只提供最少的标题时，可能会创建一个问题。仔细查看以下截图，提交新问题按钮被禁用，无法点击。标题应尽可能详细地描述你在创建问题时想要传达的内容。
- en: Below, under the Write tab, you can provide the details and essentially start
    a discussion with everyone who wants to participate (if the repository is public,
    that is). That's why GitHub cleverly suggests to Leave a comment.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下方的“写”标签下，你可以提供详细信息，并且基本上开始与所有希望参与的人进行讨论（前提是仓库是公开的）。这就是为什么 GitHub 聪明地建议你“留下评论”。
- en: 'Besides writing, you can also attach images by simply dragging and dropping,
    or by selecting them using folder navigation. Here''s what the very first issue
    of this repository looks like:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 除了写文字外，你还可以通过简单的拖放，或者通过文件夹导航选择图片，来附加图片。以下是这个仓库的第一个问题的样子：
- en: '![](img/00017.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00017.jpeg)'
- en: Next to the Write tab is the Preview tab. In order to understand its purpose,
    you must first learn about Markdown.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “写作”标签旁边是“预览”标签。为了理解它的作用，你首先需要了解Markdown。
- en: In brief, Markdown is a text-to-HTML conversion tool so that you can write text
    that contains structural information and then automatically convert it to valid
    HTML. Written by John Gruber and adopted by GitHub (among many others), Markdown
    is the most well-known text-to-HTML conversion tool because of its ease of use.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Markdown是一个文本转HTML的工具，允许你编写包含结构信息的文本，并将其自动转换为有效的HTML。由John Gruber编写，并被GitHub（以及其他许多平台）采纳，Markdown因其易用性而成为最著名的文本转HTML工具。
- en: You can read all about how GitHub extends Markdown's functionality in the guide
    available at [https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://guides.github.com/features/mastering-markdown/](https://guides.github.com/features/mastering-markdown/)的指南中阅读关于GitHub如何扩展Markdown功能的所有信息。
- en: Now, back to our new issue. As the name suggests, Preview shows what the result
    will be when you submit the issue. It will style the regular text of the Write
    tab into a meaningful text accordingly, with URLs properly formatted, images shown,
    emojis displayed, and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的新问题。顾名思义，预览（Preview）会显示提交问题时的结果。它会根据“写作”标签中的常规文本，将其格式化为有意义的文本，URL会被正确格式化，图片会显示，表情符号也会展示等。
- en: As we will see later in this book, GitHub-flavored Markdown has many little
    gems that leverage the usage of the issue tracker. What you have seen here is
    just the tip of the iceberg.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书后面会看到的，GitHub风格的Markdown包含了许多小功能，充分利用了问题跟踪器的使用。这些只是冰山一角。
- en: 'Feeling ready to submit it? Hit Submit new issue at the bottom of the page.
    Congratulations on making your first issue! The result will look as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉准备好提交了吗？点击页面底部的“提交新问题”。恭喜你创建了第一个问题！结果将如下所示：
- en: '![](img/00018.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00018.jpeg)'
- en: Each created issue is assigned a unique number that we can later use in other
    issues for reference. In our example, since this was the very first issue, it
    was assigned the number `#1`. Some useful information is provided in the title
    area. You can see that the issue is marked as Open, the username of the person
    who created it, the time it was created, and how many comments there are.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 每个创建的问题都会分配一个唯一的编号，之后我们可以在其他问题中引用它。在我们的例子中，由于这是第一个问题，它被分配了编号`#1`。标题区域提供了一些有用的信息。你可以看到该问题标记为“开放状态”，问题创建者的用户名，创建时间以及评论数量。
- en: If you later realize that you made a mistake, don't panic—you can always edit
    the issue you created. The Edit button allows you to edit the title, and the pencil
    icon is used for editing the description. Close the issues using the Close issue
    button.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你后来发现自己犯了错误，不要慌张——你可以随时编辑已创建的问题。编辑按钮允许你编辑标题，铅笔图标用于编辑描述。通过点击“关闭问题”按钮来关闭问题。
- en: You can comment and close the issue at the same time if, for example, you also
    want to leave a note as to why the issue got closed. Start typing a comment and
    the button will change from Close issue to Close and comment.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在关闭问题时同时发表评论，例如说明问题为何关闭，可以在输入评论时，按钮会从“关闭问题”变为“关闭并评论”。
- en: Assigning issues to users
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将问题分配给用户
- en: A repository can have more than one collaborator. A collaborator is a person
    who has push access to the repository and, in our case, can also edit and close
    issues.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个仓库可以有多个协作者。协作者是指具有推送权限的人，在我们的例子中，协作者还可以编辑和关闭问题。
- en: User assignment works well in repositories with large traffic where a team is
    involved and is responsible for bug fixes, enhancements, and so on.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 用户分配在流量大的仓库中效果很好，特别是当有一个团队负责处理错误修复、功能增强等任务时。
- en: 'There are two ways to assign an issue to someone. First, as you have seen in
    the previous images, there is an Assignee section inside each issue, as shown
    in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以将问题分配给某人。首先，正如你在前面的图片中看到的，每个问题中都有一个受分配人（Assignee）部分，如下图所示：
- en: '![](img/00019.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpeg)'
- en: At this particular stage, there is only one collaborator—me—so only my name
    appears in the list. Okay, we learned how to assign an issue to a collaborator
    from inside the issue, but what happens if you have dozens of issues that you
    want to assign to someone? Assigning each of them one by one is a bit tedious
    and time consuming. You'll be happy to know that you can mass-assign issues to
    a person.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定阶段，只有一个协作者——我——所以列表中只会显示我的名字。好的，我们已经学会了如何从问题内部分配一个问题给协作者，但如果你有几十个问题要分配给某人怎么办？逐个分配会有点繁琐且费时。你会高兴地知道，你可以批量分配问题给某人。
- en: 'For this purpose, let''s create two more issues. Head over to the Issues page,
    select the boxes of the issues that you want to assign, and select an assignee,
    as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，让我们再创建两个问题。前往问题页面，勾选你想要分配的多个问题框，并选择一个受理人，如下截图所示：
- en: '![](img/00020.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00020.jpeg)'
- en: 'After selecting the assignee, the issues will immediately get updated with
    the new information. You can see that the avatar of the assignee appears on each
    issue that is assigned to them:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 选择受理人后，问题将立即更新为新的信息。你可以看到，受理人的头像出现在分配给他们的每个问题上：
- en: '![](img/00021.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00021.jpeg)'
- en: You can select and add up to 10 assignees to an issue.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择最多 10 个受理人来分配给一个问题。
- en: Labels
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签
- en: If you have worked with WordPress, labels are like tags. This is not to be confused
    with Git tags, though. We  will now explore how to create labels and use them
    effectively to easily categorize batches of issues.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过 WordPress，标签类似于标签（Tags）。不过，这与 Git 标签不同。接下来我们将探讨如何创建标签，并有效使用它们来轻松分类一批问题。
- en: Why labels are a great asset to UX
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么标签对用户体验（UX）是一个宝贵的资产
- en: Labels provide an easy way to categorize the issues based on descriptive titles,
    such as bug, feature, and any other words you feel like using. They are colored,
    and are visible throughout the issue tracker or inside each issue individually.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 标签提供了一种简便的方式来根据描述性标题对问题进行分类，比如“bug”，“功能”，以及你想使用的其他任何词汇。它们是有颜色的，并且在问题跟踪器中或每个问题内部都可以看到。
- en: With labels, you can navigate to the issue tracker and filter any bloated information
    to visualize only the issues you are interested in. Let's see how that works.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过标签，你可以导航到问题跟踪器，过滤掉冗余的信息，只显示你感兴趣的问题。让我们看看它是如何工作的。
- en: Creating new label names and setting different colors
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新标签名称并设置不同的颜色
- en: Head over to the issue tracker and navigate to the label page by clicking on
    Labels. As you can see, GitHub sets up some predefined labels that are ready to
    use. The name, color, and description are fully customizable for new and existing
    labels.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 前往问题跟踪器，并通过点击“标签”导航到标签页面。正如你所看到的，GitHub 已经设置了一些预定义的标签，可以直接使用。新标签和现有标签的名称、颜色和描述都可以完全自定义。
- en: 'Creating a new label is as easy as pressing the New label button, filling in
    the name, choosing a color, and optionally entering a description. In fact, a
    random color is already picked, so the only prerequisite is the name. I have created
    a new yellow label named `needs testing`, as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新标签非常简单，只需点击“新建标签”按钮，填写名称，选择颜色，并可选择性地输入描述。事实上，系统会自动选择一个随机颜色，所以唯一的前提是输入名称。我已经创建了一个新的黄色标签，命名为
    `needs testing`，如以下截图所示：
- en: '![](img/00022.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00022.jpeg)'
- en: After clicking the Create label button, the label will be created and appear
    in the list. Back to the issues—let's go inside the first one and give it the
    label we just created. Click on the gear icon for the dropdown to appear. Start
    typing to narrow down the search. Now, we only have 9 labels, but imagine having
    more than 42\. You'd have to scroll and scroll until you found the label you were
    looking for.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建标签”按钮后，标签将被创建并显示在列表中。回到问题页面——让我们进入第一个问题，并给它添加刚刚创建的标签。点击齿轮图标，菜单将会出现。开始输入以缩小搜索范围。现在我们只有
    9 个标签，但假设有 42 个以上，你将不得不一直滚动，直到找到你想要的标签。
- en: 'As you might have guessed, you can choose more than one label in an issue.
    After you choose them, just click anywhere outside of the label window to save
    the action. You will see the changes immediately:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，你可以在一个问题中选择多个标签。选择完标签后，只需点击标签窗口外的任意位置即可保存操作。你会立刻看到变更：
- en: '![](img/00023.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00023.jpeg)'
- en: Note how GitHub makes note of any change made to the issue. This way, you will
    know who took a specific action and when the action was taken. Nothing escapes
    GitHub's eye! Try to remove the enhancement label to see what happens.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，GitHub会记录对问题所做的任何更改。这样，你就能知道是谁进行了某个特定操作，以及操作发生的时间。没有什么能逃得过GitHub的眼睛！尝试删除“enhancement”标签，看看会发生什么。
- en: 'As with the assignees, you can also mass-assign labels to issues. Let''s try
    this by going to the main issues page and selecting some issues, and then choosing
    the bug label:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 和受指派者一样，你也可以批量为问题分配标签。我们可以通过进入主问题页面，选择一些问题，然后选择“bug”标签来尝试这一操作：
- en: '![](img/00024.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00024.jpeg)'
- en: 'The issue tracker will be updated, and now you can have an overview of the
    issues with the labels assigned to them:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 问题跟踪器将被更新，现在你可以查看分配给每个问题的标签概况：
- en: '![](img/00025.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00025.jpeg)'
- en: Using labels to group issues
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签来分组问题
- en: Suppose you have 100 opened issues, many labeled as bugs. Wouldn't it be cool
    if somehow, only those issues appeared in the Issues main page? Well guess what—when
    you click on the bug label, GitHub basically makes a query and, as a result, only
    the bug issues appear. Grouping to the rescue!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有100个打开的问题，其中许多被标记为“bug”。如果通过某种方式，这些问题仅出现在问题主页面上，那不是很酷吗？嗯，猜猜看——当你点击“bug”标签时，GitHub基本上会进行查询，结果是只有bug类型的问题会显示出来。分组功能来救场！
- en: Going back to the Labels page, you can see that you can have an overview of
    the number of issues assigned to each label.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 返回标签页面，你会看到你可以概览每个标签下分配的所有问题数量。
- en: Milestones
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 里程碑
- en: Milestones, much like labels, are primarily used to group issues, but for different
    purposes. Consider a milestone such as a special label that has a title, a description,
    and an optional due date.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 里程碑，类似于标签，主要用于将问题分组，但目的是不同的。考虑一个里程碑，它就像一个特殊的标签，具有标题、描述和可选的截止日期。
- en: Why milestones are a great help when working with code versioning
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么里程碑在代码版本控制中起着重要作用
- en: It is common knowledge that applications are released in versions. From the
    BIOS of your laptop to the web browser you use to explore the internet, all applications
    use versioning.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，应用程序是以版本发布的。从你笔记本电脑的BIOS到你用来浏览互联网的网页浏览器，所有应用程序都使用版本控制。
- en: Many companies, or even community-driven, open source projects, tend to have
    a road map that dictates the time when the new product will be released to the
    public.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司，甚至是社区驱动的开源项目，通常都会有一张路线图，规定何时将新产品发布给公众。
- en: GitHub integrates this feature with the issue tracker. Let's dive in and learn
    how to create a new milestone, attach some issues to it, and use the overview
    to see what issues remain resolved or unresolved.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub将此功能与问题跟踪器进行了整合。让我们深入了解，学习如何创建一个新里程碑，将一些问题分配给它，并使用概览查看哪些问题已经解决或未解决。
- en: Creating a new milestone
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的里程碑
- en: While at the main page of the issue tracker, click on the Milestones link, next
    to the Labels link. If no milestone has been created yet, you have two buttons
    that can create a milestone. Generally, the New milestone button will be the main
    one to use.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在问题跟踪器的主页面上，点击“里程碑”链接，位于“标签”链接旁边。如果还没有创建任何里程碑，你将看到两个按钮可以创建一个里程碑。通常，“新建里程碑”按钮将是主要使用的按钮。
- en: 'Now, let''s create our first milestone. The only requirement is the title;
    the Description and Due Date fields are optional. However, just to see what it
    looks like, let''s add all the information:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建第一个里程碑。唯一的要求是标题；描述和截止日期是可选的。但是，为了看看效果如何，我们来填入所有信息：
- en: '![](img/00026.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00026.jpeg)'
- en: 'Hit Create milestone and it will appear in the Milestones page with all the
    information we previously entered:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建里程碑”，它将出现在“里程碑”页面上，显示我们之前输入的所有信息：
- en: '![](img/00027.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00027.jpeg)'
- en: On the left-hand side, there is the name, the due date, the description, and
    a note of the time the milestone was last updated. On the right-hand side, you
    can see the percentage of completion and the number of open and closed issues.
    Of course, you can edit, close, or delete it completely.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，你可以看到名称、截止日期、描述以及里程碑上次更新的时间。右侧则展示了完成百分比以及开放和关闭问题的数量。当然，你也可以编辑、关闭或完全删除它。
- en: Adding issues to milestones
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将问题添加到里程碑
- en: Now that we have at least one milestone, let's set it to an issue.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们至少有一个里程碑了，让我们将它分配给一个问题。
- en: 'Again, there are two ways to add a milestone to an issue. Much like assignees
    and labels, you can do this inside each issue or mass-add it when in the Issues
    main page. Here, I will try the second approach; you can try the first one on
    your own:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，有两种方法可以为问题添加里程碑。就像分配人和标签一样，你可以在每个问题内进行操作，或者在问题主页面上批量添加。这里，我将尝试第二种方法；你可以自己尝试第一种方法：
- en: '![](img/00028.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00028.jpeg)'
- en: 'After selecting the milestone, the page will be refreshed and the issue will
    now be added to the selected milestone. If you watch carefully, you can see a
    small icon and the name of the milestone next to it:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 选择里程碑后，页面将刷新，问题将被添加到选定的里程碑中。如果你仔细观察，你会看到一个小图标和旁边的里程碑名称：
- en: '![](img/00029.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00029.jpeg)'
- en: Using milestones to see which issues are resolved or are yet to be resolved
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用里程碑查看哪些问题已解决或尚未解决
- en: When dealing with hundreds of issues, bug reports, and enhancements, it is nice
    to have an overview of what is resolved and what is not.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理成百上千个问题、bug 报告和改进建议时，能够一目了然地查看哪些已经解决，哪些尚未解决是非常方便的。
- en: 'Let''s add another issue to the milestone and then immediately close it, as
    we learned in the *Creating an issue* section. In the context of the milestone,
    this will be considered as complete. Head over to the milestones page. You will
    see that the bar is now half full (at 50%):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再为里程碑添加一个问题，然后立即关闭它，就像我们在 *创建问题* 部分中学到的那样。在里程碑的上下文中，这将被视为已完成。前往里程碑页面。你会看到条形图现在已填充一半（50%）：
- en: '![](img/00030.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00030.jpeg)'
- en: Tips and tricks
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示与技巧
- en: The `README` files are essential for your project as they add useful information
    to the start page. Let's briefly explore this feature and then learn about keyboard
    shortcuts.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`README` 文件对于你的项目至关重要，因为它们在首页提供有用的信息。让我们简要探索一下这个功能，然后再学习键盘快捷键。'
- en: Learning about the README file
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 `README` 文件
- en: The `README` file is used to provide information about your project. Its content
    is automatically shown on the front page of your repository, so it is always a
    good idea to provide one file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`README` 文件用于提供关于你项目的信息。其内容会自动显示在你仓库的首页，因此提供一个 `README` 文件始终是个好主意。'
- en: GitHub checks whether the `README` file comes with an extension; if it is supported
    for rendering, it automatically gets formatted according to its implementation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 会检查 `README` 文件是否带有扩展名；如果扩展名被支持进行渲染，它会根据其实现自动进行格式化。
- en: For example, a `README` file can have a `.md` extension that stands for markdown,
    a `.rst` extension that stands for restructured text, and a `.adoc` extension
    that stands for AsciiDoc.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`README` 文件可以有一个 `.md` 扩展名，代表 markdown；一个 `.rst` 扩展名，代表重构文本；以及一个 `.adoc`
    扩展名，代表 AsciiDoc。
- en: If the extension is not supported, then GitHub treats it like a regular text
    file and no formatting is done.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果扩展名不被支持，GitHub 会将其视为普通文本文件，并且不会进行任何格式化。
- en: For a list of supported markups, go to [https://github.com/github/markup#markups](https://github.com/github/markup#markups).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有关支持的标记语言列表，请访问 [https://github.com/github/markup#markups](https://github.com/github/markup#markups)。
- en: Navigating easily with keyboard shortcuts
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用键盘快捷键轻松导航
- en: GitHub has the nice feature of supporting keyboard shortcuts. You can see which
    shortcuts are supported by hitting ? on any page. A dialog box will pop up with
    all the supported shortcuts for that particular page. To see all the shortcuts,
    click on the Show All link.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 有一个很好的功能，支持键盘快捷键。你可以通过在任何页面上按下 ? 键查看支持哪些快捷键。一个对话框将弹出，显示该页面支持的所有快捷键。要查看所有快捷键，请点击“显示所有”链接。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to create your first repository and explored
    its main page. You also learned how to effectively use the issue tracker in order
    to track your project's bugs, feature requests, and so on. Moreover, you learned
    how to use labels and milestones to better group the issues.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何创建第一个仓库，并浏览了其主页面。你还学习了如何有效使用问题追踪器来追踪项目的 bug、功能请求等。此外，你还学会了如何使用标签和里程碑来更好地分组问题。
- en: In the next chapter, we will learn about wikis, as well as GitHub's feature
    concerning code release.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习维基（wikis），以及 GitHub 关于代码发布的功能。
