["```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA\n$ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n```", "```\n$ echo $AWS_ACCESS_KEY\n```", "```\n$ pip3 install botocore boto3\n```", "```\ndebug_output: false\napp:\n  name: \"learnansible\"\n  region: \"eu-west-1\"\n  env: \"prod\"\n```", "```\nvpc_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.vpc }}\"\ninternet_gateway_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.internet_gateway }}\"\ninternet_gateway_route_name: \"{{ internet_gateway_name }}-{{ playbook_dict.route }}\"\n```", "```\nvpc:\n  cidr_block: \"10.0.0.0/23\"\n  dns_hostnames: true\n  dns_support: true\n  subnet_size: \"27\"\n  subnets:\n    - name: \"ec2\"\n      role: \"{{ subnet_role_compute }}\"\n    - name: \"rds\"\n      role: \"{{ subnet_role_database }}\"\n    - name: \"efs\"\n      role: \"{{ subnet_role_storage }}\"\n    - name: \"dmz\"\n      role: \"{{ subnet_role_public }}\"\n```", "```\nsubnet_role_compute: \"compute\"\nsubnet_role_database: \"database\"\nsubnet_role_storage: \"storage\"\nsubnet_role_public: \"public\"\n```", "```\nsecurity_groups:\n  - name: \"{{ app.name }}-rds-{{ playbook_dict.security_group }}\"\n    description: \"opens port 3306 to the ec2 instances\"\n    id_var_name: \"rds_group_id\"\n    rules:\n      - proto: \"tcp\"\n        from_port: \"3306\"\n        to_port: \"3306\"\n        group_id: \"{{ ec2_group_id | default('') }}\"\n        rule_desc: \"allow {{ ec2_group_id | default('') }} access to port 3306\"\n```", "```\n- name: \"Create VPC\"\n  amazon.aws.ec2_vpc_net:\n    name: \"{{ vpc_name }}\"\n    region: \"{{ region }}\"\n    cidr_block: \"{{ vpc.cidr_block }}\"\n    dns_hostnames: \"{{ vpc.dns_hostnames }}\"\n    dns_support: \"{{ vpc.dns_support }}\"\n    state: \"{{ state }}\"\n    tags:\n      Name: \"{{ vpc_name }}\"\n      projectName: \"{{ app.name }}\"\n      environment: \"{{ app.env }}\"\n      deployedBy: \"{{ playbook_dict.deployedBy }}\"\n      description: \"{{ playbook_dict.ansible_warning }}\"\n  register: vpc_output\n```", "```\n- name: \"Debug - VPC result\"\n  ansible.builtin.debug:\n    var: \"vpc_output\"\n  when: debug_output\n```", "```\n- name: \"Get some information on the available zones\"\n  amazon.aws.aws_az_info:\n    region: \"{{ region }}\"\n  register: zones_output\n```", "```\n- name: \"Create all subnets\"\n  ansible.builtin.include_tasks: create_subnet.yml\n  loop: \"{{ vpc.subnets }}\"\n  loop_control:\n    loop_var: subnet_item\n    index_var: subnet_index\n  vars:\n    subnet_name: \"{{ subnet_item.name }}\"\n    subnet_role: \"{{ subnet_item.role }}\"\n    az_zones_from_main: \"{{ zones_output }}\"\n  register: subnet_output\n```", "```\n- name: \"Create subnet in the availability zone\"\n  amazon.aws.ec2_vpc_subnet:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    vpc_id: \"{{ vpc_output.vpc.id }}\"\n    cidr: \"{{ vpc_output.vpc.cidr_block | ansible.utils.ipsubnet(vpc.subnet_size, az_loop_index + (subnet_index * az_zones_from_main.availability_zones|length)) }}\"\n    az: \"{{ az_item.zone_name }}\"\n    tags:\n      Name: \"{{ subnet_name }}-{{ playbook_dict.subnet }}-{{ az_item.zone_id }}\"\n      projectName: \"{{ app.name }}\"\n      environment: \"{{ app.env }}\"\n      deployedBy: \"{{ playbook_dict.deployedBy }}\"\n      description: \"{{ playbook_dict.ansible_warning }}\"\n      role: \"{{ subnet_role }}\"\n  loop: \"{{ az_zones_from_main.availability_zones }}\"\n  loop_control:\n    loop_var: az_item\n    index_var: az_loop_index\n```", "```\nvpc_output.vpc.cidr_block | ansible.utils.ipsubnet(vpc.subnet_size, az_loop_index + (subnet_index * az_zones_from_main.availability_zones|length))\n```", "```\ncidr = \"{{ vpc_output.vpc.cidr_block  | ansible.utils.ipsubnet(27, 0) }}\"\n```", "```\n- name: \"Gather information about the compute subnets\"\n  amazon.aws.ec2_vpc_subnet_info:\n    region: \"{{ region }}\"\n    filters:\n      \"tag:role\": \"{{ subnet_role_compute }}\"\n      \"tag:environment\": \"{{ app.env }}\"\n      \"tag:projectName\": \"{{ app.name }}\"\n  register: subnets_compute_output\n```", "```\n- name: \"Create an Internet Gateway\"\n  amazon.aws.ec2_vpc_igw:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    vpc_id: \"{{ vpc_output.vpc.id }}\"\n    tags:\n      \"Name\": \"{{ internet_gateway_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"igw\"\n  register: internet_gateway_output\n```", "```\n- name: \"Create a route table so the internet gateway can be used by the public subnets\"\n  amazon.aws.ec2_vpc_route_table:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    vpc_id: \"{{ vpc_output.vpc.id }}\"\n    subnets: \"{{ subnet_compute_ids + subnet_public_ids }}\"\n    routes:\n      - dest: \"0.0.0.0/0\"\n        gateway_id: \"{{ internet_gateway_output.gateway_id }}\"\n    resource_tags:\n      \"Name\": \"{{ internet_gateway_route_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"route\"\n  register: internet_gateway_route_output\n```", "```\n  - proto: \"tcp\"\n    from_port: \"3306\"\n    to_port: \"3306\"\n    group_id: \"{{ ec2_group_id | default('') }}\"\n    rule_desc: \"allow {{ ec2_group_id | default('') }} access to port 3306\"\n```", "```\n- name: \"Find out your current public IP address using https://ipify.org/\"\n  community.general.ipify_facts:\n  register: public_ip_output\n```", "```\n- name: \"Set your public ip as a fact\"\n  ansible.builtin.set_fact:\n    your_public_ip: \"{{ public_ip_output.ansible_facts.ipify_public_ip }}/32\"\n```", "```\n- name: \"Create the base security groups\"\n  amazon.aws.ec2_security_group:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    vpc_id: \"{{ vpc_output.vpc.id }}\"\n    name: \"{{ item.name }}\"\n    description: \"{{ item.description }}\"\n    purge_rules: false\n    tags:\n      \"Name\": \"{{ item.name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"role\": \"securitygroup\"\n  loop: \"{{ security_groups }}\"\n  register: base_security_groups_output\n```", "```\n- name: \"Set the fact for the security group ids\"\n  ansible.builtin.set_fact:\n    \"{{ item.id_var_name }}\": \"{{ base_security_groups_output.results | selectattr('item.name', 'equalto', item.name) | map(attribute='group_id') | first }}\"\n  loop: \"{{ security_groups }}\"\n  when: base_security_groups_output.results | selectattr('item.name', 'equalto', item.name) | map(attribute='group_id') | list | length > 0\n```", "```\n\"{{ item.id_var_name }}\": \"{{ base_security_groups_output.results | selectattr('item.name', 'equalto', item.name) | map(attribute='group_id') | first }}\"\n```", "```\nwhen: base_security_groups_output.results | selectattr('item.name', 'equalto', item.name) | map(attribute='group_id') | list | length > 0\n```", "```\n- name: \"Provision security group rules\"\n  amazon.aws.ec2_security_group:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    vpc_id: \"{{ vpc_output.vpc.id }}\"\n    name: \"{{ item.name }}\"\n    description: \"{{ item.description }}\"\n    purge_rules: false\n    rules: \"{{ item.rules }}\"\n  loop: \"{{ security_groups }}\"\n  register: security_groups_with_rules_output\n```", "```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA\n$ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\n$ ansible-playbook -i hosts destroy.yml\n```"]