["```\n$ mkdir Chapter04\n$ cd Chapter04\n```", "```\n$ mkdir group_vars\n$ touch group_vars/common.yml\n```", "```\n$ touch production\n$ touch site.yml\n```", "```\n$ mkdir roles\n$ ansible-galaxy role init roles/common\n```", "```\n- name: \"Update apt cache and upgrade packages\"\n  ansible.builtin.apt:\n    name: \"*\"\n    state: \"latest\"\n    update_cache: true\n```", "```\n- name: \"Install common packages\"\n  ansible.builtin.apt:\n    state: \"present\"\n    pkg: \"{{ common_packages }}\"\n```", "```\ncommon_packages:\n  - \"ntp\"\n  - \"sntp\"\n  - \"ntp-doc\"\n  - \"vim\"\n  - \"git\"\n  - \"unzip\"\n```", "```\nusers:\n  - {\n      name: \"lamp\",\n      group: \"lamp\",\n      state: \"present\",\n      key: \"/tmp/id_ssh_lamp_rsa\",\n    }\n```", "```\n- name: \"Generate a ssh keypair\"\n  community.crypto.openssh_keypair:\n    path: \"{{ item.key }}\"\n  with_items: \"{{ users }}\"\n  delegate_to: \"localhost\"\n  become: false\n```", "```\nusers:\n  - {\n      name: \"lamp\",\n      group: \"lamp\",\n      state: \"present\",\n      key: \"/tmp/id_ssh_lamp_rsa\",\n    }\n  - {\n      name: \"user2\",\n      group: \"lamp\",\n      state: \"present\",\n      key: \"/tmp/id_ssh_user2_rsa\",\n    }\n```", "```\n- name: \"Add group for our users\"\n  ansible.builtin.group:\n    name: \"{{ item.group }}\"\n    state: \"{{ item.state }}\"\n  with_items: \"{{ users }}\"\n```", "```\n- name: \"Add users to our group\"\n  ansible.builtin.user:\n    name: \"{{ item.name }}\"\n    group: \"{{ item.group }}\"\n    comment: \"{{ item.name }}\"\n    state: \"{{ item.state }}\"\n  with_items: \"{{ users }}\"\n```", "```\n- name: \"Add keys to our users\"\n  ansible.posix.authorized_key:\n    user: \"{{ item.name }}\"\n    key: \"{{ lookup('file', item.key + '.pub') }}\"\n  with_items: \"{{ users }}\"\n```", "```\n- name: \"Install apache packages\"\n  ansible.builtin.apt:\n    state: \"present\"\n    pkg: \"{{ apache_packages }}\"\n```", "```\napache_packages:\n  - \"apache2\"\n  - \"apache2-ssl-dev\"\n  - \"ca-certificates\"\n  - \"openssl\"\n```", "```\n- name: \"Add user to apache group\"\n  ansible.builtin.user:\n    name: \"{{ item.name }}\"\n    groups: \"{{ apache_group }}\"\n    append: true\n  with_items: \"{{ users }}\"\n```", "```\napache_group: \"www-data\"\nweb_root: \"web\"\ndocument_root: \"/home/{{ users.0.name }}/{{ web_root }}\"\nindex_file: index.html\nvhost_path: \"/etc/apache2/sites-enabled/\"\nvhost_default_file: \"000-default.conf\"\nvhost_our_file: \"vhost.conf\"\n```", "```\n- name: \"Create the document root for our website\"\n  ansible.builtin.file:\n    dest: \"{{ document_root }}\"\n    state: directory\n    mode: \"0755\"\n    owner: \"{{ users.0.name }}\"\n    group: \"{{ apache_group }}\"\n```", "```\n- name: \"Set the permissions on the user folder\"\n  ansible.builtin.file:\n    dest: /home/{{ users.0.name }}/\n    state: directory\n    mode: \"0755\"\n    owner: \"{{ users.0.name }}\"\n```", "```\n- name: \"Remove the apache default vhost config\"\n  ansible.builtin.file:\n    path: \"{{ vhost_path }}{{ vhost_default_file }}\"\n    state: absent\n  notify: \"Restart apache2\"\n```", "```\n- name: \"Restart apache2\"\n  ansible.builtin.service:\n    name: \"apache2\"\n    state: \"restarted\"\n    enabled: true\n```", "```\n# {{ ansible_managed }}\n<VirtualHost *:80>\n  ServerName {{ ansible_hostname }}\n  DocumentRoot {{ document_root }}\n  DirectoryIndex {{ index_file }}\n  <Directory {{ document_root }}>\n    AllowOverride All\n    Require all granted\n  </Directory>\n</VirtualHost>\n```", "```\n- name: \"Copy the our vhost.conf to the sites-enabled folder\"\n  ansible.builtin.template:\n    src: vhost.conf.j2\n    dest: \"{{ vhost_path }}{{ vhost_our_file }}\"\n    mode: \"0644\"\n  notify: \"Restart apache2\"\n```", "```\nhtml_deploy: true\nhtml_heading: \"Success !!!\"\nhtml_body: |\n  This HTML page has been deployed using Ansible to <b>{{ ansible_host }}</b>.<br>\n  The user is <b>{{ users.0.name }}</b> who is in the <b>{{ apache_group }}</b> group.<br>\n  The weboot is <b>{{ document_root }}</b>, the default index file is <b>{{ index_file }}</b>.<br>\n```", "```\n- name: \"Copy the test HTML page to the document root\"\n  ansible.builtin.template:\n    src: index.html.j2\n    dest: \"{{ document_root }}/index.html\"\n    mode: \"0644\"\n    owner: \"{{ users.0.name }}\"\n    group: \"{{ apache_group }}\"\n  when: html_deploy\n```", "```\n<!--{{ ansible_managed }}-->\n<!doctype html>\n<title>{{ html_heading }}</title>\n<style>\n  body { text-align: center; padding: 150px; }\n  h1 { font-size: 50px; }\n  body { font: 20px Helvetica, sans-serif; color: #333; }\n  article { display: block; text-align: left; width: 650px; margin: 0 auto; }\n</style>\n<article>\n    <h1>{{ html_heading }}</h1>\n    <div>\n        <p>{{ html_body }}</p>\n    </div>\n</article>\n```", "```\nwhen: html_deploy\n```", "```\n- name: \"Install mariadb packages\"\n  ansible.builtin.apt:\n    state: \"present\"\n    pkg: \"{{ mariadb_packages }}\"\n```", "```\nmariadb_packages:\n  - \"mariadb-server\"\n  - \"mariadb-client\"\n  - \"python3-pymysql\"\n```", "```\n- name: \"Start mariadb\"\n  ansible.builtin.service:\n    name: mariadb\n    state: started\n    enabled: true\n```", "```\nmariadb_root_username: \"root\"\nmariadb_root_password: \"Pa55W0rd123\"\nmariadb_hosts:\n  - \"127.0.0.1\"\n  - \"::1\"\n  - \"{{ ansible_nodename }}\"\n  - \"%\"\n  - \"localhost\"\n```", "```\n- name: \"Check to see if the ~/.my.cnf file exists\"\n  ansible.builtin.stat:\n    path: ~/.my.cnf\n  register: mycnf\n```", "```\n- name: \"Change mysql root password if we need to\"\n  community.mysql.mysql_user:\n    name: \"{{ mariadb_root_username }}\"\n    host: \"{{ item }}\"\n    password: \"{{ mariadb_root_password }}\"\n    check_implicit_admin: \"yes\"\n    priv: \"*.*:ALL,GRANT\"\n    login_user: \"{{ mariadb_root_username }}\"\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n  with_items: \"{{ mariadb_hosts }}\"\n  when: not mycnf.stat.exists\n```", "```\n# {{ ansible_managed }}\n[client]\nuser='{{ mariadb_root_username }}'\npassword='{{ mariadb_root_password }}'\n```", "```\n- name: \"Set up ~/.my.cnf file\"\n  ansible.builtin.template:\n    src: \"my.cnf.j2\"\n    dest: \"~/.my.cnf\"\n    mode: \"0600\"\n```", "```\n- name: \"Delete anonymous MySQL user\"\n  community.mysql.mysql_user:\n    user: \"\"\n    host: \"{{ item }}\"\n    state: absent\n  with_items: \"{{ mariadb_hosts }}\"\n```", "```\n- name: \"Remove the MySQL test database\"\n  community.mysql.mysql_db:\n    db: \"test\"\n    state: \"absent\"\n```", "```\nmariadb_sample_database:\n  create_database: true\n  source_url: \"https://github.com/russmckendrick/test_db/archive/master.zip\"\n  path: \"/tmp/test_db-master\"\n```", "```\n  db_name: \"employees\"\n  db_user: \"employees\"\n  db_password: \"employees\"\n```", "```\n  dump_files:\n    - \"employees.sql\"\n    - \"show_elapsed.sql\"\n```", "```\n    - \"load_departments.dump\"\n    - \"load_employees.dump\"\n    - \"load_dept_emp.dump\"\n    - \"load_dept_manager.dump\"\n    - \"load_titles.dump\"\n    - \"load_salaries1.dump\"\n    - \"load_salaries2.dump\"\n    - \"load_salaries3.dump\"\n```", "```\n- name: \"Download and unarchive the sample database data\"\n  ansible.builtin.unarchive:\n    src: \"{{ mariadb_sample_database.source_url }}\"\n    dest: /tmp\n    remote_src: \"yes\"\n  when: mariadb_sample_database.create_database\n```", "```\n- name: \"Create the sample database\"\n  community.mysql.mysql_db:\n    db: \"{{ mariadb_sample_database.db_name }}\"\n    state: present\n  when: mariadb_sample_database.create_database\n```", "```\n- name: \"Create the user for the sample database\"\n  community.mysql.mysql_user:\n    name: \"{{ mariadb_sample_database.db_user }}\"\n    password: \"{{ mariadb_sample_database.db_password }}\"\n    priv: \"{{ mariadb_sample_database.db_name }}.*:ALL\"\n    state: present\n  with_items: \"{{ mariadb_hosts }}\"\n  when: mariadb_sample_database.create_database\n```", "```\n- name: \"Check to see if we need to import the sample database dumps\"\n  ansible.builtin.stat:\n    path: /var/lib/mysql/{{ mariadb_sample_database.db_name }}/{{ mariadb_sample_database.db_name }}.frm\n  register: db_imported\n  when: mariadb_sample_database.create_database\n```", "```\n- name: \"Import the sample database\"\n  community.mysql.mysql_db:\n    name: \"{{ mariadb_sample_database.db_name }}\"\n    state: import\n    target: \"{{ mariadb_sample_database.path }}/{{ item }}\"\n  with_items: \"{{ mariadb_sample_database.dump_files }}\"\n  when: db_imported is defined and not db_imported.stat.exists\n```", "```\nphp_packages:\n  - \"php\"\n  - \"php-cli\"\n  - \"php-curl\"\n  - \"php-gd\"\n  - \"php-intl\"\n  - \"php-mbstring\"\n  - \"php-mysql\"\n  - \"php-soap\"\n  - \"php-xml\"\n  - \"php-xmlrpc\"\n  - \"php-zip\"\n  - \"libapache2-mod-php\"\n```", "```\n- name: \"Install php packages\"\n  ansible.builtin.apt:\n    state: \"present\"\n    pkg: \"{{ php_packages }}\"\n  notify: \"Restart apache2\"\n```", "```\n- name: \"Copy the PHP info to the document root\"\n  ansible.builtin.copy:\n    src: info.php\n    dest: \"{{ document_root }}/info.php\"\n    mode: \"0755\"\n    owner: \"{{ users.0.name }}\"\n    group: \"{{ apache_group }}\"\n  when: php_info\n```", "```\nadminer:\n  install: true\n  path: \"/usr/share/adminer\"\n  download: \"https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1-mysql.php\"\n```", "```\n- name: \"Create the document root for adminer\"\n  ansible.builtin.file:\n    dest: \"{{ adminer.path }}\"\n    state: directory\n    mode: \"0755\"\n  when: adminer.install\n```", "```\n- name: \"Download adminer\"\n  ansible.builtin.get_url:\n    url: \"{{ adminer.download }}\"\n    dest: \"{{ adminer.path }}/index.php\"\n    mode: \"0755\"\n  when: adminer.install\n```", "```\n- name: \"Copy the adminer.conf to sites-enabled folder\"\n  ansible.builtin.template:\n    src: adminer.conf.j2\n    dest: \"{{ vhost_path }}adminer.conf\"\n    mode: \"0755\"\n  when: adminer.install\n  notify: \"Restart apache2\"\n```", "```\n# {{ ansible_managed }}\nAlias /adminer \"{{ adminer.path }}\"\n  <Directory \"{{ adminer.path }}\">\n    DirectoryIndex index.php\n    AllowOverride All\n    Require all granted\n  </Directory>\n```", "```\n---\n- name: \"Install LAMP stack\"\n  hosts: ansible_hosts\n  gather_facts: true\n  become: true\n  become_method: ansible.builtin.sudo\n  vars_files:\n    - group_vars/common.yml\n  roles:\n    - common\n    - apache\n    - mariadb\n    - php\n```", "```\nhtml_body: |\n  This HTML page has been deployed using Ansible to <b>{{ ansible_nodename }}</b>.<br>\n  The user is <b>{{ users.0.name }}</b> who is in the <b>{{ apache_group }}</b> group.<br>\n  The weboot is <b>{{ document_root }}</b>, the default index file is <b>{{ index_file }}</b>.<br><br>\n  You can access a <a href=\"/info.php\">PHP Info file</a> or <a href=\"/adminer/\">Adminer</a>.\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\nPLAY [ansible_hosts]\nTASK [Gathering Facts]\nok: [ansiblevm]\nTASK [roles/common : update apt cache and upgrade packages]\nok: [ansiblevm]\n…. lots of other output here ….\nRUNNING HANDLER [roles/apache : restart apache2]\nchanged: [ansiblevm]\nPLAY RECAP\nansiblevm : ok=34    changed=26    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\nPLAY RECAP\nansiblevm         : ok=30    changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0\n```", "```\nTASK [roles/mariadb : change mysql root password if we need to]\nskipping: [ansiblevm] => (item=127.0.0.1)\nskipping: [ansiblevm] => (item=::1)\nskipping: [ansiblevm] => (item=ansiblevm)\nskipping: [ansiblevm] => (item=%)\nskipping: [ansiblevm] => (item=localhost)\nskipping: [ansiblevm]\n```", "```\nTASK [roles/mariadb : import the sample database]\nskipping: [ansiblevm] => (item=employees.sql)\nskipping: [ansiblevm] => (item=show_elapsed.sql)\nskipping: [ansiblevm] => (item=load_departments.dump)\nskipping: [ansiblevm] => (item=load_employees.dump)\nskipping: [ansiblevm] => (item=load_dept_emp.dump)\nskipping: [ansiblevm] => (item=load_dept_manager.dump)\nskipping: [ansiblevm] => (item=load_titles.dump)\nskipping: [ansiblevm] => (item=load_salaries1.dump)\nskipping: [ansiblevm] => (item=load_salaries2.dump)\nskipping: [ansiblevm] => (item=load_salaries3.dump)\nskipping: [ansiblevm]\n```"]