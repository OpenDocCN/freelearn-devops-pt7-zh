["```\n    <someservice id=\"jtricksserviceid\">\n      <description>My New Service</description>\n      <properties></properties>\n    </someservice>\n    ```", "```\n    public class JTricksService extends AbstractService {\n      ...\n    }\n    ```", "```\n    public void run() {\n      System.out.println(\"Running the JTricks service!!\");\n    }\n\n    public ObjectConfiguration getObjectConfiguration() throws ObjectConfigurationException {\n      return getObjectConfiguration(\"MYNEWSERVICE\", \"com/jtricks/services/myjtricksservice.xml\", null);\n    }\n    ```", "```\n    <someservice id=\"jtricksserviceid\">\n      <description>My New Service</description>\n      <properties>\n        <property>\n          <key>Tutorial</key>\n          <name>The tutorial you like</name>\n          <type>string</type>\n        </property>\n      </properties>\n    </someservice>\n    ```", "```\n    @Override\n    public void init(PropertySet props) throws ObjectConfigurationException {\n      super.init(props);\n      if (hasProperty(TUTORIAL)) {\n        tutorial = getProperty(TUTORIAL);\n      } else {\n        tutorial = \"I don't like tutorials!\";\n      }\n    }\n    ```", "```\n    @Override\n    public void run() {\n      System.out.println(\"Running the JTricks service!! Tutorial? \" + tutorial);\n    }\n    ```", "```\n    public class JTricksScheduledJob implements Job{\n      ...\n    }\n    ```", "```\n    public void execute(JobExecutionContext context) throws JobExecutionException {\n      System.out.println(\"Running the job at \"+(new Date()).toString());\n    }\n    ```", "```\n        <job name=\"JTricksJob\" class=\"com.jtricks.JTricksScheduledJob\" />\n        ```", "```\n        <trigger name=\"JTricksJobTrigger\" job=\"JTricksJob\" type=\"cron\">\n          <expression>0 0/2 * * * ?</expression><!-- run every 2 minutes -->\n        </trigger>\n        ```", "```\n    public class OldEventListener extends AbstractIssueEventListener {\n      ...\n    }\n    ```", "```\n        @Override\n        public String[] getAcceptedParams() {\n          return new String[] { \"prop 1\" };\n        }\n        ```", "```\n        @Override\n        public void init(Map params) {\n          prop1 = (String) params.get(\"prop 1\");\n        }\n        ```", "```\n    @Override\n    public void issueCreated(IssueEvent event) {\n      Issue issue = event.getIssue();\n      System.out.println(\"Issue \" + issue.getKey() + \" has been created and property is:\"+prop1);\n    }\n    ```", "```\n    @Override\n    public void customEvent(IssueEvent event) {\n      Long eventTypeId = event.getEventTypeId();\n      Issue issue = event.getIssue();\n      if (eventTypeId.equals(10033L)) {\n        System.out.println(\"Custom Event thrown here for issue:\" + issue.getKey()+\" and property is:\"+prop1);\n      }\n    }\n    ```", "```\n    <component key=\"eventListener\" class=\"com.jtricks.NewEventListener\">\n      <description>Class that processes the new JIRA Event</description>\n    </component>\n    ```", "```\n    <component-import key=\"eventPublisher\" interface=\"com.atlassian.event.api.EventPublisher\"/>\n    ```", "```\n        public class NewEventListener {\n          public NewEventListener(EventPublisher eventPublisher) {\n            eventPublisher.register(this);\n          }\n        }\n        ```", "```\n        @EventListener\n        public void onIssueEvent(IssueEvent issueEvent) {  \n        System.out.println(\"Capturing event with \n        ID:\"+issueEvent.getEventTypeId()+\" here\");\n          ...\n        }\n        ```", "```\n        @EventListener\n        public void onIssueEvent(IssueEvent issueEvent) {  System.out.println(\"Capturing event with ID:\"+issueEvent.getEventTypeId()+\" here\");\n          Long eventTypeId = issueEvent.getEventTypeId();\n               Issue issue = issueEvent.getIssue();\n\n          if (eventTypeId.equals(EventType.ISSUE_CREATED_ID)) {\n            System.out.println(\"Issue \"+issue.getKey()+\" has been created\");\n                } else if (eventTypeId.equals(10033L)) {\n                  System.out.println(\"Custom Event thrown here for issue:\"+issue.getKey());\n                }\n        }\n        ```", "```\npublic class NewEventListenerModified implements InitializingBean, DisposableBean {\n  private final EventPublisher eventPublisher;\n  public NewEventListenerModified(EventPublisher eventPublisher) {\n    this.eventPublisher = eventPublisher;\n  }\n  @EventListener\n  public void onIssueEvent(IssueEvent issueEvent) {\n    System.out.println(\"Capturing event with ID:\" + issueEvent.getEventTypeId() + \" here\");\n    Long eventTypeId = issueEvent.getEventTypeId();\n    Issue issue = issueEvent.getIssue();\n    if (eventTypeId.equals(EventType.ISSUE_CREATED_ID)) {\n      System.out.println(\"Issue \" + issue.getKey() + \" has been created\");\n    } else if (eventTypeId.equals(10033L)) {\n      System.out.println(\"Custom Event thrown here for issue:\" + issue.getKey());\n    }\n  }\n  public void afterPropertiesSet() throws Exception {\n    eventPublisher.register(this);\n\n  public void destroy() throws Exception {\n    eventPublisher.unregister(this);\n  }\n}\n```", "```\n<dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n            <version>2.5.6</version>\n            <scope>provided</scope>\n</dependency>\n```", "```\n    <templatemappings>\n      ...\n      <templatemapping id=\"2\">\n        <name>Issue Updated</name>\n        <template>issueupdated.vm</template>\n        <templatetype>issueevent</templatetype>\n      </templatemapping>\n      ...\n    </templatemappings>\n    ```", "```\n    <templatemappings>\n      ...\n      <templatemapping id=\"20\">\n        <name>Demo Event</name>\n        <template>demoevent.vm</template>\n        <templatetype>issueevent</templatetype>\n      </templatemapping>\n      ...\n    </templatemappings>\n    ```", "```\n$issue.getCustomFieldValue($customFieldManager.getCustomFieldObject(\"customfield_10010\"))\n```", "```\n@Override\nprotected String doExecute() throws Exception {\n  System.out.println(\"Action invoked. Doing something important before redirecting to Dashboard!\");\n  return getRedirect(\"/secure/Dashboard.jspa\");\n}\n```", "```\n    <user-format key=\"twitter-format\" name=\"Twitter User Format\" class=\"com.jtricks.TwitterUserFormat\" system=\"true\">\n      <description>User name linking to twitter</description>   <type>twitterLink</type>\n      <resource type=\"velocity\" name=\"view\" location=\"templates/twitterLink.vm\"/>\n    </user-format>\n    ```", "```\n    public class TwitterUserFormat implements UserFormat {\n      private final UserFormatModuleDescriptor moduleDescriptor;\n\n      public TwitterUserFormat(UserFormatModuleDescriptor moduleDescriptor){\n        this.moduleDescriptor = moduleDescriptor;\n      }\n    }\n    ```", "```\n    public String format(String username, String id) {\n      final Map<String, Object> params = getInitialParams(username, id);\n      return moduleDescriptor.getHtml(VIEW_TEMPLATE, params);\n    }\n    ```", "```\n    private Map<String, Object> getInitialParams(final String username, final String id) {\n      final Map<String, Object> params = MapBuilder.<String, Object> newBuilder().add(\"username\", username).toMutableMap();\n      return params;\n    }\n    ```", "```\n    public String format(String username, String id, Map<String, Object> params) {  \n      final Map<String, Object> velocityParams = \n      getInitialParams(username, id);  \n      velocityParams.putAll(params);\n      return moduleDescriptor.getHtml(VIEW_TEMPLATE, velocityParams);\n    }\n    ```", "```\n    #if ($username)\n      #set ($quote = '\"')\n      #set($author = \"<a id=${quote}${textutils.htmlEncode($username)}${quote} href=${quote}http://twitter.com/#!/${username}${quote}>$textutils.htmlEncode($username)</a>\")\n    #else\n        #set($author = $i18n.getText('common.words.anonymous'))\n    #end\n    ${author}\n    ```", "```\n#if($assigneeUsername)\n    #if ($displayParams && $displayParams.nolink)\n        $userformat.formatUser($assigneeUsername, 'fullName', 'assignee')\n    #else\n        <span class=\"tinylink\">$userformat.formatUser($assigneeUsername, 'twitterLink', 'assignee')</span>\n    #end\n#else\n    <em>$i18n.getText('common.concepts.unassigned')</em>\n#end\n```", "```\n$userformat.formatUser($username, 'twitterLink', 'some_id')\n```", "```\n$userformat.formatUser($username, 'twitterLink', 'some_id', $someMapWithExtraContext)\n```", "```\n    <servlet name=\"Test Servlet\" key=\"jtricksServlet\" class=\"com.jtricks.JTricksServlet\">\n        <description>Test Servlet</description>\n        <url-pattern>/myWebsite</url-pattern>\n        <init-param>\n            <param-name>siteName</param-name>\n            <param-value>Atlassian</param-value>\n        </init-param>\n        <init-param>\n            <param-name>siteAddress</param-name>\n            <param-value>http://www.atlassian.com/</param-value>\n        </init-param>\n    </servlet>\n    ```", "```\n    public class JTricksServlet extends HttpServlet {\n      ...\n    }\n    ```", "```\n        @Override\n        public void init(ServletConfig config) throws ServletException {\n          super.init(config);\n          authenticationContext = ComponentManager.getInstance().getJiraAuthenticationContext();  siteName = config.getInitParameter(\"siteName\");\n          siteAddress = config.getInitParameter(\"siteAddress\");\n        }\n        ```", "```\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n          resp.setContentType(\"text/html\");\n          PrintWriter out = resp.getWriter();\n\n          User user = authenticationContext.getUser();  out.println(\"Welcome \" + (user != null ? user.getFullName() : \"Anonymous\"));\n          out.println(\"<br>Invoking the servlet...\");\n          out.println(\"<br>My Website : <a href=\\\"\" + siteAddress + \"\\\">\" + siteName + \"</a>\");\n\n          doSomething();\n\n          out.println(\"<br>Done!\");\n        }\n\n        private void doSomething() {\n          System.out.println(\"Invoked servlet at \" + (new Date()));\n        }\n        ```", "```\n<servlet-context-param key=\"jtricksContext\">\n  <description>Shares this param!</description>\n  <param-name>sharedText</param-name>\n  <param-value>This is a shared Text</param-value>\n</servlet-context-param> \n```", "```\n@Override\npublic void init(ServletConfig config) throws ServletException {\n  super.init(config);\n  String sharedText = config.getServletContext().getInitParameter(\"sharedText\");\n}\n```", "```\nout.println(\"<br>Shared Text:\"+sharedText);\n```", "```\n    <servlet-context-listener name=\"Test Servlet Listener\" key=\"jtricksServletListener\" class=\"com.jtricks.JTricksServletListener\">\n      <description>Listener for Test Servlet</description>\n    </servlet-context-listener>\n    ```", "```\n    public class JTricksServletListener implements ServletContextListener{\t  ...\n    }\n    ```", "```\n    public void contextDestroyed(ServletContextEvent event) {  System.out.println(\"Test Servlet Context is destroyed!\");\n    }\n\n    public void contextInitialized(ServletContextEvent event) {  System.out.println(\"Test Servlet Context is initialized!\");\n    }\n    ```", "```\n    <servlet-filter name=\"Browse Issue Filter\" key=\"jtricksServletFilter\" class=\"com.jtricks.JTricksServletFilter\" location=\"before-dispatch\" weight=\"200\">\n            <description>Filter for Browse Issue</description>\n            <url-pattern>/browse/*-*</url-pattern>\n            <init-param>\n                <param-name>filterName</param-name>\n                <param-value>JTricks Filter</param-value>\n            </init-param>\n    </servlet-filter>\n    ```", "```\n    public class JTricksServletFilter implements Filter {\n      ...\n    }\n    ```", "```\n    public void destroy() {\n      System.out.println(\"Filter destroyed!\");\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n      HttpServletRequest request = (HttpServletRequest) req;\n\n      // Get the IP address of client machine.\n      String ipAddress = request.getRemoteAddr();\n\n      // Log the user details, IP address , current timestamp and URL.  \n    System.out.println(\"Intercepted in filter, request by user:\" + authenticationContext.getUser().getFullName()  + \" from IP \" + ipAddress + \" at \" + new Date().toString() + \". Accessed URL:\"+request.getRequestURI());\n\n      chain.doFilter(req, res);\n    }\n\n    public void init(FilterConfig config) throws ServletException {  System.out.println(\"Initiating the filter:\"+config.getInitParameter(\"filterName\"));\n      authenticationContext = ComponentManager.getInstance().getJiraAuthenticationContext();\n    }\n    ```", "```\n    package com.jtricks.provider;\n\n    public interface MyComponent {\n      public void doSomething();\n    }\n    ```", "```\n    public class MyComponentImpl implements MyComponent{  \n      private final JiraAuthenticationContext authenticationContext;\n\n      public MyComponentImpl(JiraAuthenticationContext authenticationContext) {\n        this.authenticationContext = authenticationContext;\n      }\n\n      public void doSomething() {\n        System.out.println(\"Hey \"+authenticationContext.getUser().getFullName()+\",  Sample method to check Components\");\n      }\n    }\n    ```", "```\n    <component key=\"myComponent\" name=\"My Component\" class=\"com.jtricks.provider.MyComponentImpl\">  \n      <interface>com.jtricks.provider.MyComponent</interface>\n    </component>\n    ```", "```\npublic class RedirectAction extends JiraWebActionSupport {\n  private final MyComponent myComponent;\n\n  public RedirectAction(MyComponent myComponent) {\n    this.myComponent = myComponent;\n  }\n\n  @Override\n  protected String doExecute() throws Exception {\n    System.out.println(\"Execute the method in component!\");\n    this.myComponent.doSomething();\n    System.out.println(\"Succesfully executed. Go to dashboard\");\n    return getRedirect(\"/secure/Dashboard.jspa\");\n  }\n}\n```", "```\n    <component key=\"myComponent\" name=\"My Component\" class=\"com.jtricks.provider.MyComponentImpl\" public=\"true\">\n      <interface>com.jtricks.provider.MyComponent</interface>\n    </component>\n    ```", "```\n<plugin-info>\n  <description>Adding and importing components to JIRA</description>  <version>2.0</version>\n  <vendor name=\"JTricks\" url=\"http://www.j-tricks.com/\" />\n  <bundle-instructions>\n    <Export-Package>com.jtricks.provider</Export-Package>\n  </bundle-instructions>\n</plugin-info>\n```", "```\n<component-import key=\"myComponent\">         <interface>com.jtricks.provider.MyComponent</interface></component-import>\n```", "```\n<component key=\"dictionaryService\" class=\"com.myapp.DefaultDictionaryService\" interface=\"com.myapp.DictionaryService\">\n    <description>Provides a dictionary service.</description>\n    <service-properties>\n        <entry key=\"language\" value=\"English\" />\n    </service-properties>\n</component>\n```", "```\n<component-import key=\"dictionaryService\" interface=\"com.myapp.DictionaryService\"  filter=\"(language=English)\" />\n```", "```\n    <module-type key=\"dictionary\" class=\"com.jtricks.DictionaryModuleDescriptor\" />\n    ```", "```\n    public interface Dictionary {\n      String getDefinition(String text);\n    }\n    ```", "```\n    public class DictionaryModuleDescriptor extends AbstractModuleDescriptor<Dictionary> {\n      ...\n    }\n    ```", "```\n    public class DictionaryModuleDescriptor extends AbstractModuleDescriptor<Dictionary> {\n      public DictionaryModuleDescriptor(ModuleFactory moduleFactory) {\n        super(moduleFactory);\n      }\n\n      public Dictionary getModule() {\n        return moduleFactory.createModule(moduleClassName, this);\n      }\n    }\n    ```", "```\n    public class DictionaryModuleDescriptor extends AbstractModuleDescriptor<Dictionary> {\n      private String language;\n\n      public DictionaryModuleDescriptor(ModuleFactory moduleFactory) {\n        super(moduleFactory);\n      }\n\n      @Override\n      public void init(Plugin plugin, Element element) throws PluginParseException {\n        super.init(plugin, element);\n        language = element.attributeValue(\"lang\");\n      }\n\n      public Dictionary getModule() {\n        return moduleFactory.createModule(moduleClassName, this);\n      }\n\n      public String getLanguage() {\n        return language;\n      }\n    }\n    ```", "```\n<dictionary key=\"myUSEnglishDictionary\" lang=\"us-english\" class=\"com.jtricks.dictionary.USDictionary\" />\n<dictionary key=\"myUKEnglishDictionary\" lang=\"uk-english\" class=\"com.jtricks.dictionary.UKDictionary\" />\n```", "```\npublic class USDictionary implements Dictionary {\n  public String getDefinition(String text) {\n    if (text.equals(\"JIRA\")){\n      return \"JIRA in San Fransisco!\";\n    } else {\n     return \"What are you asking? We in US don't know anything other than JIRA!!\";\n    }\n  }\n}\n\npublic class UKDictionary implements Dictionary {\n  public String getDefinition(String text) {\n    if (text.equals(\"JIRA\")){\n      return \"JIRA in London!\";\n    } else {\n      return \"What are you asking? We in UK don't know anything other than JIRA!!\";\n    }\n  }\n}\n```", "```\n    List<DictionaryModuleDescriptor> dictionaryModuleDescriptors = pluginAccessor.getEnabledModuleDescriptorsByClass(DictionaryModuleDescriptor.class);\n    ```", "```\n    PluginAccessor pluginAccessor = ComponentManager.getInstance().getPluginAccessor();\n    ```", "```\n    private String getJIRADescription(String key) {\n      // To get all the enabled modules of this module descriptor  List<DictionaryModuleDescriptor> dictionaryModuleDescriptors = pluginAccessor.getEnabledModuleDescriptorsByClass(DictionaryModuleDescriptor.class);\n      for (DictionaryModuleDescriptor dictionaryModuleDescriptor : dictionaryModuleDescriptors){\n        if (dictionaryModuleDescriptor.getLanguage().equals(key)){\n          return dictionaryModuleDescriptor.getModule().getDefinition(\"JIRA\");\n        }\n      }\n      return \"Not Found\";\n    }\n    ```", "```\nlog4j.logger.com.atlassian.jira.soap.axis.JiraAxisSoapLog  = ON, soapaccesslog\nlog4j.additivity.com.atlassian.jira.soap.axis.JiraAxisSoapLog = false\nlog4j.logger.com.atlassian.jira.soap.axis.JiraAxisSoapLogDump  = ON, soapdumplog\nlog4j.additivity.com.atlassian.jira.soap.axis.JiraAxisSoapLogDump = false\nlog4j.logger.com.atlassian.jira.web.filters.accesslog.AccessLogFilter = ON, httpaccesslog\nlog4j.additivity.com.atlassian.jira.web.filters.accesslog.AccessLogFilter = false\nlog4j.logger.com.atlassian.jira.web.filters.accesslog.AccessLogFilterIncludeImages = ON, httpaccesslog\nlog4j.additivity.com.atlassian.jira.web.filters.accesslog.AccessLogFilterIncludeImages = false\nlog4j.logger.com.atlassian.jira.web.filters.accesslog.AccessLogFilterDump = ON, httpdumplog\nlog4j.additivity.com.atlassian.jira.web.filters.accesslog.AccessLogFilterDump = false\n```", "```\nlog4j.category.com.atlassian.jira.web.filters.AccessLogFilter = INFO, console, filelog\nlog4j.additivity.com.atlassian.jira.web.filters = false\n```", "```\n0:0:0:0:0:0:0:1 23x14x1 jobinkk [20/Jul/2011:00:23:43 +0100] \"GET /secure/AdminSummary.jspa HTTP/1.1\" 200 89148 466 \"http://localhost:8080/secure/Dashboard.jspa\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0\" \"xdtgfh\"\n0:0:0:0:0:0:0:1 23x15x1 jobinkk [20/Jul/2011:00:23:50 +0100] \"GET /secure/admin/ViewLogging.jspa HTTP/1.1\" 200 7521 724 \"http://localhost:8080/secure/AdminSummary.jspa\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0\" \"xdtgfh\"\n0:0:0:0:0:0:0:1 23x16x1 jobinkk [20/Jul/2011:00:23:55 +0100] \"POST /secure/admin/WebSudoAuthenticate.jspa HTTP/1.1\" 302 - 273 \"http://localhost:8080/secure/admin/ViewLogging.jspa\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0\" \"xdtgfh\"\n```", "```\nlog4j.appender.soapaccesslog.File=/var/log/soap-access.log\n```", "```\nlog4j.logger.com.atlassian.jira.ofbiz.LoggingSQLInterceptor = ON, sqllog\nlog4j.additivity.com.atlassian.jira.ofbiz.LoggingSQLInterceptor = false\nlog4j.logger.com.atlassian.jira.security.xsrf.XsrfVulnerabilityDetectionSQLInterceptor = ON, xsrflog\nlog4j.additivity.com.atlassian.jira.security.xsrf.XsrfVulnerabilityDetectionSQLInterceptor = false\n```", "```\n2011-07-20 00:39:31,061 http-8080-6 jobinkk 39x31x1 1ogij3g /secure/EditIssue!default.jspa 0ms \"SELECT ID, ENTITY_NAME, ENTITY_ID, PROPERTY_KEY, propertytype FROM PUBLIC.propertyentry WHERE ENTITY_NAME='IssueType' AND ENTITY_ID='3'\"\n2011-07-20 00:39:31,063 http-8080-6 jobinkk 39x31x1 1ogij3g /secure/EditIssue!default.jspa call stack ...\n\n  at com.opensymphony.module.propertyset.ofbiz.OFBizPropertySet.getKeys(OFBizPropertySet.java:82)  at com.atlassian.jira.propertyset.PropertySetCache.bulkLoad(PropertySetCache.java:313)at com.atlassian.jira.propertyset.JiraCachingPropertySet.init(JiraCachingPropertySet.java:789)  at com.opensymphony.module.propertyset.PropertySetManager.getInstance(PropertySetManager.java:58)  at com.opensymphony.module.propertyset.PropertySetManager.getInstance(PropertySetManager.java:31)\n```", "```\nlog4j.appender.sqllog.File=/var/log/sql.log\n```", "```\n    <component key=\"subtaskManager\" name=\"My Subtask Manager\" class=\"com.jtricks.MySubtaskManager\">        <interface>com.atlassian.jira.config.SubTaskManager</interface>\n    </component>\n    ```", "```\n    public class MySubtaskManager extends DefaultSubTaskManager {\n      public MySubtaskManager(ConstantsManager constantsManager, IssueLinkTypeManager issueLinkTypeManager,  IssueLinkManager issueLinkManager, PermissionManager permissionManager, ApplicationProperties applicationProperties, CollectionReorderer collectionReorderer, IssueTypeSchemeManager issueTypeSchemeManager, IssueManager issueManager) {\n        super(constantsManager, issueLinkTypeManager, issueLinkManager, permissionManager, applicationProperties,  collectionReorderer, issueTypeSchemeManager, issueManager);\n       }\n\n      @Override\n      public void createSubTaskIssueLink(GenericValue parentIssue, GenericValue subTaskIssue, User remoteUser)   throws CreateException {              \n    System.out.println(\"Creating Subtask link in overriden component using GenericValue!\");\n        super.createSubTaskIssueLink(parentIssue, subTaskIssue, remoteUser);\n      }\n    }\n    ```", "```\nregister.implementation(PROVIDED, SubTaskManager.class, DefaultSubTaskManager.class);\n```", "```\nregister.implementation(PROVIDED, SubTaskManager.class, MySubtaskManager.class);\n```", "```\n    public class MyContainerProvider implements ContainerProvider{\n      ...\n    }\n    ```", "```\n    public class MyContainerProvider implements ContainerProvider{\n        private DefaultPicoContainer container;\n\n        public PicoContainer getContainer(PicoContainer parent){\n            if (container == null)\n                buildContainer(parent);\n            return container;\n        }\n\n        private void buildContainer(PicoContainer parent){\n            this.container = new DefaultPicoContainer(new ProfilingComponentAdapterFactory(), parent);\n      container.registerComponentImplementation(SubTaskManager.class, MySubtaskManager.class);\n        }\n    }\n    ```", "```\n    jira.extension.container.provider = com.jtricks.MyContainerProvider\n    ```", "```\n<property>\n    <key>jira.extension.container.provider</key>\n    <default-value>com.jtricks.MyContainerProvider</default-value>\n    <type>string</type>\n    <user-editable>true</user-editable>\n</property>\n```", "```\n    good.bye=Good Bye\n    ```", "```\n    RedirectAction_en_US.properties\n    RedirectAction_en_UK.properties\n    RedirectAction_fr_FR.properties\n    ```", "```\n    good.bye=Good Bye (in RedirectAction_en_UK.properties)\n    good.bye=revoir (in RedirectAction_fr_FR.properties)\n    ```", "```\n    System.out.println(getText(\"good.bye\"));\n    ```", "```\n@Override\npublic ResourceBundle getTexts(String bundleName) {\n  return ResourceBundle.getBundle(bundleName, getLocale(), getClass().getClassLoader());\n}\n```", "```\n    <resource name=\"common-18n\" type=\"i18n\" location=\"com.jtricks.RedirectAction\"/>\n    ```", "```\n    $i18n.getText(\"good.bye\")\n    ```", "```\n    package com.jtricks.utilities;\n\n    public class NumberUtility {\n      public static int add(int x, int y) {\n        return x + y;\n      }\n    }\n    ```", "```\n    <plugin-info>\n      <description>Shared Utilities</description>\n      <version>2.0</version>\n      <vendor name=\"JTricks\" url=\"http://www.j-tricks.com/\" />\n      <bundle-instructions>\n        <Export-Package>com.jtricks.utilities</Export-Package>\n      </bundle-instructions>\n    </plugin-info>\n    ```", "```\n<dependency>\n  <groupId>com.jtricks</groupId>\n  <artifactId>utility-plugin</artifactId>\n  <version>1.0</version>\n  <scope>provided</scope>\n</dependency>\n```", "```\n@Override\nprotected String doExecute() throws Exception {\n  System.out.println(\"Action invoked. Doing something important before redirecting to Dashboard!\");\n  System.out.println(\"Sum:\"+NumberUtility.add(3, 5));\n  return getRedirect(\"/secure/Dashboard.jspa\");\n}\n```"]