["```\ngit clone https://github.com/aric49/ansible_container_lab.git\n```", "```\ncd Ansible_Container_Lab\nvagrant up\n```", "```\nuser@host:$ vagrant up\nBringing machine 'node01' up with 'virtualbox' provider...\n==> node01: Importing base box 'ubuntu/xenial64'...\n==> node01: Matching MAC address for NAT networking...\n==> node01: Checking if box 'ubuntu/xenial64' is up to date...\n==> node01: Setting the name of the VM: AnsibleBook_node01_1496327441174_45550\n==> node01: Clearing any previously set network interfaces...\n==> node01: Preparing network interfaces based on configuration...\nnode01: Adapter 1: nat\n==> node01: Forwarding ports...\nnode01: 22 (guest) => 2022 (host) (adapter 1)\n==> node01: Running 'pre-boot' VM customizations...\n==> node01: Booting VM...\n==> node01: Waiting for machine to boot. This may take a few minutes...\nnode01: SSH address: 127.0.0.1:2022\n```", "```\nubuntu@node01:~$ docker ps -a\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\nubuntu@node01:~$\n```", "```\nubuntu@node01:~$ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\n```", "```\nubuntu@node01:~$ docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n78445dd45222: Pull complete\nDigest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7\nStatus: Downloaded newer image for hello-world:latest\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\nTo generate this message, Docker took the following steps:\n1\\. The Docker client contacted the Docker daemon.\n2\\. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n3\\. The Docker daemon created a new container from that image which runs the\nexecutable that produces the output you are currently reading.\n4\\. The Docker daemon streamed that output to the Docker client, which sent it\nto your terminal.\nTo try something more ambitious, you can run an Ubuntu container with:\n$ docker run -it ubuntu bash\nShare images, automate workflows, and more with a free Docker ID:\nhttps://cloud.docker.com/\nFor more examples and ideas, visit:\nhttps://docs.docker.com/engine/userguide/\n```", "```\nubuntu@node01:~$ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nhello-world latest 48b5124b2768 4 months ago 1.84 kB\nubuntu@node01:~$\n```", "```\nubuntu@node01:~$ docker ps -a\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\nb0c4093ab38f hello-world \"/hello\" 28 minutes ago Exited (0) 28 minutes ago romantic_easley\n```", "```\nFROM ubuntu:16.04\nRUN apt-get update; apt-get install -y apache2\nEXPOSE 80\nENTRYPOINT [\"apache2ctl\"]\nCMD [\"-DFOREGROUND\"]\n```", "```\ndocker build -t webservercontainer:1.0 .\n```", "```\nubuntu@node01:$ docker images\nREPOSITORY TAG IMAGE ID CREATED SIZE\nwebservercontainer 1.0 3f055adaab20 7 seconds ago 255.1 MB\n```", "```\ndocker run -d --name \"ApacheServer1\" -p 80:80 webservercontainer:1.0\n```", "```\nubuntu@node01:~$ curl localhost:80\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html \n...\n```", "```\ndocker run -d --name \"ApacheServer2\" -p 100:80 webservercontainer:1.0\n\ndocker run -d --name \"ApacheServer3\" -p 200:80 webservercontainer:1.0\n```", "```\nubuntu@node01:~$ docker exec -it ApacheServer1 /bin/bash\nroot@bc951d6ec658:/#\n```", "```\nroot@bc951d6ec658:/# echo \"Web Server 1\" > /var/www/html/index.html\n```", "```\nubuntu@node01:~$ curl localhost:80\nWeb Server 1\n```", "```\nubuntu@node01:~$ curl localhost:80\nWeb Server 1\nubuntu@node01:~$ curl localhost:100\nWeb Server 2\nubuntu@node01:~$ curl localhost:200\nWeb Server 3\n```", "```\ndocker stop ApacheServer2\ndocker start ApacheServer2\ndocker reload ApacheServer2\ndocker logs ApacheServer2\n```"]