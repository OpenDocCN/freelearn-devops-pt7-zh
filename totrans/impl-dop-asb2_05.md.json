["```\n# Reboot Debian Flavored Linux Systems using the WHEN operator tasks:\n  - name: \"Reboot all Debian flavored Linux systems\"\n    command: /sbin/reboot -t now\n    when: Ansible_os_family == \"Debian\"\n\n```", "```\n# Display Hello World to DevOps readers\nvars:\n  is_enabled: true\ntasks:\n    - name: \"Tell only DevOps People Hello\"\n      shell: echo “Hello DevOps Readers“\n      when: is_enabled\n\n```", "```\ntasks:\n\n - shell: echo \"The operator has not been set\"\n when: myvar is undefined\n\n```", "```\n# Iterator with conditional logic to stop the iteration at a specified number\n\ntasks:\n  - command: echo {{ item }}\n    with_items: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n    when: item > 7\n\n```", "```\n when: \"'divide by zero' in output\"\n\n```", "```\n# Conditional Logic directly in the Ansible Roles \n\n- hosts: all\n  roles:\n     - { role: centos_config, when: Ansible_os_family == 'CentOS' }\n\n```", "```\n# playbook.yml without list based iterators\n---\n- hosts: all\n  tasks:\n    - name: Install Apache2\n      apt: name=apache2 state=installed\n\n    - name: Install VIM\n      apt: name=vim state=installed\n\n    - name: Install TMUX\n      apt: name=tmux state=installed\n\n    - name: Install MOSH\n      apt: name=mosh state=installed\n\n# playbook.yml using an Iterator to install packages\n---\n- hosts: all\n  tasks:\n    - name: Install list of packages\n      apt: name={{item}} state=installed\n        with_items:\n          - apache2\n          - vim\n          - tmux\n          - mosh\n\n```", "```\n# Demo of Nested Loops Using Ansible. To execute use the following command:\n# > Ansible-playbook -i 'localhost,' -c local nested_loops.yml\n\n---\n- name: Demo of nested loops using with_nested\n  hosts: all\n  remote_user: root\n  vars:\n    listA: [1, 2]\n    listB: [a, b]\n  tasks:\n    - name: Say Hello using Nested Loops\n      debug: msg=“The values in the array are {{item[0]}} and {{item[1]}}\"\n      with_nested:\n        - listA\n        - listB\n\n```", "```\n# Example of iterating over a YAML dictionary (iterator_keyvalue.yml)\n# To execute save this as a YML file and run the following command \n# > Ansible-playbook -i 'localhost,' -c local iterator_keyvalue.yml\n---\n- name: Say Hello to our Favorite Looney Tune Characters\n  hosts: all\n  vars:\n    looney_tunes_characters:\n      bugs:\n        full_name: Bugs A Bunny\n      daffy:\n        full_name: Daffy E Duck\n      wiley:\n        full_name: Wiley E Coyote\n  tasks:\n    - name: Show Our Favorite Looney Tunes\n      debug:\n      msg: \"Hello there: {{ item.key }} your real name is {{ item.value.full_name }}\"\n      with_dict: \"{{ looney_tunes_charachters }}\"\n\n```", "```\nHello There:\n\n```", "```\nBugs Bunny\nDaffy Duck\nMickey Mouse\nDonald Duck\nWiley E. Coyote\n\n```", "```\n# Example Playbook which Iterates Over the Contents of Two Files (iterator_file_contents.yml)\n---\n- name: Say hello to our favorite Looney Toons\n  hosts: all\n  tasks:\n    - name: Say Hello to Our Favorite Looney Toons\n      debug:\n        msg: \"{{ item }}\"\n        with_file:\n          - hello.txt\n          - favorite_toons.txt\n\n```", "```\n# Ansible Example provided by Ansible.com\n# create some test users\n - user:\n     name: \"{{ item }}\"\n     state: present\n     groups: \"evens\"\n   with_sequence: start=0 end=32 format=testuser%02x\n\n```", "```\n  ' This example is a VB.NET example of a Do Loop\n  Do\n            Debug.Write(“Counter: \" & index.ToString)\n            index += 1\n  Loop Until index > 5\n\n```", "```\n- action:\n    /usr/bin/tail -n 1 /var/log/auth.log \n  register: result\n  until: result.stdout.find(\"Cannot create session\") != -1\n  retries: 100\n  delay: 1\n\n```", "```\n[webserver]\n192.168.10.10\n192.168.10.11\n192.168.10.12\n\n[dbserver]\n192.168.30.1\n192.168.30.2\n192.168.30.3\n\n```", "```\n# Example of a playbook, which iterates over the inventory list.\n# Specifically this will display \n# all hosts in the webserver group. This example uses the play_hosts \n# variable in conjunction \n# with with_items to provide an elegant mechanism for iterating.\n\n--- \n- \n  hosts: webserver\n  name: \"Iteration Example using With_Items and Play_Hosts\"\n  tasks: \n    - \n      debug: ~\n      msg: \"Host Identified: {{ item }}\"\n      with_items: \n        - \"{{ play_hosts }}\"\n\n```", "```\n# Display inventory using groups['webserver']\n- debug:\n    msg: \"{{ item }}\"\n  with_items:\n    - \"{{ groups['webserver'] }}\"\n\n```", "```\nwith_items:\n  - \"{{ groups['dbserver'] }}\"\n\n```", "```\n# This is an example of a 'play' include, which includes the contents of playlevelplays.yml\n\n- include: playlevelplays.yml\n- name: some play\n  hosts: all\n  tasks:\n    - debug: msg=hello\n\n# This is an example of the contents of playlevelplays.yml\n\n- name: some additional play\n  hosts: all\n  tasks:\n    - debug: msg=hello I am an included file\n\n```", "```\ntasks:\n  - include: myincludedplaybook.yml user=dbuser\n\n```", "```\ntasks:\n - include: myincludedplaybook.yml user=dbuser\n\n - debug:\n   msg: \"System {{ user }} user is AWESOME!\"\n\n```", "```\n# This is an example of a 'play' include\n\n- include: myplaybook.yml\n- name: some play\n  hosts: all\n  tasks:\n    - debug: msg=hello\n\n    # An Example of a task level include\n    - include: additionaltasks.yml\n\n```", "```\n---\n# additional_tasks.yml example\n- name: some task\n  command: /bin/ls\n- name: some other tasks\n  command: /bin/ps -ef\n\n```", "```\n# A basic dynamic include using a variable\n- include: \"{{dbserver}}.yml\"\n\n```", "```\n# Dynamic include with parameters as a loop\n- include: myplaybook.yml param={{item}}\n  with_items:\n  - apples\n  - oranges\n  - {{favorite_fruit}}\n\n```", "```\n# playbook.yml\n---\n- hosts: all\n  tasks:\n    - name: Install Apache\n      apt: name=apache2 state=present\n\n    - name: Install PHP module for Apache\n      apt: name=libapache2-mod-php5 state=present\n\n    - name: Install PHP\n      apt: name=libapache2-mod-php5 state=present\n\n    - name: Install MySQL\n      apt: name=libapache2-mod-php5 state=present\n\n    - name: 3\\. start Apache\n      service: name=apache2 state=running enabled=yes\n\n    - name: 4\\. install Hello World PHP script\n      copy: src=index.php dest=/var/www/index.php\n\n```", "```\n# playbook.yml\n---\n- hosts: all\n  roles:\n    - webserver\n    - dbserver\n\n```", "```\n# roles/dbserver/tasks/main.yml\n\n- name: Install Mysql Server Packages\n  yum: name={{ item }} state=installed\n  with_items:\n   - mysql-server\n   - MySQL-python\n- name: Start Mysql Service\n  service: name=mysqld state=started enabled=yes\n\n- name: Create Example Database\n  mysql_db: name=foo state=present\n\n- name: Create Example DB User\n  mysql_user: name=foo password=bar priv=*.*:ALL host='%' state=present\n\n# roles/webserver/tasks/main.yml\n---\n- name: Install Apache HTTPD Server Packages\n  yum: name={{ item }} state=installed\n  with_items:\n   - httpd\n\n- name: Start Http Service\n  service: name=http state=started enabled=yes\n\n```", "```\n---\n- name: A Simple Ansible Register Example\n  hosts: all\n  tasks:\n      - shell: tail -n 100 /etc/motd\n        register: motd_contents\n\n```", "```\n---\n- name: A Simple Ansible Register Example\n  hosts: all\n  tasks:\n      - shell: tail -n 100 /etc/motd\n        register: motd_contents\n\n     - shell: echo \"Our MOTD file contains the word Bugs Bunny\"\n        when: motd_contents.stdout.find('bugs bunny') != -1\n\n```", "```\n when: <registername>.stdout == \"\"\n\n```", "```\n\"when varfoo is in register, execute the task\" \n\n```", "```\nwith_items: varfoo.stdout.find(\"{{bar}}\") > 0\n\n```", "```\n--\n- name: registered variable usage as a with_items list\n  hosts: all\n\n  tasks:\n\n      - name: retrieve the list of home directories\n        command: ls /home\n        register: home_dirs\n\n      - name: add home dirs to the backup spooler\n        file: path=/mnt/bkspool/{{ item }} src=/home/{{ item }} state=link\n        with_items: \"{{ home_dirs.stdout_lines }}\"\n        # same as with_items: \"{{ home_dirs.stdout.split() }}\"\n\n```", "```\n--\n- name: Example Handler\n  hosts: all\n  tasks:\n    - command: service httpd restart\n      notify: restart service\n\n    - command: service mysqld restart\n      notify: restart service\n\n    - command: service cron.d restart\n      notify: restart service\n\n    - command: service iptables restart\n      notify: restart service\n\n  handlers:\n    - name: restart service\n      include: tasks/restart_verify.yml\n\n```"]