["```\n$ git clone https://git.eclipse.org/r/jgit/jgit chapter4\n$ cd chapter4\n```", "```\n$ git checkout -b rebaseExample --track origin/stable-3.1\nBranch rebaseExample set up to track remote branch stable-3.1  from origin.\nSwitched to a new branch 'rebaseExample'\n```", "```\n$ echo \"My Fishtank\n\nGravel, water, plants\nFish, pump, skeleton\" > fishtank.txt\n$ git add fishtank.txt\n$ git commit -m \"My brand new fishtank\"\n[rebaseExample 4b2c2ec] My brand new fishtank\n  1 file changed, 4 insertions(+)\n   create mode 100644 fishtank.txt\n$ echo \"mosquitos\" >> fishtank.txt\n$ git add fishtank.txt\n$ git commit -m \"Feeding my fish\"\n[rebaseExample 2132d88] Feeding my fish\n  1 file changed, 1 insertion(+)\n```", "```\n$ git rebase origin/stable-3.2\nFirst, rewinding head to replay your work on top of it...\nApplying: My brand new fishtank\nApplying: Feed the fish\n```", "```\n$ git checkout -b rebaseExample2 --track origin/stable-3.1\nChecking out files: 100% (212/212), done.\nBranch rebaseExample2 set up to track remote branch stable-3.1 from origin.\nSwitched to a new branch 'rebaseExample2'\n```", "```\n$ echo \"My Fishtank\nPirateship, Oister shell\nCoconut shell\n\">fishtank.txt\n$ git add fishtank.txt\n$ git commit -m \"My brand new fishtank\"\n[rebaseExample2 39811d6] My brand new fishtank\n  1 file changed, 4 insertions(+)\ncreate mode 100644 fishtank.txt\n```", "```\n$ git rebase rebaseExample\nFirst, rewinding head to replay your work on top of it...\nApplying: My brand new fishtank\nUsing index info to reconstruct a base tree...\n<stdin>:12: new blank line at EOF.\n  +\n  warning: 1 line adds whitespace errors.\n  Falling back to patching base and 3-way merge...\n  Auto-merging fishtank.txt\n  CONFLICT (add/add): Merge conflict in fishtank.txt\n  Failed to merge in the changes.\n  Patch failed at 0001 My brand new fishtank\n  The copy of the patch that failed is found in:\n    /Users/JohnDoe/repos/chapter4/.git/rebase-apply/patch\n\n  When you have resolved this problem, run \"git rebase --continue\".\n  If you prefer to skip this patch, run \"git rebase --skip\" instead.\n  To check out the original branch and stop rebasing, run \"git rebase --abort\".\n```", "```\n$ git add fishtank.txt\n$ git rebase --continue\nApplying: My brand new fishtank\n```", "```\n$ git checkout rebaseExample\nSwitched to branch 'rebaseExample'\nYour branch is ahead of 'origin/stable-3.1' by 109 commits.\n(use \"git push\" to publish your local commits)\n```", "```\n$ git rebase --interactive origin/stable-3.1\n```", "```\npick 43405e6 My brand new fishtank\npick 08d0906 Feed the fish\n# Rebase da6e87b..08d0906 onto da6e87b\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```", "```\nSuccessfully rebased and updated refs/heads/rebaseExample.\n```", "```\n$ git rebase --onto origin/stable-3.1 origin/stable-3.2 rebaseExample\nFirst, rewinding head to replay your work on top of it...\nApplying: My brand new fishtank\nApplying: Feed the fish\n```", "```\n$ git checkout -b rebaseExample3 --track origin/stable-3.1\nBranch rebaseExample3 set up to track remote branch stable-3.1 from origin.\nSwitched to a new branch 'rebaseExample3'\n```", "```\n$ git log origin/stable-3.1..origin/stable-3.2 --oneline --reverse\n8a51c44 Do not close ArchiveOutputStream on error\n3467e86 Revert \"Close unfinished archive entries on error\"\nf045a68 Added the git-describe implementation\n0be59ab Merge \"Added the git-describe implementation\"\nfdc80f7 Merge branch 'stable-3.1'\n7995d87 Prepare 3.2.0-SNAPSHOT builds\n5218f7b Propagate IOException where possible when getting refs.\n```", "```\n$ git reset --hard 5218f7b\nHEAD is now at 5218f7b Propagate IOException where possible when getting refs.\n$ git status\nOn branch rebaseExample3\nYour branch is ahead of 'origin/stable-3.1' by 6 commits.\n(use \"git push\" to publish your local commits)\n\nnothing to commit, working directory clean\n```", "```\n$ git rebase --interactive\npick 8a51c44 Do not close ArchiveOutputStream on error\npick f045a68 Added the git-describe implementation\npick 7995d87 Prepare 3.2.0-SNAPSHOT builds\npick 5218f7b Propagate IOException where possible when getting refs.\n```", "```\npick 8a51c44 Do not close ArchiveOutputStream on error\nsquash f045a68 Added the git-describe implementation\npick 7995d87 Prepare 3.2.0-SNAPSHOT builds\nsquash 5218f7b Propagate IOException where possible when getting refs.\n```", "```\n$ git log -1\ncommit 9c96a651ff881c7d7c5a3974fa7a19a9c264d0a0\nAuthor: Matthias Sohn <matthias.sohn@sap.com>\nDate:   Thu Oct 3 17:40:22 2013 +0200\n\n Prepare 3.2.0-SNAPSHOT builds\n\n Change-Id: Iac6cf7a5bb6146ee3fe38abe8020fc3fc4217584\n Signed-off-by: Matthias Sohn <matthias.sohn@sap.com>\n\n Propagate IOException where possible when getting refs.\n\n Currently, Repository.getAllRefs() and Repository.getTags() \n silently\n ignores an IOException and instead returns an empty map. Repository\n  is a public API and as such cannot be changed until the next major\n  revision change. Where possible, update the internal jgit APIs to\n  use the RefDatabase directly, since it propagates the error.\n\n Change-Id: I4e4537d8bd0fa772f388262684c5c4ca1929dc4c\n```", "```\n$ git reset --hard 5218f7b\nHEAD is now at 5218f7b Propagate IOException where possible when getting refs.\n$ git status\nOn branch rebaseExample3\nYour branch is ahead of 'origin/stable-3.1' by 6 commits.\n(use \"git push\" to publish your local commits)\n\nnothing to commit, working directory clean\n```", "```\n$ git rebase --interactive\npick 8a51c44 Do not close ArchiveOutputStream on error\nf f045a68 Added the git-describe implementation\npick 7995d87 Prepare 3.2.0-SNAPSHOT builds\nf 5218f7b Propagate IOException where possible when getting refs.\n```", "```\n$ git status\nOn branch rebaseExample3\nYour branch is ahead of 'origin/stable-3.1' by 2 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n```", "```\n$ git log -1    \ncommit c5bc5cc9e0956575cc3c30c3be4aecab19980e4d\nAuthor: Matthias Sohn <matthias.sohn@sap.com>\nDate:   Thu Oct 3 17:40:22 2013 +0200\n\n Prepare 3.2.0-SNAPSHOT builds\n\n Change-Id: Iac6cf7a5bb6146ee3fe38abe8020fc3fc4217584\n Signed-off-by: Matthias Sohn matthias.sohn@sap.com\n```", "```\n$ git diff 5218f7b\n```", "```\n$ git checkout -b resetAuthorRebase -t origin/master\nBranch resetAuthorRebase set up to track remote branch 'master' from 'origin'.\nSwitched to a new branch 'resetAuthorRebase'\n```", "```\n$ git commit --amend --reset-author\n[resetAuthorRebase b0b2836] Update Kepler target platform to use Kepler SR2 orbit R-build\n  1 file changed, 1 insertion(+), 1 deletion(-)\n```", "```\n$ git log --format='format:%h %an <%ae>' origin/stable-3.2..HEAD\nb0b2836 John Doe <john.doe@example.com>\nb9a0621 Matthias Sohn <matthias.sohn@sap.com>\nba15d82 Matthias Sohn matthias.sohn@sap.com\n```", "```\n$ git rebase --interactive --exec \"git commit --amend --reset-author\" origin/stable-3.2\npick b14a939 Prepare 3.3.0-SNAPSHOT builds\nexec git commit --amend --reset-author\npick f2abbd0 archive: Prepend a specified prefix to all entry filenames\nexec git commit --amend --reset-author\n```", "```\nExecuting: git commit --amend --reset-author\nAborting commit due to empty commit message.\nExecution failed: git commit --amend --reset-author\nYou can fix the problem, and then run\n\n git rebase --continue\n$ git rebase --abort\n```", "```\n$ git rebase --interactive --exec \"git commit --amend --reset-author --reuse-message=HEAD\" origin/stable-3.2\nExecuting: git commit --amend --reset-author --reuse-message=HEAD\n[detached HEAD 0cd3e87] Prepare 3.3.0-SNAPSHOT builds\n 51 files changed, 291 insertions(+), 291 deletions(-)\n rewrite org.eclipse.jgit.java7.test/META-INF/MANIFEST.MF (62%)\n rewrite org.eclipse.jgit.junit/META-INF/MANIFEST.MF (73%)\n rewrite org.eclipse.jgit.pgm.test/META-INF/MANIFEST.MF (61%)\n rewrite org.eclipse.jgit.test/META-INF/MANIFEST.MF (76%)\n rewrite org.eclipse.jgit.ui/META-INF/MANIFEST.MF (67%)\n    Executing: git commit --amend --reset-author --reuse-message=HEAD\n    [detached HEAD faaf25e] archive: Prepend a specified prefix to all entry filenames\n     5 files changed, 115 insertions(+), 1 deletion(-)\n    Executing: git commit --amend --reset-author --reuse-message=HEAD\n    [detached HEAD cfd743e] [CLI] Add option --millis / -m to debug-show-dir-cache c\n    Command\n    Successfully rebased and updated refs/heads/resetAuthorRebase.\n```", "```\n$ git log --format='format:%h %an <%ae>' origin/stable-3.2..HEAD\n9b10ff9 John Doe <john.doe@example.com>\nd8f0ada John Doe <john.doe@example.com>\n53df2b7 John Doe <john.doe@example.com>\n```", "```\n exec echo rainy_day > weather_main.txt\n exec echo sunny_day > weather_california.txt\n```", "```\n$ git checkout -b readme_update_developer --track origin/master\nBranch readme_update_developer set up to track remote branch master from origin.\nSwitched to a new branch 'readme_update_developer'\n```", "```\n$ echo \"More information for developers\" >> README.md\n```", "```\n$ git status\nOn branch readme_update_developer\nYour branch is up-to-date with 'origin/master'.\n\nChanges not staged for commit:\n (use \"git add <file>...\" to update what will be committed)\n (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n            modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```", "```\n$ git commit -a -m \"Updating information for developers\"\n[readme_update_developer d539645] Updating information for developers\n 1 file changed, 1 insertion(+)\n```", "```\n$ echo \"even More information for developers\" >> README.md\n$ git commit -a --squash=d539645 --no-edit\n[readme_update_developer d62922d] squash! Updating information for developers\n 1 file changed, 1 insertion(+)\n```", "```\n$ echo \"even More information for developers\" >> README.md\n$ git commit -a --squash=d539645 --no-edit\n[readme_update_developer 7d6194d] squash! Updating information for developers\n 1 file changed, 1 insertion(+)\n```", "```\n$ echo \"Adding configuration information\" >> README.md\n$ git commit -a -m \"Updating information on configuration\"\n[readme_update_developer fd07857] Updating information on configuration\n 1 file changed, 1 insertion(+)\n```", "```\n$ git rebase -i\n```", "```\npick d539645 Updating information for developers\npick d62922d squash! Updating information for developers\npick 7d6194d squash! Updating information for developers\npick fd07857 Updating information on configuration\n```", "```\nSuccessfully rebased and updated refs/heads/readme_update_developer.\n```", "```\n$ git rebase -i --autosquash\npick d539645 Updating information for developers\nsquash d62922d squash! Updating information for developers\nsquash 7d6194d squash! Updating information for developers\npick fd07857 Updating information on configuration\n```", "```\nNothing to do\n```", "```\n$ git config rebase.autosquash true\n$ git rebase -i\n```", "```\npick d539645 Updating information for developers\nsquash d62922d squash! Updating information for developers\nsquash 7d6194d squash! Updating information for developers\npick fd07857 Updating information on configuration\n```", "```\n# This is a combination of 3 commits.\n# The first commit's message is:\nUpdating information for developers\n\n# This is the 2nd commit message:\n\nsquash! Updating information for developers\n\n# This is the 3rd commit message:\n\nsquash! Updating information for developers\n```", "```\n[detached HEAD baadd53] Updating information for developers\n 1 file changed, 3 insertions(+)\nSuccessfully rebased and updated refs/heads/readme_update_developer.\nVerify the commit log with git log -3\n$ git log -3\ncommit 6d83d44645e330d0081d3679aca49cd9bc20c891\nAuthor: John Doe <john.doe@example.com>\nDate:   Wed May 21 10:52:03 2014 +0200\n\n Updating information on configuration\n\ncommit baadd53018df2f6f3cdf88d024c3b9db16e526cf\nAuthor: John Doe <john.doe@example.com>\nDate:   Wed May 21 10:25:43 2014 +0200\n\n Updating information for developers\ncommit 6d724dcd3355f09e3450e417cf173fcafaee9e08\nAuthor: Shawn Pearce <spearce@spearce.org>\nDate:   Sat Apr 26 10:40:30 2014 -0700\n```"]