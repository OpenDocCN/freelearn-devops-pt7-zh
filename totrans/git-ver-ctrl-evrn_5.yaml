- en: Chapter 5. Be a Puppet Master – Learn Fancy Features to Control Git's Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。成为木偶大师 – 学习 Git 功能控制的高级特性
- en: '*Having laid a perfect base by learning, practicing, and validating the concepts
    covered so far, we are ready to learn some fancy features that will build on our
    base knowledge to extend the functional usage.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*在通过学习、练习和验证目前所学概念打下坚实的基础后，我们已准备好学习一些高级特性，这些特性将基于我们的基础知识，扩展功能使用。*'
- en: 'In this chapter you will learn concepts that will help you to perform the following
    with respect to the content in your repositories:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习一些概念，帮助你完成以下任务，涉及到你仓库中的内容：
- en: Shortlog
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shortlog
- en: Log search
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志搜索
- en: Clean
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Tag
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: Why learn such fancy features
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要学习这些高级特性
- en: Why would you need the "S" power in *Contra* or an M4 rifle in *Counter-Strike*
    when you have the default weapons?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么你在*Contra*中需要 "S" 这样的能力，或者在*Counter-Strike*中需要 M4 步枪，明明你已经有了默认武器？
- en: Though you will be able to achieve the ultimate goal of killing the opponent
    even with the basic tools given to you, usage of those specialized tools facilitate
    the ease of achieving the said goal, that's why.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以仅凭给定的基本工具达成最终目标——击败对手，但使用那些专业工具可以更轻松地实现这一目标，这就是原因所在。
- en: Similarly these functions that we are about to learn are going to provide us
    with easy ways of controlling Git to provide data according to the various situations
    which you can decide where it fits in, based on your job role. And moreover, it's
    fun to have some ready-made tricks in your pocket to pull out when the need arises,
    making you the apt person for the job.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这些我们即将学习的功能将为我们提供简单的控制 Git 的方法，根据不同的情况提供相应的数据，你可以根据自己的工作角色决定在何时使用这些方法。而且，随身携带一些现成的技巧，也能让你在需要时轻松应对，使你成为这个工作的合适人选。
- en: Prerequisites
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: To learn these concepts better, we need to have a repository where there are
    quite a few commits and multiple people involved in the development of the repository's
    content. So we shall download any repository from famous Git hosting sites like
    GitHub or Bitbucket itself.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地学习这些概念，我们需要一个包含多个提交和多人参与开发的仓库。因此，我们将从著名的 Git 托管网站（如 GitHub 或 Bitbucket）下载一个仓库。
- en: Here, I have downloaded a project called cappuccino and reduced the repository
    to fit our purpose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我下载了一个名为 cappuccino 的项目，并对仓库进行了简化，以适应我们的目的。
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你在 [http://www.PacktPub.com](http://www.PacktPub.com) 的账户中下载所有购买的 Packt
    书籍的示例代码文件。如果你是在其他地方购买本书，可以访问 [http://www.PacktPub.com/support](http://www.PacktPub.com/support)，并注册以便直接将文件通过电子邮件发送给你。
- en: You can also download your own from the Git hosting sites specified previously
    to carry out your learning.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从之前指定的 Git 托管网站下载你自己的项目文件来进行学习。
- en: Shortlog
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shortlog
- en: Though information is wealth, sometimes Too Much Information kills the purpose
    it serves. Think about the value that is associated with the **filter option**
    in a spreadsheet application. Shortlog is one such function to command Git to
    limit the information it shows when viewing logs. It arranges all the users who
    were involved in building the data of the repository in alphabetical order mentioning
    the number of commits they made along with their commit descriptions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管信息就是财富，但有时过多的信息会失去它的实际用途。想想电子表格应用中与**筛选选项**相关的价值。Shortlog 就是 Git 中的一个功能，可以限制查看日志时显示的信息量。它按字母顺序排列所有参与构建仓库数据的用户，并显示他们提交的次数以及每次提交的描述。
- en: Time for action – getting acquainted with shortlog
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 熟悉 shortlog
- en: 'Let''s quickly fire up your CLI window from our `cappuccino` repository and
    try out the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速打开你从 `cappuccino` 仓库中的 CLI 窗口，试试以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should give an output as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给出如下截图中的输出：
- en: '![Time for action – getting acquainted with shortlog](img/7522_05_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 熟悉 shortlog](img/7522_05_01.jpg)'
- en: '*What just happened?*'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We just listed out comments of 24 commits segregated by the authors who were
    responsible for those commits; the authors were arranged in alphabetical order
    in a single shot. Sounds compact and presentable, right?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚列出了由不同作者负责的24次提交的评论；这些作者按字母顺序排列，一次性显示。听起来简洁又易于展示，对吧？
- en: It's not over yet! Shortlog has a few defined parameters which can be used to
    reorder or narrow down your search to extract a particular set of information
    from your logs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这还没结束！短日志有一些已定义的参数，可以用来重新排序或缩小你的搜索范围，从日志中提取特定的信息。
- en: Time for action – parameterizing shortlog
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 参数化短日志
- en: Just add the parameter `–n` toyour earlier command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在之前的命令中添加参数`–n`。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see an output as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到如下所示的输出：
- en: '![Time for action – parameterizing shortlog](img/7522_05_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 参数化短日志](img/7522_05_02.jpg)'
- en: '*What just happened?*'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: By adding the `–n` (numbered) parameter, what you have is an output that is
    weighted based on the number of commits instead of alphabetical ordering.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`–n`（编号）参数，得到的输出将根据提交次数进行加权，而不是按字母顺序排序。
- en: Now that we have got the idea, let's quickly run through the remaining parameters
    which we can put to use. To get metadata such as the e-mail of the author appended
    to the existing output, we shall use the `–e` parameter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基本概念，让我们快速过一遍剩下的可以使用的参数。要获取附加到现有输出中的作者电子邮件等元数据，我们将使用`–e`参数。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can expect an output as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以期待如下所示的输出：
- en: '![What just happened?](img/7522_05_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_05_03.jpg)'
- en: Wondering how you can quickly get the number of stages/commits that the repository
    has gone through from different users? Allow me to introduce the `-s` parameter,
    which should give us the count history for each user.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 想知道如何快速获取仓库从不同用户处经历的阶段/提交数吗？让我来介绍一下`-s`参数，它可以为我们提供每个用户的提交计数历史。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![What just happened?](img/7522_05_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_05_04.jpg)'
- en: 'To summarize the parameters with their functions, refer to the following tabulation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下这些参数及其功能，请参考以下表格：
- en: '| Parameter | Action description |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 操作描述 |'
- en: '| --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Short form | Full form |   |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 简写形式 | 完整形式 |   |'
- en: '| --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `-n` | `--numbered` | Sorts output according to the number of commits per
    author instead of alphabetical order |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `-n` | `--numbered` | 根据每个作者的提交次数而非字母顺序对输出进行排序 |'
- en: '| `-s` | `--summary` | Provides commit count history for each user |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `-s` | `--summary` | 提供每个用户的提交计数历史 |'
- en: '| `-e` | `--email` | Gets the e-mail address of each author involved in committing
    to our repository |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `-e` | `--email` | 获取每个提交到我们仓库的作者的电子邮件地址 |'
- en: '| `-h` | `--help` | Prints a short usage message |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `-h` | `--help` | 打印简短的使用信息 |'
- en: Log search – git log
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志搜索 - git log
- en: In continuation with the shortlog, add a few more weapons to your arsenal that
    will aid in data extraction as per your needs. What you know about Git log from
    earlier chapters might be as a command to view commit ID and related meta-information
    alone. But what you will learn here is how flexible the logging command is by
    itself and a glimpse of what it packs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 继续短日志的内容，给你的工具箱增加一些能根据需要提取数据的利器。你可能知道从前面的章节中了解到Git log命令仅用于查看提交ID和相关元数据。但你将在这里学到的是日志命令本身的灵活性，以及它所包含的功能。
- en: Time for action – skip commit logs
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 跳过提交日志
- en: 'Let''s quickly try out the following in the CLI window that we opened earlier
    from the `cappuccino` repository:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速在之前从`cappuccino`仓库打开的CLI窗口中尝试以下操作：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This should give an output as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会生成如下所示的输出：
- en: '![Time for action – skip commit logs](img/7522_05_05.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 跳过提交日志](img/7522_05_05.jpg)'
- en: '*What just happened?*'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: Though the output might look similar to the usual `git log` ones at first, when
    they are compared you will see that you have skipped off the last two commits
    from listing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管输出一开始可能看起来与通常的`git log`输出类似，但当你进行对比时会发现，你已经跳过了列出的最后两次提交。
- en: '![What just happened?](img/7522_05_06.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_05_06.jpg)'
- en: The `--skip=number` makes this possible. The `number` parameter can take any
    integer value to skip that number of commits for you.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`--skip=number`使这一切成为可能。`number`参数可以接受任何整数值，用来跳过相应数量的提交。'
- en: There would be numerous situations where you would want to filter content based
    on date. This can be done with the `since`/`after` and `until`/`before` operators
    with `git log`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多情况，你可能希望基于日期过滤内容。这可以通过`git log`中的`since`/`after`和`until`/`before`操作符实现。
- en: Time for action – filter logs with date range
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 按日期范围过滤日志
- en: 'After performing a `git log`, select two dates, which we shall use to filter
    in our following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`git log`后，选择两个日期，我们将使用这两个日期来过滤接下来的命令：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This should give an output as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生如下输出：
- en: '![Time for action – filter logs with date range](img/7522_05_07.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 按日期范围过滤日志](img/7522_05_07.jpg)'
- en: '*What just happened?*'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Using the `--since=date` operator filters the logs starting from the specified
    date and limits it before the date specified using the `–until` parameter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--since=date`操作符可以过滤从指定日期开始的日志，并通过`–until`参数限制在指定日期之前的日志。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you can also specify relative dates like `–since=2.days` or `--since=3.months`
    to filter the output.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你还可以指定相对日期，比如`–since=2.days`或`--since=3.months`来过滤输出。
- en: If you are wondering if there is a way to perform a search based on a keyword
    across commits – yes you can, with the `–grep` parameter of `git log`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想是否有一种方法可以根据关键词在提交中进行搜索——是的，可以，使用`git log`的`–grep`参数。
- en: Time for action – searching for a word/character match
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 搜索单词/字符匹配
- en: 'Type the following command in your CLI window:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在CLI窗口中输入以下命令：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This should give an output as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生如下输出：
- en: '![Time for action – searching for a word/character match](img/7522_05_08.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 搜索单词/字符匹配](img/7522_05_08.jpg)'
- en: '*What just happened?*'
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have used the `grep` utility associated with `git log` to search for a given
    keyword, "Merge" in our case, across the commit messages provided for different
    commits.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与`git log`关联的`grep`工具，搜索给定的关键词，在不同提交的提交信息中查找"Merge"。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To perform a search without being case sensitive, the `-i` option can be appended
    at the end of the previous command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行不区分大小写的搜索，可以在之前的命令后添加`-i`选项。
- en: 'To summarize the parameters with their functions, refer to the following tabulation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结各参数及其功能，请参考以下表格：
- en: '| Parameter | Action description |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 操作描述 |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `--skip=number` | Skips the number of commits in showing the log output |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `--skip=number` | 跳过指定数量的提交，在显示日志输出时 |'
- en: '| `--since,after=<date>` | Shows commits made since the given date |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `--since,after=<date>` | 显示自给定日期以来的提交 |'
- en: '| `--until,before=<date>` | Shows commits made until the given date |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `--until,before=<date>` | 显示直到给定日期的提交 |'
- en: '| `--grep=<pattern>` | Limits the log output matching the commit message with
    the given pattern |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `--grep=<pattern>` | 限制日志输出，匹配提交信息中给定的模式 |'
- en: Clean
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理
- en: There are several situations where we would need to *Ctrl* + *Z* our bloopers
    away when handling files. One classic example is in the middle of working when
    you unzip a ZIP package inside a directory that already contains some files, only
    to discover that the ZIP package straight away put those files inside the directory
    without creating a separate directory for the files which were unpacked. I see
    you nodding, and I know you're smiling.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理文件时，我们可能需要*Ctrl* + *Z*撤销一些错误。有一个经典的例子是在工作过程中，你在一个已经包含文件的目录中解压ZIP包，结果发现ZIP包直接将文件放入该目录，而没有为解压的文件创建一个单独的目录。我看到你点头了，我知道你在微笑。
- en: Well, situations like these can be easily handled if the directory where you
    unzipped the zip package was watched by Git (a Git repository). Let's reproduce
    this scenario and see how it can be handled within seconds.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，像这样的情况如果你解压的ZIP包所在的目录被Git监视（即是一个Git仓库），就可以轻松处理了。让我们再现这个场景，看看如何在几秒钟内处理它。
- en: Time for action – emulate the mess
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 模拟混乱
- en: 'Perform the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Download the ZIP package named `readme_package.zip` from [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and place it in the `cappuccino` repository on which we have been working to learn
    these commands.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.packtpub.com/support](http://www.packtpub.com/support)下载名为`readme_package.zip`的ZIP包，并将其放置在我们一直在使用的`cappuccino`仓库中，以便学习这些命令。
- en: Unzip the contents of the ZIP right inside the `cappuccino` directory in a way
    so you see seven README files as shown in the following screenshot:![Time for
    action – emulate the mess](img/7522_05_09.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ZIP 内容解压到 `cappuccino` 目录内，确保看到如下截图中所示的七个 README 文件：![行动时间 – 模拟杂乱](img/7522_05_09.jpg)
- en: 'Now open your CLI window and type the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开你的 CLI 窗口，输入以下命令：
- en: '[PRE7]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will give you the current status as follows:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示如下的当前状态：
- en: '![Time for action – emulate the mess](img/7522_05_10.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 模拟杂乱](img/7522_05_10.jpg)'
- en: '*What just happened?*'
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We have successfully emulated the scenario of accidental unpacking as discussed
    earlier.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功模拟了之前讨论的意外解压的场景。
- en: But under Git, the files that you have unpacked are listed down as untracked
    files. This means that irrespective of the number of files that have got mixed
    because of the unzip action with your original files, Git can easily identify
    them and let you know about it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但在 Git 中，你解压的文件会被列为未跟踪的文件。这意味着，无论解压的文件和原始文件混合的数量如何，Git 都能轻松识别它们并提醒你。
- en: We can remove either all or a selected few files by specifying a pattern, which
    when matched, the clean command will skip them from removal. We shall get to know
    more about this in the following *Time for action* items.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定模式来删除所有或部分文件，当匹配该模式时，clean 命令将跳过这些文件的删除。我们将在接下来的 *行动时间* 中了解更多关于这一点的信息。
- en: Time for action – clean up your mess with pattern match
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 使用模式匹配清理你的杂乱
- en: 'Let''s skip those README files from deletion and first remove the ZIP package
    which we copied and pasted inside our repository. Type the following command in
    your terminal:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳过那些 README 文件的删除，首先删除我们复制并粘贴到仓库中的 ZIP 包。在终端中输入以下命令：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should give you an output as shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你如下所示的输出：
- en: '![Time for action – clean up your mess with pattern match](img/7522_05_11.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 使用模式匹配清理你的杂乱](img/7522_05_11.jpg)'
- en: '*What just happened?*'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: '`Git clean` needs a `force` (`–f`) operator to be specified to remove files
    that are not monitored by it, whereasthe `–e` operator takes a pattern following
    it and excludes the files matching the specified criteria.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`Git clean` 需要指定一个 `force`（`–f`）操作符，才能删除那些 Git 没有监控的文件，而 `–e` 操作符则跟随一个模式，并排除匹配该模式的文件。'
- en: In our case `*.txt` was the pattern, which matched all the `.txt` files that
    were created in the repository as a result of unpacking, therefore the only file
    left out was the `readme_package.zip` file, which got removed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，`*.txt` 是匹配模式，它匹配了由于解压而在仓库中创建的所有 `.txt` 文件，因此唯一未被删除的文件是 `readme_package.zip`，它已被删除。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can avoid specifying the `–f` parameter every time we run a `git clean` command
    if we set the `clean.requireForce` configuration variable to `false`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 `clean.requireForce` 配置变量设置为 `false`，则每次运行 `git clean` 命令时，可以避免指定 `–f`
    参数。
- en: Time for action – wipe out your mess completely, no exceptions
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 完全清除你的杂乱，无一例外
- en: To remove these files, which have been populated in our repository unwantedly,
    you just call for a napalm strike on them! That's right, from the earlier command
    you just exclude the exclusion part.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除这些不小心添加到仓库中的文件，你只需要对它们发起一场“火力打击”！没错，从之前的命令中，只需去掉排除部分。
- en: '[PRE9]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should give an output as shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你如下所示的输出：
- en: '![Time for action – wipe out your mess completely, no exceptions](img/7522_05_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 – 完全清除你的杂乱，无一例外](img/7522_05_12.jpg)'
- en: '*What just happened?*'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: The `clean` command removes all untracked files from your current repository.
    The `–f` parameter forces `git clean` to remove those untracked files from your
    repository.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean` 命令会删除当前仓库中所有未跟踪的文件。`–f` 参数强制 `git clean` 删除那些未跟踪的文件。'
- en: 'The following is the list of parameters you can put to use with `git clean`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你可以在 `git clean` 中使用的参数列表：
- en: '| Parameter | Action description |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 操作说明 |'
- en: '| --- | --- |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Short form | Full form |   |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 简写形式 | 全写形式 |   |'
- en: '| --- | --- | --- |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `-f` | `--force` | Removes untracked files |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `-f` | `--force` | 删除未跟踪的文件 |'
- en: '| `-d` |   | Removes untracked directories along with files |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `-d` |   | 删除未跟踪的目录和文件 |'
- en: '| `-n` | `--dry-run` | Doesn''t remove anything, but show what will be done
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `-n` | `--dry-run` | 不删除任何内容，只显示将要执行的操作 |'
- en: '| `-q` | `--quiet` | Stays quiet and only reports errors but not the files
    that were successfully removed |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `-q` | `--quiet` | 保持安静，只报告错误，不报告成功删除的文件 |'
- en: '| `-e<pattern>` | `--exclude=<pattern>` | Excludes the files matching the specified
    pattern along with the ones specified in `.gitignore` (per directory) |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `-e<pattern>` | `--exclude=<pattern>` | 排除与指定模式匹配的文件，以及在 `.gitignore` 中指定的文件（按目录）
    |'
- en: Tagging
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: Tagging comes in handy when you want to mark a specific point in your history
    with some metadata and refer to it henceforth with the same tag. We have two types
    of tags in Git.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 标签在你想要在历史中标记一个特定点并附加一些元数据时非常有用，此后你可以使用相同的标签进行引用。在 Git 中有两种类型的标签。
- en: '**Lightweight**: This method of tagging tracks the tag name alone without worrying
    about by whom or when the tag was created. This might come in handy when you have
    only one person working on the files in your repository or if the tags that you
    create are just for simple reference of different phases that your project files
    in the repository have gone through.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻量级标签**：这种标签方法仅跟踪标签名，不关心标签是由谁或何时创建的。当你只有一个人在仓库中工作，或者你创建的标签仅用于简单参考项目文件经历的不同阶段时，这种方法可能会很有用。'
- en: '**Annotated**: This method of tagging tracks the author''s name, time of tag
    creation, and the tag name with a description, if given. This might come in handy
    when you want a retracement to be done on the attained milestones or when you
    have multiple people working on the same repository, and so on.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释标签**：这种标签方法会记录作者的姓名、标签创建时间和标签名（如果提供的话，还包括描述）。当你想要回溯已达成的里程碑，或者当多个开发者共同参与同一个仓库的工作时，这种方法可能会很有用。'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you use Annotated tags, it is possible for the project owner to maintain
    authorization access over the tagging process; in advanced setups it is even possible
    to have control over who tags, when they do, and mark their authorization identity
    for future reference.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用注释标签时，项目拥有者可以在标签过程中保持授权访问权限；在高级设置中，甚至可以控制谁进行标签操作，何时操作，并标记他们的授权身份以供日后参考。
- en: Having said enough, let's understand it better by trying it out.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，让我们通过实际操作更好地理解它。
- en: Time for action – lightweight/unannotated tagging
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 轻量级/无注释标签
- en: First, let's list out the existing tags with the `cappuccino` repository by
    executing `git tag` in your CLI window. This should produce an output like the
    following:![Time for action – lightweight/unannotated tagging](img/7522_05_13.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们通过在 CLI 窗口中执行 `git tag` 命令来列出 `cappuccino` 仓库中现有的标签。这应该会产生如下输出：![行动时间
    – 轻量级/无注释标签](img/7522_05_13.jpg)
- en: The supplied `git tag` command has retrieved all the tags available in the repository
    and lists them in alphabetical order.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供的 `git tag` 命令已检索了仓库中所有可用的标签，并按字母顺序列出它们。
- en: 'Now let''s create a lightweight tag in our `cappuccino` repository by executing
    the following:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过执行以下操作在 `cappuccino` 仓库中创建一个轻量级标签：
- en: '[PRE10]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If there are no errors returned, your tag should have been created. You can
    verify it by doing a tag listing, which we learned in the previous step.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果没有返回错误，说明你的标签应该已经创建。你可以通过进行标签列出操作来验证，正如我们在前一步中学习的那样。
- en: '![Time for action – lightweight/unannotated tagging](img/7522_05_14.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 轻量级/无注释标签](img/7522_05_14.jpg)'
- en: 'Or you can visualize it by opening gitk, which will give you the following
    appearance:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者你可以通过打开 gitk 来查看它，这样你会看到如下效果：
- en: Note
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can open gitk either from Git Gui's repository menu or by just typing `gitk`
    in your CLI window.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过 Git Gui 的仓库菜单或直接在 CLI 窗口中输入 `gitk` 来打开 gitk。
- en: '![Time for action – lightweight/unannotated tagging](img/7522_05_15.jpg)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 轻量级/无注释标签](img/7522_05_15.jpg)'
- en: 'If you want to browse the changes to the files for a given commit that is tagged,
    you can either look at the bottom left of the gitk window or use `git show <tagname>`
    as shown in the following line:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想浏览某个已打标签提交的文件更改，可以查看 gitk 窗口左下角，或者使用 `git show <tagname>`，如以下命令所示：
- en: '[PRE11]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will give an output as shown in the following screenshot:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示如下截图所示的输出：
- en: '![Time for action – lightweight/unannotated tagging](img/7522_05_16.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 轻量级/无注释标签](img/7522_05_16.jpg)'
- en: '*What just happened?*'
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We have successfully created and attached a lightweight/unannotated tag to a
    specific commit. We also learned to list out all the tags available in the repository
    and if needed, view granular level changes associated with any given tag.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地创建并附加了一个轻量/未注解标签到一个特定的提交。我们还学习了列出所有在仓库中可用的标签，如果需要，可以查看与任何给定标签相关的详细变化。
- en: We read about referencing a commit with the tag names instead of the commit
    SHA1 ID. Let's understand what this means, practically.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何通过标签名来引用提交，而不是使用提交的 SHA1 ID。让我们从实际操作中理解这意味着什么。
- en: Time for action – referencing tags
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 – 引用标签
- en: 'We have learned `git checkout` as a function to travel back in history. As
    you know, this process needs the SHA1 ID of the commit, which you would like to
    visit. Now let''s see how it can be done when it comes to handling tags. Type
    the following commands in your CLI window:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了 `git checkout` 作为返回历史的一个功能。正如你所知道的，这个过程需要你想要访问的提交的 SHA1 ID。现在让我们看看在处理标签时，如何做到这一点。在你的命令行窗口输入以下命令：
- en: '[PRE12]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This should give you an output as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你如下图所示的输出：
- en: '![Time for action – referencing tags](img/7522_05_17.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![执行动作 – 引用标签](img/7522_05_17.jpg)'
- en: '*What just happened?*'
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We checked out to a commit made at an earlier date using the usual checkout
    (`git checkout SHA1 ID`) method but came back to the latest commit with the usage
    of the tag name associated with the commit (`edge_v1.1`).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用通常的 `git checkout SHA1 ID` 方法检出了一个较早日期的提交，但通过使用与提交关联的标签名称（`edge_v1.1`）回到了最新的提交。
- en: Time for action – annotated tagging
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行动作 – 注解标签
- en: 'Having learned the method for creating an unannotated/lightweight tag, the
    process of creating an annotated tag is as simple as adding the `–a` parameter
    to it. Let''s type the following in the CLI window:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习了如何创建未注解/轻量标签后，创建注解标签的过程和它一样简单，只需要在命令中添加 `–a` 参数。让我们在命令行窗口输入以下命令：
- en: '[PRE13]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '*What just happened?*'
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: If the command does not return any error upon execution, it indicates that your
    annotated command has been created successfully. We have created an annotated
    tag called `Ann_v1.1`. Here `–a` denotes the annotated tag name and `–m` takes
    a string value as the description for the created tag.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令执行后没有返回任何错误，这意味着你的注解标签已经成功创建。我们创建了一个名为 `Ann_v1.1` 的注解标签。在这里，`–a` 表示注解标签名称，`–m`
    用于设置创建标签时的描述字符串。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we have created both the annotated and unannotated tag for the same
    commit so that they can be compared later.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们为同一个提交创建了注解标签和未注解标签，以便后续进行比较。
- en: Simple exercise
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单练习
- en: To verify the creation process, do a tag listing and verify that the tag that
    you created exists there.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证创建过程，进行标签列表操作，验证你创建的标签是否存在。
- en: Check out the content changes associated with the commit for which you have
    created an annotated tag.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查与创建的注解标签关联的提交内容变化。
- en: To understand the difference between the lightweight and annotated tag, their
    outputs are shown side by side.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解轻量标签和注解标签之间的区别，它们的输出将并排显示。
- en: '![Simple exercise](img/7522_05_18.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![简单练习](img/7522_05_18.jpg)'
- en: 'While creation differs a little bit, the procedure for the deletion of both
    the annotated and unannotated tags is identical. You just associate the `–d` parameter
    followed by the tag name as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管创建过程略有不同，但删除注解标签和未注解标签的过程是相同的。你只需将 `–d` 参数与标签名一起使用，如下所示：
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This should produce an affirmation as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生一个确认信息，如下图所示：
- en: '![Simple exercise](img/7522_05_19.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![简单练习](img/7522_05_19.jpg)'
- en: '*What just happened?*'
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We just deleted the tags `edge_v1.1` and `Ann_v1.1`, which we created in the
    process of learning about tags inside the `cappuccino` repository.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚删除了 `edge_v1.1` 和 `Ann_v1.1` 标签，这两个标签是在学习标签过程中的 `cappuccino` 仓库中创建的。
- en: The `–d` parameter will delete the tag whose name is passed as an argument to
    it, irrespective of it being an annotated or unannotated tag. You can perform
    a tag list to verify this as shown in the previous image after the deletion.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`–d` 参数将删除传递给它的标签名，无论它是注解标签还是未注解标签。你可以执行标签列表命令，验证删除后的状态，如前图所示。'
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We have learned what is and how to:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了什么是以及如何：
- en: 'Use shortlog:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用短日志：
- en: To sort and quantify commits made per author
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按作者对提交进行排序和量化
- en: To summarize commit logs
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结提交日志
- en: To get metadata like e-mail addresses for each author performing commits to
    our repository
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取每个提交者的元数据，例如电子邮件地址
- en: 'Use different parameters with `git log`, which enables us to:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的`git log`参数，这使我们能够：
- en: Skip the specified number of commits while displaying log entries
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在显示日志条目时跳过指定数量的提交
- en: Extract data from commit logs within a date range
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从提交日志中提取日期范围内的数据
- en: Search for a string value across commit messages to identify commits
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交消息中搜索字符串值以识别提交
- en: Additionally, we have also learned how to clean our repository in case we or
    anybody else has messed it up by injecting files into it that do not belong there.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还学习了如何清理我们的仓库，以防我们或其他人通过将不属于该仓库的文件注入其中而弄乱它。
- en: Not only that, we also saw, in practice, how to mark the milestones of our repositories'
    content using annotated and lightweight tags.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，我们还实际操作了如何使用注释标签和轻量标签标记仓库内容的里程碑。
