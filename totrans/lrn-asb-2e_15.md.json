["```\n$ ssh-keygen -t rsa -C \"learnansible\" -f ./id_rsa\n```", "```\n$ az login\n```", "```\n$ az account list\n```", "```\n{\n  \"environmentName\": \"AzureCloud\",\n  \"id\": \"e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea\",\n  \"isDefault\": true,\n  \"name\": \"My Subscription\",\n  \"state\": \"Enabled\",\n  \"tenantId\": \"c5df827f-a940-4d7c-b313-426cb3c6b1fe\",\n  \"user\": {\n    \"name\": \"account@russ.foo\",\n    \"type\": \"user\"\n  }\n}\n```", "```\n$ az ad sp create-for-rbac –name sp-learn-ansible –role contributor –scopes /subscriptions/e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea\n```", "```\nCreating 'contributor' role assignment under scope '/subscriptions/e80d5ad9-e2c5-4ade-a866-bcfbae2b8aea'\nThe output includes credentials that you must protect. Be sure that you do not include these credentials in your code or check the credentials into your source control. For more information, see https://aka.ms/azadsp-cli\n{\n  \"appId\": \"2616e3df-826d-4d9b-9152-3de141465a69\",\n  \"displayName\": \"sp-learn-ansible\",\n  \"password\": \"Y4j8Q~gVO*NoTaREalPa55w0rdpP-pdaw\",\n  \"tenant\": \"c5df827f-a940-4d7c-b313-426cb3c6b1fe\"\n}\n```", "```\n    # kics-scan disable=555ab8f9-2001-455e-a077-f2d0f41e2fb9\n    name: \"Ansible Playbook Run\"\n    env:\n      FAIL_ON: \"medium\"\n      RESULTS_DIR: \"results-dir\"\n    ```", "```\n    On:\n      push:\n        branches:\n          - main\n    ```", "```\n    jobs:\n      scan_ansible_playbook:\n        name: \"Scan Ansible Playbook\"\n        runs-on: ubuntu-latest\n        defaults:\n          run:\n            shell: bash\n    ```", "```\n        steps:\n          - name: \"Checkout the code\"\n            uses: \"actions/checkout@v4\"\n            with:\n              token: \"${{secrets.GH_PAT}}\"\n    ```", "```\n          - name: \"Create the folder for storing the scan results\"\n            run: mkdir -p ${{env.RESULTS_DIR}}\n    ```", "```\n          - name: \"Run kics Scan\"\n            uses: \"checkmarx/kics-github-action@v1.7.0\"\n            with:\n              path: \"./\"\n              output_path: \"${{env.RESULTS_DIR}}\"\n              output_formats: \"json,sarif\"\n              fail_on: \"${{ env.FAIL_ON }}\"\n              enable_jobs_summary: true\n    ```", "```\n      run_ansible_playbook:\n        name: \"Install Ansible and run Playbook\"\n        runs-on: ubuntu-latest\n        needs: scan_ansible_playbook\n        defaults:\n          run:\n            shell: bash\n    ```", "```\n        steps:\n          - name: \"Cache Ansible collections and Python packages\"\n            uses: actions/cache@v4\n            with:\n              path: |\n                ~/.ansible/collections\n                ~/.cache/pip\n                /home/runner/.local/lib/python3.10/site-packages\n              key: ${{ runner.os }}-ansible-collections-and-python-packages\n              restore-keys: |\n                ${{ runner.os }}-ansible-collections-and-python-packages\n    ```", "```\n          - name: \"Checkout the code\"\n            id: \"checkout\"\n            uses: \"actions/checkout@v4\"\n    ```", "```\n          - name: \"Login to Azure using a service principal\"\n            uses: \"Azure/login@v2\"\n            with:\n              creds: '{\"clientId\":\"${{secrets.ARM_CLIENT_ID }}\",\"clientSecret\":\"${{secrets.ARM_CLIENT_SECRET }}\",\"subscriptionId\":\"${{secrets.ARM_SUBSCRIPTION_ID }}\",\"tenantId\":\"${{secrets.ARM_TENANT_ID }}\"}'\n    ```", "```\n          - name: \"Setup SSH key for Ansible\"\n            id: \"add-ssh-key\"\n            run: |\n              mkdir ~/.ssh\n              chmod 700 ~/.ssh/\n              echo \"${{ secrets.SSH_PRIVATE_KEY }}\" > ~/.ssh/id_rsa\n              chmod 600 ~/.ssh/id_rsa\n              echo \"${{ secrets.SSH_PUBLIC_KEY }}\" > ~/.ssh/id_rsa.pub\n              chmod 644 ~/.ssh/id_rsa.pub\n              cat  ~/.ssh/id_rsa.pub\n    ```", "```\n          - name: \"Run the playbook (with ansible-playbook)\"\n            id: \"ansible-playbook-run\"\n            continue-on-error: true\n            run: |\n              ansible-playbook -i inv site.yml 2>&1 | tee ansible_output.log\n              echo \"summary<<EOF\" >> $GITHUB_OUTPUT\n              echo \"## Ansible Playbook Output\" >> $GITHUB_OUTPUT\n              echo \"<details><summary>Click to expand</summary>\" >> $GITHUB_OUTPUT\n              echo \"\" >> $GITHUB_OUTPUT\n              echo \"\\`\\`\\`\" >> $GITHUB_OUTPUT\n              cat ansible_output.log >> $GITHUB_OUTPUT\n              echo \"\\`\\`\\`\" >> $GITHUB_OUTPUT\n              echo \"</details>\" >> $GITHUB_OUTPUT\n              echo \"EOF\" >> $GITHUB_OUTPUT\n            env:\n              ANSIBLE_HOST_KEY_CHECKING: \"False\"\n    ```", "```\n    ansible-playbook -i inv site.yml 2>&1 | tee ansible_output.log\n    ```", "```\n      - name: \"Publish Ansible Playbook run to Task Summary\"\n        env:\n          SUMMARY: ${{ steps.ansible-playbook-run.outputs.summary }}\n        run: |\n          echo \"$SUMMARY\" >> $GITHUB_STEP_SUMMARY\n```", "```\n$ git clone https://github.com/PacktPublishing/Learn-Ansible-Second-Edition.git\n$ cd Learn-Ansible-Second-Edition-Chapter15\n```", "```\n$ git add .\n$ git commit -m \"first commit\"\n$ git push\n```", "```\n    security_group: \"{{ nsg_output.state.name }}\"\n```", "```\n$ git clone git@ssh.dev.azure.com:v3/russmckendrick/Learn-Ansible-Second-Edition-Chapter15/Learn-Ansible-Second-Edition-Chapter15\n$ cd Learn-Ansible-Second-Edition-Chapter15\n```", "```\n$ git add .\n$ git commit -m \"first commit\"\n$ git push\n```", "```\n# kics-scan disable=3e2d3b2f-c22a-4df1-9cc6-a7a0aebb0c99\ntrigger:\n  - main\nvariables:\n  - group: playbook\npool:\n  vmImage: ubuntu-latest\n```", "```\n      - stage: \"scan\"\n        displayName: \"KICS - Scan Ansible Playbook\"\n    ```", "```\n       jobs:\n          - job: \"kics_scan\"\n            displayName: \"Run KICS Scan\"\n            pool:\n              vmImage: \"ubuntu-latest\"\n            container: checkmarx/kics:debian\n    ```", "```\n            steps:\n              - script: |\n                  mkdir -p $(System.DefaultWorkingDirectory)/output\n                  /app/bin/kics scan --ci -p ${PWD} -o ${PWD} --report-formats \"all\" --ignore-on-exit results\n                  mv results* $(System.DefaultWorkingDirectory)/output\n                  ls -lhat $(System.DefaultWorkingDirectory)/output\n    ```", "```\n              - task: PublishBuildArtifacts@1\n                inputs:\n                  pathToPublish: $(System.DefaultWorkingDirectory)/output\n                  artifactName: CodeAnalysisLogs\n    ```", "```\n      - stage: \"scan_parse\"\n        displayName: \"KICS - Parse Scan Resaults\"\n        jobs:\n          - job: \"kics_scan_parse_result\"\n            displayName: \"Check KICS Scan Resaults\"\n            pool:\n              vmImage: \"ubuntu-latest\"\n            steps:\n    ```", "```\n              - task: DownloadPipelineArtifact@2\n                displayName: \"Download the Security Scan Artifact Result\"\n                inputs:\n                  artifact: CodeAnalysisLogs\n    ```", "```\n              - task: Bash@3\n                name: \"setvar\"\n                displayName: \"Check for issues in the scan result\"\n                inputs:\n                    failOnStderr: true\n                    targetType: \"inline\"\n                    script: |\n    ```", "```\n                      resultsFilePath=\"$(Pipeline.Workspace)/results.json\"\n                      BREAK=$(breakSeverity)\n                      echo \"Checking for severity level: $BREAK\"\n                      noIssues=$(jq --arg BREAK \"$BREAK\" '.severity_counters[$BREAK] // 0' $resultsFilePath)\n                      echo \"Number of issues found: $noIssues\"\n    ```", "```\n                      echo \"##[group]Checking the scan output\"\n                      if [ \"$noIssues\" -lt 1 ]; then\n                          echo \"##vso[task.setvariable variable=OK_TO_DEPLOY;isOutput=true]true\"\n                          echo \"##vso[task.logissue type=warning]No issue found. Progressing with pipeline.\"\n    ```", "```\n                      else\n                          echo \"##vso[task.setvariable variable=OK_TO_DEPLOY;isOutput=true]false\"\n                          echo \"##vso[task.logissue type=error]Pipeline failed due to $noIssues issue(s) found.\"\n                      fi\n                      echo \"##[endgroup]\"\n    ```", "```\n      - stage: \"run_ansible\"\n        displayName: \"Run Ansible\"\n        condition: |\n          and\n            (\n              succeeded(),\n              eq(dependencies.scan_parse.outputs['kics_scan_parse_result.setvar.OK_TO_DEPLOY'], 'true')\n            )\n        jobs:\n          - job: \"ansible_install\"\n            displayName: \"Ansible\"\n            steps:\n    ```", "```\n              - task: AzureCLI@2\n                displayName: 'Azure CLI'\n                inputs:\n                  azureSubscription: '$(subscriptionName)'\n                  addSpnToEnvironment: true\n                  scriptType: 'bash'\n                  scriptLocation: 'inlineScript'\n                  inlineScript: |\n                    echo \"##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query=\"id\" -o tsv)\"\n                    echo \"##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}\"\n                    echo \"##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}\"\n                    echo \"##vso[task.setvariable variable=ARM_TENANT_ID]${tenantId}\"\n    ```", "```\n              - task: InstallSSHKey@0\n                displayName: \"Add SSH Key\"\n                inputs:\n                  sshKeySecureFile: \"id_rsa\"\n                  knownHostsEntry: \"azure.devops\"\n    ```", "```\n              - task: Bash@3\n                name: \"ansible\"\n                displayName: \"Run Ansible\"\n                env:\n                  AZURE_CLIENT_ID: $(ARM_CLIENT_ID)\n                  AZURE_SECRET: $(ARM_CLIENT_SECRET)\n                  AZURE_TENANT: $(ARM_TENANT_ID)\n                  AZURE_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)\n                  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n                inputs:\n                    targetType: \"inline\"\n                    script: |\n    ```", "```\n                      echo \"##[group]Add SSH key\"\n                          echo \"$(SSH_PUBLIC_KEY)\" > ~/.ssh/id_rsa.pub\n                          chmod 644 ~/.ssh/id_rsa.pub\n                      echo \"##[endgroup]\"\n    ```", "```\n                      echo \"##[group]Install the Azure Ansible Collection\"\n                          ansible-galaxy collection install --force azure.azcollection\n                          pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt\n                      echo \"##[endgroup]\"\n    ```", "```\n                      echo \"##[group]Run the Ansible Playbook\"\n                          ansible-playbook -i inv site.yml 2>&1 | tee $(System.DefaultWorkingDirectory)/ansible_output.log\n                      echo \"##[endgroup]\"\n    ```", "```\n                      echo \"##[group]Create the mardown file for the Ansible Playbook Output\"\n                          mkdir -p $(System.DefaultWorkingDirectory)/markdown\n                          echo \"# Ansible Playbook Output\" > $(System.DefaultWorkingDirectory)/markdown/summary.md\n                          echo \"<details><summary>Click to expand</summary>\" >> $(System.DefaultWorkingDirectory)/markdown/summary.md\n                          echo \"\" >> $(System.DefaultWorkingDirectory)/markdown/summary.md\n                          echo \"\\`\\`\\`\" >> $(System.DefaultWorkingDirectory)/markdown/summary.md\n                          cat $(System.DefaultWorkingDirectory)/ansible_output.log >> $(System.DefaultWorkingDirectory)/markdown/summary.md\n                          echo \"\\`\\`\\`\" >> $(System.DefaultWorkingDirectory)/markdown/summary.md                      echo \"</details>\" >> $(System.DefaultWorkingDirectory)/markdown/summary.md\n                      echo \"##[endgroup]\"\n    ```", "```\n              - task: PublishMarkdownReports@1\n                name: \"upload_ansible_output\"\n                displayName: \"Upload Ansible Output\"\n                inputs:\n                  contentPath: \"$(Build.SourcesDirectory)/markdown\"\n                  indexFile: \"summary.md\"\n    ```", "```\n    security_group: \"{{ nsg_output.state.name }}\"\n```"]