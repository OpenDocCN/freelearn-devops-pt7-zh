- en: Collaboration Using the GitHub Workflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub工作流进行协作
- en: In [Chapter 3](part0066.html#1UU540-184576c1044a4350bd24f18b869c0732), *Managing
    Organizations and Teams*, we explored how you can create and manage organizations
    and teams that will further help you in collaborating with others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0066.html#1UU540-184576c1044a4350bd24f18b869c0732)，*管理组织和团队*中，我们探讨了如何创建和管理组织和团队，这将进一步帮助你与他人协作。
- en: GitHub is a great tool for collaboration and, as such, it has come up with a
    workflow based on the features it provides and the power of Git. It has named
    it the GitHub workflow ([https://guides.github.com/introduction/flow](https://guides.github.com/introduction/flow)).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是一个出色的协作工具，因此，它基于其提供的功能和Git的强大能力创建了一个工作流。它将这个工作流命名为GitHub工作流([https://guides.github.com/introduction/flow](https://guides.github.com/introduction/flow))。
- en: 'In this chapter, we will learn how to work with branches and pull requests,
    which are the most powerful features of GitHub. Here''s what we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习如何使用分支和拉取请求，它们是GitHub最强大的功能。以下是我们将要讨论的内容：
- en: Learning about pull requests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习拉取请求
- en: Peer review and inline comments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同行评审与内联评论
- en: Merging the pull request
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并拉取请求
- en: Tips and tricks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示与技巧
- en: Learning about pull requests
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习拉取请求
- en: Pull request is the number one feature in GitHub that made it what it is today.
    It was introduced in early 2008 and has been used extensively among projects since
    then.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求是GitHub最重要的功能之一，它让GitHub发展成今天的样子。它在2008年初被引入，并且从那时起在项目中得到了广泛应用。
- en: While everything else can be pretty much disabled in a project's settings (such
    as issues and the wiki), pull requests are always enabled.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管项目设置中的其他所有功能（例如问题和维基）都可以被禁用，但拉取请求始终是启用的。
- en: Why pull requests are a powerful asset to work with
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么拉取请求是一个强大的工作工具
- en: Whether you are working on a personal project where you are the sole contributor,
    or on a big open source project with contributors from all over the globe, working
    with pull requests will certainly make your life easier.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是在进行一个只有你自己参与的个人项目，还是在一个有来自全球各地贡献者的大型开源项目中，使用拉取请求（pull requests）肯定能让你的工作变得更加轻松。
- en: Think of pull requests like chunks of commits, and the GitHub UI helps you clearly
    visualize what is about to be merged in the default branch or the branch of your
    choice. Pull requests are reviewable with an enhanced different view. You can
    easily revert them with a simple button on GitHub and they can be tested before
    merging, provided a CI service is enabled in the repository.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将拉取请求看作是提交的块，而GitHub的用户界面帮助你清晰地可视化即将合并到默认分支或你选择的分支的内容。拉取请求可以通过增强的不同视图进行审查。你可以通过GitHub上的一个简单按钮轻松地撤销它们，并且在合并之前可以进行测试，前提是仓库中启用了CI服务。
- en: '**CI** stands for **continuous integration**. For more details, you can refer
    to the applications that GitHub integrates at [https://github.com/marketplace/category/continuous-integration](https://github.com/marketplace/category/continuous-integration).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI** 代表 **持续集成**。有关更多细节，你可以参考GitHub集成的应用程序，[https://github.com/marketplace/category/continuous-integration](https://github.com/marketplace/category/continuous-integration)。'
- en: The connection between branches and pull requests
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支与拉取请求之间的联系
- en: 'There is a special connection between branches and pull requests. In this connection,
    GitHub will automatically show you a button to create a new pull request if you
    push a new branch in your repository. As we will explore in the following sections,
    this is tightly coupled to the GitHub workflow, and GitHub uses some special words
    to describe the *from* and *to* branches. As per GitHub''s documentation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 分支与拉取请求之间有一种特殊的联系。在这种联系中，如果你在仓库中推送一个新分支，GitHub会自动显示一个按钮来创建新的拉取请求。正如我们在接下来的章节中将探讨的，这与GitHub工作流紧密相关，GitHub使用一些特殊的术语来描述*从*分支和*到*分支。根据GitHub的文档：
- en: '*The base branch is where you think changes should be applied, the head branch
    is what you would like to be applied.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Base分支是你认为应该应用更改的地方，Head分支是你希望被应用的分支。*'
- en: So, in GitHub terms, head is your branch, and base is the branch you would like
    to merge into.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在GitHub的术语中，head是你的分支，而base是你希望合并到的分支。
- en: Creating branches directly in a project – the shared repository model
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中直接创建分支 – 共享代码库模型
- en: The shared repository model, as GitHub aptly calls it, is when you push new
    branches directly to the source repository. From there, you can create a new pull
    request by comparing between branches, as we will see in the following sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub称之为共享仓库模型，这是指你将新分支直接推送到源仓库。从那里，你可以通过比较分支来创建新的拉取请求，正如我们将在接下来的章节中看到的那样。
- en: Of course, in order to be able to push to a repository, you either have to be
    the owner or a collaborator; in other words, you must have write access.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，要能够推送到仓库，你必须是该仓库的所有者或合作者；换句话说，你必须拥有写权限。
- en: Creating branches in your fork – the fork and pull model
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的分叉中创建分支——分叉和拉取模型
- en: Forked repositories are related to their parent in a way that GitHub uses in
    order to compare their branches. The fork and pull model is usually used in projects
    when you do not have write access, but are willing to contribute.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉的仓库与它们的父仓库之间有一种关系，GitHub用这种关系来比较它们的分支。分叉和拉取模型通常用于那些没有写权限但希望贡献的项目。
- en: After forking a repository, you push a branch to your fork and then create a
    pull request in the parent repository, asking its maintainer to merge the changes.
    This is common practice for contributing to open source projects hosted on GitHub.
    You will not have access to their repository, but, being open source, you can
    fork the public repository and work on your own copy.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在分叉一个仓库后，你将分支推送到你的分叉，并在父仓库中创建一个拉取请求，要求其维护者合并这些更改。这是为开源项目贡献代码时常用的做法。你不会直接访问他们的仓库，但由于它是开源的，你可以分叉该公共仓库并在自己的副本上进行工作。
- en: How to create and submit a pull request
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建并提交拉取请求
- en: There are quite a few ways to initiate the creation of a pull request, as we
    will see in the following sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以发起创建拉取请求，我们将在接下来的章节中看到。
- en: The most common one is to push a branch to your repository and let GitHub's
    UI guide you. Let's explore this option first.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的方法是将分支推送到你的仓库，并让GitHub的界面引导你。我们首先来探索这个选项。
- en: Using the Compare & pull request button
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用“比较并发起拉取请求”按钮
- en: Whenever a new branch is pushed to a repository, GitHub shows a quick button
    to create a pull request. In reality, you are taken to the compare page, as we
    will explore in the next section, but some values are already filled out for you.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每当新分支被推送到仓库时，GitHub会显示一个快速按钮来创建拉取请求。实际上，你将被带到比较页面，正如我们将在下一节中探讨的那样，不过有些值已经为你填写好了。
- en: 'Let''s create, for example, a new branch named `add-gitignore` where we will
    add a `.gitignore` file with the following content:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们可以创建一个名为`add-gitignore`的新分支，在这个分支上我们将添加一个`.gitignore`文件，内容如下：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, head over to your repository''s main page and you will notice the Compare
    & pull request button:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，前往你的仓库主页，你会注意到“比较并发起拉取请求”按钮：
- en: '![](img/00099.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'From here on, if you hit this button, you will be taken to the compare page.
    Note that I am pushing to my repository following the shared repository model,
    so this is how GitHub greets me:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，如果你点击这个按钮，你将被带到比较页面。请注意，我是按照共享仓库模型将分支推送到我的仓库，因此GitHub会这样欢迎我：
- en: '![](img/00100.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: What would happen if I used the fork and pull repository model? For this purpose,
    I created another user to fork my repository and followed the same instructions
    to add a new branch named `add-gitignore-2` with the same changes. From here on,
    when you push the branch to your fork, the Compare & pull request button appears
    whether you are on your fork's page or on the parent repository.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我使用分叉和拉取仓库模型会发生什么呢？为此，我创建了另一个用户来分叉我的仓库，并按照相同的步骤添加一个名为`add-gitignore-2`的新分支，并做出相同的更改。从这里开始，当你将分支推送到你的分叉时，无论你是在你的分叉页面还是在父仓库页面，都会看到“比较并发起拉取请求”按钮。
- en: 'This is how it looks if you visit your fork:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问你的分叉，界面会是这样的：
- en: '![](img/00101.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: 'The following screenshot will appear if you visit the parent repository:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问父仓库，以下截图将会出现：
- en: '![](img/00102.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00102.jpeg)'
- en: In the last case, you can see from which user this branch came from (axil42:add-gitignore-2).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后的这种情况下，你可以看到这个分支来自哪个用户（axil42:add-gitignore-2）。
- en: 'In either case, when using the fork and pull model, hitting the Compare & pull
    request button will take you to the compare page with slightly different options:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，当使用分叉和拉取模型时，点击“比较并发起拉取请求”按钮将带你到比较页面，页面上有略微不同的选项：
- en: '![](img/00103.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: Since you are comparing across forks, there are more details. In particular,
    you can see the base fork and branch as well as the head fork and branch that
    you are the owner of.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你正在跨分叉进行比较，因此有更多的细节。特别是，你可以看到基础分叉和分支，以及你拥有的头部分叉和分支。
- en: GitHub considers the default branch set in your repository to be the one you
    want to merge into (base) when the Create pull request button appears.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 会将你仓库中设置的默认分支视为你想要合并到的分支（基础分支），当“创建拉取请求”按钮出现时。
- en: Before submitting it, let's explore the other two options that you can use to
    create a pull request. You can jump to the *Submitting a pull request* section
    if you like.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交之前，让我们看看你可以用来创建拉取请求的另外两种选项。如果你愿意，可以跳到 *提交拉取请求* 部分。
- en: Using the compare function directly
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接使用比较功能
- en: As mentioned in the previous section, the Compare & pull request button takes
    you to the compare page with some predefined values. The button appears right
    after you push a new branch and is there only for a few moments. In this section,
    we will see how to use the compare function directly in order to create a pull
    request.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一节所述，**比较与拉取请求**按钮会带你进入比较页面，并提供一些预定义的值。该按钮在你推送新分支后会出现，并且只会出现短暂的时间。在本节中，我们将看到如何直接使用比较功能来创建拉取请求。
- en: 'You can access the compare function by clicking on the New pull request button
    next to the branch drop-down list on a repository''s main page:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击仓库主页面上分支下拉列表旁的“新建拉取请求”按钮来访问比较功能：
- en: '![](img/00104.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: This is pretty powerful as you can compare across forks or, in the same repository,
    pretty much everything—branches, tags, single commits, and time ranges.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常强大，因为你可以在分叉之间进行比较，或者在同一仓库中几乎比较任何东西——分支、标签、单个提交和时间范围。
- en: 'The default page when you land on the compare page is as follows; you start
    by comparing your default branch with GitHub, proposing a list of recently created
    branches to choose from and compare:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入比较页面时，默认页面如下；你开始时是将你的默认分支与 GitHub 进行比较，提出一个最近创建的分支列表供选择并进行比较：
- en: '![](img/00105.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpeg)'
- en: In order to have something to compare to, the commits of the base branch must
    be older than what you are comparing to.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行比较，基础分支的提交必须早于你要比较的提交。
- en: 'From here, if I choose the `add-gitignore` branch, GitHub compares it to a
    master and shows the differences along with the message that it is able to be
    merged into the base branch without any conflicts. Finally, you can create the
    pull request:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果我选择 `add-gitignore` 分支，GitHub 会将其与 master 进行比较，并显示出差异，同时提示它可以无冲突地合并到基础分支中。最后，你可以创建拉取请求：
- en: '![](img/00106.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00106.jpeg)'
- en: Notice that I am using the compare function while I'm at my own repository.
    When comparing in a repository that is a fork of another, the compare function
    slightly changes and automatically includes more options, as we have seen in the
    previous section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在自己的仓库中使用了比较功能。当在一个是其他仓库分支的仓库中进行比较时，比较功能会略有变化，并且自动包含更多选项，正如我们在上一节中所看到的那样。
- en: As you may have noticed, the New pull request quick button is just a shortcut
    for using the compare function manually. If you want to have more fine-grained
    control on the repositories and the branches compared, use the compare feature
    directly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所注意到的，**新建拉取请求快捷按钮**只是手动使用比较功能的快捷方式。如果你想对比较的仓库和分支有更多细致的控制，请直接使用比较功能。
- en: Using the GitHub web editor
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub 网页编辑器
- en: 'So far, we have seen the two most well-known method for initiating a pull request.
    There is a third way as well: using the web editor that GitHub provides in its
    entirety. This can prove useful for people who are not too familiar with Git and
    the Terminal, and can also be used by more advanced Git users who want to propose
    a quick change.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了启动拉取请求的两种最知名的方法。还有第三种方式：使用 GitHub 完全提供的网页编辑器。这对于那些不太熟悉 Git 和终端的人非常有用，也可以被更高级的
    Git 用户用来快速提出变更。
- en: As always, according to the model you are using (shared repository or fork and
    pull), the process is a little different. Let's first explore the shared repository
    model flow using the web editor, which means editing files in a repository that
    you own.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往地，根据你使用的模型（共享仓库或分叉与拉取），流程会稍有不同。让我们首先探索使用网页编辑器的共享仓库模型流程，也就是编辑你拥有的仓库中的文件。
- en: The shared repository model
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享仓库模型
- en: 'Firstly, make sure that you are on the branch that you wish to branch off;
    then, head over to a file that you wish to change and press the edit button with
    the pencil icon:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保你在你希望从中分支的分支上；然后，前往你希望修改的文件，点击带有铅笔图标的编辑按钮：
- en: '![](img/00107.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: 'Make the change you want to that file, add a proper commit message, and choose
    Create a new branch, giving the name of the branch you wish to create. By default,
    the branch name is `username-patch-i`, where `username` is your username and `i`
    is an increasing integer starting from `1`. Consecutive edits on files will create
    branches such as `username-patch-1`, `username-patch-2`, and so on. In our example,
    I decided to give the branch a name of my own:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对该文件进行所需的更改，添加适当的提交信息，并选择“创建新分支”，并为新分支命名。默认情况下，分支名称为 `username-patch-i`，其中 `username`
    是你的用户名，`i` 是从 `1` 开始递增的整数。连续对文件的编辑会创建 `username-patch-1`、`username-patch-2` 等分支。在我们的例子中，我决定为该分支取一个自己喜欢的名字：
- en: '![](img/00108.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: When ready, press the Propose file change button. From this moment on, the branch
    is created with the file edits you made. Even if you close the next page, your
    changes will not be lost. Let's skip the pull request submission for the time
    being and see how the fork and pull model works.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好后，点击“提议文件更改”按钮。从这一刻起，分支会随你所做的文件编辑而创建。即使你关闭下一页，你的更改也不会丢失。我们暂时跳过拉取请求提交，来看一下分支与拉取请求模型是如何工作的。
- en: The fork and pull model
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支与拉取请求模型
- en: 'In the fork and pull model, you fork a repository and submit a pull request
    from the changes you make in your fork. In the case of using the web editor, there
    is a caveat. In order to get GitHub to automatically recognize that you wish to
    perform a pull request in the parent repository, you have to start the web editor
    from the parent repository and not your fork. In the following screenshot, you
    can see what happens in this case:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在分支与拉取请求模型中，你会将仓库进行分叉，并从你在分叉仓库中所做的更改提交拉取请求。在使用网页编辑器的情况下，需要注意的是，为了让 GitHub 自动识别你希望在父仓库中执行拉取请求，你必须从父仓库启动网页编辑器，而不是从你的分叉仓库启动。在以下截图中，你可以看到在这种情况下发生了什么：
- en: '![](img/00109.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: 'GitHub informs you that a new branch will be created in your repository (fork)
    with the new changes in order to submit a pull request. Hitting the Propose file
    change button will take you to the form to submit the pull request:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 会通知你在你的仓库（分支）中创建一个新的分支，并包含新更改，以便提交拉取请求。点击“提议文件更改”按钮会带你进入提交拉取请求的表单：
- en: '![](img/00110.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: Contrary to the shared repository model, you can now see the base/head repositories
    and branches that are compared. Also, notice that the default name for the new
    branch is `patch-i`, where `i` is an increasing integer number. In our case, this
    was the first branch created that way, so it was named `patch-1`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与共享仓库模型相反，现在你可以看到被比较的基础仓库/分支。同时，注意到新分支的默认名称是 `patch-i`，其中 `i` 是递增的整数。在我们的例子中，这是第一个创建的分支，因此它被命名为
    `patch-1`。
- en: If you would like to have the ability to name the branch the way you like, you
    should follow the shared repository model instructions, as explained in the preceding
    section. Following that route, edit the file in your fork where you have write
    access, add your own branch name, hit the Propose file change button for the branch
    to be created, and then abort when asked to create the pull request. You can then
    use the New pull request quick button or use the compare function directly to
    propose a pull request to the parent repository.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望能够自由命名分支，应该按照前述部分的共享仓库模型说明进行操作。按照这种方式，在你有写权限的分叉仓库中编辑文件，添加自己喜欢的分支名称，点击“提议文件更改”按钮以创建分支，然后在要求创建拉取请求时取消操作。然后你可以使用“新建拉取请求”快捷按钮，或直接使用比较功能向父仓库提议拉取请求。
- en: 'One last thing to consider when using the web editor is the limitation of editing
    one file at a time. If you wish to include more changes in the same branch that
    GitHub created for you when you first edited a file, you must first change to
    that branch and then make any subsequent changes. How to change the branch? Simply
    choose it from the drop-down menu, as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网页编辑器时需要考虑的最后一件事是一次只能编辑一个文件的限制。如果你希望在 GitHub 为你首次编辑文件时创建的同一分支上进行更多更改，你必须先切换到该分支，然后再进行后续更改。如何切换分支？只需从下拉菜单中选择它，如下截图所示：
- en: '![](img/00111.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: Submitting a pull request
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交拉取请求
- en: So far, we have explored the various ways to initiate a pull request. In this
    section, we will finally submit it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了启动拉取请求的各种方式。在本节中，我们将最终提交它。
- en: The pull request form is identical to the form when creating a new issue. For
    more details, refer to [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732),
    *Brief Repository Overview and Usage of the Issue Tracker*, the *Learning how
    to use the powerful benefits of the issue tracker* section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求表单与创建新问题时的表单是相同的。更多详细信息，请参阅[第1章](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732)，*问题追踪器的简要概述与使用*，以及*学习如何使用问题追踪器的强大优势*部分。
- en: If you have write access to the repository that you are making the pull request
    to, then you are able to set labels, milestones, and assignees.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对要发起拉取请求的仓库有写入权限，那么你就可以设置标签、里程碑和指派人。
- en: 'The title of the pull request is automatically filled by the last commit message
    that the branch has or, if there are multiple commits, it will just fill in the
    branch name. In either case, you can change it as you see fit. In the following
    screenshot, you can see that the title is taken from the branch name after GitHub
    has stripped the special characters. In a sense, the title gets humanized:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求的标题会自动填写为该分支的最后一次提交消息，或者如果有多个提交，它会填写分支名。在任何情况下，你都可以根据需要进行修改。在以下截图中，你可以看到标题是从分支名称中获取的，GitHub
    已经去除了特殊字符。从某种意义上来说，标题变得更具人性化：
- en: '![](img/00112.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: You can add an optional description and images if you want. Whenever ready,
    hit the Create pull request button. In the following sections, we will explore
    how the peer review works and eventually merge the pull request.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以添加可选的描述和图片。准备好后，点击创建拉取请求按钮。在接下来的部分中，我们将探讨同行评审如何工作，并最终合并拉取请求。
- en: Peer review and inline comments
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同行评审和内联评论
- en: The cool thing about pull requests is that you have a nice and clear view of
    what is about to get merged. You can see only the changes that matter, and the
    best part is that you can fire up a discussion concerning those changes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求的酷之处在于你可以清晰地看到即将合并的内容。你只会看到重要的变更，最棒的是你可以围绕这些变更展开讨论。
- en: In the previous section, we submitted the pull request so that it can be reviewed
    and eventually get merged. Suppose that we are collaborating with a team and they
    chime in to discuss the changes. Let's first check the layout of a pull request.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分，我们提交了拉取请求，以便进行审查并最终合并。假设我们正在与一个团队合作，他们加入进来讨论这些更改。让我们首先检查拉取请求的布局。
- en: The layout of a pull request
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉取请求的布局
- en: 'Every pull request pretty much looks as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个拉取请求大致如下所示：
- en: '![](img/00113.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: 'From the previous screenshot, you can tell what the specific number of the
    pull request is. It is like an identifier within the repository and it is not
    separated from the issues count. Issues and pull requests share the same ID counter.
    So, in the preceding example, you can see that although this is our first pull
    request, it is numbered #6; the previous five were issues:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，你可以看到拉取请求的具体编号。它就像是仓库中的标识符，并且与问题的计数没有分开。问题和拉取请求共享相同的ID计数器。所以，在上面的例子中，尽管这是我们的第一个拉取请求，但它被编号为#6；前面的五个是问题：
- en: '![](img/00114.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: 'Then, there is the information that the pull request is Open and who wants
    to merge how many commits into which branch from which other branch:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，会显示该拉取请求的状态（已打开）以及谁想要将多少次提交合并到哪个分支，来自哪个其他分支：
- en: '![](img/00115.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: 'Right below the information we just described, there are four tabs: Conversation,
    Commits, Checks, and Files changed. In Conversation, except for the comments that
    we will see in the following screenshots, GitHub also adds information about the
    events concerning the particular pull request. You can see the action and the
    time it occurred. For example, take a look at the following screenshot; even little
    changes such as adding a label are being recorded:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚才描述的信息下方，有四个标签：对话、提交、检查和更改的文件。在“对话”中，除了我们在接下来截图中看到的评论外，GitHub 还会添加与该拉取请求相关的事件信息。你可以看到动作和发生的时间。例如，看看下面的截图；即使是小的变更，如添加标签，也会被记录下来：
- en: '![](img/00116.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: 'The Conversation tab is also where the final call takes place. This is where
    the button to merge the pull request resides, and you can see its status. The
    button is green, which means there are no conflicts between the changed files
    and the ones that are in the repository:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “对话”（Conversation）选项卡也是最终决策的地方。这里有合并拉取请求的按钮，你可以看到按钮的状态。如果按钮是绿色的，表示更改的文件与仓库中的文件没有冲突：
- en: '![](img/00117.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: Finally, there is the comment form that is the same as in the issue tracker
    that we explored in [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732),
    *Brief Repository Overview and Usage of the Issue Tracker*. You can leave any
    comments concerning the pull request here.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，评论表单与我们在[第一章](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732)中探讨的“问题追踪器”是一样的，*简要的仓库概览与问题追踪器的使用*。你可以在这里留下关于拉取请求的任何评论。
- en: 'The Commits tab shows the commits made in this branch and the commits that
    are not yet in the branch you are merging into. For example, the `update-readme`
    branch has two commits that do not exist in `master`. GitHub shows the commits
    in chronological order along with other information, such as who the author is,
    and links to the commits:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 提交（Commits）选项卡显示了该分支中的提交以及尚未合并到目标分支的提交。例如，`update-readme`分支有两个提交在`master`分支中不存在。GitHub按时间顺序显示提交记录，并附带其他信息，如作者是谁，并提供提交的链接：
- en: '![](img/00118.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: The Checks tab is reserved for external services that talk to GitHub's API and
    can perform checks on the pull request. That can be a continuous integration service
    that tests the code, or one that checks if the pull request conforms to some guidelines.
    We won't get into any details since this is a very broad area outside the scope
    of this book, but you're free to read more on GitHub's documentation at [https://help.github.com/articles/about-status-checks/#checks.](https://help.github.com/articles/about-status-checks/#checks)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “检查”（Checks）选项卡专门用于与GitHub的API交互的外部服务，可以对拉取请求执行检查。可以是一个持续集成（CI）服务，用于测试代码，或者是一个检查拉取请求是否符合某些准则的服务。我们不会详细讨论这个内容，因为它是一个非常广泛的领域，超出了本书的范围，但你可以在GitHub的文档中了解更多内容，网址是[https://help.github.com/articles/about-status-checks/#checks.](https://help.github.com/articles/about-status-checks/#checks)
- en: 'Finally, the Files changed tab shows the files that are changed in this pull
    request. There are two ways to see the differences in the commits. The default
    one is to see the changes in a unified way, with additions and deletions on the
    same page, as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，“更改的文件”（Files changed）选项卡显示了此拉取请求中已更改的文件。有两种方式可以查看提交的差异。默认的方式是以统一方式查看更改，将新增和删除的内容显示在同一页面，如下图所示：
- en: '![](img/00119.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: Note that for each addition, GitHub marks a line with a green background color.
    On the contrary, if you were to remove some lines, they would show in pink. I
    will leave that to you as an exercise.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于每个新增的行，GitHub会用绿色背景色标记。相反，如果你删除了一些行，它们将以粉红色显示。这个练习留给你自己完成。
- en: 'The other way is to choose Split, and GitHub will show the differences in a
    side-by-side view. Under the Diff settings drop-down menu, there''s the option
    to see the changes in Split mode. Choose it and hit Apply and reload for the changes
    to take effect:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式是选择“拆分”（Split），GitHub会以并排视图显示差异。在“Diff设置”（Diff settings）下拉菜单下，有一个选项可以选择在拆分模式下查看更改。选择它并点击“应用”（Apply），然后重新加载页面以使更改生效：
- en: '![](img/00120.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: In the next section, we will further explore the Files changed tab since this
    is where the review process takes place.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将进一步探讨“更改的文件”选项卡，因为审核过程就是在这里进行的。
- en: The review process
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审核过程
- en: To make the review process a bit easier to follow, there are a couple of features
    that are useful when dealing with a lot of commits and changed files.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让审核过程更容易跟进，处理大量提交和更改文件时有几个有用的功能。
- en: 'The Changes from drop-down menu is helpful if you want to see the changes introduced
    by a single commit or a range of commits:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “更改来源”（Changes from）下拉菜单很有用，如果你想查看某个单一提交或一系列提交所引入的更改：
- en: '![](img/00121.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: 'Next to it, the Jump to dropdown provides a list of all changed files that
    you can choose and jump to:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 旁边的“跳转到”（Jump to）下拉菜单列出了所有已更改的文件，您可以选择并跳转到其中一个文件：
- en: '![](img/00122.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: This might seem redundant when there's only two files, but it's powerful if
    there's a dozen of them as you don't have to manually scroll down the page and
    find what you're looking for.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当只有两个文件时，这看起来可能有些冗余，但如果有十几个文件，这个功能就非常强大，因为你不需要手动滚动页面寻找你要的内容。
- en: 'In addition, this menu will become sticky as you scroll down a long page of
    changes so that you don''t have to scroll all the way back up:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你向下滚动长页面时，这个菜单会变得固定，以免你需要滚动回到页面顶部：
- en: '![](img/00123.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: 'GitHub supports inline comments, so you can leave a comment under every changed
    line, as seen in the Files changed tab. When hovering over a line, you will notice
    the cross image, as shown in the following screenshot; click on it and the comment
    form will appear:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 支持内联评论，因此你可以在每一行已更改的代码下留下评论，如在“文件更改”标签中看到的那样。当你将鼠标悬停在某一行时，你会看到一个交叉图标，如下图所示；点击它，评论表单将会出现：
- en: '![](img/00124.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: 'When writing a comment, you can either submit it right away as a single comment
    or start a review. When starting a review, the comment is submitted, but it doesn''t
    notify the repository members. That way, you can submit comments in batches and
    notify the submitter of the pull request in one go. In the following example,
    there are two comments on the proposed changed files:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在写评论时，你可以选择立即提交为单条评论，或者开始一个审查。当你开始一个审查时，评论会被提交，但不会通知仓库成员。这样，你可以批量提交评论，并一次性通知提交拉取请求的人。以下示例中，提议修改的文件上有两条评论：
- en: '![](img/00125.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: Notice that they are in pending status and they wait to be finally submitted
    for review. Once you're ready to finish your review, hit the Finish your review
    button under your comments or use the Review changes drop-down menu.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，它们处于待处理状态，等待最终提交以供审查。一旦你准备好结束审查，可以点击评论下方的“完成审查”按钮，或者使用“审查更改”下拉菜单。
- en: '![](img/00126.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: From there on, you have three options. The first one is just to Comment and
    ask nothing else from the submitter. The second option is to Approve the changes
    while leaving your feedback. Finally, the last one is to Request changes, usually
    in the lines where you commented on. Optionally, leave a review summary and click
    **Submit review**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，你有三个选择。第一个是仅仅评论，并且不要求提交者做任何其他事情。第二个选择是批准更改并留下反馈。最后一个选择是请求更改，通常是在你评论的行中。你可以选择性地留下审查总结，并点击**提交审查**。
- en: 'With a few comments on the diff and a request for changes, we can see a couple
    of things. First of all, inline comments count towards the overall conversation,
    so the Conversation tab should pick that number. Furthermore, since changes were
    requested, that is shown in the pull request widget at the bottom:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在差异上有一些评论和请求更改后，我们可以看到几件事情。首先，内联评论会计入整体对话，因此“对话”标签应显示该数量。此外，由于请求了更改，这一点会在底部的拉取请求小部件中显示：
- en: '![](img/00127.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: As the submitter of the pull request, you can click on the **See review** link
    and be taken to the review comments or hit **Dismiss review** if you think you
    have addressed all the comments. In the latter case, you will need to add a comment
    justifying your action.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 作为拉取请求的提交者，你可以点击**查看审查**链接，查看审查评论，或者点击**驳回审查**，如果你认为已经处理了所有评论。在后者的情况下，你需要添加一个评论，说明你的操作理由。
- en: Correcting mistakes
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修正错误
- en: So far, we have seen how conversations begin, but what happens when the changes
    you made need some tweaking to be considered as ready to merge?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到对话是如何开始的，但如果你所做的更改需要一些调整才能被视为准备好合并时会发生什么呢？
- en: 'In this case, you can push new commits to the branch associated with the pull
    request and GitHub will pick up those changes and amend it. The new changes will
    show up and further feedback can be given. In *The review process* section, my
    evil twin, user `axil42`, raised a concern about a wrong line being committed.
    We will now make a new commit and push it to the `update-readme` branch and see
    what happens:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以将新的提交推送到与拉取请求关联的分支，GitHub 会接收这些更改并进行修正。新更改会显示出来，并且可以进一步反馈。在*审查过程*部分，我的恶魔双胞胎用户
    `axil42` 提出了一个关于提交了错误行的担忧。现在我们将做一个新的提交并推送到 `update-readme` 分支，看看会发生什么：
- en: '[PRE1]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Back in GitHub, three changes occurred. Firstly, there was another commit added
    to the Commits tab. Then, in the Files changed tab, since the line on which the
    comments were relying on was removed, the comments no longer appeared. Instead,
    you can see that in the Conversation tab, this particular discussion was marked
    as outdated:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到 GitHub，发生了三项更改。首先，另一个提交被添加到了“提交”标签。然后，在“文件更改”标签中，由于评论依赖的那一行被删除，评论不再显示。相反，你可以看到在“对话”标签中，这个特定的讨论被标记为过时：
- en: '![](img/00128.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: 'If you were by, any chance, in the Files changed tab while the last commit
    was pushed, GitHub would inform you about the changes and would urge you to refresh
    the page:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在最后一个提交推送时恰好处于“已更改文件”选项卡，GitHub 会通知您关于更改的内容，并提示您刷新页面：
- en: '![](img/00129.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: Merging the pull request
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并拉取请求
- en: After the conversation took place, changes were made, and the peer review worked
    as expected, so it's now time to finally merge the pull request.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话进行后，做出了更改，并且同行评审按照预期工作，所以现在是最终合并拉取请求的时候了。
- en: 'If you don''t have access to merge the pull request, you should see the following
    result:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有合并拉取请求的权限，您应该看到以下结果：
- en: '![](img/00130.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: 'On the other hand, owners or collaborators with write access can also merge
    pull requests. In this case, you should see the Merge pull request green button.
    From the arrow next to it, you can optionally choose the merge method before merging
    it. There are three options, with the default one being the creation of a merge
    commit. Pick the one you want and hit merge:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，具有写入权限的所有者或协作者也可以合并拉取请求。在这种情况下，您应该看到绿色的“合并拉取请求”按钮。点击旁边的箭头，您可以在合并之前选择合并方法。共有三种选项，默认的方式是创建一个合并提交。选择您需要的方式，然后点击合并：
- en: '![](img/00131.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00131.jpeg)'
- en: 'Pressing this button will not merge it immediately, but you will have another
    chance to confirm:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 按下这个按钮并不会立即合并，而是会再给您一次确认的机会：
- en: '![](img/00132.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00132.jpeg)'
- en: The commit message of this merge is the one in bold, and the one below that
    can be edited is the extended commit message, which, by default, grabs the pull
    request title. In the extended commit message, you can reference issue numbers
    with a special meaning. Read more in the *Tips and tricks* section of this chapter
    to learn how to automatically close issues from pull requests.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个合并的提交信息是加粗的部分，而下面可以编辑的则是扩展的提交信息，默认情况下会抓取拉取请求的标题。在扩展的提交信息中，您可以引用带有特殊含义的问题编号。请在本章的*技巧与窍门*部分中阅读更多内容，了解如何通过拉取请求自动关闭问题。
- en: Once merged, you can see the green icons turning to purple. This indicates a
    merged pull request.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦合并完成，您会看到绿色的图标变为紫色。这表示拉取请求已被合并。
- en: Removing/restoring a branch after the pull request is merged
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并拉取请求后删除/恢复分支
- en: 'In order to have everything cleaned up and tidy, GitHub offers removing the
    merged branch with a simple button right after the pull request is merged:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一切整洁，GitHub 提供了一个简单的按钮，可以在拉取请求合并后删除已合并的分支：
- en: '![](img/00133.jpeg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00133.jpeg)'
- en: 'After the deletion is completed, GitHub makes this an action event. If you
    changed your mind, you can always restore the removed branch again using the Restore
    branch button, as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 完成删除后，GitHub 会将其作为一个操作事件。如果您改变了主意，您可以随时使用“恢复分支”按钮将已删除的分支恢复，如下图所示：
- en: '![](img/00134.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00134.jpeg)'
- en: Reverting a pull request
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回退一个拉取请求
- en: 'There are cases where you might want to revert a pull request, and GitHub makes
    this extremely easy. Right after the merge happens, there will be a Revert button
    next to the merge action:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候您可能想回退一个拉取请求，GitHub 使这一操作变得非常简单。合并完成后，合并操作旁边会有一个“回退”按钮：
- en: '![](img/00135.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: Pressing this button will create a new pull request with opposite commits to
    the ones the previous pull request included.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 按下这个按钮会创建一个新的拉取请求，其中包含与之前拉取请求相反的提交。
- en: Tips and tricks
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技巧与窍门
- en: So far, we have explored most of the functionality of pull requests. Let's see
    a couple of things that leverage their power even more.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探索了大部分拉取请求的功能。接下来我们来看看一些进一步发挥其功能的方式。
- en: Closing issues via commit messages
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过提交信息关闭问题
- en: In [Chapter 1](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732), *Brief
    Repository Overview and Usage of the Issue Tracker*, in the *Tips and tricks*
    section, you learned how to reference issues inside the issue tracker. Extending
    this ability, you can reference issue numbers in commit messages in order to close
    some issues when the commit is merged to the default branch.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](part0020.html#J2B80-184576c1044a4350bd24f18b869c0732)，*简要的仓库概述与问题追踪器的使用*部分，您学习了如何在问题追踪器中引用问题。扩展此功能，您可以在提交信息中引用问题编号，以便在提交合并到默认分支时关闭一些问题。
- en: 'For this action to be triggered, you have to use some keywords. For example,
    `Closes #42` in the commit message will close issue 42 when that commit is merged
    with the default branch.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '为了触发此操作，你需要使用一些关键词。例如，提交消息中的 `Closes #42` 会在该提交与默认分支合并时关闭问题42。'
- en: 'As per the GitHub documentation, the following keywords will close an issue
    via a commit message:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 GitHub 文档，以下关键词将通过提交消息关闭一个问题：
- en: close
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭
- en: closes
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭
- en: closed
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已关闭
- en: fix
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复
- en: fixes
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复
- en: fixed
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已修复
- en: resolve
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决
- en: resolves
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决
- en: resolved
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已解决
- en: 'Let''s take, for example, an open issue such as the following one and note
    down its number, which in this case is 2:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个开放的问题为例，假设如下所示，并记下它的编号，这里是2：
- en: '![](img/00136.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: 'Then, make a commit, which, in its message, has one of the preceding keywords,
    referencing the preceding issue number. We will follow the GitHub flow that we
    learned in this chapter, so first create a new branch:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进行一次提交，在其消息中使用前面提到的关键词，并引用前述问题编号。我们将遵循本章所学的 GitHub 流程，所以首先创建一个新分支：
- en: '[PRE2]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the sake of our example, I modified one file in the repository and then
    committed it with the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，我修改了仓库中的一个文件，并提交了以下内容：
- en: '[PRE3]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, open a new pull request to merge the branch we just created, and merge
    it like you learned in this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开一个新的拉取请求来合并我们刚刚创建的分支，并按照本章所学进行合并。
- en: 'Going back to the issue tracker, you will no longer see issue `#2` among the
    open issues. Instead, go to the closed ones and you will see that issue `#2` is
    closed. GitHub provides all the necessary information:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 回到问题跟踪器，你将不再看到问题`#2`在打开的问题中。相反，去查看已关闭的问题，你会发现问题`#2`已经关闭。GitHub 提供了所有必要的信息：
- en: '![](img/00137.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: For more information on closing issues via commit messages, check out GitHub's
    documentation at [https://help.github.com/articles/closing-issues-using-keywords/](https://help.github.com/articles/closing-issues-using-keywords/).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于通过提交消息关闭问题的信息，请查看 GitHub 的文档：[https://help.github.com/articles/closing-issues-using-keywords/](https://help.github.com/articles/closing-issues-using-keywords/)。
- en: Task lists in pull requests
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉取请求中的任务列表
- en: A nice feature when submitting a pull request, which is a work in progress,
    is the task lists. A work in progress pull request would mean that you work on
    a specific feature/bug, and so on, but there are many changes that cannot be committed
    in one go and you also need someone to peer review your progress while working
    on it.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 提交拉取请求时的一个很棒的功能是任务列表。一个进行中的拉取请求意味着你正在处理一个特定的功能/错误等等，但有许多更改不能一次性提交，而且你还需要有人在你进行时进行同行评审。
- en: 'In this case, you will find task lists quite handy. Let''s create a pull request
    and, in the description box, add the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你会发现任务列表非常实用。我们来创建一个拉取请求，并在描述框中添加以下内容：
- en: '[PRE4]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result will be a list with checkboxes where you can manually check/uncheck
    the items whenever you complete a task:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个带有复选框的列表，你可以在完成任务时手动勾选/取消勾选这些项目：
- en: '![](img/00138.jpeg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: 'If you head over to the pull request tracker for an overview, you will see
    the task list showing the following pull request:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你前往拉取请求跟踪器查看概览，你将看到任务列表中显示以下拉取请求：
- en: '![](img/00139.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: 'This works for cross references as well, and since we referenced issue 2 in
    the task list, this will be recorded in the issue:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于交叉引用也有效，由于我们在任务列表中引用了问题2，这将会记录在该问题中：
- en: '![](img/00140.jpeg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: Task lists can also exist in issues.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 任务列表也可以存在于问题中。
- en: Downloading the diff of pull requests
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在下载拉取请求的差异
- en: For the hardcore fans of patch and diff files, GitHub has this nice feature
    where you can view and download the changes that a pull request introduces in
    the format of a patch. Simply append `.patch` to the URL of a pull request. For
    example, [https://github.com/github-essentials/github-essentials-v2/pull/6](https://github.com/github-essentials/github-essentials-v2/pull/6)
    becomes [https://github.com/github-essentials/github-essentials-v2/pull/6.patch](https://github.com/github-essentials/github-essentials-v2/pull/6.patch).
    The content of this file includes all the commits of a pull request.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于补丁和差异文件的忠实粉丝，GitHub 提供了一个很棒的功能，你可以查看并下载拉取请求所引入的更改，格式为补丁文件。只需在拉取请求的 URL 后加上
    `.patch` 后缀。例如， [https://github.com/github-essentials/github-essentials-v2/pull/6](https://github.com/github-essentials/github-essentials-v2/pull/6)
    就会变成 [https://github.com/github-essentials/github-essentials-v2/pull/6.patch](https://github.com/github-essentials/github-essentials-v2/pull/6.patch)。这个文件的内容包括拉取请求的所有提交。
- en: A global list of your open pull requests
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的所有开放拉取请求的全球列表
- en: Right next to the search bar at the top, there is a link named Pull requests
    that takes you to a page where you can find all your pull requests that are open.
    Go to [https://github.com/pulls](https://github.com/pulls) directly to visit this
    page.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部搜索栏旁边，有一个名为“拉取请求”的链接，点击后会带您到一个页面，您可以在该页面找到所有打开的拉取请求。直接访问[https://github.com/pulls](https://github.com/pulls)以查看此页面。
- en: Adding a LICENSE file using the web editor
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网页编辑器添加 LICENSE 文件
- en: 'Much like you can edit the already existing files, you can also create new
    ones. In this case, we want to add a license file, and GitHub provides a way of
    choosing among a variety of them. On your repository''s initial page, under the
    Code tab, click the Create new file button:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您可以编辑已经存在的文件一样，您也可以创建新文件。在这种情况下，我们想要添加一个许可证文件，GitHub 提供了多种选择方式。在您的仓库首页，点击“代码”选项卡下的“创建新文件”按钮：
- en: '![](img/00141.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'On the next page, type `LICENSE` so that the Choose a license template button
    appears:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页中，输入 `LICENSE`，以便出现“选择一个许可证模板”按钮：
- en: '![](img/00142.jpeg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: 'Click on it and choose a license from the ones GitHub provides. Once done,
    hit Review and submit:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它，然后从 GitHub 提供的选项中选择一个许可证。完成后，点击“审查并提交”：
- en: '![](img/00143.jpeg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: 'In the next step, you are called to commit your changes straight to the default
    branch or create a pull request. Once the changes are merged, if you navigate
    to the repository''s main page, you will see a link to the license file that you
    just committed:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，您需要将更改直接提交到默认分支，或者创建一个拉取请求。一旦更改合并，如果您导航到仓库的主页，您将看到一个指向您刚刚提交的许可证文件的链接：
- en: '![](img/00144.jpeg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00144.jpeg)'
- en: Here is an easter egg. You can type `LICENCE` the British way or type `LICENSE`
    the American way. GitHub is smart enough to respect this language quirk and, in
    fact, it doesn't even care about the case of the letters. For what it's worth,
    typing `LiCENce` or `liCEnSe` is still considered the same! Lastly, the word `copying`
    is also considered to be a synonym to license, so the previous examples apply
    to this word as well.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个彩蛋。您可以使用英国式的 `LICENCE` 或美国式的 `LICENSE`。GitHub 足够聪明，能够识别这种语言差异，实际上它甚至不在乎字母的大小写。值得一提的是，输入
    `LiCENce` 或 `liCEnSe` 仍然被视为相同！最后，单词 `copying` 也被视为许可证的同义词，因此之前的示例同样适用于这个词。
- en: Creating new directories using the web editor
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用网页编辑器创建新目录
- en: Apart from creating new files, you can also create new directories via the web
    editor. Just click on the Create new file button, like we demonstrated in the
    previous trick of choosing a license, and type the name of the directory ending
    with a slash (`/`). You can repeat this process as many times as you like.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建新文件，您还可以通过网页编辑器创建新目录。只需点击创建新文件按钮，像我们在之前选择许可证的技巧中演示的那样，然后输入以斜杠（`/`）结尾的目录名称。您可以根据需要重复此过程。
- en: The only caveat is that empty directories are not being picked up by Git and,
    by extension, by GitHub, so you will have to provide a file at the end if you
    want to commit this change.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的警告是空目录不会被 Git 识别，进而也不会被 GitHub 识别，因此如果您希望提交此更改，必须在目录中添加一个文件。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the GitHub workflow and the various ways to perform
    a pull request, as well as the many features that GitHub provides to make that
    workflow even smoother. This is how the majority of open source projects work
    when there are dozens of contributors involved.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了 GitHub 工作流以及执行拉取请求的各种方式，以及 GitHub 提供的多种功能，使得这一工作流更加顺畅。这就是大多数开源项目在有几十个贡献者参与时的工作方式。
- en: In the next chapter, we will see how to make pretty, static web pages that are
    hosted solely on GitHub and how to read the analytics that GitHub provides for
    each project.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何制作仅托管在 GitHub 上的漂亮静态网页，并了解 GitHub 为每个项目提供的分析工具。
