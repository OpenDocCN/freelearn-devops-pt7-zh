["```\n    mvn -Pfetch-wsdl -Djira.soapclient.jiraurl=http://{your_jira_instance}/\n    ```", "```\n    mvn -Pbuildclient\n    ```", "```\n    mvn eclipse:eclipse\n    ```", "```\n    JiraSoapServiceServiceLocator jiraSoapServiceLocator = new JiraSoapServiceServiceLocator();\n    ```", "```\n    JiraSoapService jiraSoapService = jiraSoapServiceLocator.getJirasoapserviceV2(new URL(your_url));\n    ```", "```\n    String token = jiraSoapService.login(your_username, your_password);\n    ```", "```\n    RemoteIssue issue = jiraSoapService.getIssue(authToken, ISSUE_KEY);\n    System.out.println(\"Retrieved Issue:\"+issue.getKey()+\" with Id:\"+issue.getId());\n    ```", "```\n    JiraSoapServiceServiceLocator jiraSoapServiceLocator = new JiraSoapServiceServiceLocator();\n    JiraSoapService jiraSoapService = jiraSoapServiceLocator.getJirasoapserviceV2(new URL(your_url));\n    String authToken = jiraSoapService.login(userName, password);\n    ```", "```\n    RemoteIssue issue = new RemoteIssue();\n    ```", "```\n    issue.setProject(PROJECT_KEY);\n    issue.setType(ISSUE_TYPE_ID);\n    issue.setSummary(\"Test Issue via my tutorial\");\n    issue.setPriority(PRIORITY_ID);\n    issue.setDuedate(Calendar.getInstance());\n    issue.setAssignee(\"\");\n    ```", "```\n    RemoteComponent component1 = new RemoteComponent();\n    component1.setId(COMPONENT_ID1);\n    RemoteComponent component2 = new RemoteComponent();\n    component2.setId(COMPONENT_ID2);\n    issue.setComponents(new RemoteComponent[] { component1, component2 });\n    ```", "```\n    RemoteVersion version = new RemoteVersion();\n    version.setId(VERSION_ID);\n    RemoteVersion[] remoteVersions = new RemoteVersion[] { version };\n    issue.setFixVersions(remoteVersions);\n    ```", "```\n    RemoteIssue createdIssue = jiraSoapService.createIssue(authToken, issue);\n    ```", "```\n    System.out.println(\"\\tSuccessfully created issue \" + createdIssue.getKey() + \" with ID:\" + createdIssue.getId());\n    ```", "```\n    RemoteCustomFieldValue customFieldValue = new RemoteCustomFieldValue(CUSTOM_FIELD_KEY, \"\", new String[] { CUSTOM_FIELD_VALUE1, CUSTOM_FIELD_VALUE2 });\n    ```", "```\n    RemoteCustomFieldValue customFieldValue = new RemoteCustomFieldValue(CUSTOM_FIELD_KEY_2, \"PARENT_KEY\", new String[] { CUSTOM_FIELD_VALUE_2 });\n    ```", "```\n    RemoteCustomFieldValue customFieldValue = new RemoteCustomFieldValue(\"customfield_10061\", \"1\", new String[] { \"Some Val\" });\n\n    RemoteCustomFieldValue customFieldValue = new RemoteCustomFieldValue(\"customfield_10061:1\", null, new String[] { \"Some Val\" });\n    ```", "```\n    RemoteCustomFieldValue[] customFieldValues = new RemoteCustomFieldValue[] { customFieldValue1, customFieldValue2 };\n    issue.setCustomFieldValues(customFieldValues);\n    ```", "```\n    RemoteIssue createdIssue = jiraSoapService.createIssue(authToken, issue);\n    ```", "```\nRemoteFieldValue[] actionParams = new RemoteFieldValue[] { new RemoteFieldValue(CUSTOM_FIELD_KEY, new String[] { CUSTOM_FIELD_VALUE }) };\n```", "```\nRemoteIssue updatedIssue = jiraSoapService.updateIssue(authToken, ISSUE_KEY, actionParams);\n```", "```\nRemoteCustomFieldValue[] cfValues = issue.getCustomFieldValues();\nfor (RemoteCustomFieldValue remoteCustomFieldValue : cfValues) {\n  String[] values = remoteCustomFieldValue.getValues();\n  for (String value : values) {\n    System.out.println(\"Value for CF with Id:\" + remoteCustomFieldValue.getCustomfieldId() + \" -\" + value);\n  }\n}\n```", "```\n    File file = new File(\"var/tmp/file.txt\");\n    ```", "```\n    // create FileInputStream object\n    FileInputStream fin = new FileInputStream(file);\n\n    /*\n    * Create byte array large enough to hold the content of the file.\n    * Use File.length to determine size of the file in bytes.\n    */\n    fileContent = new byte[(int) file.length()];\n\n    /*\n    * To read content of the file in byte array, use int read(byte[]\n    * byteArray) method of java FileInputStream class.\n    */\n    fin.read(fileContent);\n    fin.close();\n    ```", "```\n    String base64encodedFileData = new BASE64Encoder().encode(fileContent);\n    ```", "```\n    String[] encodedData = new String[] { base64encodedFileData };\n    ```", "```\n    boolean attachmentAdded = jiraSoapService.addBase64EncodedAttachmentsToIssue(authToken, ISSUE_KEY, new String[] { \"test.txt\" }, encodedData);\n    ```", "```\n    File file = new File(filePath);\n    FileInputStream fin = new FileInputStream(file);\n    fileContent = new byte[(int) file.length()];\n    fin.read(fileContent);\n    fin.close();\n    ```", "```\n    byte[][] files = new byte[1][];\n    files[0] = fileContent;\n    ```", "```\n    boolean attachmentAdded = jiraSoapService.addAttachmentsToIssue(authToken, ISSUE_KEY, new String[] {\"test.txt\" }, files);\n    ```", "```\n    RemoteAttachment[] attachments = jiraSoapService.getAttachmentsFromIssue(authToken, ISSUE_KEY);\n    ```", "```\n    System.out.println(\"Attachment Name:\" + remoteAttachment.getFilename() + \", Id:\"+ remoteAttachment.getId());\n    ```", "```\n    System.out.println(\"URL: \"+ BASE_URL+ \"/secure/attachment/\" + remoteAttachment.getId() + \"/\"+ remoteAttachment.getFilename());\n    ```", "```\n    RemoteWorklog worklog = new RemoteWorklog();\n    worklog.setTimeSpent(\"1d 3h\");\n    worklog.setComment(\"Some comment!\");\n    worklog.setGroupLevel(\"jira-users\");\n    worklog.setStartDate(new GregorianCalendar(2011, Calendar.MAY, 10));\n    ```", "```\n    RemoteWorklog work = jiraSoapService.addWorklogAndAutoAdjustRemainingEstimate(authToken, ISSUE_KEY, worklog);System.out.println(\"Added work:\" + work.getId());\n    ```", "```\n    RemoteWorklog work = jiraSoapService.addWorklogAndRetainRemainingEstimate(authToken, ISSUE_KEY, worklog);\n    ```", "```\n    RemoteWorklog work = jiraSoapService.addWorklogWithNewRemainingEstimate(authToken, ISSUE_KEY, worklog, \"1d\");\n    ```", "```\njiraSoapService.updateWorklogWithNewRemainingEstimate(authToken, work, \"1d\");\njiraSoapService.deleteWorklogAndRetainRemainingEstimate(authToken, work.getId());\n```", "```\n    final RemoteComment comment = new RemoteComment();\n    comment.setBody(COMMENT_BODY);\n    //comment.setRoleLevel(ROLE_LEVEL); // Id of your project role\n    comment.setGroupLevel(null); // Make it visible to all\n    ```", "```\n    jiraSoapService.addComment(authToken, ISSUE_KEY, comment);\n    ```", "```\n    RemoteComment[] comments = jiraSoapService.getComments(authToken, ISSUE_KEY);\n    for (RemoteCommentremoteComment : comments) {\n      System.out.println(\"Comment:\" + remoteComment.getBody() + \" written by \" + remoteComment.getAuthor());\n    }\n    ```", "```\n// Check permissions first\nif (jiraSoapService.hasPermissionToEditComment(authToken, comment)) {\n  comment.setBody(COMMENT_BODY + \" Updated\");\n  comment.setGroupLevel(\"jira-users\"); \n  jiraSoapService.editComment(authToken, comment);\n}\n```", "```\n//Create group jtricks-test-group\nRemoteGroup group = jiraSoapService.createGroup(authToken, \"jtricks-test-group\", null);\n//Create user jtricks-test-user\nRemoteUser user = jiraSoapService.createUser(authToken, \"jtricks-test-user\", \"password\", \"Test User\", \"support@j-tricks.com\");\n```", "```\njiraSoapService.addUserToGroup(authToken, group, user);\n```", "```\nRemoteUser user = jiraSoapService.getUser(authToken, \"jtricks-test-user\");\nRemoteGroup group = jiraSoapService.getGroup(authToken, \"jtricks-test-group\");\n```", "```\nRemoteUser[] users = group.getUsers();\nfor (RemoteUser remoteUser : users) {\n  System.out.println(\"Full Name:\"+remoteUser.getFullname());\n}\n```", "```\n//Delete User.\njiraSoapService.deleteUser(authToken, user1.getName());\n//Delete Group. \njiraSoapService.deleteGroup(authToken, group1.getName(), group.getName());\n```", "```\n    <action id=\"5\" name=\"Resolve Issue\" view=\"resolveissue\">\n    ```", "```\n    RemoteFieldValue field1 = new RemoteFieldValue(\"resolution\", new String[] { \"3\" });\n    RemoteFieldValue field2 = new RemoteFieldValue(\"assignee\", new String[] { \"jobinkk\" });\n    ```", "```\n    RemoteIssue updatedtissue = jiraSoapService.progressWorkflowAction(authToken, ISSUE_KEY, \"5\", new RemoteFieldValue[] { field1, field2 });\n    ```", "```\n    System.out.println(\"Progressed \"+updatedtissue.getKey()+ \" to \" + updatedtissue.getStatus() + \" status!\");\n    ```", "```\n    RemoteVersion remoteVersion = new RemoteVersion();\n    remoteVersion.setName(\"Test Release\");\n    remoteVersion.setReleaseDate(new GregorianCalendar(2011, Calendar.MAY, 10));\n    remoteVersion.setSequence(5L);\n    ```", "```\n    RemoteVersion createdVersion = jiraSoapService.addVersion(authToken, \"TST\", remoteVersion);\n    System.out.println(\"Created version with id:\"+createdVersion.getId());\n    ```", "```\ncreatedVersion.setReleased(true);\njiraSoapService.releaseVersion(authToken, \"TST\", createdVersion);\n```", "```\n// Archives version with name \"Test release\" in project with key JRA\njiraSoapService.archiveVersion(authToken, \"JRA\", \"Test Release\", true);\n```", "```\nRemoteVersion[] versions = jiraSoapService.getVersions(authToken, \"JRA\");\n```", "```\n    RemotePermissionScheme permScheme = jiraSoapService.createPermissionScheme(authToken, \"Test P Scheme\", \"Test P Description\");\n    ```", "```\n    RemotePermissionScheme modifiedPermScheme = jiraSoapService.addPermissionTo(authToken, permScheme, adminPermission, user);\n    ```", "```\n    RemotePermission[] permissions = jiraSoapService.getAllPermissions(authToken);\n    RemotePermission adminPermission = null;\n    for (RemotePermission remotePermission : permissions) {\n      if (remotePermission.getPermission().equals(23L)) {\n        adminPermission = remotePermission;\n        break;\n      }\n    }\n    ```", "```\n    RemoteUser user = jiraSoapService.getUser(authToken, \"jobinkk\");\n    ```", "```\n    RemoteProject project = jiraSoapService.createProject(authToken, \"TEST\", \"Test Name\", \"Test Description\", \"http://www.j-tricks.com\", \"jobinkk\", permScheme, null, null);\n    ```", "```\n    jiraSoapService.addActorsToProjectRole(authToken, new String[] { \"jobinkk\" }, adminRole, project,\t\"atlassian-user-role-actor\");\n    ```", "```\n    RemoteProjectRoleadminRole = jiraSoapService.getProjectRole(authToken, 10020L);\n    ```", "```\n    <dependency>\n      <groupId>atlassian-jira-rpc-plugin</groupId>\n      <artifactId>atlassian-jira-rpc-plugin</artifactId>\n      <version>3.13-1</version>\n      <scope>provided</scope>\n    </dependency>\n    ```", "```\n    mvn install:install-file -DgroupId=atlassian-jira-rpc-plugin -DartifactId=atlassian-jira-rpc-plugin -Dversion=3.13-1 -Dpackaging=jar -Dfile=atlassian-jira-rpc-plugin-3.13-1.jar\n    ```", "```\n    <rpc-soap key=\"jtricks-soap-service\" name=\"JTricks SOAP Service\" class=\"com.jtricks.JTricksSoapServiceImpl\">\n      <description>JTricks SOAP service.</description>\n      <service-path>jtricksservice</service-path>\n      <published-interface>com.jtricks.JTricksSoapService</published-interface>\n    </rpc-soap>\n    ```", "```\n    <component key=\"jtricks-soap-component\" name=\"JTricks SOAP Component\" class=\"com.jtricks.JTricksSoapServiceImpl\">\n      <interface>com.jtricks.JTricksSoapService</interface>\n    </component>\n    ```", "```\n    public interface JTricksSoapService {\n      String login(String username, String password);   \n      // Method to return Project Categories\n      RemoteCategory[] getProjectCategories(String token) throws RemoteException;\n    }\n    ```", "```\n    public class RemoteCategory extends AbstractNamedRemoteEntity {\n      private String description;\n      public RemoteCategory(GenericValue value) {\n        super(value);\n        this.description = value.getString(\"description\");\n      }\n\n      public void setDescription(String description) {\n        this.description = description;\n      }\n\n      public String getDescription() {\n        return description;\n      }\n    }\n    ```", "```\n    public RemoteCategory[] getProjectCategories(String token) throws RemoteException {\n      validateToken(token);\n\n      Collection<GenericValue> categories = projectManager.getProjectCategories();\n      RemoteCategory[] remoteCategories = new RemoteCategory[categories.size()];\n\n      int i = 0;\n      for (GenericValue category : categories) {\n        remoteCategories[i++] = new RemoteCategory(category);\n      }\n      return remoteCategories;\n    }\n    ```", "```\n    private void validateToken(String token) {\n      try {\n        User user = tokenManager.retrieveUser(token);\n      } catch (RemoteAuthenticationException e) {\n        throw new RuntimeException(\"Error Authenticating!,\"+e.toString());\n      } catch (RemotePermissionException e) {\n      throw new RuntimeException(\"User does not have permission for this operation,\"+e.toString());\n    }\n    }\n    ```", "```\n    public JTricksSoapServiceImpl(ProjectManagerprojectManager, TokenManagertokenManager) {\n      this.projectManager = projectManager;\n      this.tokenManager = tokenManager;\n    }\n    ```", "```\n    public String login(String username, String password) {\n      try {\n        return tokenManager.login(username, password);\n      } catch (RemoteAuthenticationException e) {\n        throw new RuntimeException(\"Error Authenticating!,\"+e.toString());\n      } catch (com.atlassian.jira.rpc.exception.RemoteException e) {\n        throw new RuntimeException(\"Couldn't login,\"+e.toString());\n      }\n    }\n    ```", "```\n    <dependency>\n      <groupId>atlassian-jira-rpc-plugin</groupId>\n      <artifactId>atlassian-jira-rpc-plugin</artifactId>\n      <version>3.13-1</version>\n      <scope>provided</scope>\n    </dependency>\n    ```", "```\n    <rpc-xmlrpc key=\"xmlrpc\" name=\"JTricks XML-RPC Services\" class=\"com.jtricks.XmlRpcServiceImpl\">\n      <description>The JTricks sample XML-RPC services.</description><service-path>jtricks</service-path>\n    </rpc-xmlrpc>\n    ```", "```\n    public interface XmlRpcService {\t\n      String login(String username, String password) throws Exception;    \n      Vector getprojectCategories(String token);\n    }\n    ```", "```\n    public class RemoteCategory extends AbstractNamedRemoteEntity {\n      private String description;\n\n      public RemoteCategory(GenericValue value) {\n        super(value);\n        this.description = value.getString(\"description\");\n      }\n\n      public void setDescription(String description) {\n        this.description = description;\n      }\n\n      public String getDescription() {\n        return description;\n      }\n    }\n    ```", "```\n    public Vector getprojectCategories(String token) {\n      validateToken(token);\n\n    Collection<GenericValue> categories = projectManager.getProjectCategories();\n      RemoteCategory[] remoteCategories = new RemoteCategory[categories.size()];\n\n      int i = 0;\n      for (GenericValue category : categories) {\n        remoteCategories[i++] = new RemoteCategory(category);\n      }\n      return RpcUtils.makeVector(remoteCategories);\n    }\n    ```", "```\n    RpcUtils.makeStruct(remoteCategory);\n    ```", "```\n    <dependency>\n      <groupId>xmlrpc</groupId>\n      <artifactId>xmlrpc</artifactId>\n      <version>1.1</version>\n    </dependency>\n    ```", "```\n    XmlRpcClientrpcClient = new XmlRpcClient(JIRA_URI + RPC_PATH);\n    ```", "```\n    // Login and retrieve logon token\n    Vector loginParams = new Vector(2);\n    loginParams.add(USER_NAME);\n    loginParams.add(PASSWORD);\n    String loginToken = (String) rpcClient.execute(\"jira1.login\", loginParams);\n    System.out.println(\"Logged in: \" + loginToken);\n    ```", "```\n    // Retrieve projects\n    Vector loginTokenVector = new Vector(1);\n    loginTokenVector.add(loginToken);\n    List projects = (List) rpcClient.execute(\"jira1.getProjectsNoSchemes\",   loginTokenVector);\n    ```", "```\n    for (Iterator iterator = projects.iterator(); iterator.hasNext();) {\n      Map project = (Map) iterator.next();\n      System.out.println(project.get(\"name\") + \" with lead \" + project.get(\"lead\"));\n    }\n    ```", "```\n    Boolean bool = (Boolean) rpcClient.execute(\"jira1.logout\", loginTokenVector);\n    ```", "```\n    // Retrieve Categories\n    Vector loginTokenVector = new Vector(1);\n    loginTokenVector.add(loginToken);\n    List categories = (List) rpcClient.execute(\"jtricks.getprojectCategories\", loginTokenVector);\n    for (Iterator iterator = categories.iterator(); iterator.hasNext();) {\n      Map category = (Map) iterator.next();\n      System.out.println(category.get(\"name\"));\n    }\n    ```", "```\n    <dependency>\n      <groupId>javax.ws.rs</groupId>\n      <artifactId>jsr311-api</artifactId>\n      <version>1.0</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.xml.bind</groupId>\n      <artifactId>jaxb-api</artifactId>\n      <version>2.1</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.atlassian.plugins.rest</groupId>\n      <artifactId>atlassian-rest-common</artifactId>\n      <version>1.0.2</version>\n      <scope>provided</scope>\n    </dependency>\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>servlet-api</artifactId>\n      <version>2.3</version>\n      <scope>provided</scope>\n    </dependency>\n    ```", "```\n    <rest key=\"rest-service-resources\" path=\"/jtricks\" version=\"1.0\">\n      <description>Provides the REST resource for the tutorial plugin.</description>\n    </rest>\n    ```", "```\n    @XmlRootElement\n    public static class Category{\n      @XmlElement\n      private String id;\n\n      @XmlElement\n      private String name;\n      public Category(){\n      }\n\n      public Category(String id, String name) {\n        this.id = id;\n        this.name = name;\n      }\n    }\n    ```", "```\n    @XmlRootElement\n    public class Categories{\n      @XmlElement\n      private List<Category> categories;\n\n      public Categories(){\t\n      }\n\n      public Categories(List<Category> categories) {\n        this.categories = categories;\n      }\n    }\n    ```", "```\n    BASE_URL/rest/jtricks/1.0/X/Y/Z\n    ```", "```\n    package com.jtricks;\n    ................\n\n    @Path(\"/category\")\n    public class CategoryResource {\n      ..................\n    }\n    ```", "```\n    @GET\n    @AnonymousAllowed\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public Response getCategories() throws SearchException {  Collection<GenericValue> categories = this.projectManager.getProjectCategories();\n      List<Category> categoryList =  new ArrayList<Category>();\t\tfor (GenericValue category : categories) {\n        categoryList.add(new Category(category.getString(\"id\"), category.getString(\"name\")));\n      }\n      Response.ResponseBuilder responseBuilder = Response.ok(new Categories(categoryList));\n      return responseBuilder.build();\n    }\n    ```", "```\n    @QueryParam\n\n    ```", "```\n    @GET\n    @AnonymousAllowed\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    public Response getCategories(@QueryParam(\"dummyParam\") String dummyParam) throws SearchException {\n      System.out.println(\"This is just a dummyParam to show how parameters can be passed to REST methods:\"+dummyParam);  ................\n                       return responseBuilder.build();\n    }\n    ```", "```\n    @PathParam\n\n    @GET\n    @AnonymousAllowed\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n    @Path(\"/{id}\")\n    public Response getCategoryFromId(@PathParam(\"id\") String id) throws SearchException {\n      GenericValue category = this.projectManager.getProjectCategory(new Long(id));  Response.ResponseBuilderresponseBuilder = Response.ok(new Category(category.getString(\"id\"), category.getString(\"name\")));\n      return responseBuilder.build();\n    }\n    ```", "```\n    BASE_URL/rest/jtricks/1.0/category/10010\n    ```", "```\n    <dependency>\n      <groupId>com.atlassian.jira</groupId>\n      <artifactId>jira-rest-java-client</artifactId>\n      <version>0.2.1</version>\n    </dependency>\n    ```", "```\n    JerseyJiraRestClientFactory factory = new JerseyJiraRestClientFactory();\n    URI uri = new URI(\"http://localhost:8080/jira\");\n    JiraRestClient jiraRestClient = factory.createWithBasicHttpAuthentication(uri, \"username\", \"password\");\n    ```", "```\n    NullProgressMonitor nullProgressMonitor = new NullProgressMonitor();\n    ```", "```\n    IssueRestClient issueRestClient = jiraRestClient.getIssueClient();\n    ```", "```\n    Issue issue = issueRestClient.getIssue(\"TST-10\", nullProgressMonitor);\n    System.out.println(issue);\n    ```", "```\n    issueRestClient.vote(issue.getVotesUri(), nullProgressMonitor);\n    ```", "```\n    Iterable<Transition> transitions = issueRestClient.getTransitions(issue.getTransitionsUri(), nullProgressMonitor);\n    ```", "```\n    private static Transition getTransitionByName(Iterable<Transition> transitions, String transitionName) {\n      for (Transition transition : transitions) {\n        if (transition.getName().equals(transitionName)) {\n          return transition;\n        }\n      }\n      return null;\n    }\n    ```", "```\n    Collection<FieldInput>fieldInputs = Arrays.asList(new FieldInput(\"resolution\", \"Done\"));\n    ```", "```\n    Comment.valueOf(\"New comment\");\n    ```", "```\n    issueRestClient.transition(issue.getTransitionsUri(), new TransitionInput(startProgressTransition.getId(), fieldInputs, Comment.valueOf(\"New comment\")),nullProgressMonitor);\n    ```"]