["```\n    private static final String ROLE_NAME = \"role\";\n    private static final String ROLES = \"roles\";\n    ………….\n    @Override\n    protected void getVelocityParamsForEdit(Map<String, Object> velocityParams, AbstractDescriptor descriptor) {\n        velocityParams.put(ROLE, getRole(descriptor));\n        velocityParams.put(ROLES, getProjectRoles());\n    }\n\n      @Override\n      protected void getVelocityParamsForInput(Map<String, Object> velocityParams) {\n        velocityParams.put(ROLES, getProjectRoles());\n      }\n\n      @Override\n      protected void getVelocityParamsForView(Map<String, Object> velocityParams, AbstractDescriptor descriptor) {\n        velocityParams.put(ROLE, getRole(descriptor));\n      }\n    ```", "```\n        private ProjectRole getRole(AbstractDescriptor descriptor){\n            if (!(descriptor instanceof ConditionDescriptor)) {\n              throw new IllegalArgumentException(\"Descriptor must be a ConditionDescriptor.\");\n            }\n\n            ConditionDescriptor functionDescriptor = (ConditionDescriptor) descriptor;\n\n            String role = (String) functionDescriptor.getArgs().get(ROLE);\n            if (role!=null && role.trim().length()>0)\n              return getProjectRole(role);\n            else \n              return null;\n        }\n        ```", "```\n        <tr bgcolor=\"#ffffff\">\n            <td align=\"right\" valign=\"top\" bgcolor=\"#fffff0\">\n                <span class=\"label\">Project Role:</span>\n            </td>\n            <td bgcolor=\"#ffffff\" nowrap>\n                <select name=\"role\" id=\"role\">\n                #foreach ($field in $roles)\n                  <option value=\"${field.id}\"\n                    #if ($role && (${field.id}==${role.id}))\n                        SELECTED\n                    #end\n                    >$field.name</option>\n                #end\n                </select>\n                <br><font size=\"1\">Select the role in which the user should be present!</font>\n            </td>\n                   </tr>\n        ```", "```\n        #if ($role)\n          User should have ${role.name} Role!\n        #else\n          Role Not Defined\n        #end\n        ```", "```\n    public boolean passesCondition(Map transientVars, Map args, PropertySet ps) throws WorkflowException {\n        Issue issue = getIssue(transientVars);\n        User user = getCaller(transientVars, args);\n\n        project project = issue.getProjectObject();\n        String role = (String)args.get(ROLE);\n        Long roleId = new Long(role);\n\n        return projectRoleManager.isUserInProjectRole(user, projectRoleManager.getProjectRole(roleId), project);\n    }\n    ```", "```\n    public Map<String, String> getDescriptorParams(Map<String, Object> conditionParams) {\n        if (conditionParams != null && conditionParams.containsKey(ROLE))\n            {\n                return EasyMap.build(ROLE, extractSingleParam(conditionParams, ROLE));\n            }\n            // Create a 'hard coded' parameter\n            return EasyMap.build();\n      }\n    ```", "```\n    <workflow-condition key=\"role-condition\" name=\"Role Based Condition\"  class=\"com.jtricks.RoleConditionFactory\">\n        <description>Role Based Workflow Condition</description>\n        <condition-class>com.jtricks.RoleCondition</condition-class>\n        <resource type=\"velocity\" name=\"view\"  location=\"templates/com/jtricks/view-roleCondition.vm\"/>\n        <resource type=\"velocity\" name=\"input-parameters\" location=\"templates/com/jtricks/edit-roleCondition.vm\"/>\n        <resource type=\"velocity\" name=\"edit-parameters\"  location=\"templates/com/jtricks/edit-roleCondition.vm\"/>\n    </workflow-condition>\n    ```", "```\n    @Override\n    protected void getVelocityParamsForEdit(Map velocityParams, AbstractDescriptor descriptor) {\n      velocityParams.put(FIELD_NAME, getFieldName(descriptor));\n      velocityParams.put(FIELDS, getCFFields());\n    }\n\n    @Override\n    protected void getVelocityParamsForInput(Map velocityParams) {\n        velocityParams.put(FIELDS, getCFFields());\n    }\n\n    @Override\n    protected void getVelocityParamsForView(Map velocityParams, AbstractDescriptor descriptor) {\n        velocityParams.put(FIELD_NAME, getFieldName(descriptor));\n    }\n    ```", "```\n        private String getFieldName(AbstractDescriptor descriptor){\n          if (!(descriptor instanceof ValidatorDescriptor)) {\n            throw new IllegalArgumentException('Descriptor must be a ValidatorDescriptor.');\n          }\n\n          ValidatorDescriptor validatorDescriptor = (ValidatorDescriptor) descriptor;\n\n          String field = (String) validatorDescriptor.getArgs().get(FIELD_NAME);\n          if (field != null && field.trim().length() > 0)\n            return field;\n          else\n            return NOT_DEFINED;\n        }\n        ```", "```\n        <tr bgcolor=\"#ffffff\">\n          <td align=\"right\" valign=\"top\" bgcolor=\"#fffff0\">\n            <span class=\"label\">Custom Fields :</span>\n          </td>\n          <td bgcolor=\"#ffffff\" nowrap>\n            <select name=\"field\" id=\"field\">\n            #foreach ($cf in $fields)\n              <option value=\"$cf.name\"\n                #if ($cf.name.equals($field)) SELECTED #end\n              >$cf.name</option>\n            #end\n            </select>\n            <br><font size=\"1\">Select the Custom Field to be validated for NULL</font>\n          </td>\n        </tr>\n        ```", "```\n        #if ($field)\n          Field '$field' is Required!\n        #end\n        ```", "```\n    public void validate(Map transientVars, Map args, PropertySet ps) throws InvalidInputException, WorkflowException {\n        Issue issue = (Issue) transientVars.get(\"issue\");\n        String field = (String) args.get(FIELD_NAME);  \n        CustomField customField = customFieldManager.getCustomFieldObjectByName(field);\n\n        if (customField!=null){\n          //Check if the custom field value is NULL\n          if (issue.getCustomFieldValue(customField) == null){\n            throw new InvalidInputException(\"The field:\"+field+\" is\n                 required!\"); }\n        }\n      }\n    ```", "```\n    <workflow-validator key=\"field-validator\" name=\"Field Validator\"  class=\"com.jtricks.FieldValidatorFactory\">\n        <description>Field Not Empty Workflow Validator</description>\n\n        <validator-class>com.jtricks.FieldValidator</validator-class>\n\n        <resource type=\"velocity\" name=\"view\" location=\"templates/com/jtricks/view-fieldValidator.vm\"/><resource type=\"velocity\" name=\"input-parameters\" location=\"templates/com/jtricks/edit-fieldValidator.vm\"/>\n        <resource type=\"velocity\" name=\"edit-parameters\" location=\"templates/com/jtricks/edit-fieldValidator.vm\"/>\n    </workflow-validator>\n    ```", "```\n    @Override\n    protected void getVelocityParamsForEdit(Map velocityParams, AbstractDescriptor descriptor) {velocityParams.put(USER_NAME, getUserName(descriptor));\n    }\n\n    @Override\n    protected void getVelocityParamsForInput(Map velocityParams) {\n        velocityParams.put(USER_NAME, CURRENT_USER); }\n\n    @Override\n    protected void getVelocityParamsForView(Map velocityParams, AbstractDescriptor descriptor) {\n        velocityParams.put(USER_NAME, getUserName(descriptor));\n    }\n    ```", "```\n        private String getUserName(AbstractDescriptor descriptor){\n            if (!(descriptor instanceof FunctionDescriptor)) {\n              throw new IllegalArgumentException(\"Descriptor must be a FunctionDescriptor.\");\n            }\n\n            FunctionDescriptor functionDescriptor = (FunctionDescriptor) descriptor;\n\n            String user = (String) functionDescriptor.getArgs().get(USER_NAME);\n            if (user!=null && user.trim().length()>0)return user;\n            else \n              return CURRENT_USER;\n        } \n        ```", "```\n        <tr bgcolor=\"#ffffff\">\n          <td align=\"right\" valign=\"top\" bgcolor=\"#fffff0\">\n            <span class=\"label\">User Name :</span>\n          </td>\n          <td bgcolor=\"#ffffff\" nowrap>\n            <input type=\"text\" name=\"user\" value=\"$user\"/>            <br><font size=\"1\"> Enter the userName to be set on the Test User CustomField </font>\n          </td>\n        </tr>\n        ```", "```\n        \t#if ($user)\n          The 'Test User' CF will be set with value : $user!\n        #end\n        ```", "```\n    public void execute(Map transientVars, Map args, PropertySet ps) throws WorkflowException {\n        MutableIssue issue = getIssue(transientVars);\n        User user = null;\n\n        if (args.get(\"user\") != null) {\n          String userName = (String) args.get(\"user\");\n          if (userName.equals(\"Current User\")){\n            // Set the current user here!\n            user = authContext.getUser();\n          } else {\n            user = userUtil.getUser(userName);\n          }\n        } else {\n          // Set the current user here!\n          user = authContext.getUser();\n        }\n        // Now set the user value to the custom field\n        CustomField userField = customFieldManager.getCustomFieldObjectByName(\"Test User\");\n        if (userField != null) {\n          try {\n            setUserValue(issue, user, userField);\n          } catch (FieldLayoutStorageException e) {\n            System.out.println(\"Error while setting the user Field\");\n          }\n        }\n     }\n    ```", "```\n    private void setUserValue(MutableIssue issue, User user, CustomField userField) throws FieldLayoutStorageException {\n        issue.setCustomFieldValue(userField, user);\n        Map modifiedFields = issue.getModifiedFields();\n        FieldLayoutItem fieldLayoutItem = ComponentManager.getInstance().getFieldLayoutManager().getFieldLayout(issue).getFieldLayoutItem(userField);\n        DefaultIssueChangeHolder issueChangeHolder = new DefaultIssueChangeHolder();\n        final ModifiedValue modifiedValue = (ModifiedValue) modifiedFields.get(userField.getId());    userField.updateValue(fieldLayoutItem, issue, modifiedValue, issueChangeHolder);\n    }\n    ```", "```\n    <workflow-function key=\"set-usercf\" name=\"Set User CF Post Function\" class=\"com.jtricks.SetUserCFFunctionFactory\">\n        <description>Set Defined User or Current User</description>\n        <function-class>com.jtricks.SetUserCFFunction</function-class>\n        <orderable>true</orderable>\n        <unique>false</unique>\n        <deletable>true</deletable>\n\n        <resource type=\"velocity\" name=\"view\" location=\"templates/com/jtricks/view-userCFFunction.vm\"/>\n        <resource type=\"velocity\" name=\"input-parameters\"  location=\"templates/com/jtricks/edit-userCFFunction.vm\"/>\n        <resource type=\"velocity\" name=\"edit-parameters\" location=\"templates/com/jtricks/edit-userCFFunction.vm\"/>\n\n    </workflow-function>\n    ```", "```\nJiraWorkflow workflow = workflowManager.getWorkflow(issue);\nStepDescriptor currentStep = workflow.getLinkedStep(ManagerFactory.getConstantsManager().getStatus(status));\nMap properties = currentStep.getMetaAttributes();\n```", "```\n    JiraWorkflow workFlow = componentManager.getWorkflowManager().getWorkflow(issue);\n    ```", "```\n    GenericValue status = issue.getStatusObject().getGenericValue();\n    com.opensymphony.workflow.loader.StepDescriptor currentStep = workFlow.getLinkedStep(status);\n    ```", "```\n    List<ActionDescriptor> actions = currentStep.getActions();\n    ```", "```\n    for (ActionDescriptor action : actions) {\n        System.out.println(\"Action: \"+action.getName())\n     }\n    ```", "```\nprivate int getActionIdForTransition(List<ActionDescriptor> actions, String actionName) {\n  for (ActionDescriptor action : actions) {\n    if (action.getName().equals(actionName)) {\n               return action.getId();\n          }\n  }\n  return -1; // Handle invalid action\n}\n```", "```\n    IssueService issueService = ComponentManager.getInstance().getIssueService();\n    ```", "```\n    IssueInputParameters issueInputParameters = new IssueInputParametersImpl();\n    issueInputParameters.setAssigneeId(\"someotherguy\");\n    issueInputParameters.setResolutionId(\"10000\");\n    ```", "```\n    TransitionValidationResult transitionValidationResult = issueService.validateTransition(user, 12345L, 10000L, issueInputParameters);\n    ```", "```\n    if (transitionValidationResult.isValid()){\n            IssueResult transitionResult = issueService.transition(user, transitionValidationResult);\n            if (!transitionResult.isValid()){\n                // Do something\n            }\n    }\n    ```", "```\nWorkflowTransitionUtil workflowTransitionUtil = (WorkflowTransitionUtil) JiraUtils .loadComponent(WorkflowTransitionUtilImpl.class);\n```", "```\nMap paramMap = EasyMap.build(); \nparamMap.put(IssueFieldConstants.RESOLUTION, \"10000\");  paramMap.put(IssueFieldConstants.COMMENT, comment);\n```", "```\nworkflowTransitionUtil.setParams(paramMap);  workflowTransitionUtil.setIssue(12345L);  workflowTransitionUtil.setUsername(user);  workflowTransitionUtil.setAction(10000L);\n```", "```\nErrorCollection c1 = workflowTransitionUtil.validate();\n```", "```\nErrorCollection c2 = workflowTransitionUtil.progress();\n```", "```\n    select id from jiraissue where pkey = \"JIRA-123\"\n\n    ```", "```\n    select id from changegroup where issueid = '10010'\n\n    ```", "```\n    select oldstring, newstring from changeitem where fieldtype = \"jira\" and field = \"status\" and groupid in ( 10000, 10010 )\n\n    ```", "```\nselect oldstring, newstring from changeitem where fieldtype = \"jira\" and field = \"status\" and groupid in ( select id from changegroup where issueid = '10010');\n\n```", "```\nselect ci.oldstring, ci.newstring, cg.created from changeitem ci inner join changegroup cg on ci.groupid = cg.id where ci.fieldtype = \"jira\" and ci.field = \"status\" and cg.issueid = '10010';\n\n```", "```\n    <action id=\"6\" name=\"Start Again\">\n      <meta name=\"jira.description\">Testing Common Actions</meta> \n      <results>\n        <unconditional-result old-status=\"Finished\" status=\"Open\" step=\"1\">\n           <post-functions>\n             <function type=\"class\">\n               <arg name=\"class.name\">com.atlassian.jira.workflow.function.issue.UpdateIssueStatusFunction</arg>\n             </function>\n             <function type=\"class\">\n               <arg name=\"class.name\">com.atlassian.jira.workflow.function.misc.CreateCommentFunction</arg>\n             </function>\n             <function type=\"class\">\n               <arg name=\"class.name\">com.atlassian.jira.workflow.function.issue.GenerateChangeHistoryFunction</arg>\n             </function>\n             <function type=\"class\">\n               <arg name=\"class.name\">com.atlassian.jira.workflow.function.issue.IssueReindexFunction</arg>\n             </function>\n             <function type=\"class\">\n               <arg name=\"class.name\">com.atlassian.jira.workflow.function.event.FireIssueEventFunction</arg>\n                <arg name=\"eventTypeId\">13</arg>\n              </function>\n           </post-functions>\n        </unconditional-result>\n      </results>\n    </action>\n    ```", "```\n    <step id=\"1\" name=\"Open\">\n      <meta name=\"jira.status.id\">1</meta>\n      <actions>\n        <common-action id=\"..\" />\n        .....................\n        <common-action id=\"6\" />\n        <action id=\" .....\n        .......................\n        </action>\n      </actions>\n    </step>\n    ```", "```\n    updated <= -15d\n    ```", "```\n    <JiraJelly    >\n    <jira:Login username=\"jobinkk\" password=\"[password here]\">    <log:warn>Running Inactivate issues service</log:warn>\n        <!-- Properties for the script -->\n        <core:set var=\"comment\">Closing out this issue since it has been inactive for 15 days!</core:set>\n        <core:set var=\"workflowStep\" value=\"Close Issue\" />\n        <core:set var=\"workflowUser\" value=\"jobinkk\" />\n        <core:set var=\"filter15Days\" value=\"10010\" />\n\n        <!-- Run the SearchRequestFilter -->\n        <jira:RunSearchRequest filterid=\"${filter15Days}\" var=\"issues\" />\n\n        <core:forEach var=\"issue\" items=\"${issues}\">\n        <log:warn>Inactivating issue ${issue.key}</log:warn>\n\n         <jira:TransitionWorkflow key=\"${issue.key}\" user=\"${workflowUser}\" workflowAction=\"${workflowStep}\" comment=\"${comment}\"/>   </core:forEach>\n    </jira:Login>\n    </JiraJelly>\n    ```"]