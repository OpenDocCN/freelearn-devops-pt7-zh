["```\n# calculate SHA-1 identifier of blob object with Git\n$ printf \"foo\" | git hash-object -t blob --stdin\n19102815663d23f8b75a47e7a01965dcdc96468c\n# calculate SHA-1 identifier of blob object by hand\n$ printf \"blob 3\\0foo\" | sha1sum\n19102815663d23f8b75a47e7a01965dcdc96468c\n```", "```\n    $ git cat-file blob HEAD:COPYRIGHT\n    ```", "```\n    Copyright (c) 2014 Company\n    ```", "```\n    All Rights Reserved\n    ```", "```\n    $ git cat-file -p HEAD^{tree}\n    ```", "```\n    100644 blob 862aafd...\n    ```", "```\n    COPYRIGHT\n    ```", "```\n    100644 blob 25c3d1b...\n    ```", "```\n    Makefile\n    ```", "```\n    100644 blob bdf2c76...\n    ```", "```\n    README\n    ```", "```\n    040000 tree 7e44d2e...\n    ```", "```\n    git update-index command) with git write-tree.\n    ```", "```\n    $ git cat-file -p HEAD\n    ```", "```\n    tree 752f12f08996b3c0352a189c5eed7cd7b32f42c7\n    ```", "```\n    parent cbb91914f7799cc8aed00baf2983449f2d806686\n    ```", "```\n    parent bb71a804f9686c4bada861b3fcd3cfb5600d2a47\n    ```", "```\n    author Joe Hacker <joe@example.com> 1401584917 +0200\n    ```", "```\n    committer Bob Developer <bob@example.com> 1401584917 +0200\n    ```", "```\n    Merge remote branch 'origin/multiple'\n    ```", "```\n    $ git cat-file tag v0.2\n    ```", "```\n    object 5d2584867fe4e94ab7d211a206bc0bc3804d37a9\n    ```", "```\n    type commit\n    ```", "```\n    tag v0.2\n    ```", "```\n    tagger John Tagger <john@example.com> 1401585007 +0200\n    ```", "```\n    random v0.2\n    ```", "```\npick 89579c9 first commit in a branch\npick d996b71 second commit in a branch\npick 6c89dee third commit in a branch\n# Rebase 89579c9..6c89dee onto b8fffe1 (3 commands)\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#  d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n```", "```\n$ git rebase --interactive --exec \"make test\"\n```", "```\npick 89579c9 first commit in a branch\nexec make test\npick d996b71 second commit in a branch\nexec make test\npick 6c89dee third commit in a branch\nexec make test\n```", "```\n$ git filter-repo --path 'passwords.txt' --invert-paths\n```", "```\n$ git filter-repo --invert-paths --path '.DS_Store' --use-base-name\n```", "```\n$ git filter-repo --invert-paths --path-glob '*/.DS_Store' --path '.DS_Store'\n```", "```\nregex:ghp_ua[A-Za-z0-9]{20,}==><access_token>\n```", "```\n$ git filter-repo --replace-text expressions.txt\n```", "```\n$ git replace --graft v1.0^{commit}\n$ git filter-repo --force\n```", "```\n$ git filter-repo --use-mailmap\n```", "```\n$ git filter-repo --message-callback '\n  if b\"Signed-off-by:\" not in message:\n    message += \"\\n\\nSigned-off-by: Joe Hacker <joe@h.com>\"\n  return message\n```", "```\n$ git filter-repo --path-rename inlude/:include/\n```", "```\n$ git filter-repo --subdirectory-filter lib/foo\n```", "```\n$ git rebase subsys topic\n```", "```\n$ git rebase --onto subsys subsys@{1} topic\n```", "```\n$ git rebase --fork-point subsys topic\n```", "```\n$ git show --stat multiple\ncommit bb71a804f9686c4bada861b3fcd3cfb5600d2a47\nAuthor: Alice Developer <alice@company.com>\nDate:   Sun Jun 1 03:02:09 2014 +0200\n    Support optional <count> parameter\n src/rand.c | 26 +++++++++++++++++++++-----\n 1 file changed, 21 insertions(+), 5 deletions(-)\n```", "```\n$ git revert bb71a80\n[master 76d9e25] Revert \"Support optional <count> parameter\"\n 1 file changed, 5 insertions(+), 21 deletions(-)\n```", "```\n$ git show --stat\ncommit 76d9e259db23d67982c50ec3e6f371db3ec9efc2\nAuthor: Alice Developer <alice@example.com>\nDate:   Tue Jun 16 02:33:54 2015 +0200\n    Revert \"Support optional <count> parameter\"\n    This reverts commit bb71a804f9686c4bada861b3fcd3cfb5600d2a47.\n src/rand.c | 26 +++++---------------------\n 1 file changed, 5 insertions(+), 21 deletions(-)\n```", "```\n$ git revert -m 1 HEAD^^\n[master b2d820c] Revert \"Merge branch 'topic'\"\n```", "```\n$ git notes add \\\n  -m 'atoi() invokes undefined behaviour upon error' v0.2~3\n```", "```\n$ git show --no-patch v0.2~3\ncommit 8c4ceca59d7402fb24a672c624b7ad816cf04e08\nAuthor: Bob Hacker <bob@company.com>\nDate:   Sun Jun 1 01:46:19 2014 +0200\n    Use strtol(), atoi() is deprecated\nNotes:\n    atoi() invokes undefined behaviour upon error\n```", "```\n$ git show-ref --abbrev commits\nfcac4a6 refs/notes/commits\n```", "```\n$ git show refs/notes/commits\ncommit fcac4a649d2458ba8417a6bbb845da4000bbfa10\nAuthor: Alice Developer <alice@example.com>\nDate:   Tue Jun 16 19:48:37 2015 +0200\n    Notes added by 'git notes add'\ndiff --git a/8c4ceca59d7402fb24a672c624b7ad816cf04e08 b/8c4ceca59d7402fb24a672c624b7ad816cf04e08\nnew file mode 100644\nindex 0000000..a033550\n--- /dev/null\n+++ b/8c4ceca59d7402fb24a672c624b7ad816cf04e08\n@@ -0,0 +1 @@\n+atoi() invokes undefined behaviour upon error\n$ git log -1 --oneline \\\n  8c4ceca59d7402fb24a672c624b7ad816cf04e08\n8c4ceca Use strtol(), atoi() is deprecated\n```", "```\n$ git notes --ref=issues add -m '#2' v0.2~3\n```", "```\n$ git config notes.displayRef 'refs/notes/*'\n$ git log -1 v0.2~3\ncommit 8c4ceca59d7402fb24a672c624b7ad816cf04e08\nAuthor: Bob Hacker <bob@company.com>\nDate:   Sun Jun 1 01:46:19 2014 +0200\n    Use strtol(), atoi() is deprecated\nNotes:\n    atoi() invokes undefined behaviour upon error\nNotes (issues):\n    #2\n```", "```\nNotes (review):\n    Code-Review+2: John Reviewer <john@company.com>\n    Verified+1: Jenkins\n    Submitted-by: Bob Developer <bob@company.com>\n    Submitted-at: Thu, 20 Oct 2014 20:11:16 +0100\n    Reviewed-on: http://localhost:9080/7\n    Project: common/random\n    Branch: refs/heads/master\n```", "```\n# store binary note as a blob object in the repository\n$ blob_sha=$(git hash-object -w ./a.out)\n# take the given blob object as the note message\n$ git notes --ref=built add --allow-empty –C \"$blob_sha\" HEAD\n```", "```\n[diff \"jpeg\"]\n    textconv = exif\n    cachetextconv = true\n```", "```\n$ git config --add remote.public.push '+refs/notes/*:refs/notes/*'\n```", "```\n$ git push origin 'refs/notes/*'\n```", "```\n$ git config --add remote.origin.fetch '+refs/notes/*:refs/notes/*'\n```", "```\n+refs/replace/*:refs/replace/*\n```"]