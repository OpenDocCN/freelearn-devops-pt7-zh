- en: Chapter 8. Encrypting Data with Vault
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 使用Vault加密数据
- en: Using variables, we saw how to separate data and code. Often, the data provided
    is sensitive, for example, user passwords, data base credentials, API keys, and
    other organization-specific information. Ansible-playbooks, being a source code,
    are most commonly stored in version control repositories such as a **git**, which
    makes it even more difficult to protect this sensitive information in a collaborative
    environment. Starting with version 1.5, Ansible provides a solution called **vault**
    to store and retrieve such sensitive information securely, using proven encryption
    technologies. The objective of using vault is to encrypt data that can then be
    stored and shared freely with a version control system, such as git, without the
    values being compromised.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变量时，我们看到如何将数据与代码分离。通常，提供的数据是敏感的，例如用户密码、数据库凭证、API密钥以及其他组织特定的信息。Ansible-playbook作为源代码，通常存储在版本控制仓库中，如**git**，这使得在协作环境中保护这些敏感信息变得更加困难。从版本1.5开始，Ansible提供了一种名为**vault**的解决方案，用于使用经过验证的加密技术安全地存储和检索这些敏感信息。使用vault的目的是加密数据，这样就可以在版本控制系统（如git）中自由存储和共享，而不会泄露数据值。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Understanding the Ansible-vault
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Ansible-vault
- en: Securing data using the Ansible-vault
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible-vault保护数据
- en: Encryption, decryption, and rekeying operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密、解密和重新密钥操作
- en: Ansible-vault
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible-vault
- en: Ansible provides a utility named Ansible-vault, which as the name suggests,
    lets you manage data securely. The Ansible-vault utility can either let you create
    an encrypted file by launching an editor interface, or encrypt an existing file.
    In either case, it will ask for a vault password, which is then used to encrypt
    the data with the AES cipher. The encrypted contents can be stored in a version
    control system without being compromised. Since the AES is based on shared secret,
    the same password needs to be provided for decryption too. To provide the password,
    there are two options, while launching Ansible, run the `--ask-vault-pass` option
    to prompt for the password, and the `--vault-password-file` option to provide
    the path to the file that contains the password.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了一种名为Ansible-vault的工具，正如其名字所示，它让你可以安全地管理数据。Ansible-vault工具可以通过启动编辑器界面来创建加密文件，或者加密现有文件。在这两种情况下，它都会要求输入一个vault密码，该密码将用于使用AES密码进行加密。加密后的内容可以存储在版本控制系统中，而不会泄露。由于AES基于共享密钥，加密和解密都需要提供相同的密码。为了提供密码，可以有两种选择，启动Ansible时，使用`--ask-vault-pass`选项提示输入密码，或者使用`--vault-password-file`选项提供包含密码的文件路径。
- en: Advanced Encryption Standard
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级加密标准
- en: '**Advanced** **Encryption Standard** (**AES**) is an encryption standard based
    on the **Rijndael** symmetric block cipher, named after, and developed by, two
    Belgian cryptographers—Vincent Rijmen and Joan Daemen. Initially, established
    by (the U.S.) **National Institute of Standards and Technology** (**NIST**) in
    2001, AES is an algorithm adopted by the U.S. government to share classified information,
    and is the most popular symmetric-key cryptography algorithm. AES is also the
    first publicly accessible open cypher approved by the **National Security Agency**
    (**NSA**).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级** **加密标准**（**AES**）是一种基于**Rijndael**对称块密码的加密标准，命名自比利时两位密码学家——文森特·瑞门（Vincent
    Rijmen）和琼·戴门（Joan Daemen）。最初由美国**国家标准与技术研究院**（**NIST**）于2001年建立，AES是美国政府用于共享机密信息的算法，并且是最流行的对称密钥加密算法。AES也是第一个被**国家安全局**（**NSA**）批准的公开可访问的开放密码算法。'
- en: Being an open and popular standard, Ansible uses the AES cypher with a key size
    of 256 bits to encrypt data with the vault.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种开放且流行的标准，Ansible使用256位密钥大小的AES密码来加密Vault中的数据。
- en: What to encrypt with the vault?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vault加密什么？
- en: 'Ansible-vault can encrypt any structured data. Since YAML itself is a structured
    language, almost everything that you write for Ansible meets this criteria. The
    following are the pointers on what can be encrypted with the vault:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible-vault可以加密任何结构化数据。由于YAML本身就是一种结构化语言，几乎你为Ansible编写的所有内容都符合这个标准。以下是可以使用Vault加密的内容的指引：
- en: 'Most commonly, we encrypt variables, which can be as follows:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最常见的是我们加密变量，变量可能如下所示：
- en: Variable files in roles, for example, `vars` and `defaults`
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色中的变量文件，例如`vars`和`defaults`
- en: Inventory variables, for example, `host_vars`, `group_vars`
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单变量，例如`host_vars`，`group_vars`
- en: Variables files included with `include_vars` or `vars_files`
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`include_vars`或`vars_files`包含的变量文件
- en: Variable files passed to the Ansible-playbook with the `-e` option, for example,
    `-e @vars.yml` or `-e @vars.json`
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 `-e` 选项传递给 Ansible-playbook 的变量文件，例如，`-e @vars.yml` 或 `-e @vars.json`
- en: Since tasks and handlers are also JSON data, these can be encrypted with the
    vault. However, this should be rarely practiced. It's recommended that you encrypt
    variables and reference them in tasks and handlers instead.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于任务和处理程序也是 JSON 数据，因此可以使用 vault 加密它们。然而，这种做法应该尽量避免。建议你加密变量，并在任务和处理程序中引用它们。
- en: 'The following are the pointers on what cannot be encrypted with the vault:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于什么不能使用 vault 加密的说明：
- en: Since the unit of encryption for the vault is a file, partial files or values
    cannot be encrypted. You can encrypt the complete file or none of it.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 vault 的加密单位是文件，因此无法加密部分文件或值。你只能加密完整的文件，或者不加密任何内容。
- en: Files and templates cannot be encrypted as they may not be similar to JSON or
    YML.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件和模板无法加密，因为它们可能不像 JSON 或 YML 文件那样标准化。
- en: 'The following data are a good candidates for encryption:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下数据是加密的好候选项：
- en: Credentials, for example, database passwords and application credentials
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭证，例如，数据库密码和应用程序凭证
- en: API keys, for example, AWS access and secret keys
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 密钥，例如，AWS 访问密钥和密钥对
- en: SSL keys for web servers
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 服务器的 SSL 密钥
- en: Private SSH keys for deployments
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署的私有 SSH 密钥
- en: Using the Ansible-vault
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible-vault
- en: 'The following table lists all the subcommands that the Ansible-vault utility
    comes with:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了 Ansible-vault 工具附带的所有子命令：
- en: '| Subcommand | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 子命令 | 描述 |'
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `create` | This creates a encrypted file from scratch using the editor. This
    needs the editor environment variable set before launching the command. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `create` | 该命令用于从头创建一个加密文件，使用编辑器。这需要在启动命令前设置编辑器环境变量。 |'
- en: '| `edit` | This edits the existing encrypted file with an editor, without decrypting
    the contents. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `edit` | 该命令用于编辑现有的加密文件，无需解密其内容。 |'
- en: '| `encrypt` | This encrypts an existing file with structured data. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `encrypt` | 该命令用于加密一个包含结构化数据的现有文件。 |'
- en: '| `decrypt` | This decrypts the file. Use this with care and do not commit
    the decrypted file to version control. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `decrypt` | 该命令用于解密文件。使用时请小心，并且不要将解密后的文件提交到版本控制。 |'
- en: '| `rekey` | This changes the key or password used to encrypt or decrypt. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `rekey` | 该命令用于更改加密或解密所使用的密钥或密码。 |'
- en: Encrypting the data
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加密数据
- en: 'Let''s perform some operations using Ansible-vault. We will start by creating
    an encrypted file. To create a new file from scratch, Ansible-vault uses the `create`
    subcommand. Before using this subcommand, it is important to set an editor in
    the environment, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Ansible-vault 执行一些操作。我们将从创建一个加密文件开始。要从头创建新文件，Ansible-vault 使用 `create`
    子命令。在使用该子命令之前，重要的是在环境中设置编辑器，如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Launching this command opens up an editor specified with the editor environment
    variable. The following is an example of the `aws_creds.yml` file that you may
    create to store the AWS user credentials in the form of an access key and secret
    key. These keys are then used to make API calls to the Amazon web services cloud
    platform. Saving this file and exiting the editor will generate an encrypted file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 启动此命令会打开指定的编辑器。以下是你可能创建的 `aws_creds.yml` 文件示例，该文件用于存储 AWS 用户凭证（包括访问密钥和秘密密钥）。这些密钥随后用于向亚马逊
    Web 服务云平台发起 API 调用。保存此文件并退出编辑器将生成一个加密文件：
- en: '![Encrypting the data](img/B03800_08_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![加密数据](img/B03800_08_01.jpg)'
- en: 'You can check the type of file created and its contents by running following
    commands:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令检查创建的文件类型及其内容：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Updating the encrypted data
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新加密数据
- en: 'To update the AWS keys added to the encrypted file, you can later use Ansible-vault''s
    `edit` subcommand as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新已添加到加密文件中的 AWS 密钥，你可以使用 Ansible-vault 的 `edit` 子命令，方法如下：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `edit` command does the following operations:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit` 命令执行以下操作：'
- en: Prompts for a password
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提示输入密码
- en: Decrypts a file on the fly using the AES symmetric cypher
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 AES 对称密码解密文件
- en: Opens the editor interface, which allows you to change the content of a file
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开编辑器界面，允许你更改文件的内容
- en: Encrypts the file again after being saved
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在保存后再次加密文件
- en: 'There is another way to update the content of the file. You can decrypt the
    file as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种更新文件内容的方法。你可以按如下方式解密文件：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once updated, this file can then be encrypted again, as you learned earlier.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，该文件可以再次加密，正如你之前学到的那样。
- en: Rotating the encryption keys
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮换加密密钥
- en: 'As a good security practice, it''s a good idea to change encryption keys used
    with Ansible-vault often. When this happens, it''s essential to rekey all the
    files encrypted earlier using the vault. Ansible vault offers a `rekey` subcommand,
    which can be used as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种良好的安全实践，定期更换用于Ansible-vault的加密密钥是个好主意。当发生这种情况时，必须重新加密所有之前使用vault加密的文件。Ansible
    vault提供了一个`rekey`子命令，可以按如下方式使用：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It asks for the current password, and then allows you to specify and confirm
    your new password. Note that if you are managing this file with version control,
    you would also need to commit the change. Even though the actual contents are
    unchanged, rekeying the operation updates the resulting file that is created,
    which is part of our repository.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它会要求输入当前密码，然后允许您指定并确认新密码。请注意，如果您通过版本控制管理此文件，您还需要提交该更改。即使实际内容没有变化，重新设置密钥的操作会更新创建的文件，这是我们仓库的一部分。
- en: Encrypting the database credentials
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密数据库凭证
- en: Earlier while creating database users, we provided the passwords as plain text
    in `group_vars`. This can be a potential threat, especially when checked into
    a version control repository. Let's encrypt it. We will use the `encrypt` subcommand
    as we already have a variables file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，在创建数据库用户时，我们将密码作为明文提供在`group_vars`中。这可能是一个潜在的安全威胁，特别是当它被提交到版本控制仓库时。我们来加密它。我们将使用`encrypt`子命令，因为我们已经有了一个变量文件。
- en: 'Since we are using the `group_vars` group to provide database credentials,
    we will encrypt the `group_vars/all` file as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用`group_vars`组来提供数据库凭证，因此我们将按照以下方式加密`group_vars/all`文件：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For encryption, Ansible-vault asks for a password or key to be entered by the
    user. Using this key, the vault encrypts the data and replaces the file with the
    encrypted content. The following diagram shows the plain text content on the left
    and the equivalent encrypted content on the right for the `group_vars/all` file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密时，Ansible-vault要求用户输入密码或密钥。使用此密钥，vault会加密数据并用加密内容替换文件。以下图示显示了`group_vars/all`文件的左侧为明文内容，右侧为相应的加密内容：
- en: '![Encrypting the database credentials](img/B03800_08_02.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![加密数据库凭证](img/B03800_08_02.jpg)'
- en: 'This file now can be safely checked into a version control system and shared.
    However, the following are the caveats users should be aware of:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件现在可以安全地提交到版本控制系统并共享。然而，用户应注意以下几点：
- en: Unlike plain text, the resulting file is an encrypted format. It's not possible
    to get a different file format, for example, `git diff`, to compare the changes
    while committing to version control.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与明文不同，生成的文件是加密格式。无法获取不同的文件格式，例如使用`git diff`来比较提交到版本控制时的更改。
- en: It's not possible to use `grep`, `sed`, or any text search or manipulation programs
    on this file directly. The only way to do so is to decrypt it first, run the text
    manipulation utilities, and encrypt it back.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法直接在此文件上使用`grep`、`sed`或任何文本搜索或处理程序。唯一的办法是先解密它，运行文本处理工具，然后再加密回去。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Ensure that you use the same password for all the files that you are going to
    decrypt with one Ansible-playbook run. Ansible can take only one value for the
    password at a time, and will fail if the files in the same playbook are encrypted
    using different passwords.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在一次Ansible-playbook运行中使用相同的密码解密所有文件。Ansible每次只能接受一个密码值，如果同一playbook中的文件使用不同的密码加密，程序将失败。
- en: 'Let''s now run the Ansible playbook using the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令运行Ansible playbook：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It fails with an error! That''s because we are providing the playbook with
    encrypted data, without the key to decrypt it. The primary use for vault is to
    secure data while it''s in the Ansible repository. Ultimately, these values need
    to be decrypted while running the playbook. The decryption password can be specified
    with the `--ask-vault-pass` option, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它会失败并显示错误！这是因为我们提供了加密数据的playbook，但没有解密它的密钥。Vault的主要用途是在Ansible仓库中保护数据。最终，这些值需要在运行playbook时被解密。解密密码可以通过`--ask-vault-pass`选项指定，如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will prompt for "Vault Password" and then continue running Ansible code
    as usual.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提示输入“Vault密码”，然后继续按常规方式运行Ansible代码。
- en: Using a password file
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用密码文件
- en: Entering the password every time may not be ideal. Often at times you may also
    want to automate the process of launching Ansible playbook runs, in which case,
    an interactive way is not feasible. This can be avoided by storing the password
    in a file and providing the file to the Ansible playbook run. The password should
    be provided as a single line string in this file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每次输入密码可能不是理想的做法。通常情况下，你可能还希望自动化 Ansible playbook 的执行过程，在这种情况下，交互式方式不可行。通过将密码存储在文件中，并将该文件提供给
    Ansible playbook 运行，可以避免这种情况。密码应作为单行字符串提供在此文件中。
- en: 'Let''s create a password file and secure it with the correct permissions:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个密码文件，并通过正确的权限来保护它：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When the vault password is stored as plain text, anyone who has access to this
    file can decrypt the data. Make sure the password file is secured with appropriate
    permissions, and is not added to version control. If you decide to version control
    it, use **gpg** or equivalent measures.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当 vault 密码以明文存储时，任何访问此文件的人都可以解密数据。确保密码文件以适当的权限保护，并且不被添加到版本控制中。如果你决定进行版本控制，请使用
    **gpg** 或同等措施。
- en: 'Now this file can be provided to the Ansible playbook, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以将此文件提供给 Ansible playbook，如下所示：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding the vault password file option to the Ansible configuration
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 vault 密码文件选项添加到 Ansible 配置中
- en: With version 1.7, it's also possible to add the `vault_password_file` option
    to the `ansible.cfg` file in the defaults section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.7 中，还可以在默认部分的 `ansible.cfg` 文件中添加 `vault_password_file` 选项。
- en: 'Consider the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下内容：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding option gives you the freedom of not specifying the encryption
    password or the password file every time. Let''s take a look at the following
    commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上述选项让你不必每次都指定加密密码或密码文件。让我们看一下以下命令：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Moreover, when starting with version 1.7, instead of storing a plain text password
    in the file, a script can also be provided in the `vault_password_file` option.
    When using the script, ensure that:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从版本 1.7 开始，除了将明文密码存储在文件中外，还可以在 `vault_password_file` 选项中提供一个脚本。在使用脚本时，请确保：
- en: The execute bit is enabled on the script
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本上启用了执行权限
- en: Calling this script outputs a password on the standard output
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用此脚本会将密码输出到标准输出
- en: If the script prompts for user inputs, it can be sent to the standard error
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果脚本提示用户输入，它可以发送到标准错误
- en: Using encrypted data in templates
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在模板中使用加密数据
- en: You learned earlier that since a template may not be a structured file such
    as YAML or JSON, it cannot be encrypted. However, there is a way to add encrypted
    data to the templates. Remember, templates are, after all, generated on the fly,
    and the dynamic content actually comes from variables, which can be encrypted.
    Let's discuss how to achieve this by adding SSL support for the Nginx web server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前已经了解到，由于模板可能不是像 YAML 或 JSON 这样的结构化文件，因此它不能被加密。不过，还是有一种方法可以向模板中添加加密数据。记住，模板毕竟是动态生成的，而动态内容实际上来自于变量，这些变量是可以加密的。接下来，我们讨论如何通过为
    Nginx Web 服务器添加 SSL 支持来实现这一点。
- en: Adding SSL support to Nginx
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Nginx 添加 SSL 支持
- en: 'We have already set up an Nginx web server, now let''s add SSL support to the
    default site by following these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了 Nginx Web 服务器，现在让我们通过以下步骤为默认站点添加 SSL 支持：
- en: 'We begin by adding the variables, as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从添加变量开始，如下所示：
- en: '[PRE12]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s also create self-signed SSL certificates:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们还创建自签名的 SSL 证书：
- en: '[PRE13]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding command will generate two files, `nginx.key` and `nginx.crt`.
    These are the files that we will have copied over to the web server.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令将生成两个文件，`nginx.key` 和 `nginx.crt`。这些文件将被复制到 Web 服务器上。
- en: 'Let''s add the contents of these files to the variables, and create the `group_vars/www`
    file:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将这些文件的内容添加到变量中，并创建 `group_vars/www` 文件：
- en: '[PRE14]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we are just adding placeholders that are to be replaced
    with the actual contents for the key and certificate. These keys and certificates
    should not be exposed in a version control system.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述示例中，我们仅添加了占位符，这些占位符将被实际的密钥和证书内容替换。这些密钥和证书不应在版本控制系统中暴露。
- en: 'Let''s encrypt this file using the vault:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 vault 加密这个文件：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since we have already provided the path to the vault password in the configuration,
    the Ansible-vault does not ask for the password.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们已经在配置中提供了 vault 密码的路径，Ansible-vault 就不会再询问密码。
- en: 'Let''s now create the templates, which add these keys:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建模板，并添加这些密钥：
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Also, let''s add a virtual host `config` file to the SSL:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，让我们为 SSL 添加一个虚拟主机 `config` 文件：
- en: '[PRE17]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We also need to create a task file to configure the SSL site, which will create
    the required directory, files, and configurations:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要创建一个任务文件来配置 SSL 网站，该文件将创建所需的目录、文件和配置：
- en: '[PRE18]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, let''s call this task selectively based on whether the `nginx_ssl
    var` parameter is set to true:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，基于 `nginx_ssl var` 参数是否设置为 true，选择性地调用此任务：
- en: '[PRE19]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, run the playbook as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式运行 playbook：
- en: '[PRE20]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This should configure the default SSL site running at port `443` with self-signed
    certificates. Now, you should be able to open the web server address with the
    `https` secure protocol as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该配置默认的 SSL 网站，运行在 `443` 端口，并使用自签名证书。现在，你应该能够使用 `https` 安全协议打开 Web 服务器地址，如下所示：
- en: '![Adding SSL support to Nginx](img/B03800_08_03.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![为 Nginx 添加 SSL 支持](img/B03800_08_03.jpg)'
- en: Of course, it should show a warning as our certificate is self-signed and not
    provided by a designated certification authority.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于我们的证书是自签名的，并未由指定的认证机构提供，因此它应显示一个警告。
- en: Review questions
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你觉得你已经充分理解了本章的内容吗？尝试回答以下问题来测试你的理解：
- en: Why is there a need to encrypt the data provided to Ansible playbooks?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要加密提供给 Ansible playbooks 的数据？
- en: What is AES, and what is a symmetric-key cipher?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 AES，什么是对称密钥加密算法？
- en: What are the two methods to update a file previously encrypted with the vault?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新之前用 vault 加密的文件的两种方法是什么？
- en: What is the parameter that is added to the Ansible configuration file to make
    it aware of the location of the vault password file?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到 Ansible 配置文件中的参数是什么，以使其知道 vault 密码文件的位置？
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to secure the data passed to the playbooks
    using Ansible-vault. We started with the need to encrypt data, how the vault works,
    and which cipher it uses. We then started to dive into the Ansible-vault utility
    and basic operations such as creating encrypted files, decrypting, rekeying, and
    so on. You also learned how to encrypt existing files by running Ansible-vault
    on the `vars` file holding the database credentials. Finally, we added SSL support
    to Nginx and you learned how to securely store private keys and certificates for
    the web server using the vault and copying them using templates. Note that Ansible
    vault offers a way to provide data to Ansible modules securely. In addition to
    using the vault, additional system security measures are advised that do not come
    under the purview of this text.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Ansible-vault 来保护传递给 playbooks 的数据。我们从加密数据的需求开始，讲解了 vault 的工作原理以及它使用的加密算法。接着，我们深入探讨了
    Ansible-vault 工具及其基本操作，如创建加密文件、解密、重新加密等。你还学习了如何通过运行 Ansible-vault 对保存数据库凭证的 `vars`
    文件进行加密。最后，我们为 Nginx 添加了 SSL 支持，并学习了如何使用 vault 安全存储私钥和证书，并通过模板复制它们。请注意，Ansible
    vault 提供了一种安全地向 Ansible 模块提供数据的方法。除了使用 vault 之外，建议采取额外的系统安全措施，这些内容不在本书的范围内。
- en: After learning about vault, in the next chapter, we will start learning about
    the various approaches to managing multiple environments such as development,
    staging, and production with Ansible. These environments typically map to the
    software development workflow.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了 vault 后，在下一章中，我们将开始学习如何使用 Ansible 管理多个环境（如开发、预发布和生产环境）。这些环境通常映射到软件开发工作流中。
