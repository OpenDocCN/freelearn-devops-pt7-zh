["```\n$ az login\n```", "```\n$ az account show\n```", "```\nterraform {\n  required_version = \">=1.0\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n    azurecaf = {\n      source = \"aztfmod/azurecaf\"\n    }\n    random = {\n      source = \"hashicorp/random\"\n    }\n    http = {\n      source = \"hashicorp/http\"\n    }\n  }\n}\n```", "```\nprovider \"azurerm\" {\n  features {}\n}\n```", "```\nmodule \"azure_region\" {\n  source       = \"claranet/regions/azurerm\"\n  azure_region = var.location\n}\n```", "```\nvariable \"location\" {\n  description = \"Which region in Azure are we launching the resources\"\n  default     = \"West Europe\"\n}\n```", "```\nresource \"azurecaf_name\" \"resource_group\" {\n  name          = var.name\n  resource_type = \"azurerm_resource_group\"\n  suffixes      = [var.environment_type, module.azure_region.location_short]\n  clean_input   = true\n}\n```", "```\nvariable \"name\" {\n  description = \"Base name for resources\"\n  default     = \"iac-wordpress\"\n}\nvariable \"environment_type\" {\n  description = \"type of the environment we are building\"\n  default     = \"prod\"\n}\n```", "```\nmodule.azure_region.location_short\n```", "```\nresource \"azurerm_resource_group\" \"resource_group\" {\n  name     = azurecaf_name.resource_group.result\n  location = module.azure_region.location_cli\n  tags     = var.default_tags\n}\n```", "```\nvariable \"default_tags\" {\n  description = \"The default tags to use across all of our resources\"\n  type        = map(any)\n  default = {\n    project     = \"iac-wordpress\"\n    environment = \"prod\"\n    deployed_by = \"terraform\"\n  }\n}\n```", "```\nvariable \"vnet_address_space\" {\n  description = \"The address space of vnet\"\n  type        = list(any)\n  default     = [\"10.0.0.0/24\"]\n}\n```", "```\nresource \"azurerm_virtual_network\" \"vnet\" {\n  resource_group_name = azurerm_resource_group.resource_group.name\n  location            = azurerm_resource_group.resource_group.location\n  name                = azurecaf_name.vnet.result\n  address_space       = var.vnet_address_space\n  tags                = var.default_tags\n}\n```", "```\nvariable \"vnet_subnets\" {\n  description = \"The subnets to deploy in the vnet\"\n  type = map(object({\n    subnet_name = string\n    address_prefix = string\n    private_endpoint_network_policies_enabled = bool\n    service_endpoints = list(string)\n    service_delegations  = map(map(list(string)))\n  }))\n```", "```\n  default = {\n    virtual_network_subnets_001 = {\n      subnet_name = \"vms\"\n      address_prefix = \"10.0.0.0/27\"\n      private_endpoint_network_policies_enabled = true\n      service_endpoints  = [\"Microsoft.Storage\"]\n      service_delegations = {}\n    },\n```", "```\n    virtual_network_subnets_002 = {\n      subnet_name  = \"endpoints\"\n      address_prefix = \"10.0.0.32/27\"\n      private_endpoint_network_policies_enabled = true\n      service_endpoints = [\"Microsoft.Storage\"]\n      service_delegations = {}\n    },\n```", "```\n    virtual_network_subnets_003 = {\n      subnet_name = \"database\"\n      address_prefix = \"10.0.0.64/27\"\n      private_endpoint_network_policies_enabled = true\n      service_endpoints = [\"Microsoft.Storage\"]\n      service_delegations = {\n        fs = {\n          \"Microsoft.DBforMySQL/flexibleServers\" = [\"Microsoft.Network/virtualNetworks/subnets/join/action\"]\n        }\n      }\n    },\n  }\n}\n```", "```\nresource \"azurecaf_name\" \"virtual_network_subnets\" {\n  for_each      = var.vnet_subnets\n  name          = each.value.subnet_name\n  resource_type = \"azurerm_subnet\"\n  suffixes      = [var.name, var.environment_type, module.azure_region.location_short]\n  clean_input   = true\n}\n```", "```\nresource \"azurerm_subnet\" \"vnet_subnets\" {\n  for_each             = var.vnet_subnets\n  name                 = azurecaf_name.virtual_network_subnets[each.key].result\n  resource_group_name  = azurerm_resource_group.resource_group.name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [each.value.address_prefix]\n  service_endpoints = try(each.value.service_endpoints, [])\n  private_endpoint_network_policies_enabled = try(each.value.private_endpoint_network_policies_enabled, [])\n  dynamic \"delegation\" {\n    for_each = each.value.service_delegations\n    content {\n      name = delegation.key\n      dynamic \"service_delegation\" {\n        for_each = delegation.value\n        iterator = item\n        content {\n          name = item.key\n          actions = item.value\n        }\n      }\n    }\n  }\n}\n```", "```\nresource \"azurerm_subnet\" \"virtual_network_subnets_002\" {\n  name                 = \"snet-endpoints-iac-wordpress-prod-euw\"\n  resource_group_name  = \"rg-iac-wordpress-prod-euw\"\n  virtual_network_name = \"vnet-iac-wordpress-prod-euw\"\n  address_prefixes     = [\"10.0.0.32/27\"]\n  service_endpoints    = [\"Microsoft.Storage\"]\n  private_endpoint_network_policies_enabled = true\n}\nresource \"azurerm_subnet\" \"virtual_network_subnets_003\" {\n  name                 = \"snet-database-iac-wordpress-prod-euw\"\n  resource_group_name  = \"rg-iac-wordpress-prod-euw\"\n  virtual_network_name = \"vnet-iac-wordpress-prod-euw\"\n  address_prefixes     = [\"10.0.0.64/27\"]\n  service_endpoints    = [\"Microsoft.Storage\"]\n  private_endpoint_network_policies_enabled = true\n  delegation {\n      name = \"fs\"\n      service_delegation {\n          name = \"Microsoft.DBforMySQL/flexibleServers\"\n          actions = [\"Microsoft.Network/virtualNetworks/subnets/join/action\"]\n      }\n   }\n}\n```", "```\ndata \"http\" \"current_ip\" {\n  url = \"https://api.ipify.org?format=json\"\n}\n```", "```\nvariable \"network_trusted_ips\" {\n  description = \"Optional list if IP addresses which need access, your current IP will be added automatically\"\n  type        = list(any)\n  default = [\n  ]\n}\n```", "```\nresource \"azurerm_network_security_rule\" \"AllowSSH\" {\n  name        = \"AllowSSH\"\n  description = \"Allow SSH\"\n  priority    = 150\n  direction   = \"Inbound\"\n  access      = \"Allow\"\n  protocol    = \"Tcp\"\n  source_address_prefixes     = setunion(var.network_trusted_ips, [\"${jsondecode(data.http.current_ip.response_body).ip}\"])\n  source_port_range           = \"*\"\n  destination_port_range      = \"22\"\n  destination_address_prefix  = \"*\"\n  resource_group_name         = azurerm_resource_group.resource_group.name\n  network_security_group_name = azurerm_network_security_group.nsg.name\n}\n```", "```\nsetunion(\n  var.network_trusted_ips,\n [\"${jsondecode(data.http.current_ip.response_body).ip}\"]\n)\n```", "```\nvariable \"subnet_for_vms\" {\n  description = \"Reference to put the virtual machines in\"\n  default     = \"virtual_network_subnets_001\"\n}\nvariable \"subnet_for_endpoints\" {\n  description = \"Reference to put the private endpoints in\"\n  default     = \"virtual_network_subnets_002\"\n}\nvariable \"subnet_for_database\" {\n  description = \"Reference to put the database in\"\n  default     = \"virtual_network_subnets_003\"\n}\n```", "```\nresource \"azurerm_subnet_network_security_group_association\" \"nsg_association\" {\n  subnet_id = azurerm_subnet.vnet_subnets[\"${var.subnet_for_vms}\"].id\n  network_security_group_id = azurerm_network_security_group.nsg.id\n}\n```", "```\nresource \"azurerm_storage_account_network_rules\" \"sa\" {\n  storage_account_id = azurerm_storage_account.sa.id\n  default_action     = var.sa_network_default_action\n  ip_rules           = setunion(var.network_trusted_ips, [\"${jsondecode(data.http.current_ip.response_body).ip}\"])\n  bypass             = var.sa_network_bypass\n  virtual_network_subnet_ids = [\n    for subnet_id in azurerm_subnet.vnet_subnets :\n    subnet_id.id\n  ]\n}\n```", "```\nresource \"azurerm_storage_share\" \"nfs_share\" {\n  name                 = replace(var.name, \"-\", \"\")\n  storage_account_name = azurerm_storage_account.sa.name\n  quota                = var.nfs_share_quota\n  enabled_protocol     = var.nfs_enbled_protocol\n  depends_on = [\n    azurerm_storage_account_network_rules.sa\n  ]\n}\n```", "```\nresource \"random_password\" \"database_admin_password\" {\n  length  = 16\n  special = false\n}\n```", "```\n  user_data = base64encode(templatefile(\"vm-cloud-init-admin.yml.tftpl\", {\n    tmpl_database_username = \"${var.database_administrator_login}\"\n    tmpl_database_password = \"${random_password.database_admin_password.result}\"\n    tmpl_database_hostname = \"${azurecaf_name.mysql_flexible_server.result}.${replace(var.name, \"-\", \"\")}.mysql.database.azure.com\"\n    tmpl_database_name     = \"${azurerm_mysql_flexible_database.wordpress_database.name}\"\n    tmpl_file_share        = \"${azurerm_storage_account.sa.name}.file.core.windows.net:/${azurerm_storage_account.sa.name}/${azurerm_storage_share.nfs_share.name}\"\n    tmpl_wordpress_url     = \"http://${azurerm_public_ip.load_balancer.ip_address}\"\n    tmpl_wp_title          = \"${var.wp_title}\"\n    tmpl_wp_admin_user     = \"${var.wp_admin_user}\"\n    tmpl_wp_admin_password = \"${random_password.wordpress_admin_password.result}\"\n    tmpl_wp_admin_email    = \"${var.wp_admin_email}\"\n  }))\n}\n```", "```\n#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - nfs-common\nruncmd:\n  - sudo mount -t nfs ${tmpl_file_share} /var/www/html -o vers=4,minorversion=1,sec=sys\n  - echo \"${tmpl_file_share} /var/www/html nfs vers=4,minorversion=1,sec=sys\" | sudo tee --append /etc/fstab\n```", "```\noutput \"wp_password\" {\n  value     = \"Wordpress Admin Password: ${random_password.wordpress_admin_password.result}\"\n  sensitive = true\n}\noutput \"wp_url\" {\n  value     = \"Wordpress URL: http://${azurerm_public_ip.load_balancer.ip_address}/\"\n  sensitive = false\n}\n```", "```\n$ terraform init\n$ terraform plan\n```", "```\n$ terraform apply\n```", "```\n$ terraform destroy\n```", "```\n- name: Deploy and configure the Azure Environment\n  hosts: localhost\n  connection: local\n  gather_facts: true\n  vars_files:\n    - group_vars/azure.yml\n    - group_vars/common.yml\n  roles:\n    - roles/create-randoms\n    - roles/azure-rg\n    - roles/azure-virtualnetwork\n    - roles/azure-storage\n    - roles/azure-mysql\n    - roles/azure-vm-admin\n    - roles/azure-vmss-web\n    - roles/output\n```", "```\n- name: Check if the file secrets.yml exists\n  ansible.builtin.stat:\n    path: \"group_vars/secrets.yml\"\n  register: secrets_file\n```", "```\nTASK [roles/create-randoms : print the secrets_file variable] **************************************\nok: [localhost] => {\n    \"msg\": {\n        \"changed\": false,\n        \"failed\": false,\n        \"stat\": {\n            \"exists\": false\n        }\n    }\n}\n```", "```\n- name: Generate the secrets.yml file using a template file if not exists\n  ansible.builtin.template:\n    src: \"secrets.yml.j2\"\n    dest: \"group_vars/secrets.yml\"\n  when: secrets_file.stat.exists == false\n```", "```\nshort_random_hash: \"{{ lookup('community.general.random_string', length=5, upper=false, special=false, numbers=false) }}\"\ndb_password: \"{{ lookup('community.general.random_string', length=20, upper=true, special=true, override_special=\"@-&*\", min_special=2, numbers=true) }}\"\nvm_password: \"{{ lookup('community.general.random_string', length=20, upper=true, special=true, override_special=\"@-&*\", min_special=2, numbers=true) }}\"\nwp_password: \"{{ lookup('community.general.random_string', length=20, upper=true, special=true, override_special=\"@-&*\", min_special=2, numbers=true) }}\"\n```", "```\n- name: Load the variables defined in the secrets.yml file\n  ansible.builtin.include_vars:\n    file: \"group_vars/secrets.yml\"\n```", "```\n- name: Create an Azure Flexible Server for MySQL using the REST API\n  azure.azcollection.azure_rm_resource:\n    api_version: \"2021-05-01\"\n    resource_group: \"{{ resource_group_name }}\"\n    provider: \"DBforMySQL\"\n    resource_type: \"flexibleServers\"\n    resource_name: \"{{ database_server_name }}\"\n    body:\n      location: \"{{ location }}\"\n      properties:\n        administratorLogin: \"{{ database_config.admin_username }}\"\n        administratorLoginPassword: \"{{ db_password }}\"\n        Sku:\n          name: \"{{ database_config.sku.name }}\"\n          tier: \"{{ database_config.sku.tier }}\"\n        Network:\n          delegatedSubnetResourceId: \"{{ database_subnet_output.subnets[0].id }}\"\n          privateDnsZoneResourceId: \"{{ database_private_dns_zone_output.privatednszones[0].id }}\"\n        tags: \"{{ common_tags }}\"\n```", "```\n- name: Wait for Azure Flexible Server for MySQL to be ready\n  azure.azcollection.azure_rm_resource_info:\n    api_version: \"2021-05-01\"\n    resource_group: \"{{ resource_group_name }}\"\n    provider: \"DBforMySQL\"\n    resource_type: \"flexibleServers\"\n    resource_name: \"{{ database_server_name }}\"\n  register: database_wait_output\n  delay: 15\n  retries: 50\n  until: database_wait_output.response[0] is defined and database_wait_output.response[0].properties is defined and database_wait_output.response[0].properties.state == \"Ready\"\n```", "```\n$ ansible-playbook site.yml\n```", "```\n$ ansible-playbook destroy.yml\n```"]