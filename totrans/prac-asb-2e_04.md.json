["```\n[frontends]\nweb01.example.org https_port=8443\nweb02.example.org http_proxy=proxy.example.org\n[frontends:vars]\nntp_server=ntp.web.example.org\nproxy=proxy.web.example.org\n[apps]\napp01.example.org\napp02.example.org\n[webapp:children]\nfrontends\napps\n[webapp:vars]\nproxy_server=proxy.webapp.example.org\nhealth_check_retry=3\nhealth_check_interval=60\n```", "```\n    ---\n    - hosts: frontends\n      remote_user: james\n      tasks:\n      - name: simple connection test\n        ansible.builtin.ping:\n        remote_user: james\n    ```", "```\n      - name: run a simple command\n        ansible.builtin.shell: /bin/ls -al /nonexistent\n        ignore_errors: True\n    ```", "```\n    $ ansible-playbook -i hosts myplaybook.yml\n    ```", "```\n---\n- name: Handler demo 1\n  hosts: web01.example.org\n  gather_facts: no\n  become: yes\n  tasks:\n    - name: Update Apache configuration\n      ansible.builtin.template:\n        src: template.j2\n        dest: /etc/apache2/apache2.conf\n      notify: Restart Apache\n  handlers:\n    - name: Restart Apache\n      ansible.builtin.service:\n        name: apache2\n        state: restarted\n```", "```\n$ ansible-playbook -i hosts handlers1.yml\nPLAY [Handler demo 1] **********************************************************\nTASK [Update Apache configuration] *********************************************\nchanged: [web01.example.org]\nRUNNING HANDLER [Restart Apache] ***********************************************\nchanged: [web01.example.org]\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=2    changed=2    unreachable=0    failed=0    skipped=0     rescued=0    ignored=0\n```", "```\n$ ansible-playbook -i hosts handlers1.yml\nPLAY [Handler demo 1] **********************************************************\nTASK [Update Apache configuration] *********************************************\nok: [web01.example.org]\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n---\n- name: Handler demo 1\n  hosts: web01.example.org\n  gather_facts: no\n  become: yes\n  handlers:\n    - name: restart timesyncd\n      ansible.builtin.service:\n        name: systemd-timesyncd.service\n        state: restarted\n      listen: \"restart all services\"\n    - name: restart apache\n      ansible.builtin.service:\n        name: apache2.service\n        state: restarted\n      listen: \"restart all services\"\n  tasks:\n    - name: restart all services\n      ansible.builtin.command: echo \"this task will restart all services\"\n      notify: \"restart all services\"\n```", "```\n$ ansible-playbook -i hosts handlers2.yml\nPLAY [Handler demo 1] **********************************************************\nTASK [restart all services] ****************************************************\nchanged: [web01.example.org]\nRUNNING HANDLER [restart timesyncd] ********************************************\nchanged: [web01.example.org]\nRUNNING HANDLER [restart apache] ***********************************************\nchanged: [web01.example.org]\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=3    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n$ sudo apt -y install apache2\n$ sudo ufw allow http\n$ sudo ufw allow https\n$ sudo systemctl enable apache2.service\n$ sudo systemctl restart apache2.service\n```", "```\n$ ansible -i hosts web01* -m ansible.builtin.service -a \"name=apache2 state=restarted\" --become\n```", "```\nweb01.example.org | CHANGED => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3\"\n    },\n    \"changed\": true,\n    \"name\": \"apache2\",\n    \"state\": \"started\",\n```", "```\n---\n- name: Install Apache\n  hosts: web01.example.org\n  gather_facts: no\n  become: yes\n  tasks:\n    - name: Install Apache package\n      ansible.builtin.apt:\n        name: apache2\n        state: latest\n    - name: Open firewall for Apache\n      community.general.ufw:\n        rule: allow\n        port: \"{{ item }}\"\n        proto: tcp\n      loop:\n        - \"http\"\n        - \"https\"\n    - name: Restart and enable the service\n      ansible.builtin.service:\n        name: apache2\n        state: restarted\n        enabled: yes\n```", "```\n$ ansible-playbook -i hosts installapache.yml\nPLAY [Install Apache] **********************************************************\nTASK [Install Apache package] **************************************************\nchanged: [web01.example.org]\nTASK [Open firewall for Apache] ************************************************\nchanged: [web01.example.org] => (item=http)\nchanged: [web01.example.org] => (item=https)\nTASK [Restart and enable the service] ******************************************\nchanged: [web01.example.org]\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=3    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n    ---\n    - name: Play 1 - configure the frontend servers\n      hosts: frontends\n      become: yes\n      tasks:\n      - name: Install the Apache package\n        ansible.builtin.apt:\n          name: apache2\n          state: latest\n      - name: Start the Apache server\n        ansible.builtin.service:\n          name: apache2\n          state: started\n    ```", "```\n    - name: Play 2 - configure the application servers\n      hosts: apps\n      become: true\n      tasks:\n      - name: Install Tomcat\n        ansible.builtin.apt:\n          name: tomcat9\n          state: latest\n      - name: Start the Tomcat server\n        ansible.builtin.service:\n          name: tomcat9\n          state: started\n    ```", "```\n$ ansible-playbook -i hosts playandtask.yml\n```", "```\nsite.yml\nfrontends.yml\ndbservers.yml\nroles/\n   installapache/\n     tasks/\n     handlers/\n     templates/\n     vars/\n     defaults/\n   installtomcat/\n     tasks/\n     meta/\n```", "```\n[frontends]\nweb01.example.org https_port=8443\nweb02.example.org http_proxy=proxy.example.org\n[frontends:vars]\nntp_server=ntp.web.example.org\nproxy=proxy.web.example.org\n[apps]\napp01.example.org\napp02.example.org\n[webapp:children]\nfrontends\napps\n[webapp:vars]\nproxy_server=proxy.webapp.example.org\nhealth_check_retry=3\nhealth_check_interval=60\n```", "```\n    main.yml inside the tasks directory we just created. This won’t actually perform the Apache installation – rather, it will call one of two external tasks files, depending on the operating system detected on the target host during the fact-gathering stage. We can use a fact called ansible_distribution, in a when clause, to determine which of the task files to import:\n\n    ```", "```\n\n    ```", "```\n    ---\n    - name: Install Apache using dnf\n      ansible.builtin.dnf:\n        name: httpd\n        state: latest\n    - name: Start the Apache server\n      ansible.builtin.service:\n        name: httpd\n        state: started\n    ```", "```\n    ---\n    - name: Install Apache using apt\n      ansible.builtin.apt:\n        name: apache2\n        state: latest\n    - name: Start the Apache server\n      ansible.builtin.service:\n        name: apache2\n        state: started\n    ```", "```\n---\n- name: Install Apache using a role\n  hosts: frontends\n  become: true\n  roles:\n    - installapache\n```", "```\n.\n├── hosts\n├── roles\n│   └── installapache\n│       └── tasks\n│           ├── fedora.yml\n│           ├── main.yml\n│           └── ubuntu.yml\n└── site.yml\n```", "```\n$ ansible-playbook -i hosts site.yml\nPLAY [Install Apache using a role] *********************************************\nTASK [Gathering Facts] *********************************************************\nok: [web02.example.org]\nok: [web01.example.org]\nTASK [installapache : Install Apache using yum] ********************************\nskipping: [web01.example.org]\nskipping: [web02.example.org]\nTASK [installapache : Start the Apache server] *********************************\nskipping: [web01.example.org]\nskipping: [web02.example.org]\nTASK [installapache : Install Apache using apt] ********************************\nchanged: [web02.example.org]\nchanged: [web01.example.org]\nTASK [installapache : Start the Apache server] *********************************\nchanged: [web02.example.org]\nchanged: [web01.example.org]\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=3    changed=2    unreachable=0    failed=0    skipped=2    r escued=0    ignored=0\nweb02.example.org          : ok=3    changed=2    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0\n```", "```\n---\n- hosts: frontends\n  tasks:\n  - ansible.builtin.import_role:\n      name: common\n  - ansible.builtin.include_role:\n      name: approle\n```", "```\n    ---\n    - name: Role variables and meta playbook\n      hosts: web01.example.org\n      roles:\n        - platform\n    ```", "```\n    $ mkdir -p roles/platform/meta\n    ```", "```\n---\ndependencies:\n- role: linuxtype\n  type: \"fedora\"\n- role: linuxtype\n  type: \"ubuntu\"\n```", "```\n    $ mkdir -p roles/linuxtype/meta/\n    ```", "```\n---\ndependencies:\n- role: version\n- role: network\n```", "```\n    $ mkdir -p roles/version/meta\n    $ mkdir -p roles/version/tasks\n    ```", "```\n---\nallow_duplicates: true\n```", "```\n---\n- name: Print type variable\n  ansible.builtin.debug:\n    var: type\n```", "```\n    $ mkdir -p roles/network/meta\n    $ mkdir -p roles/network/tasks\n    ```", "```\n---\nallow_duplicates: true\n```", "```\n---\n- name: Print type variable\n  ansible.builtin.debug:\n    var: type\n```", "```\n.\n├── hosts\n├── roles\n│   ├── linuxtype\n│   │   └── meta\n│   │       └── main.yml\n│   ├── network\n│   │   ├── meta\n│   │   │   └── main.yml\n│   │   └── tasks\n│   │       └── main.yml\n│   ├── platform\n│   │   └── meta\n│   │       └── main.yml\n│   └── version\n│       ├── meta\n│       │   └── main.yml\n│       └── tasks\n│           └── main.yml\n└── site.yml\n11 directories, 8 files\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\n$ ansible-galaxy role install -p roles/ arillso.motd\n```", "```\n$ ansible-galaxy role init --init-path roles/ testrole\n- Role testrole was created successfully\n$ tree roles/testrole/\nroles/testrole/\n├── README.md\n├── defaults\n│   └── main.yml\n├── files\n├── handlers\n│   └── main.yml\n├── meta\n│   └── main.yml\n├── tasks\n│   └── main.yml\n├── templates\n├── tests\n│   ├── inventory\n│   └── test.yml\n└── vars\n    └── main.yml\n8 directories, 8 files\n```", "```\n[frontends]\nweb01.example.org https_port=8443\nweb02.example.org http_proxy=proxy.example.org\n[frontends:vars]\nntp_server=ntp.web.example.org\nproxy=proxy.web.example.org\n[apps]\napp01.example.org\napp02.example.org\n[webapp:children]\nfrontends\napps\n[webapp:vars]\nproxy_server=proxy.webapp.example.org\nhealth_check_retry=3\nhealth_check_interval=60\n```", "```\n---\n- name: Play to patch only Fedora systems\n  hosts: all\n  become: true\n  tasks:\n  - name: Patch Fedora systems\n    ansible.builtin.dnf:\n      name: httpd\n      state: latest\n    when: ansible_facts['distribution'] == \"Fedora\"\n```", "```\n$ ansible-playbook -i hosts condition.yml\nPLAY [Play to patch only Fedora systems] ***************************************\nTASK [Gathering Facts] *********************************************************\nok: [web01.example.org]\nok: [app01.example.org]\nok: [web02.example.org]\nok: [app02.example.org]\nTASK [Patch Fedora systems] ****************************************************\nskipping: [web02.example.org]\nskipping: [app01.example.org]\nskipping: [app02.example.org]\nok: [web01.example.org]\nPLAY RECAP *********************************************************************\napp01.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\napp02.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\nweb01.example.org          : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\nweb02.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\n```", "```\n---\n- name: Play to patch only Fedora systems\n  hosts: all\n  become: true\n  tasks:\n  - name: Patch Fedora systems\n    yum:\n      name: httpd\n      state: latest\n    when: (ansible_facts['distribution'] == \"Fedora\" and ansible_facts['distribution_major_version'] == \"35\")\n```", "```\n$ ansible-playbook -i hosts condition2.yml\nPLAY [Play to patch only Fedora systems] ***************************************\nTASK [Gathering Facts] *********************************************************\nok: [app01.example.org]\nok: [web01.example.org]\nok: [app02.example.org]\nok: [web02.example.org]\nTASK [Patch Fedora systems] ****************************************************\nskipping: [web01.example.org]\nskipping: [web02.example.org]\nskipping: [app01.example.org]\nskipping: [app02.example.org]\nPLAY RECAP *********************************************************************\napp01.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\napp02.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\nweb01.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\nweb02.example.org          : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\n```", "```\n---\n- name: Play to test for hosts file in directory output\n  hosts: localhost\n  tasks:\n    - name: Gather directory listing from local system\n      ansible.builtin.shell: \"ls -l\"\n      register: shellresult\n    - name: Alert if we find a hosts file\n      ansible.builtin.debug:\n        msg: \"Found hosts file!\"\n      when: '\"hosts\" in shellresult.stdout'\n```", "```\n$ ansible-playbook condition3.yml\nPLAY [Play to test for hosts file in directory output] *************************\nTASK [Gathering Facts] *********************************************************\nok: [localhost]\nTASK [Gather directory listing from local system] ******************************\nchanged: [localhost]\nTASK [Alert if we find a hosts file] *******************************************\nok: [localhost] => {\n    \"msg\": \"Found hosts file!\"\n}\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n$ ansible-playbook condition3.yml\nPLAY [Play to test for hosts file in directory output] *************************\nTASK [Gathering Facts] *********************************************************\nok: [localhost]\nTASK [Gather directory listing from local system] ******************************\nchanged: [localhost]\nTASK [Alert if we find a hosts file] *******************************************\nskipping: [localhost]\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0\n```", "```\ntasks:\n  - name: Only perform this task on Fedora 35 and later\n    ansible.builtin.shell: echo \"only on Fedora 35 and later\"\n    when: ansible_facts['distribution'] == \"Fedora\" and ansible_facts['distribution_major_version']|int >= 35\n```", "```\n[frontends]\nweb01.example.org https_port=8443\nweb02.example.org http_proxy=proxy.example.org\n[frontends:vars]\nntp_server=ntp.web.example.org\nproxy=proxy.web.example.org\n[apps]\napp01.example.org\napp02.example.org\n[webapp:children]\nfrontends\napps\n[webapp:vars]\nproxy_server=proxy.webapp.example.org\nhealth_check_retry=3\nhealth_check_interval=60\n```", "```\n---\n- name: Simple loop demo play\n  hosts: web01.example.org\n  tasks:\n    - name: Echo a value from the loop\n      ansible.builtin.command: echo \"{{ item }}\"\n      loop:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n```", "```\n$ ansible-playbook -i hosts loop1.yml\nPLAY [Simple loop demo play] ***************************************************\nTASK [Gathering Facts] *********************************************************\nok: [web01.example.org]\nTASK [Echo a value from the loop] **********************************************\nchanged: [web01.example.org] => (item=1)\nchanged: [web01.example.org] => (item=2)\nchanged: [web01.example.org] => (item=3)\nchanged: [web01.example.org] => (item=4)\nchanged: [web01.example.org] => (item=5)\nchanged: [web01.example.org] => (item=6)\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n---\n- name: Simple loop demo play\n  hosts: web01.example.org\n  tasks:\n    - name: Echo a value from the loop\n      ansible.builtin.command: echo \"{{ item }}\"\n      loop:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n      when: item|int > 3\n```", "```\n$ ansible-playbook -i hosts loop2.yml\nPLAY [Simple loop demo play] ***************************************************\nTASK [Gathering Facts] *********************************************************\nok: [web01.example.org]\nTASK [Echo a value from the loop] **********************************************\nskipping: [web01.example.org] => (item=1)\nskipping: [web01.example.org] => (item=2)\nskipping: [web01.example.org] => (item=3)\nchanged: [web01.example.org] => (item=4)\nchanged: [web01.example.org] => (item=5)\nchanged: [web01.example.org] => (item=6)\nPLAY RECAP *********************************************************************\nweb01.example.org          : ok=2    changed=1    unreachable=0    failed=0    skipped=0     rescued=0    ignored=0\n```", "```\n---\n- name: Simple loop demo play\n  hosts: web01.example.org\n  tasks:\n    - name: Echo a value from the loop\n      ansible.builtin.command: echo \"{{ item }}\"\n      loop:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n      when: item|int > 3\n      register: loopresult\n    - name: Print the results from the loop\n      ansible.builtin.debug:\n        var: loopresult\n```", "```\n$ ansible-playbook -i hosts loop3.yml\nPLAY [Simple loop demo play] ***************************************************\nTASK [Gathering Facts] *********************************************************\nok: [web01.example.org]\nTASK [Echo a value from the loop] **********************************************\nskipping: [web01.example.org] => (item=1)\nskipping: [web01.example.org] => (item=2)\nskipping: [web01.example.org] => (item=3)\nchanged: [web01.example.org] => (item=4)\nchanged: [web01.example.org] => (item=5)\nchanged: [web01.example.org] => (item=6)\nTASK [Print the results from the loop] *****************************************\nok: [web01.example.org] => {\n    \"loopresult\": {\n        \"changed\": true,\n        \"msg\": \"All items completed\",\n        \"results\": [\n            {\n                \"ansible_loop_var\": \"item\",\n                \"changed\": false,\n                \"item\": 1,\n                \"skip_reason\": \"Conditional result was False\",\n                \"skipped\": true\n            },\n            {\n                \"ansible_loop_var\": \"item\",\n                \"changed\": false,\n                \"item\": 2,\n                \"skip_reason\": \"Conditional result was False\",\n                \"skipped\": true\n            },\n```", "```\n---\n- name: Play to demonstrate nested loops\n  hosts: localhost\n  tasks:\n    - name: Outer loop\n      ansible.builtin.include_tasks: loopsubtask.yml\n      loop:\n        - a\n        - b\n        - c\n      loop_control:\n        loop_var: second_item\n```", "```\n---\n- name: Inner loop\n  ansible.builtin.debug:\n    msg: \"second item={{ second_item }} first item={{ item }}\"\n  loop:\n    - 100\n    - 200\n    - 300\n```", "```\n$ ansible-playbook loopmain.yml\n```", "```\n[frontends]\nweb01.example.org https_port=8443\nweb02.example.org http_proxy=proxy.example.org\n[frontends:vars]\nntp_server=ntp.web.example.org\nproxy=proxy.web.example.org\n[apps]\napp01.example.org\napp02.example.org\n[webapp:children]\nfrontends\napps\n[webapp:vars]\nproxy_server=proxy.webapp.example.org\nhealth_check_retry=3\nhealth_check_interval=60\n```", "```\n---\n- name: Conditional block play\n  hosts: all\n  become: true\n  tasks:\n  - name: Install and configure Apache\n    block:\n      - name: Install the Apache package\n        ansible.builtin.dnf:\n          name: httpd\n          state: installed\n      - name: Install the templated configuration to a dummy location\n        ansible.builtin.template:\n          src: templates/src.j2\n          dest: /tmp/my.conf\n      - name: Start the httpd service\n        ansible.builtin.service:\n          name: httpd\n          state: started\n          enabled: True\n    when: ansible_facts['distribution'] == 'Fedora'\n```", "```\n$ ansible-playbook -i hosts blocks.yml\n```", "```\n---\n- name: Play to demonstrate block error handling\n  hosts: frontends\n  tasks:\n    - name: block to handle errors\n      block:\n        - name: Perform a successful task\n          ansible.builtin.debug:\n            msg: 'Normally executing....'\n        - name: Deliberately create an error\n          ansible.builtin.command: /bin/whatever\n        - name: This task should not run if the previous one results in an error\n          ansible.builtin.debug:\n            msg: 'Never print this message if the above command fails!!!!'\n      rescue:\n        - name: Catch the error (and perform recovery actions)\n          ansible.builtin.debug:\n            msg: 'Caught the error'\n        - name: Deliberately create another error\n          ansible.builtin.command: /bin/whatever\n        - name: This task should not run if the previous one results in an error\n          ansible.builtin.debug:\n            msg: 'Do not print this message if the above command fails!!!!'\n      always:\n        - name: This task always runs!\n          ansible.builtin.debug:\n            msg: \"Tasks in this part of the play will be ALWAYS executed!!!!\"\n```", "```\n$ ansible-playbook -i hosts blocks-error.yml\n```", "```\n---\n- name: Play to demonstrate the debug strategy\n  hosts: web01.example.org\n  strategy: debug\n  debugger: on_failed\n  gather_facts: no\n  vars:\n    name: james\n  tasks:\n    - name: Generate an error by referencing an undefined variable\n      ansible.builtin.ping: data={{ mobile }}\n```", "```\n$ ansible-playbook -i hosts debug.yml\n[WARNING]: Found variable using reserved name: name\nPLAY [Play to demonstrate the debug strategy] **********************************\nTASK [Generate an error by referencing an undefined variable] ******************\nfatal: [web01.example.org]: FAILED! => {\"msg\": \"The task includes an option with an undefined variable. The error was: 'mobile' is undefined. 'mobile' is undefined\\n\\nThe error appears to be in '/home/james/Practical-Ansible-Second-Edition/Chapter 4/debug.yml': line 11, column 7, but may\\nbe elsewhere in the file depending on the exact syntax problem.\\n\\nThe offending line appears to be:\\n\\n  tasks:\\n    - name: Generate an error by referencing an undefined variable\\n      ^ here\\n\"}\n[web01.example.org] TASK: Generate an error by referencing an undefined variable (debug)> p\n***SyntaxError:SyntaxError('invalid syntax', ('<string>', 0, 0, '', 0, 0))\n[web01.example.org] TASK: Generate an error by referencing an undefined variable (debug)> p task_vars\n{'ansible_check_mode': False,\n 'ansible_config_file': None,\n 'ansible_current_hosts': ['web01.example.org'],\n 'ansible_dependent_role_names': [],\n 'ansible_diff_mode': False,\n 'ansible_facts': {},\n 'ansible_failed_hosts': [],\n 'ansible_forks': 5,\n...\n[web01.example.org] TASK: Generate an error by referencing an undefined variable (debug)> quit\nUser interrupted execution\n$\n```", "```\n[web01.example.org] TASK: Generate an error by referencing an undefined variable (debug)> p task\nTASK: Generate an error by referencing an undefined variable\n[web01.example.org] TASK: Generate an error by referencing an undefined variable\n```", "```\n(debug)> p task.args\n{'data': '{{ mobile }}'}\n[web01.example.org] TASK: Generate an error by referencing an undefined variable\n```", "```\n(debug)> p task_vars\n{'ansible_check_mode': False,\n 'ansible_config_file': None,\n 'ansible_current_hosts': ['web01.example.org'],\n 'ansible_dependent_role_names': [],\n 'ansible_diff_mode': False,\n 'ansible_facts': {},\n 'ansible_failed_hosts': [],\n 'ansible_forks': 5,\n```", "```\n[web01.example.org] TASK: Generate an error by referencing an undefined variable (debug)> q\nUser interrupted execution\n$\n```", "```\n$ ansible-pull -d /tmp/ansible-set-motd -i ${HOSTNAME}, -U https://github.com/jamesfreeman959/ansible-set-motd.git site.yml -e \"ag_motd_content='MOTD generated by ansible-pull'\" >> /tmp/ansible-pull.log 2>&1\n```", "```\n$ ansible-pull -d /tmp/ansible-set-motd -i ${HOSTNAME}, -U https://github.com/jamesfreeman959/ansible-set-motd.git site.yml -e \"ag_motd_content='MOTD generated by ansible-pull'\"\n```"]