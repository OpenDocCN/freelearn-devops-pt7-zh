- en: Using the Wiki and Managing Code Versioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用维基和管理代码版本控制
- en: In the previous chapter, we explored the main page of a repository and we covered
    the basics of its issue tracker.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探索了存储库的主页，并介绍了其问题跟踪器的基础知识。
- en: GitHub also provides a wiki-style place to add your project's documentation.
    You can create as many pages as you like and also grant public access to it so
    that everyone can edit it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub还提供了一个类似维基风格的地方来添加项目的文档。您可以创建任意数量的页面，并公开访问以便每个人都可以编辑。
- en: In addition, when you are the creator of a product and have users that rely
    on it, you will want it to be as stable as possible. Versioning helps to maintain
    an achievable goal. GitHub provides the right tools to release versions of your
    code, which in reality are just snapshots in time. Whenever you believe your project
    is ready to go out into the wild, whether bugs are fixed or new features are added,
    you can use the releases feature and deliver versioned tarballs to the world.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当您是产品的创建者并有依赖于它的用户时，您希望它尽可能稳定。版本控制有助于实现这一目标。GitHub提供了适合发布代码版本的正确工具，实际上这些只是时间快照。每当您认为项目准备好进入世界时，无论是修复了错误还是添加了新功能，您都可以使用发布功能并向世界提供版本化的tarball文件。
- en: After finishing this chapter, you will have learned how to create, edit, and
    maintain a wiki by providing a home for your documentation that will complement
    your project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将学会如何通过为文档提供一个家园来创建、编辑和维护维基。
- en: You will also learn how to create a new release out of an existing branch or
    tag accompanied with optional release notes. This way, the end user can understand
    the changes from any previous versions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将学会如何从现有分支或标签创建新版本发布，并提供可选的发布说明。这样，最终用户可以了解与任何先前版本的变化。
- en: 'This is what we will cover:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下内容：
- en: 'Using the wiki:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用维基：
- en: Why wikis are a nice place to document your project
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为何维基是记录项目的好地方
- en: Creating a new wiki page
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的维基页面
- en: Deleting a page
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除页面
- en: Introduction to Markdown
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Markdown简介
- en: How to add a sidebar and a footer to your wiki
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为维基添加侧边栏和页脚
- en: Watching a wiki page's commit history and reverting to a previous state if needed
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察维基页面的提交历史并根据需要恢复到之前的状态
- en: 'Managing code versioning:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理代码版本控制：
- en: Creating a release
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建发布
- en: Editing a release
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑发布
- en: Pushing a tag from the command line
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行推送标签
- en: Marking as prerelease
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记为预发布
- en: Making a draft of a release
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作发布的草稿
- en: Uploading your own files
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传您自己的文件
- en: 'Tips and tricks:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小贴士：
- en: Subscribing to new releases via atom feed
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Atom feed订阅新发布内容
- en: Editing the wiki locally
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地编辑维基
- en: Using the wiki
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用维基
- en: When you first create a new repository, a wiki attached to this project is also
    created. It is enabled by default and everyone can add new content or modify existing
    pages. If you want to change this behavior, you can refer to [Chapter 6](part0149.html#4E33Q0-184576c1044a4350bd24f18b869c0732),
    *Exploring the User and Repository Settings*, which shows you how to accomplish
    this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次创建新存储库时，与此项目关联的维基也会随之创建。默认情况下启用，每个人都可以添加新内容或修改现有页面。如果您想更改此行为，可以参考[第6章](part0149.html#4E33Q0-184576c1044a4350bd24f18b869c0732)，*探索用户和存储库设置*，其中详细说明了如何完成此操作。
- en: Why wikis are a nice place to document your project
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为何维基是记录项目的好地方
- en: Documentation is not to be taken lightly. To paraphrase a famous quote, with
    great projects comes great documentation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文档工作绝不可小觑。引用一句名言，伴随伟大的项目而来的是优秀的文档。
- en: Although there are many tools that convert markup files, such as Markdown to
    HTML, you may not want to use an external page to host your documentation. Enter
    GitHub wiki.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有许多工具可以转换标记文件，比如将Markdown转换为HTML，但您可能不希望使用外部页面来托管您的文档。进入GitHub维基。
- en: Creating a new wiki page
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的维基页面
- en: Select the Wiki tab (the one with the book icon) in order to head over to the
    wiki. Since our wiki has no content yet, the page doesn't exist. In this case,
    GitHub prompts you to create the first page. Go ahead and hit the green button.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 选择维基标签（带有书籍图标的标签），前往维基。由于我们的维基目前没有内容，页面并不存在。在这种情况下，GitHub会提示您创建第一个页面。请继续点击绿色按钮。
- en: 'Every time you add a new page to the wiki, the process is the same. At the
    top, there is the title. This is the only field that is mandatory in order to
    create a wiki page, as this is also used to form the URL from which you will have
    access to the page:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每次添加新页面到维基时，过程都是相同的。页面顶部是标题。这是唯一强制填写的字段，用于创建维基页面，同时也用于形成您将访问页面的URL：
- en: '![](img/00031.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00031.jpeg)'
- en: When the very first wiki page is created, GitHub uses the title `Home` by default.
    Even if you pick another name, the Home page is created automatically and is used
    as the front page of your wiki. The name `Home` behaves in the same way that `README`
    does for repositories, and it cannot be deleted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个 Wiki 页面创建时，GitHub 默认使用 `Home` 作为标题。即使你选择了其他名称，Home 页面仍会自动创建，并作为 Wiki 的首页。`Home`
    的作用类似于仓库中的 `README`，它无法被删除。
- en: Below the title area, there are two tabs. When the Write tab is active, you
    can begin to write in the blank area below. If you choose to write in a markup
    language, the Preview tab renders the text and shows you how it will be presented
    when you save the page.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题区域下方，有两个标签。当“写作”标签处于活动状态时，你可以开始在下方的空白区域进行写作。如果选择使用标记语言写作，预览标签将渲染文本，并向你展示保存页面后的展示效果。
- en: Below the title, there is a nice toolbar that has the most common actions such
    as headers, bold text, italics, and lists. At the time of writing this book, GitHub
    supports nine markup languages to choose from. Pick one from the Edit mode drop-down
    list and the text will be rendered accordingly. For every language you pick from
    the menu, there is a little help page with the most common actions. Hit the question
    mark icon to see the help area.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题下方，有一个不错的工具栏，包含了最常见的操作，如标题、粗体文本、斜体和列表。在编写本书时，GitHub 支持九种标记语言供选择。从编辑模式下拉列表中选择一种，文本将根据所选语言进行渲染。对于你从菜单中选择的每种语言，都会有一个小帮助页面，列出最常用的操作。点击问号图标即可查看帮助区域。
- en: Finally, when you are ready to save the page, you can provide a short message
    describing what the changes were about. Consider it like a Git commit message.
    Later, when we explore the page's history, the edit message will come in handy.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当你准备保存页面时，可以提供一个简短的消息，描述所做的修改内容。可以将其看作是一个 Git 提交消息。稍后，当我们浏览页面的历史记录时，编辑消息将派上用场。
- en: 'Whenever you are ready, press the Save Page button and the page will be created
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好时，点击保存页面按钮，页面将如下所示：
- en: '![](img/00032.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00032.jpeg)'
- en: Deleting a page
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除页面
- en: Every page except Home can be deleted. In order to do this, go to the page you
    want to delete and hit the Edit button at the right corner. As you will see later,
    deleting a page does not necessarily mean that it is purged forever. Read ahead
    and learn how to undo things.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Home 页面外，其他页面都可以删除。为了删除页面，进入你想删除的页面并点击右上角的编辑按钮。如你所见，删除页面并不一定意味着它被永久清除。继续阅读，了解如何撤销操作。
- en: A Markdown-powered wiki – an introduction to Markdown
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个基于 Markdown 的 Wiki —— Markdown 简介
- en: While GitHub supports multiple markup languages, we will explore Markdown as
    it is the most well-known one.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GitHub 支持多种标记语言，但我们将探索 Markdown，因为它是最知名的一种。
- en: 'Let''s create another page, named `Installation`, with some content as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个页面，名为`Installation`，并添加以下内容：
- en: '![](img/00033.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00033.jpeg)'
- en: 'I have used several Markdown elements and hitting Preview will show you how
    the page will be rendered when it is saved. After you hit the Save Page button,
    the new Installation page will look like the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了几个 Markdown 元素，点击预览将显示保存后页面的渲染效果。点击保存页面按钮后，新创建的 Installation 页面将如下所示：
- en: '![](img/00034.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00034.jpeg)'
- en: 'Some elements worth mentioning are the links. There are two kinds of links:
    external and internal. External ones are written by giving the full URL including
    the FQDN, whereas internal links only get called with the page name.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些值得提到的元素是链接。有两种类型的链接：外部链接和内部链接。外部链接通过给出完整的 URL，包括 FQDN 来编写，而内部链接只需使用页面名称即可。
- en: You can have external links that display the actual URL by surrounding them
    with `<>`, such as `<https://duckduckgo.com>`, and you can also include some random
    text such as `[git clone](https://git-scm.com/docs/git-clone)`. Inside the brackets,
    you can add any text you want, followed by the actual link inside parentheses.
    Be careful to not leave any spaces between the second bracket and the first parenthesis.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建外部链接，并通过将其用`<>`包围来显示实际的 URL，例如 `<https://duckduckgo.com>`，你还可以包含一些随机文本，如
    `[git clone](https://git-scm.com/docs/git-clone)`。在方括号内，你可以添加任何文本，后跟实际链接，括号内是链接的内容。注意不要在第二个方括号和第一个括号之间留空格。
- en: Internal links are useful when you want to link to another page of your wiki.
    Imagine you have 42 pages and you have to type the whole URL whenever you want
    to refer to another page. GitHub implements MediaWiki's markup in that case. Use
    double brackets (`[[]]`), and inside them, put the name of the wiki page you want
    to link to. In our example, I used `[[Contributing]]` and this will create a link
    to another page. Notice that if the link does not exist, it is rendered in red.
    If you click on it, you will be redirected to create the page.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 内部链接在你想链接到wiki的另一页时非常有用。假设你有42页，当你想引用另一个页面时，每次都需要输入完整的网址。GitHub在这种情况下实现了MediaWiki的标记。使用双括号（`[[]]`），并在其中放入你要链接的wiki页面的名称。在我们的示例中，我使用了`[[Contributing]]`，这将创建一个指向另一个页面的链接。请注意，如果链接不存在，它会以红色显示。如果点击它，你将被重定向到创建页面的界面。
- en: When creating headers, you use `#` before the text. The number of `#` defines
    the header style that will be used. Each header gets a separate anchor link, which
    you can see if you place your mouse over it on a saved page. This anchor link
    can then be used to reference internal links.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建标题时，你需要在文本前面加上`#`。`#`的数量定义了将使用的标题样式。每个标题都有一个单独的锚点链接，你可以在保存页面时将鼠标悬停在标题上查看这个锚点链接。然后，你可以使用这个锚点链接来引用内部链接。
- en: In our example, you can see that I created three headers, namely  `Getting started`,
    `Contribute`, and `Alternative methods`. In `Getting started`, I placed an interlink
    with a reference to `Alternative methods`. The piece of Markdown that did this
    is `[[here|Installation#alternative-methods]]`. This style introduces two new
    areas to explore.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，你可以看到我创建了三个标题，即`Getting started`、`Contribute`和`Alternative methods`。在`Getting
    started`中，我放置了一个指向`Alternative methods`的互联链接。实现这一点的Markdown代码是`[[here|Installation#alternative-methods]]`。这种风格引入了两个新的探索领域。
- en: Firstly, you can see that an alternate text can be used much like with external
    links. The only difference is that both the alternate text and the link are placed
    inside the double brackets separated by a pipe (`|`). Secondly, you can see how
    the call to the internal reference link is made. The page title goes first followed
    by the octothorp sign (`#`) and last is the header. It is important to understand
    that the header, as part of the interlink, gets transformed, whereas empty spaces
    are replaced with hyphens (`-`) and all special characters (`?,'!`, and so on)
    are lost.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以看到，备用文本可以像外部链接一样使用。唯一的区别是，备用文本和链接都放在双括号内，用管道符号（`|`）分隔。其次，你可以看到如何调用内部引用链接。页面标题放在最前面，后跟井号符号（`#`），最后是标题。理解这一点很重要，因为作为互联链接的一部分，标题会被转换，而空格会被替换为连字符（`-`），所有特殊字符（如`?,'!`等）都会丢失。
- en: You can always use the preview to test whether an anchor link will be rendered
    correctly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时使用预览来测试锚点链接是否会正确渲染。
- en: Internal links are only supported inside the same wiki. You cannot link to another
    wiki with an internal link. In this case, you will have to use external links.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 内部链接仅在同一wiki内支持。你不能使用内部链接链接到另一个wiki。在这种情况下，你必须使用外部链接。
- en: We have only scratched the surface regarding Markdown. You can read more about
    it in the nice cheat sheet at [https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只触及了Markdown的表面。你可以在[https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)的优秀备忘单中阅读更多相关内容。
- en: How to add a sidebar and a footer to your wiki
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何为你的wiki添加侧边栏和页脚
- en: If you have write access to a wiki, you should be able to see the Add a custom
    sidebar and Add a custom footer buttons.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有wiki的写入权限，你应该能够看到“添加自定义侧边栏”和“添加自定义页脚”按钮。
- en: GitHub has a default sidebar where it places all the pages of the wiki. This
    might not be useful since they are shown in name order and sometimes you want
    users to be able to access important information without searching too much.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub有一个默认的侧边栏，用于放置所有的wiki页面。由于它按名称顺序显示页面，这可能并不总是有用，有时你可能希望用户能够方便地访问重要信息，而无需进行过多的搜索。
- en: 'Much like any other wiki page, the sidebar can be written in a markup language
    that GitHub supports. In the following example, I used `Markdown`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他wiki页面一样，侧边栏也可以使用GitHub支持的标记语言编写。在下面的示例中，我使用了`Markdown`：
- en: '![](img/00035.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00035.jpeg)'
- en: 'As you can see, I used a bulleted list and placed links on each item. Indenting
    an item (one or more spaces) will provide the following result:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我使用了一个项目符号列表，并在每个项目上放置了链接。缩进项目（一个或多个空格）将得到以下结果：
- en: '![](img/00036.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00036.jpeg)'
- en: 'Like the sidebar, you can also create your own custom footer. For example,
    I used two external links with custom text, as you can see in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像侧边栏一样，你还可以创建自己的自定义页脚。例如，我使用了两个带有自定义文本的外部链接，正如下面的截图所示：
- en: '![](img/00037.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00037.jpeg)'
- en: 'After all modifications, we get a nice wiki page with our custom sidebar and
    footer:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有修改完成后，我们得到了一个漂亮的 Wiki 页面，包含自定义的侧边栏和页脚：
- en: '![](img/00038.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00038.jpeg)'
- en: Watching a wiki page's commit history and reverting to a previous state if needed
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 Wiki 页面提交历史，并在需要时恢复到之前的状态
- en: Would you be surprised if you were told that a wiki is essentially a separate
    Git repository? In the *Tips and tricks* section, we will see how to clone a wiki
    locally, make changes, and push back to GitHub.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果告诉你 Wiki 本质上是一个独立的 Git 仓库，你会感到惊讶吗？在*技巧和窍门*部分，我们将看到如何将 Wiki 克隆到本地，进行更改并推送回
    GitHub。
- en: 'As with all Git repositories, there are commits and a history log. Each page
    gets a filtered log of the commits and changes it has undergone. One quick way
    to access the history log is to click on the revisions link on each page. This
    can be found under each page title. Take, for example, the Home page which has
    three revisions:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有 Git 仓库一样，这里有提交记录和历史日志。每个页面都有其过滤后的提交日志，记录了页面所经历的所有更改。一种快速访问历史日志的方法是点击每个页面上的修订链接。这个链接可以在每个页面标题下找到。例如，首页有三个修订版本：
- en: '![](img/00039.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00039.jpeg)'
- en: Another way to view a page's history is by using the Page History button which
    can be found when you edit a page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看页面历史的另一种方式是使用“页面历史”按钮，这个按钮可以在编辑页面时找到。
- en: One other way to see the history log is to append `/_history` to your page.
    So, for example, [https://github.com/axilleas/github-essentials-v2/wiki/Home](https://github.com/axilleas/github-essentials-v2/wiki/Home)
    becomes [https://github.com/axilleas/github-essentials-v2/wiki/Home/_history](https://github.com/axilleas/github-essentials-v2/wiki/Home/_history).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 查看历史日志的另一种方法是将`/_history`附加到你的页面。例如，[https://github.com/axilleas/github-essentials-v2/wiki/Home](https://github.com/axilleas/github-essentials-v2/wiki/Home)
    变成 [https://github.com/axilleas/github-essentials-v2/wiki/Home/_history](https://github.com/axilleas/github-essentials-v2/wiki/Home/_history)。
- en: 'Here is what my Home page log looks like:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的首页日志的样子：
- en: '![](img/00040.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00040.jpeg)'
- en: From the preceding screenshot, you can get a lot of useful information. You
    can see that the username of the person who made the change comes up first in
    the history table. In this example, there is only mine, but in a wiki with many
    collaborators, you can easily tell who made what change. Then, you get the commit
    message which is super useful because you can tell from a glimpse what the change
    was about. The third column is about the time the change was made and, finally,
    there is the commit SHA of the change.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，你可以获得很多有用的信息。你可以看到，进行更改的人的用户名首先出现在历史表格中。在这个例子中，只有我的用户名，但在有许多协作者的 Wiki
    中，你可以很容易地看出是谁做了什么更改。接下来，你会看到提交信息，这非常有用，因为你可以一眼看出更改的内容。第三列是关于更改时间的，最后还有更改的提交 SHA。
- en: Now, let's use the power of reverting when things go south. Firstly, create
    a new page, save it, and then delete it. We cannot go to that specific page's
    history log since it is no longer there, so we need to head over to the main History
    page, the mother of all pages. Since this page is hidden, you need to manually
    append `/_history` to your main wiki page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们利用恢复功能，当事情变得不顺利时。首先，创建一个新页面，保存它，然后删除它。我们无法查看该特定页面的历史记录，因为它已经不再存在，所以我们需要前往主历史页面，它是所有页面的母体。由于此页面是隐藏的，你需要手动将`/_history`添加到你的主
    Wiki 页面后面。
- en: 'In order to revert things, you need to use the Compare Revisions button. You
    can choose between one or two revisions to revert from:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了恢复更改，你需要使用“比较修订”按钮。你可以选择恢复一个或两个修订版本：
- en: '![](img/00041.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00041.jpeg)'
- en: You can tell the default GitHub commit messages from the custom ones since they
    follow the pattern `Created/Updated/Destroyed Title of page (language)`, where
    `language` is the markup language that was used to create the page.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过默认的 GitHub 提交信息与自定义提交信息进行区分，因为默认信息遵循`Created/Updated/Destroyed Title of
    page (language)`的格式，其中`language`是用于创建该页面的标记语言。
- en: Here, we chose two, but since they are one after another in the commit history,
    choosing only the last one would be the same. It's like comparing the changes
    between `git show HEAD` and `git diff sha2 sha1`, where `sha2` is the last commit
    `SHA` and `sha1` is the one before it. The `diff` is the same.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了两个提交，但由于它们在提交历史中是连续的，因此只选择最后一个也一样。就像是在比较`git show HEAD`和`git diff sha2
    sha1`之间的更改，其中`sha2`是最后一次提交的`SHA`，`sha1`是之前的那个。`diff`是相同的。
- en: 'After hitting the `Compare Revisions` button, we will see the change that was
    introduced with this commit:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`比较修订`按钮后，我们将看到此次提交所引入的更改：
- en: '![](img/00042.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00042.jpeg)'
- en: 'Let''s bring back the deleted page by hitting the Revert Changes button. At
    the time of writing this book, every time I tried to revert the deletion of a
    page, I was presented with a 500 internal server error. Despite the error, go
    back to the History page, and you will see that the revert was indeed performed
    and the deleted page was brought back from the grave:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过点击回退更改按钮恢复被删除的页面。在写这本书的时候，每次我尝试回退删除页面时，都会出现500内部服务器错误。尽管出现了错误，但回到历史页面，你会看到回退操作实际上已经执行，并且被删除的页面被从“死而复生”：
- en: '![](img/00043.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: You can see that the commit message of the revert references the two commits
    that created and destroyed the page respectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，回退的提交消息引用了分别创建和删除该页面的两个提交。
- en: Sometimes, you will not be able to compare any two revisions and revert due
    to conflict. In this case, GitHub will warn you with a message: This patch was
    not able to be reversed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，由于冲突，你将无法比较两个修订版本并回退。在这种情况下，GitHub会用一条消息警告你：此补丁无法回退。
- en: That's all there is to know about GitHub wikis. Next we will focus on managing
    code releases with the tools GitHub provides.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于GitHub维基的所有知识。接下来，我们将重点关注如何使用GitHub提供的工具来管理代码发布。
- en: Managing code versioning
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理代码版本
- en: In the world of software management, almost every piece of software is shipped
    with a version. It is a way to declare its evolution over time, usually with the
    addition of enhancements or bug fixes. GitHub leverages the power of Git and provides
    a simple interface to ship your versioned software.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件管理的世界中，几乎每一款软件都有一个版本号。这是一个宣告软件随时间演化的方式，通常包括功能增强或bug修复。GitHub利用Git的强大功能，提供了一个简单的界面来发布你版本化的软件。
- en: Creating a release
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建发布
- en: 'In GitHub, the notion of a release is tightly tied to Git tags. You can see
    the existing tags, if any, from the same menu where you change a branch, as shown
    in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub中，发布的概念与Git标签紧密相关。你可以在更改分支的相同菜单中查看现有的标签（如果有的话），如下图所示：
- en: '![](img/00044.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: If you visit the Releases page and there is no tag created yet, you will be
    prompted to create one. Creating a release will automatically create a tag.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问发布页面并且还没有创建标签，你将被提示创建一个。创建发布将自动创建一个标签。
- en: 'Let''s click on the Create a new release button. The following page will appear:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们点击创建新发布按钮。接下来将出现以下页面：
- en: '![](img/00045.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: You only need to fill in the name of the Tag version box; everything else is
    optional. If the tag name you provide already exists, you will be presented with
    a duplicate tag name notification.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需填写标签版本名称框中的内容，其他的都是可选的。如果你提供的标签名称已经存在，你将看到标签名称重复的提示。
- en: 'Your tag name can be any arbitrary value, but it is highly recommended to follow
    the semantic versioning scheme. To briefly describe what semantic versioning is:
    a release number consists of three numbers separated by dots in the form of `MAJOR.MINOR.PATCH`.
    You should then increment the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你的标签名称可以是任何自定义值，但强烈推荐遵循语义版本控制方案。简要介绍一下语义版本控制：发布号由三个数字组成，数字之间用点分隔，形式为`MAJOR.MINOR.PATCH`。你应当依此进行递增：
- en: The `MAJOR` version when you make incompatible API changes
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAJOR`版本用于进行不兼容的API更改'
- en: The `MINOR` version when you add functionality in a backwards-compatible manner
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MINOR`版本用于以向后兼容的方式添加功能'
- en: The `PATCH` version when you make backwards-compatible bug fixes
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PATCH`版本用于进行向后兼容的bug修复'
- en: You can read more at [http://semver.org/](http://semver.org/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://semver.org/](http://semver.org/)查看更多内容。
- en: One great way to name your tags is to match the existing milestones. From the
    previous chapter, we already had a `v0.5` milestone so let's also name the new
    tag `v0.5`. Start typing it and if the tag does not exist, you will see the Excellent!
    This tag will be created from the target when you publish this release message.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的命名标签的方式是匹配现有的里程碑。从上一章中我们已经有了一个`v0.5`的里程碑，因此让我们也将新标签命名为`v0.5`。开始输入标签名，如果该标签不存在，你会看到“Excellent!
    This tag will be created from the target when you publish this release message”。
- en: 'You can choose the target branch or commit from the drop-down menu as shown
    in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从下拉菜单中选择目标分支或提交，正如以下截图所示：
- en: '![](img/00046.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: If you choose a branch, a tag pointing to the latest commit in that branch will
    be created. If you instead go to the Recent Commits tab, you can choose from a
    number of recent commits to create a tag from.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了某个分支，将会创建一个指向该分支最新提交的标签。如果你选择进入“最近提交”标签页，可以从多个最近的提交中选择来创建标签。
- en: For the sake of our example, let's choose the master branch and enter a release
    title. Optionally, but recommended, you can add a description of what this release
    is about. I like to consider the description like writing a blog post of what
    changed in this release.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便我们的示例，选择`master`分支并输入版本标题。你可以选择性地（但推荐）添加一个描述，说明这个版本的内容。我喜欢把描述当作写一篇博客文章，解释该版本发生了哪些变化。
- en: 'You can, of course, use Markdown like almost everywhere in GitHub and use the
    Preview button to see how it will be rendered:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以像在 GitHub 中的几乎任何地方一样使用 Markdown，并使用预览按钮查看渲染效果：
- en: '![](img/00047.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: 'If you think everything is in order, hit the Publish release button. You can
    always edit any release anytime, so do not worry if you miss something. The following
    screenshot explains all the information about a release:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为一切都已准备好，点击发布版本按钮。你随时都可以编辑任何版本，因此不用担心错过什么。以下截图解释了关于发布的所有信息：
- en: '![](img/00048.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: If a release title is not provided, the tag name will be shown instead. Likewise,
    if a description is not provided, the latest commit message of the tag will be
    shown instead.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有提供版本标题，标签名将会显示出来。同样，如果没有提供描述，标签的最新提交信息将会显示出来。
- en: Editing a release
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑版本
- en: In order to edit a release, you can either click on the Edit release button
    next to the release under the Releases page or visit the particular release and
    click Edit there.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑版本，你可以点击版本页面中发布旁边的“编辑发布”按钮，或者直接访问该版本并点击“编辑”。
- en: Pushing a tag from the command line
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行推送标签
- en: 'Now, let''s see how GitHub behaves when a tag already exists. I made a few
    changes to a file and created a new tag from the command line. Finally, I pushed
    this tag to GitHub as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看当标签已经存在时，GitHub会如何反应。我对文件做了一些更改，并从命令行创建了一个新标签。最后，我将这个标签推送到 GitHub，如下所示：
- en: '[PRE0]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you now visit the tags page, you will see the new tag above the one we made
    before. In the releases page, click on Draft a new release. We will choose an
    existing tag, so in the Tag version field, type `v0.5.1`. GitHub found out that
    the tag already exists so it informed us that this is an existing tag:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在访问标签页面，将会看到新标签位于我们之前创建的标签上方。在版本页面中，点击“草稿新版本”。我们将选择一个已有的标签，因此在标签版本字段中输入`v0.5.1`。GitHub发现该标签已存在，因此通知我们这是一个已有标签：
- en: '![](img/00049.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: Give it a title, a brief description, and then publish it. Since the `v0.5.1`
    tag refers to the latest commit rather than the previous release, it now gets
    marked as Latest release.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为其添加一个标题和简短描述，然后发布它。由于`v0.5.1`标签指向的是最新提交而非之前的发布，因此它现在被标记为“最新发布”。
- en: Marking as pre-release
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记为预发布
- en: 'A nice little decorative feature is that you can mark a release as a prerelease,
    meaning you can inform the users that it''s not ready for production but that
    they can still download and test it. Let''s make a prerelease of the `develop`
    branch, which contains new commits that do not exist in `master` yet:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不错的小装饰功能是，你可以将版本标记为预发布，这意味着你可以告知用户该版本尚未准备好用于生产环境，但他们仍然可以下载并测试它。我们将创建一个`develop`分支的预发布版本，其中包含`master`分支尚不存在的新提交：
- en: '[PRE1]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new release out of the `develop` branch and name it `v0.6rc1` . This
    time, mark it as a pre-release by ticking the relevant option:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从`develop`分支创建一个新版本，并命名为`v0.6rc1`。这次，通过勾选相关选项将其标记为预发布：
- en: '![](img/00050.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: 'After publishing it, here is what the releases page will look like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 发布后，版本页面将如下所示：
- en: '![](img/00051.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Making a draft of a release
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建发布草稿
- en: If you tend to provide a detailed description with each release, you may find
    the draft feature quite useful. You can repeatedly edit a release while adding
    the required information and then save it as a draft. This way, you can spend
    less time on it when you need to publish it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在每次发布时提供详细描述，可能会发现草稿功能非常有用。你可以在反复编辑发布内容并添加所需信息后，将其保存为草稿。这样，在需要发布时，你就可以节省更多时间。
- en: 'In order to make a draft of a release, do not click Publish release, but rather
    click the Save draft button. Back on the Releases page, you can see the draft
    release you just created:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 若要制作发布草稿，不要点击“发布版本”，而是点击“保存草稿”按钮。返回到发布页面，你可以看到你刚刚创建的草稿版本：
- en: '![](img/00052.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: You can edit it as many times as you want, and when the time comes to publish
    it, just click Public release. To delete a draft, click on the Discard draft button.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随时编辑它，当你准备好发布时，只需点击“公开发布”。若要删除草稿，点击“丢弃草稿”按钮。
- en: Since you are working on a draft, you don't have to worry about changing the
    tag of the release or any other information for that matter. Drafts can only be
    viewed by those who have write access to the repository, so it is not shown to
    the public until they are published.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你正在处理草稿，因此不必担心更改版本标签或其他信息。草稿只能由具有写权限的用户查看，因此在发布之前，它不会向公众显示。
- en: Uploading your own files
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传你自己的文件
- en: There are cases where you might want to provide precompiled binaries for a variety
    of operating systems. For your Android application, it would be the `apk` files;
    for Windows, `msi` or `exe`; for Debian, `deb`; for RedHat, `rpm`, and so on.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要为各种操作系统提供预编译的二进制文件。对于你的 Android 应用程序，它可能是 `apk` 文件；对于 Windows，是 `msi`
    或 `exe`；对于 Debian，是 `deb`；对于 RedHat，是 `rpm`，等等。
- en: 'When you create a release, there is a window at the very bottom that tells
    you to attach any binaries. Here, I uploaded a test `github-essentials.zip` file
    as you can see in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 创建发布时，底部会出现一个窗口，提示你附加任何二进制文件。在这里，我上传了一个测试文件 `github-essentials.zip`，如以下截图所示：
- en: '![](img/00053.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: 'You can upload multiple files, but bear in mind that GitHub limits the upload
    size to 2 GB for each file. After you successfully upload the new binary and publish
    the release, you can see the files you manually attached along with the source
    code GitHub released for you:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以上传多个文件，但请注意，GitHub 对每个文件的上传大小限制为 2 GB。成功上传新的二进制文件并发布版本后，你可以看到你手动附加的文件以及 GitHub
    为你发布的源代码：
- en: '![](img/00054.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: Tips and tricks
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和技巧
- en: Here is a tip to get notified about new releases in an atom feed. Also, while
    you familiarize yourself with Git, you'll be happy to know that you can edit a
    project's wiki locally.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个小提示，可以通过 atom feed 获取新版本发布的通知。同时，在你熟悉 Git 的过程中，你会很高兴知道，你可以在本地编辑项目的 wiki。
- en: Subscribing to new releases via atom feed
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 atom feed 订阅新版本发布
- en: If you are used to subscribing to feeds to learn the news regarding your favorite
    blogs, you will be happy to know that you can subscribe to get notified about
    new releases on GitHub.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯于订阅博客的动态以获取最新的新闻，那么你会很高兴知道你可以订阅以接收 GitHub 上新版本发布的通知。
- en: Simply go to the releases page and append `.atom` to the end of the URL. For
    example, [https://github.com/diaspora/diaspora/releases](https://github.com/diaspora/diaspora/releases)
    becomes [https://github.com/diaspora/diaspora/releases.atom](https://github.com/diaspora/diaspora/releases.atom).
    Cool, isn't it?
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 只需访问发布页面，并在 URL 后面添加 `.atom`。例如，[https://github.com/diaspora/diaspora/releases](https://github.com/diaspora/diaspora/releases)
    变为 [https://github.com/diaspora/diaspora/releases.atom](https://github.com/diaspora/diaspora/releases.atom)。酷吧？
- en: Editing the wiki locally
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地编辑 wiki
- en: As mentioned in the wiki commit history section, every wiki is a separate git
    repository. As such, you can clone it, make changes locally, and push back to
    GitHub.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如 wiki 提交历史部分所述，每个 wiki 都是一个独立的 git 仓库。因此，你可以克隆它，在本地进行更改，并推送回 GitHub。
- en: It is powered by the `gollum` Ruby library that we will install and use to preview
    the wiki locally.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它由 `gollum` Ruby 库提供支持，我们将安装并使用它在本地预览 wiki。
- en: Installing gollum
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 gollum
- en: The `gollum` library is packaged as a Ruby gem, and the easiest and quickest
    way to install it is to follow the official wiki entry at [https://github.com/gollum/gollum/wiki/Installation](https://github.com/gollum/gollum/wiki/Installation).
    You can probably avoid installing it system-wide, but this is not within the scope
    of this guide.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`gollum` 库被打包为 Ruby gem，安装它的最简单和最快方法是按照官方 wiki 条目 [https://github.com/gollum/gollum/wiki/Installation](https://github.com/gollum/gollum/wiki/Installation)
    进行操作。你可能能够避免全局安装它，但这不在本指南的范围之内。'
- en: Cloning the wiki and viewing the preview in your browser
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆 wiki 并在浏览器中查看预览
- en: 'Back on our wiki page, you should have noticed the download link. Every wiki
    repository has a remote URL encapsulated in green as shown in the following screenshot;
    essentially, it is the URL of the main Git repository with `.wiki` appended to
    the URL:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的 wiki 页面，你应该注意到下载链接。每个 wiki 仓库都有一个被绿色标记的远程 URL，如下图所示；它本质上是主 Git 仓库的 URL，后面加上
    `.wiki`：
- en: '![](img/00055.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: 'Use this URL and clone the wiki; then, run the `gollum` command inside that
    repository:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 URL 克隆 wiki；然后，在该仓库中运行 `gollum` 命令：
- en: '[PRE2]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although not stated, you can also clone the wiki using the Git protocol and
    not HTTP.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管没有明确说明，你也可以使用 Git 协议而不是 HTTP 克隆 wiki。
- en: 'If you see an output similar to the following, then `gollum` will successfully
    run and you can preview the wiki in your browser at `0.0.0.0:4567`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似以下的输出，那么 `gollum` 将成功运行，并且你可以在 `0.0.0.0:4567` 上预览 wiki：
- en: '[PRE3]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The interface should be familiar with the GitHub wiki. Let's make a few changes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 界面应该与你熟悉的 GitHub wiki 相似。让我们做一些修改。
- en: Making changes locally and pushing to GitHub
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地修改并推送到 GitHub
- en: Now that you have a running instance of the wiki, you can make changes in the
    browser much like in GitHub or use an editor such as `vim` or `emacs` and edit
    the files directly.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了一个运行中的 wiki 实例，你可以像在 GitHub 上一样在浏览器中进行修改，或者使用 `vim` 或 `emacs` 等编辑器直接编辑文件。
- en: Since you already know how to edit the wiki in the browser, let's use an editor
    and change the `Installation.md` file. After the edit, save the file and commit
    it to Git. Take a second to see the log with `git log` and compare it with the
    history of the commits in GitHub (at `https://github.com/<username>/<repository>/wiki/_history`).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经知道如何在浏览器中编辑 wiki，我们就用一个编辑器来修改 `Installation.md` 文件。编辑完成后，保存文件并提交到 Git。花一点时间使用
    `git log` 查看日志，并与 GitHub 上的提交历史进行对比（在 `https://github.com/<username>/<repository>/wiki/_history`）。
- en: Now push the changes back to GitHub and visit the history page again. The new
    commit should be there along with the new change.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将更改推送回 GitHub，然后再次访问历史页面。新提交应该在那里，并显示新的更改。
- en: If you want to write in a different markup language, other than Markdown, see
    the readme at [https://github.com/gollum/gollum#installation](https://github.com/gollum/gollum#installation)
    for ways to install the necessary gems.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用其他标记语言编写，而不是 Markdown，请参阅 [https://github.com/gollum/gollum#installation](https://github.com/gollum/gollum#installation)
    中的说明，了解如何安装所需的 gems。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the importance of documentation and how GitHub
    allows you to host a Markdown-powered wiki along with every project. Creating,
    deleting, editing, and reverting pages should by now be familiar terms.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你了解了文档的重要性，以及 GitHub 如何允许你为每个项目托管一个基于 Markdown 的 wiki。创建、删除、编辑和恢复页面应该已经是你熟悉的术语了。
- en: What is the connection between releases and tags, you ask? Well, if you read
    the second part of this chapter, you should already know what connects them and
    how to create releases and distribute them to the public.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你问发布版和标签之间的关系是什么？好吧，如果你读了本章的第二部分，你应该已经知道它们之间的联系以及如何创建发布版并将其分发给公众。
- en: In the next chapter, you will see the management of organizations and teams.
    Read on and learn how to harness the power of collaboration.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将看到如何管理组织和团队。继续阅读，了解如何利用协作的力量。
