- en: Chapter 8. Debugging and Error Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 调试与错误处理
- en: 'Like software code, testing infrastructure code is an all-important task. There
    should ideally be no code floating around in production that has not been tested,
    especially when you have strict customer SLAs to meet, and this is true even for
    the infrastructure. In this chapter, we''ll look at syntactic checks, testing
    without applying the code on the machines (the no-op mode), and functional testing
    for playbooks, which are at the core of Ansible and trigger the various tasks
    you want to perform on the remote hosts. It is recommended that you integrate
    some of these into your **Continuous Integration** (**CI**) system that you have
    for Ansible to better test your playbooks. We''ll be looking at the following
    points:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 就像软件代码一样，测试基础设施代码是一项至关重要的任务。理想情况下，生产环境中不应该存在未经测试的代码，尤其是当你有严格的客户 SLA 需要满足时，这对于基础设施同样适用。本章中，我们将讨论语法检查、在不将代码应用到机器上的情况下进行测试（无操作模式）以及功能测试，这些都是
    Ansible 的核心内容，并触发你想要在远程主机上执行的各种任务。建议将这些集成到你的**持续集成**（**CI**）系统中，以便更好地测试你的 playbook。我们将关注以下几点：
- en: Syntax checking
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法检查
- en: Checking the mode with and without diff
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用和不使用 diff 的检查模式
- en: Functional testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: 'As part of functional testing, we will be looking at:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为功能测试的一部分，我们将关注以下内容：
- en: Assertions on the end state of the system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对系统最终状态的断言
- en: Testing with tags
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签进行测试
- en: Serverspec (a different tool, but can work wonderfully with Ansible)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Serverspec（一个不同的工具，但可以与 Ansible 很好地配合使用）
- en: Using the `--syntax-check` option
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--syntax-check`选项
- en: 'Whenever you run a playbook, Ansible first checks the syntax of the playbook
    file. If an error is encountered, Ansible will error out saying there was a syntax
    error and will not proceed unless you fix that error. This syntax checking is
    performed only when you run the `ansible-playbook` command. When writing a big
    playbook or if you have included task files, it might be difficult to fix all
    of the errors; this might end up wasting more time. In order to deal with such
    situations, Ansible provides a way to check your YAML syntax as you keep progressing
    with your playbook. For this example, we will need to create the file `playbooks/setup_apache.yaml`
    with the following content:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你运行一个 playbook 时，Ansible 首先会检查 playbook 文件的语法。如果遇到错误，Ansible 会提示语法错误并停止执行，除非你修复该错误。此语法检查仅在你运行`ansible-playbook`命令时进行。当编写大型
    playbook 或包含任务文件时，可能很难修复所有错误，这可能会浪费更多时间。为了解决这种情况，Ansible 提供了一种方法，可以在你继续编写 playbook
    时检查 YAML 语法。对于这个示例，我们需要创建文件`playbooks/setup_apache.yaml`，其内容如下：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have our example file, we need to run it with the `--syntax-check`
    parameter, so you will invoke Ansible as:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了示例文件，我们需要使用`--syntax-check`参数来运行它，因此你将通过以下方式调用 Ansible：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `ansible-playbook` command checked the YAML syntax of the `setup_apache.yml`
    playbook and showed that the syntax of the playbook was correct. Let''s look at
    the resulting errors from the invalid syntax in the playbook:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-playbook`命令检查了`setup_apache.yml` playbook的 YAML 语法，并显示该 playbook 的语法是正确的。让我们来看看由于
    playbook 中无效语法导致的错误：'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The error shows that there is an indentation error in the `Enable Apache` task.
    Ansible also gives you the line number, column number, and the filename where
    this error is found (even if this is not a guarantee of the exact location of
    the error). This should definitely be one of the basic tests that you should run
    as part of your CI for Ansible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 错误显示在`Enable Apache`任务中存在缩进错误。Ansible 还会给出出错的行号、列号和文件名（即使这并不能保证错误的准确位置）。这应该绝对是你在
    Ansible 的持续集成中应该运行的基础测试之一。
- en: The check mode
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查模式
- en: The check mode (also known as the **dry run** or **no-op mode**) will run your
    playbook in a no-operation mode, that is, it will not apply any changes to the
    remote host; instead, it will just show the changes that will be introduced when
    a task is run. Whether the check mode is actually enabled or not depends on each
    task. There are few commands that you may find interesting. All those modules
    will have to be run in `/usr/lib/python2.7/site-packages/ansible/modules` or where
    your Ansible module folder is (different paths could be possible based on the
    operating system you are using as well as the way you installed Ansible).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 检查模式（也称为**干运行**或**无操作模式**）将在没有执行任何操作的情况下运行你的剧本，即它不会对远程主机应用任何更改；相反，它只会显示任务运行时将引入的更改。是否启用检查模式取决于每个任务。你可能会对以下命令感兴趣。所有这些模块必须在`/usr/lib/python2.7/site-packages/ansible/modules`或你Ansible模块文件夹所在的路径中运行（不同的路径可能根据你使用的操作系统及Ansible的安装方式而有所不同）。
- en: 'To count the number of available modules on your installation, you can perform
    this command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要统计安装中可用的模块数量，你可以执行以下命令：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With Ansible 2.1.1, the result of this command is `569`, since Ansible has that
    many modules.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ansible 2.1.1时，这个命令的结果是`569`，因为Ansible有这么多模块。
- en: 'If you want to see how many of these support the check mode, you can run:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看有多少模块支持检查模式，你可以运行：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With Ansible 2.1.1 the result of this command is `242`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ansible 2.1.1时，这个命令的结果是`242`。
- en: 'You might also find the following command useful for listing all modules that
    support the check mode:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会发现以下命令在列出所有支持检查模式的模块时很有用：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This helps you test how your playbook will behave and check if there may be
    any failures before running it on your production server. You run a playbook in
    the check mode by simply passing the `--check` option to your `ansible-playbook`
    command. Let''s see how the check mode works with the `setup_apache.yml` playbook,
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于你测试剧本的行为，并在将其运行在生产服务器之前检查是否可能出现任何失败。你只需将`--check`选项传递给`ansible-playbook`命令，就可以在检查模式下运行剧本。让我们看看检查模式如何与`setup_apache.yml`剧本一起工作，如下所示：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding run, instead of making the changes on the target host, Ansible
    highlighted all the changes that would have occurred during the actual run. From
    the preceding run, you can find that `httpd` service was already installed on
    the target host, because of which, Ansible's exit message for that task was ok.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的运行中，Ansible没有在目标主机上做出更改，而是突出显示了实际运行时将发生的所有更改。从前一次的运行中，你可以发现`httpd`服务已经安装在目标主机上，因此该任务的Ansible退出消息为“ok”。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Whereas, with the second task, it found that `httpd` service was not running
    on the target host:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，第二个任务发现目标主机上的`httpd`服务没有运行：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When you run the preceding playbook again without the check mode enabled, Ansible
    will make sure that the service state is running.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次运行前面的剧本时，如果没有启用检查模式，Ansible将确保服务状态为运行中。
- en: Indicating differences between files using --diff
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`--diff`指示文件之间的差异
- en: 'In the check mode, you can use the `--diff` option to show the changes that
    would be applied to a file. To be able to see the `--diff` option in use, we need
    to change our `playbooks/setup_apache.yaml` playbook to match the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查模式下，你可以使用`--diff`选项来显示将应用于文件的更改。为了能够看到`--diff`选项的使用，我们需要将`playbooks/setup_apache.yaml`剧本修改为如下所示：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we added a task, which will ensure a certain state of the `/etc/httpd/conf.d/userdir.conf`
    file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们添加了一个任务，它将确保`/etc/httpd/conf.d/userdir.conf`文件的某个特定状态。
- en: 'We also need to create a template file placed in `templates/userdir.conf` with
    the following content:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个模板文件，并将其放在`templates/userdir.conf`中，内容如下：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this template, we only changed the `UserDir enabled` line, which by default
    is `UserDir disabled`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，我们只更改了`UserDir enabled`这一行，默认情况下它是`UserDir disabled`。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `--diff` option doesn't work with the file module; you will have to use
    the template module only.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`--diff`选项无法与文件模块一起使用；你只能使用模板模块。'
- en: 'We can now test the result of this with the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过以下命令测试这个结果：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, we are using the `--check` parameter that will ensure this
    will be a dry-run. We will receive the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用了`--check`参数，这将确保这是一个干运行。我们将收到以下输出：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see, Ansible compares the current file of the remote host with the
    source file; a line starting with `+` indicates that a line was added to the file,
    whereas `-` indicates that a line was removed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Ansible 会将远程主机的当前文件与源文件进行比较；以`+`开头的行表示文件中添加了一行内容，而`-`表示删除了一行。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use `--diff` without the `--check` option, which will allow Ansible
    to make the specified changes and show the difference between two files.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在没有`--check`选项的情况下使用`--diff`，这将允许 Ansible 执行指定的更改并显示两个文件之间的差异。
- en: Using `--diff` and `--check` modes together is a test step that can potentially
    be used as part of your CI tests to assert how many steps have changed as part
    of the run. Another case where you can use those features together is the part
    of the deployment process that checks what exactly will change when you run Ansible
    on that machine.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将`--diff`和`--check`模式一起使用是一个测试步骤，可能作为你 CI 测试的一部分，用来验证在运行过程中有多少步骤发生了变化。另一个可以将这两个功能一起使用的场景是部署过程的一部分，检查在你运行
    Ansible 时到底会发生什么变化。
- en: There are also cases - that should not happen, but sometimes happen-where you
    have not run a playbook on a machine for a very long time and you are worried
    that running it again will break something. Using those options together should
    help you understand if it was just you worrying or if this is a real risk.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些情况——虽然不该发生，但有时会发生——你可能很长时间没在某台机器上运行 playbook，担心再次运行会破坏某些东西。将这些选项一起使用应能帮助你了解是你过度担心，还是确实存在实际风险。
- en: Functional testing in Ansible
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 中的功能测试
- en: Wikipedia says functional testing is a **Quality Assurance (QA) process** and
    a type of black-box testing that bases its test cases on the specifications of
    the software component under the test. **Functions are tested by feeding them
    input and examining the output**; the internal program structure is rarely considered.
    Functional testing is as important as code when it comes to infrastructure.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Wikipedia 表示功能测试是一个**质量保证（QA）过程**，是一种黑盒测试类型，其测试用例基于被测试软件组件的规格。**通过给功能输入数据并检查输出结果来进行测试**；通常不考虑内部程序结构。功能测试在基础设施中与代码同样重要。
- en: From an infrastructure perspective, with respect to functional testing, we test
    output of our Ansible runs on the actual machines. Ansible provides multiple ways
    to perform the functional testing of your playbook; let's look at some of the
    most commonly used methods.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础设施的角度来看，在功能测试方面，我们测试的是 Ansible 运行在实际机器上的输出。Ansible 提供了多种方式来执行 playbook 的功能测试；让我们来看一些最常用的方法。
- en: Functional testing using assert
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 assert 进行功能测试
- en: The check mode will only work when you want to check whether a task will change
    anything on the host or not. This will not help when you want to check whether
    the output of your module is what you expected. For example, let's say you wrote
    a module that will check if a port is up or not. In order to test this, you might
    need to check the output of your module and see whether it matches the desired
    output or not. To perform such tests, Ansible provides a way to directly compare
    the output of a module with the desired output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检查模式只会在你想检查某个任务是否会对主机做出更改时起作用。如果你想检查模块的输出是否符合预期，这种模式将无效。例如，假设你编写了一个模块来检查端口是否开启。为了测试这个，你可能需要检查模块的输出，看看它是否与预期结果匹配。为了执行这样的测试，Ansible
    提供了一种直接比较模块输出与期望输出的方式。
- en: 'Let''s see how this works creating the file `playbooks/assert_ls.yaml` with
    the following content:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建文件`playbooks/assert_ls.yaml`并加入以下内容来看这个如何运作：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding playbook, we''re running the `ls` command on the target host
    and registering the output of that command in the `list_files` variable. Further,
    we ask Ansible to check whether the output of the `ls` command has the expected
    result. We do this using the `assert` module, which uses some conditional checks
    to verify if the `stdout` value of a task meets the expected output of the user.
    Let''s run the preceding playbook to see what output Ansible returns with the
    command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述 playbook 中，我们在目标主机上运行`ls`命令，并将该命令的输出结果注册到`list_files`变量中。此外，我们要求 Ansible
    检查`ls`命令的输出是否符合预期结果。我们使用`assert`模块来完成此操作，该模块通过一些条件检查来验证任务的`stdout`值是否符合用户的预期输出。让我们运行上述
    playbook 来查看 Ansible 使用该命令返回的输出：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Since we don''t have the file, we will receive the following output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有这个文件，我们将收到以下输出：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we re-run the playbook after we create the expected file, it will not fail
    and therefore this will be the result:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建预期文件后重新运行剧本，它将不会失败，因此结果将是：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This time, the task passed with an ok message as `testfile.txt` was present
    in the `list_files` variable. Likewise, you can match multiple strings in a variable
    or multiple variables using the `and` and `or` operators. The assertion feature
    is quite powerful, and users who have written either unit or integration tests
    in their projects will be quite happy to see this feature!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，任务通过了，并且显示了`testfile.txt`在`list_files`变量中存在的消息。类似地，你可以使用`and`和`or`操作符在变量中或多个变量中匹配多个字符串。断言功能非常强大，曾经在项目中编写过单元测试或集成测试的用户会对这个功能非常高兴！
- en: Testing with tags
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签进行测试
- en: Tags are a great way to test a bunch of tasks without running an entire playbook.
    We can use tags to run actual tests on the nodes to verify the state that the
    user intended to be in, the playbook. We can treat this as another way to run
    integration tests for Ansible on the actual box. The tag method to test can be
    run on the actual machines where you run Ansible, and also, it can be used primarily
    during deployments to test the state of your end systems. In this section, we'll
    first look at how to use tags in general, their features that can possibly help
    us, not just with testing but even otherwise, and finally for testing purposes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是测试一堆任务而不运行整个剧本的好方法。我们可以使用标签对节点执行实际测试，以验证用户意图中的状态，即剧本。我们可以把这当作另一种在实际机器上运行Ansible的集成测试方式。标签方法可以在实际运行Ansible的机器上进行测试，并且它也可以在部署期间主要用于测试最终系统的状态。在本节中，我们将首先了解如何一般性地使用标签，它的功能如何帮助我们，不仅仅是用于测试，甚至在其他方面也有帮助，最后是用于测试目的。
- en: 'To add tags in your playbook, use the tags parameter followed by one or more
    tag names separated by commas. Let''s create a simple playbook in `playbooks/tags_example.yaml`
    to see how the tags work with the following content:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在剧本中添加标签，使用`tags`参数，后跟一个或多个标签名称，标签名称之间用逗号分隔。让我们在`playbooks/tags_example.yaml`中创建一个简单的剧本，查看标签如何工作，内容如下：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we now run the playbook, the file will be created and destroyed. We can
    see it running with the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行剧本，文件将被创建和销毁。我们可以使用以下命令查看它的运行情况：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It will give us this output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给我们这个输出：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Since this is not an idempotent playbook, if we run it over and over, we will
    always see the same result, as the playbook will create and delete the file every
    time.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这不是一个幂等的剧本，如果我们反复运行它，我们将始终看到相同的结果，因为剧本每次都会创建和删除该文件。
- en: 'You can now simply pass the `file_present` tag or the `file_absent` tag to
    only perform one of the actions, like in the following example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以简单地传递`file_present`标签或`file_absent`标签，只执行其中一个动作，像下面的示例一样：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Thanks to the `-t file_present` part, only the tasks with the `file_present`
    tag will be executed, in fact this will be the output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`-t file_present`部分，只有带有`file_present`标签的任务会被执行，实际上这是输出结果：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can also use tags to perform a set of tasks on the remote host just like
    taking a server out of a load balancer and adding it back to the load balancer.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用标签在远程主机上执行一组任务，就像从负载均衡器中移除服务器并重新加入负载均衡器一样。
- en: You can also use the `--check` option with tags. By doing this, you can test
    your tasks without actually running them on your hosts. This allows you to test
    a bunch of individual tasks directly, instead of copying your tasks to a temporary
    playbook and running it from there.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将`--check`选项与标签一起使用。通过这样做，你可以在不实际在主机上运行任务的情况下测试任务。这使得你可以直接测试一堆独立的任务，而不需要将任务复制到一个临时的剧本中并从那里运行。
- en: The --skip-tags
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: --skip-tags
- en: 'Ansible also provides a way to skip some tags in a playbook. If you have a
    long playbook with multiple tags, like 10, and you want to execute them all but
    one, then it would not be a good idea to pass nine tags to Ansible. The situation
    would be more difficult if you forgot to pass a tag and the `ansible-playbook`
    command fails. To overcome such situations, Ansible provides a way to skip a couple
    of tags, instead of passing multiple tags. It''s functioning is pretty straightforward,
    and can be triggered in the following way:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还提供了一种在剧本中跳过某些标签的方法。如果你有一个包含多个标签（如10个标签）的长剧本，并且希望执行其中所有标签，除了一个，那么传递九个标签给Ansible并不是一个好主意。如果你忘记传递某个标签，并且`ansible-playbook`命令失败，那情况会变得更加复杂。为了解决这种情况，Ansible提供了一种跳过某些标签的方法，而不是传递多个标签。其功能非常直接，可以通过以下方式触发：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output will be something like:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, all tasks have been executed except the one with the `file_present`
    tag.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，所有任务都已执行，除了带有 `file_present` 标签的任务。
- en: Managing exceptions
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理异常
- en: 'There are many cases, where for one reason or another, you want your playbook
    and roles to carry on in the case one or more tasks fail. A typical example of
    this could be that you want to check if software is installed or not. Let''s see
    the following example to install Java. In the `roles/java/tasks/main.ymal` file,
    we are going to put the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况下，由于某些原因，你希望在一个或多个任务失败的情况下，继续执行你的 playbook 和角色。一个典型的例子可能是，你想检查软件是否已经安装。让我们看看以下安装
    Java 的例子。在`roles/java/tasks/main.ymal`文件中，我们将写入以下代码：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Before going forward with the other parts that are needed to execute this role,
    I''d like to spend some words on the various parts of this role task list, since
    there are many new things:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续执行其他需要的部分之前，我想花点时间讲解这个角色任务列表的各个部分，因为这里有很多新的内容：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In this task, we execute an `rpm` command that could have two different outputs:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们执行一个`rpm`命令，该命令可能有两种不同的输出：
- en: Fail
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败
- en: Return the complete name of the JDK package
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回 JDK 包的完整名称
- en: 'Since we only want to check if the package exists or not and then to go forward,
    we register the output (*third* line) and ignore eventual failures (*fourth* line):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只想检查包是否存在，然后继续前进，我们注册输出（*第三*行）并忽略可能的失败（*第四*行）：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this part, we use the `uri` module that allows us to hit a remote URI with
    an HTTP request. This module is very nice since it allows you to use all HTTP
    methods as well as to customize HTTP headers. This makes this module very flexible.
    Since in the last line we have `when: java|failed`, this will only be executed
    if Java is not installed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '在这一部分中，我们使用 `uri` 模块，它允许我们使用 HTTP 请求访问远程 URI。这个模块非常好，因为它允许你使用所有 HTTP 方法，并自定义
    HTTP 头部。这样使得该模块非常灵活。由于在最后一行我们有 `when: java|failed`，这将仅在 Java 未安装时执行：'
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here we use `dnf` to install the Java package. Since in the last line we have
    `when: java|failed`, this will only be executed if Java is not installed:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里我们使用 `dnf` 安装 Java 包。由于在最后一行我们有 `when: java|failed`，这将仅在 Java 未安装时执行：'
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here we are going to set new alternatives, in case we are installing Java. `alternatives`
    is an Ansible module that allows us to manage the configuration of the Linux `alternatives`
    program. This program is often used to manage which version of a program should
    be run by default in case you have multiple versions installed by default.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将设置新的 alternatives，以防我们正在安装 Java。`alternatives`是一个 Ansible 模块，它允许我们管理
    Linux `alternatives` 程序的配置。这个程序常用于管理在默认情况下如果安装了多个版本时，哪个版本的程序应该被默认运行。
- en: 'After we create the role, we will need the `hosts` file containing the host
    machine, in my case:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建角色之后，我们需要一个包含主机机器的 `hosts` 文件，在我的例子中：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'And a playbook to apply the role, placed in `playbooks/hosts/j01.fale.io.yaml`
    and with the following content:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一个应用该角色的 playbook，放在 `playbooks/hosts/j01.fale.io.yaml` 中，内容如下：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can now execute it with the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以用以下命令执行它：
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will get the following result:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下结果：
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, the installation check failed since Java was not installed on
    the machine, and for this reason all other tasks have been executed as expected.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，安装检查失败，因为 Java 没有安装在机器上，因此所有其他任务按预期执行。
- en: Trigger failure
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发失败
- en: 'There are cases when you want to trigger a failure directly. This can happen
    for multiple reasons, even if there are disadvantages doing so, since when you
    trigger the failure, the playbook will be brutally interrupted and this could
    leave your machine in an inconsistent state if you are not careful. One case where
    I have seen it work very well, is when you are running a non-idempotent playbook
    (for instance building of a newer version of an application) and you need a variable
    (for instance: the version/branch to deploy) set. In this case, you can check
    that the expected variable is correctly configured before starting to run the
    operations to ensure that everything will work as expected later on.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望直接触发失败。这可能由于多种原因发生，尽管这样做有一定的弊端，因为触发失败时，playbook 会被强行中断，如果不小心，可能会让你的机器处于不一致的状态。一个我看到非常有效的情况是，当你运行一个非幂等的
    playbook（例如构建新版应用程序）时，你需要设置一个变量（例如：要部署的版本/分支）。在这种情况下，你可以在开始执行操作之前检查预期的变量是否正确配置，以确保后续一切按预期进行。
- en: 'Let''s put the following code in `playbooks/maven_build.yaml`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下代码放入 `playbooks/maven_build.yaml` 文件中：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, we expect the user to add `--extra-vars "version=$[TAG/BRANCH]"`
    in the script to call the command. We could have put a branch to use by default
    but this is too risky because the user may lose focus and forget to add the right
    branch name themselves, which would lead to compiling (and deploying) the wrong
    version of the application. The `fail` module also allows us to specify a message
    that will be displayed to the user.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们希望用户在脚本中添加 `--extra-vars "version=$[TAG/BRANCH]"` 来调用命令。我们本可以默认使用某个分支，但这样做风险太大，因为用户可能会失去注意力，忘记自己添加正确的分支名称，这将导致编译（和部署）错误版本的应用程序。`fail`
    模块还允许我们指定一条消息，该消息将显示给用户。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I think that the `fail` task is far more useful in playbooks that are run manually
    since when a playbook is automatically run, managing the exception is often better
    than failing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 `fail` 任务在手动运行的 playbook 中更为有用，因为当 playbook 被自动运行时，处理异常往往比直接失败更好。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have seen how to debug Ansible playbooks using multiple
    techniques. Then we moved to the management of failures and lastly we saw how
    to trigger failures intentionally.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了如何使用多种技术调试 Ansible playbook。接着我们讨论了失败管理，最后我们看到了如何故意触发失败。
- en: In the next chapter, we will discuss multi-tier environments as well as deployment
    methodologies.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论多层环境以及部署方法。
