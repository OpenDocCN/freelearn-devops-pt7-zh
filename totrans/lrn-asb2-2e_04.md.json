["```\n    --- \n    - hosts: database \n      remote_user: ansible \n      tasks: \n      - name: Count processes running on the remote system \n        shell: ps | wc -l \n        register: remote_processes_number \n      - name: Print remote running processes \n        debug: \n          msg: '{{ remote_processes_number.stdout }}' \n      - name: Count processes running on the local system \n        local_action: shell ps | wc -l \n        register: local_processes_number \n      - name: Print local running processes \n        debug: \n          msg: '{{ local_processes_number.stdout }}' \n\n```", "```\nansible-playbook -i hosts local_action.yaml\n\n```", "```\nPLAY [database] **************************************************\nTASK [setup] *****************************************************\nok: [db01.fale.io] \nTASK [Count processes running on the remote system] **************\nchanged: [db01.fale.io] \nTASK [Print remote running processes] ****************************\nok: [db01.fale.io] => {\n \"msg\": \"7\"\n} \nTASK [Count processes running on the local system] ***************\nchanged: [db01.fale.io -> localhost] \nTASK [Print local running processes] *****************************\nok: [db01.fale.io] => {\n \"msg\": \"11\"\n} \nPLAY RECAP *******************************************************\ndb01.fale.io      : ok=5    changed=2    unreachable=0    failed=0 \n\n```", "```\n    --- \n    - hosts: database \n      remote_user: ansible \n      tasks: \n      - name: Count processes running on the remote system \n        shell: ps | wc -l \n        register: remote_processes_number \n      - name: Print remote running processes \n        debug: \n          msg: '{{ remote_processes_number.stdout }}' \n      - name: Count processes running on the local system \n        shell: ps | wc -l \n        delegate_to: localhost \n        register: local_processes_number \n      - name: Print local running processes \n        debug: \n          msg: '{{ local_processes_number.stdout }}' \n\n```", "```\nansible-playbook -i hosts delegate_to.yaml\n\n```", "```\nPLAY [database] **************************************************\nTASK [setup] *****************************************************\nok: [db01.fale.io] \nTASK [Count processes running on the remote system] **************\nchanged: [db01.fale.io] \nTASK [Print remote running processes] ****************************\nok: [db01.fale.io] => {\n \"msg\": \"7\"\n} \nTASK [Count processes running on the local system] ***************\nchanged: [db01.fale.io -> localhost] \nTASK [Print local running processes] *****************************\nok: [db01.fale.io] => {\n \"msg\": \"11\"\n} \nPLAY RECAP *******************************************************\ndb01.fale.io      : ok=5    changed=2    unreachable=0    failed=0 \n\n```", "```\n    If os = \"redhat\" \n      Install httpd \n    Else if os = \"debian\" \n      Install apache2 \n    End \n\n```", "```\n    --- \n    - hosts: webserver \n      remote_user: ansible \n      tasks: \n      - name: Print the ansible_os_family value \n        debug: \n          msg: '{{ ansible_os_family }}' \n      - name: Ensure the httpd package is updated \n        yum: \n          name: httpd \n          state: latest \n        become: True \n        when: ansible_os_family == 'RedHat' \n      - name: Ensure the apache2 package is updated \n        apt: \n          name: apache2 \n          state: latest \n        become: True \n        when: ansible_os_family == 'Debian' \n\n```", "```\nansible-playbook -i hosts conditional_httpd.yaml\n\n```", "```\nPLAY [webserver] *************************************************\nTASK [setup] *****************************************************\nok: [ws03.fale.io]\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [Print the ansible_os_family value] *************************\nok: [ws01.fale.io] => {\n \"msg\": \"RedHat\"\n}\nok: [ws02.fale.io] => {\n \"msg\": \"RedHat\"\n}\nok: [ws03.fale.io] => {\n \"msg\": \"Debian\"\n} \nTASK [Ensure the httpd package is updated] ***********************\nskipping: [ws03.fale.io]\nchanged: [ws01.fale.io]\nchanged: [ws02.fale.io] \nTASK [Ensure the apache2 package is updated] *********************\nskipping: [ws02.fale.io]\nskipping: [ws01.fale.io]\nchanged: [ws03.fale.io] \nPLAY RECAP *******************************************************\nws01.fale.io      : ok=3    changed=1    unreachable=0    failed=0 \nws02.fale.io      : ok=3    changed=1    unreachable=0    failed=0 \nws03.fale.io      : ok=3    changed=1    unreachable=0    failed=0 \n\n```", "```\n    --- \n    - hosts: all \n      remote_user: ansible \n      vars: \n        backup: True \n      tasks: \n      - name: Copy the crontab in tmp if the backup variable is true \n        copy: \n          src: /etc/crontab \n          dest: /tmp/crontab \n          remote_src: True \n        when: backup \n\n```", "```\nansible-playbook -i hosts crontab_backup.yaml\n\n```", "```\nPLAY [all] *******************************************************\nTASK [setup] *****************************************************\nok: [db01.fale.io]\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Copy the crontab in tmp if the backup variable is true] ****\nchanged: [ws02.fale.io]\nchanged: [db01.fale.io]\nchanged: [ws01.fale.io] \nPLAY RECAP *******************************************************\ndb01.fale.io      : ok=2    changed=1    unreachable=0    failed=0 \nws01.fale.io      : ok=2    changed=1    unreachable=0    failed=0 \nws02.fale.io      : ok=2    changed=1    unreachable=0    failed=0 \n\n```", "```\nansible-playbook -i hosts crontab_backup.yaml --extra-vars=\"backup=False\"\n\n```", "```\nPLAY [all] *******************************************************\nTASK [setup] *****************************************************\nok: [db01.fale.io]\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Copy the crontab in tmp if the backup variable is true] ****\nskipping: [ws01.fale.io]\nskipping: [ws02.fale.io]\nskipping: [db01.fale.io] \nPLAY RECAP *******************************************************\ndb01.fale.io      : ok=1    changed=0    unreachable=0    failed=0 \nws01.fale.io      : ok=1    changed=0    unreachable=0    failed=0 \nws02.fale.io      : ok=1    changed=0    unreachable=0    failed=0 \n\n```", "```\n    --- \n    - hosts: all \n      remote_user: ansible \n      vars: \n        backup: True \n      tasks: \n      - name: Check if the backup_folder is set \n        fail: \n          msg: 'The backup_folder needs to be set' \n        when: backup_folder is not defined \n      - name: Copy the crontab in tmp if the backup variable is true \n        copy: \n          src: /etc/crontab \n          dest: '{{ backup_folder }}/crontab' \n          remote_src: True \n        when: backup \n\n```", "```\n- include: FILENAME.yaml\n\n```", "```\n- include: FILENAME.yaml variable1=\"value1\" variable2=\"value2\"\n\n```", "```\n - name: Include the file only for Red Hat OSes\n    include: redhat.yaml\n    when: ansible_os_family == \"RedHat\"\n\n```", "```\n--- \n- hosts: webserver \n  remote_user: ansible \n  tasks: \n  - name: Ensure the HTTPd package is installed \n    yum: \n      name: httpd \n      state: present \n    become: True \n  - name: Ensure the HTTPd service is enabled and running \n    service: \n      name: httpd \n      state: started \n      enabled: True \n    become: True \n  - name: Ensure HTTP can pass the firewall \n    firewalld: \n      service: http \n      state: enabled \n      permanent: True \n      immediate: True \n    become: True \n  - name: Ensure HTTPd configuration is updated \n    copy: \n      src: website.conf \n      dest: /etc/httpd/conf.d \n    become: True \n    notify: Restart HTTPd \n  handlers: \n  - name: Restart HTTPd \n    service: \n      name: httpd \n      state: restarted \n    become: True \n\n```", "```\nansible-playbook -i hosts webserver.yaml\n\n```", "```\nPLAY [webserver] *************************************************\nTASK [setup] *****************************************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [Ensure the HTTPd package is installed] *********************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Ensure the HTTPd service is enabled and running] ***********\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Ensure HTTP can pass the firewall] *************************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Ensure HTTPd configuration is updated] *********************\nchanged: [ws02.fale.io]\nchanged: [ws01.fale.io] \nRUNNING HANDLER [Restart HTTPd] **********************************\nchanged: [ws02.fale.io]\nchanged: [ws01.fale.io] \nPLAY RECAP *******************************************************\nws01.fale.io      : ok=6    changed=2    unreachable=0    failed=0 \nws02.fale.io      : ok=6    changed=2    unreachable=0    failed=0 \n\n```", "```\nPLAY [webserver] *************************************************\nTASK [setup] *****************************************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [Ensure the HTTPd package is installed] *********************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Ensure the HTTPd service is enabled and running] ***********\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Ensure HTTP can pass the firewall] *************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [Ensure HTTPd configuration is updated] *********************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nPLAY RECAP *******************************************************\nws01.fale.io      : ok=5    changed=0    unreachable=0    failed=0 \nws02.fale.io      : ok=5    changed=0    unreachable=0    failed=0\n\n```", "```\n ansible.cfg\n    hosts\n    master.yaml\n    playbooks\n        firstrun.yaml\n        groups\n            database.yaml\n            webserver.yaml\n    roles\n         common\n         database\n         webserver \n\n```", "```\n    --- \n    - name: Ensure EPEL is enabled \n      yum: \n        name: epel-release \n        state: present \n      become: True \n    - name: Ensure libselinux-python is present \n      yum: \n        name: libselinux-python \n        state: present \n      become: True \n    - name: Ensure libsemanage-python is present \n      yum: \n        name: libsemanage-python \n        state: present \n      become: True \n    - name: Ensure we have last version of every package \n      yum: \n        name: \"*\" \n        state: latest \n      become: True \n    - name: Ensure NTP is installed \n      yum: \n        name: ntp \n        state: present \n      become: True \n    - name: Ensure the timezone is set to UTC \n      file: \n        src: /usr/share/zoneinfo/GMT \n        dest: /etc/localtime \n        state: link \n      become: True \n    - name: Ensure the NTP service is running and enabled \n      service: \n        name: ntpd \n        state: started \n        enabled: True \n      become: True \n    - name: Ensure FirewallD is installed \n      yum: \n        name: firewalld \n        state: present \n      become: True \n    - name: Ensure FirewallD is running \n      service: \n        name: firewalld \n        state: started \n        enabled: True \n      become: True \n    - name: Ensure SSH can pass the firewall \n      firewalld: \n        service: ssh \n        state: enabled \n        permanent: True \n        immediate: True \n      become: True \n    - name: Ensure the MOTD file is present and updated \n      template: \n        src: motd \n        dest: /etc/motd \n        owner: root \n        group: root \n        mode: 0644 \n      become: True \n    - name: Ensure the hostname is the same of the inventory \n      hostname: \n        name: \"{{ inventory_hostname }}\" \n      become: True \n\n```", "```\n    common/ \n        tasks \n            main.yaml \n        templates \n            motd \n\n```", "```\n    --- \n    - hosts: database \n      user: ansible \n      roles: \n      - common \n\n```", "```\n    --- \n    - hosts: webserver \n      user: ansible \n      roles: \n      - common \n\n```", "```\n    [defaults] \n    hostfile = hosts \n    host_key_checking = False \n    roles_path = roles \n\n```", "```\n    --- \n    - include: playbooks/groups/database.yaml \n    - include: playbooks/groups/webserver.yaml \n\n```", "```\nansible-playbook master.yaml\n\n```", "```\nPLAY [database] **************************************************\nTASK [setup] *****************************************************\nok: [db01.fale.io] \nTASK [common : Ensure EPEL is enabled] ***************************\nok: [db01.fale.io] \nTASK [common : Ensure libselinux-python is present] **************\nok: [db01.fale.io] \nTASK [common : Ensure libsemanage-python is present] *************\nok: [db01.fale.io] \nTASK [common : Ensure we have last version of every package] *****\nchanged: [db01.fale.io] \nTASK [common : Ensure NTP is installed] **************************\nok: [db01.fale.io] \nTASK [common : Ensure the timezone is set to UTC] ****************\nok: [db01.fale.io] \nTASK [common : Ensure the NTP service is running and enabled] ****\nok: [db01.fale.io] \nTASK [common : Ensure FirewallD is installed] ********************\nok: [db01.fale.io] \nTASK [common : Ensure FirewallD is running] **********************\nok: [db01.fale.io] \nTASK [common : Ensure SSH can pass the firewall] *****************\nok: [db01.fale.io] \nTASK [common : Ensure the MOTD file is present and updated] ******\nok: [db01.fale.io] \nTASK [common : Ensure the hostname is the same of the inventory] *\nok: [db01.fale.io] \nPLAY [webserver] *************************************************\nTASK [setup] *****************************************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure EPEL is enabled] ***************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure libselinux-python is present] **************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [common : Ensure libsemanage-python is present] *************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure we have last version of every package] *****\nchanged: [ws01.fale.io]\nchanged: [ws02.fale.io] \nTASK [common : Ensure NTP is installed] **************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the timezone is set to UTC] ****************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the NTP service is running and enabled] ****\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [common : Ensure FirewallD is installed] ********************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [common : Ensure FirewallD is running] **********************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure SSH can pass the firewall] *****************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the MOTD file is present and updated] ******\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the hostname is the same of the inventory] *\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nPLAY RECAP *******************************************************\ndb01.fale.io      : ok=13   changed=1    unreachable=0    failed=0 \nws01.fale.io      : ok=13   changed=1    unreachable=0    failed=0 \nws02.fale.io      : ok=13   changed=1    unreachable=0    failed=0\n\n```", "```\n    --- \n    - name: Ensure the HTTPd package is installed \n      yum: \n        name: httpd \n        state: present \n      become: True \n    - name: Ensure the HTTPd service is enabled and running \n      service: \n        name: httpd \n        state: started \n        enabled: True \n      become: True \n    - name: Ensure HTTP can pass the firewall \n      firewalld: \n        service: http \n        state: enabled \n        permanent: True \n        immediate: True \n      become: True \n    - name: Ensure HTTPd configuration is updated \n      copy: \n        src: website.conf \n        dest: /etc/httpd/conf.d \n      become: True \n      notify: Restart HTTPd \n    - name: Ensure the website is present and updated \n      template: \n        src: index.html.j2 \n        dest: /var/www/html/index.html \n        owner: root \n        group: root \n        mode: 0644 \n      become: True \n\n```", "```\n    <html> \n        <body> \n            <h1>Hello World!</h1> \n            <p>This page was created on {{ ansible_date_time.date }}.</p> \n            <p>This machine can be reached on the following IP addresses</p> \n            <ul> \n    {% for address in ansible_all_ipv4_addresses %} \n                <li>{{ address }}</li> \n    {% endfor %} \n            </ul> \n        </body> \n    </html> \n\n```", "```\n    --- \n    - name: Restart HTTPd \n      service: \n        name: httpd \n        state: restarted \n      become: True \n\n```", "```\n    --- \n    - hosts: webserver \n      user: ansible \n      roles: \n      - common \n      - webserver \n\n```", "```\n    ansible-playbook playbooks/groups/webserver.yaml\n\n```", "```\nPLAY [webserver] *************************************************\nTASK [setup] *****************************************************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [common : Ensure EPEL is enabled] ***************************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure libselinux-python is present] **************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure libsemanage-python is present] *************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure we have last version of every package] *****\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure NTP is installed] **************************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [common : Ensure the timezone is set to UTC] ****************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the NTP service is running and enabled] ****\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure FirewallD is installed] ********************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure FirewallD is running] **********************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [common : Ensure SSH can pass the firewall] *****************\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the MOTD file is present and updated] ******\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [common : Ensure the hostname is the same of the inventory] *\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [webserver : Ensure the HTTPd package is installed] *********\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [webserver : Ensure the HTTPd service is enabled and running]\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [webserver : Ensure HTTP can pass the firewall] *************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [webserver : Ensure HTTPd configuration is updated] *********\nok: [ws01.fale.io]\nok: [ws02.fale.io] \nTASK [webserver : Ensure the website is present and updated] *****\nchanged: [ws01.fale.io]\nchanged: [ws02.fale.io] \nPLAY RECAP *******************************************************\nws01.fale.io      : ok=18   changed=1    unreachable=0    failed=0 \nws02.fale.io      : ok=18   changed=1    unreachable=0    failed=0\n\n```", "```\n    tasks:\n    - block:\n       - name: Ensure NTPd is present\n       yum:\n         name: ntpd\n         state: present\n       - name: Ensure NTPd is running\n       service:\n         name: ntpd\n         state: started\n       enabled: True\n     when: ansible_distribution == 'CentOS'\n```", "```\n{{ myvar | filter }}\n\n```", "```\n{{ myvar | filter(2) }}\n\n```", "```\n{{ users | to_nice_json }}\n\n```", "```\n{{ users | to_nice_yaml }}\n\n```", "```\n    --- \n    - hosts: webserver \n      remote_user: ansible \n      tasks: \n      - name: Checking HTTPd service status \n        service: \n          name: httpd \n          state: running \n        register: httpd_result \n        ignore_errors: true \n      - debug: \n          msg: Previous task failed \n        when: httpd_result|failed \n\n```", "```\nansible-playbook playbooks/http_status.yaml\n\n```", "```\nPLAY [webserver] *************************************************\nTASK [setup] *****************************************************\nok: [ws02.fale.io]\nok: [ws01.fale.io] \nTASK [Checking HTTPd service status] *****************************\nok: [ws02.fale.io]\nfatal: [ws01.fale.io]: FAILED! => {\"changed\": false, \"failed\": true, \"msg\": \"Failed to start httpd.service: Interactive authentication required.\\n\"}\n...ignoring \nTASK [debug] *****************************************************\nskipping: [ws02.fale.io]\nok: [ws01.fale.io] => {\n \"msg\": \"Previous task failed\"\n} \nPLAY RECAP *******************************************************\nws01.fale.io      : ok=3    changed=0    unreachable=0    failed=0 \nws02.fale.io      : ok=2    changed=0    unreachable=0    failed=0 \n\n```", "```\n{{ backup_disk | default(\"/dev/sdf\") }}\n\n```", "```\n{{['a', 'b', 'c', 'd'] | random}}\n\n```", "```\n{{100 | random}}\n\n```", "```\n{{50 | random(10)}}\n\n```", "```\n{{50 | random(20, 10)}}\n\n```", "```\n{{[\"This\", \"is\", \"a\", \"string\"] | join(\" \")}}\n\n```", "```\n {{variable | b64encode}}\n\n```", "```\n      {{\"aGFoYWhhaGE=\" | b64decode}}\n\n```", "```\necho 'ansible' > .password\n\n```", "```\nansible-vault create secret.yaml\n\n```", "```\ncat secret.yaml\n\n```", "```\n$ANSIBLE_VAULT;1.1;AES256\n66346431333933663461383331393763666538373163336536353335646532323135383630646366\n3432353561393533623764323961666639326132323331370a636363613032616664333039356565\n64643735626162646166313861366532323161646137333634333336393062303461343638333737\n6534326135326430390a643739336461616334313833313363343030666662653864353138666233\n38386266383866353836373036303339383962363362333364346432613062363830316330653866\n6431343764386132663066303761346532643632633432643861\n\n```", "```\nansible-vault --vault-password-file=.password edit secret.yaml\n\n```", "```\nansible-vault --vault-password-file=.password view secret.yaml\n\n```", "```\nansible-vault --vault-password-file=.password decrypt secret.yaml\n\n```", "```\nThis is a password protected file\n\n```", "```\nansible-vault --vault-password-file=.password encrypt secret.yaml\n\n```", "```\nansible-vault --vault-password-file=.password --new-vault-password-file=.newpassword rekey secret.yaml\n\n```", "```\n$ANSIBLE_VAULT;1.1;AES256\n63313864643434663939333132333537336362313133616430376463613833353366326662303832\n6431316131613033343266373137356166383564326234300a386236633635333939333234643435\n64353932383930613934343730386635333030373663313631646462613566313362313363393135\n3935613661373263330a316634333536653461356535383662376464656466623536363537386462\n31636637346538636161616632313866366365666361633138666134303433316665376237326162\n3638653738383830323430313161336465323264613634323434\n\n```", "```\n$ ansible-playbook site.yml --vault-password-file .password\n\n```", "```\n$ ansible-playbook site.yml --vault-password-file ~/.get_password.py\n\n```", "```\n    vars_prompt:\n    - name: ssh_password \n      prompt: Enter ssh_password \n      private: True \n      encryption: md5_crypt \n      confirm: True \n      salt_size: 7 \n\n```", "```\nname: ssh_password\n\n```", "```\nprompt: Enter ssh password\n\n```", "```\nprivate: True\n\n```", "```\nencrypt: md5_crypt\nsalt_size: 7\n\n```", "```\nconfirm: True\n\n```", "```\n- name: Running a script\n shell: script.sh\n password: my_password\n\n```", "```\nREMOTE_MODULE command script.sh password=VALUE_HIDDEN #USE_SHELL\n\n```", "```\n    - name: Running a script\n      shell: script.sh\n        password: my_password\n      no_log: True\n\n```"]