- en: Patching and Offline Sharing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 补丁和离线共享
- en: 'n this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下几种方法：
- en: Creating patches
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建补丁
- en: Creating patches from branches
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从分支创建补丁
- en: Applying patches
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用补丁
- en: Sending patches
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送补丁
- en: Creating Git bundles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Git 打包
- en: Using a Git bundle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Git 打包
- en: Creating archives from a tree
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从树中创建归档
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: With the distributed nature of Git and the many existing hosting options available
    for it, it's very easy to share history between machines when they are connected
    through a network. In cases where the machines that need to share history are
    not connected or can't use the supported transport mechanisms, Git provides other
    methods to share history.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Git 的分布式特性以及现有的众多托管选项，当机器通过网络连接时，分享历史记录变得非常容易。如果需要共享历史记录的机器未连接或无法使用支持的传输机制，Git
    提供了其他共享历史记录的方法。
- en: Git provides an easy way to format patches from existing history, sending them
    in an email and applying them to another repository. Git also has a bundle concept,
    where a bundle that contains only part of the history of a repository can be used
    as a remote for another repository. Finally, Git provides a simple and easy way
    to create an archive for a snapshot of the folder/subfolder structure of a given
    reference.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Git 提供了一种简便的方法来格式化现有历史记录中的补丁，发送它们到电子邮件，并将其应用到另一个代码库。Git 还提供了一个打包概念，其中一个包含部分历史记录的打包可以作为另一个代码库的远程仓库。最后，Git
    提供了一种简单易用的方式来创建一个特定引用的文件夹/子文件夹结构的快照归档。
- en: With the different methods provided by Git, it is easy to share history between
    repositories, especially where the normal push/pull methods are not available.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 借助 Git 提供的不同方法，特别是在常规的推送/拉取方法无法使用的情况下，分享代码库之间的历史记录变得更加容易。
- en: Creating patches
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建补丁
- en: In this recipe, we'll learn how to make patches out of commits. Patches can
    be sent via email for quick sharing or can be copied to sneakernet devices (USB
    sticks, memory cards, external hard disk drives, and so on) if they need to be
    applied to an offline computer or suchlike. Patches can be useful methods to review
    code, as the reviewer can apply a patch to their repository, investigate the difference,
    and check the program. If the reviewer decides that the patch is good, they can
    publish (`push`) it to a public repository, given that the reviewer is the maintainer
    of the repository. If the reviewer rejects the patch, they can simply reset their
    branch to the original state and inform the author of the patch that more work
    is needed before it can be accepted.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何从提交中创建补丁。补丁可以通过电子邮件快速共享，或者如果需要应用到离线计算机或类似设备，也可以复制到便携设备（如 USB 闪存、内存卡、外部硬盘等）。补丁是代码审查的有效方法，审查者可以将补丁应用到自己的代码库，调查差异并检查程序。如果审查者认为补丁没有问题，他们可以将其发布（`push`）到公共代码库，前提是审查者是该代码库的维护者。如果审查者拒绝该补丁，他们可以简单地将分支重置为原始状态，并通知补丁作者，补丁需要更多的工作才能被接受。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this example, we''ll clone and use a new repository. The repository is just
    an example repository for Git commands and only contains some example commits:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将克隆并使用一个新的代码库。该代码库只是一个示例库，用于 Git 命令，并且仅包含一些示例提交：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作方法...
- en: 'Let''s see the history of the repository, as shown by `gitk`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看该代码库的历史记录，使用 `gitk` 显示如下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are three branches in the repository: `master`, `develop`, and `doc`.
    All of them differ from the others by one or more commits. On the `master` branch,
    we can now create a patch file for the latest commit on the `master` branch and
    store it in the `latest-commit` folder, as shown in the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码库中有三个分支：`master`、`develop` 和 `doc`。它们之间的差异是通过一个或多个提交来体现的。在 `master` 分支上，我们现在可以为该分支的最新提交创建一个补丁文件，并将其存储在
    `latest-commit` 文件夹中，如下所示：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we look at the file created by the `patch` command, we will see the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看由 `patch` 命令创建的文件，我们将看到以下内容：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous snippet is the contents of the produced patch file. It contains
    a header much like an email with the `From`, `Date`, and `Subject` fields, a body
    with the commit message, and, after the three dashes (`---`), the actual patch,
    followed finally by two dashes (`--`),  and the Git version used to generate the
    patch. The patch generated by `git format-patch` is in the **UNIX** mailbox format,
    but with a magic fixed timestamp to identify that it comes from `git format-patch`
    rather than a real mailbox. You can see the timestamp in the first line after
    the `sha-1` ID Mon Sep 17 00:00:00 2001.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段是生成的补丁文件的内容。它包含了类似邮件的头部，包含`From`、`Date`和`Subject`字段，正文是提交信息，之后是三个破折号（`---`）后面的实际补丁，最后是两个破折号（`--`），以及用于生成补丁的Git版本。`git
    format-patch`生成的补丁采用**UNIX**邮箱格式，但带有一个固定的时间戳，用于标识它来自`git format-patch`而非真实邮箱。你可以在`sha-1`
    ID后的第一行看到时间戳：Mon Sep 17 00:00:00 2001。
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When generating the patch, Git will `diff` the commit at `HEAD` with its parent
    commit and use this `diff` as the patch. The `-1` option tells Git to only generate
    patches for the last commit, and `-o latest-commit` tells Git to store the patch
    in the `latest-commit` folder. The folder will be created if it does not already
    exist.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 生成补丁时，Git将`HEAD`处的提交与其父提交进行`diff`，并将此`diff`作为补丁。`-1`选项告诉Git只为最后一个提交生成补丁，而`-o
    latest-commit`告诉Git将补丁存储在`latest-commit`文件夹中。如果该文件夹不存在，将会创建它。
- en: There's more...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: If you want to create patches for several commits, say the last three commits,
    you just pass on `-3` to `git format-patch` instead of `-1`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为多个提交创建补丁，比如最后的三个提交，只需传递`-3`给`git format-patch`，而不是`-1`。
- en: 'Format the latest three commits as patches in the `latest-commits` folder:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将最近的三个提交格式化为`latest-commits`文件夹中的补丁：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating patches from branches
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从分支创建补丁
- en: Instead of counting the number of commits you need to make patches for, you
    can create patches by specifying the target branch when running the `format-patch`
    command.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在运行`format-patch`命令时指定目标分支来创建补丁，而无需计算需要为之生成补丁的提交数量。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the same repository as in the previous example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与前一个示例相同的仓库：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Make sure we have the `develop` branch checked out:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们已经检查出`develop`分支：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We'll pretend that we have been working on the `develop` branch and have made
    some commits. Now, we need to format patches for all those commits so that we
    can send them to the repository maintainer or carry them to another machine.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设已经在`develop`分支上进行了一些提交。现在，我们需要将这些提交格式化为补丁，以便发送给仓库维护者或将它们带到另一台机器上。
- en: 'Let''s see the commits on `develop`, not on `master`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`develop`分支上不在`master`分支上的提交：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, instead of running `git format-patch -3` to get patches made for these
    three commits, we''ll tell Git to create patches for all of the commits that are
    not on the `master` branch:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将不再运行`git format-patch -3`来生成这三个提交的补丁，而是告诉Git为所有不在`master`分支上的提交生成补丁：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Git makes a list of commits from `develop` that are not on the `master` branch,
    much like we did before creating the patches, and makes patches for these. We
    can check the contents of the `not-on-master`folder, which we specified as the
    output folder (`-o`) and verify that it contains the patches as expected:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Git会列出`develop`分支中没有在`master`分支上的提交，就像我们在创建补丁之前所做的一样，并为这些提交生成补丁。我们可以检查`not-on-master`文件夹的内容，这个文件夹是我们指定的输出文件夹（`-o`），并验证它是否包含预期的补丁：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多内容...
- en: 'The `git format-patch` command has many options besides the `-<n>` option to
    specify the number of commits in order to create patches for the `-o <dir>` for
    the target directory. Some useful options are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`git format-patch`命令除了`-<n>`选项用于指定要生成补丁的提交数量外，还有很多其他选项，比如`-o <dir>`用于指定目标目录。以下是一些有用的选项：'
- en: '`-s`, `--signoff`: Adds a `Signed-off-by` line to the commit message in the
    patch file with the name of the committer. This is often required when mailing
    patches to the repository maintainers. This line is required for patches to be
    accepted when they are sent to the Linux kernel mailing list and the Git mailing
    list.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-s`、`--signoff`：在补丁文件的提交信息中添加一行`Signed-off-by`，其中包含提交者的名字。当向仓库维护者发送补丁时，通常需要这一行。当补丁发送到Linux内核邮件列表或Git邮件列表时，这一行是接受补丁的必要条件。'
- en: '`-n`, `--numbered`: Numbers the patch in the subject line as `[PATCH n/m]`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-n`、`--numbered`：将补丁在主题行中编号为`[PATCH n/m]`。'
- en: '`--suffix=.<sfx>`: Sets the suffix of the patch; it can be empty and does not
    have to start with a dot.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--suffix=.<sfx>`：设置补丁的后缀；它可以为空，且不必以点号开头。'
- en: '`-q`, `--quiet`: Suppresses the printing of patch filenames when generating
    patches.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-q`, `--quiet`：在生成补丁时抑制打印补丁文件名。'
- en: '`--stdout`: Prints all commits to the standard output instead of creating files.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--stdout`：将所有提交输出到标准输出，而不是创建文件。'
- en: Applying patches
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用补丁
- en: Now we know how to create patches from commits, it's time to learn how to apply
    them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何从提交中创建补丁了，是时候学习如何应用它们了。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the repository from the previous examples, along with the generated
    patches, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前示例中的仓库，以及生成的补丁，如下所示：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, we'll check out the `develop` branch and apply the patch generated from
    the `master` branch (`0001-Calculate-pi-with-more-digits.patch`) in the first
    example.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将切换到 `develop` 分支，并在第一个示例中应用从 `master` 分支生成的补丁（`0001-Calculate-pi-with-more-digits.patch`）。
- en: 'We use the Git `am` command to apply the patches; `am` is short for `apply
    from mailbox`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Git `am` 命令来应用补丁；`am` 是 `apply from mailbox` 的缩写：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can resolve the conflict in line 47 (an empty line to be removed) and continue:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以解决第 47 行的冲突（删除一个空行），然后继续：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also apply the `master` branch to the series of patches that was generated
    from the `develop` branch, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 `master` 分支应用于从 `develop` 分支生成的一系列补丁，如下所示：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `git am` command takes the mailbox file specified in the input and applies
    the patch in the file to the files needed. Then, a commit is recorded using the
    commit message and author information from the patch. The committer identity of
    the commit will be the identity of the person performing the `git am` command.
    We can see the author and committer information with `git log`, but we need to
    pass the `--pretty=fuller` option to also view the committer information:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`git am` 命令获取输入中指定的邮件箱文件，并将文件中的补丁应用到需要的文件上。然后，使用补丁中的提交信息和作者信息记录一个提交。提交的提交者身份将是执行
    `git am` 命令的人的身份。我们可以通过 `git log` 查看作者和提交者信息，但需要传递 `--pretty=fuller` 选项才能同时查看提交者信息：'
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `git am` command applies the patches in the files specified and records
    the commits in the repository. However, if you only want to apply the patch to
    the working tree or the staging area and not record a commit, you can use the
    `git apply` command.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`git am` 命令会应用指定文件中的补丁并记录提交到仓库。然而，如果你只想将补丁应用到工作树或暂存区，而不记录提交，可以使用 `git apply`
    命令。'
- en: 'We can try to apply the patch from the `master` branch to the `develop` branch
    once again; we just need to reset the `develop` branch first:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次尝试将来自 `master` 分支的补丁应用到 `develop` 分支；我们只需要先重置 `develop` 分支：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can check the state of the repository with the `status` command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `status` 命令检查仓库的状态：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We successfully applied the patch to the working tree. We can also apply it
    to the staging area and the working tree using the `--index` option, or only to
    the staging area using the `--cached` option.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地将补丁应用到工作树中。我们还可以使用 `--index` 选项将其应用到暂存区和工作树，或者仅使用 `--cached` 选项将其应用到暂存区。
- en: Sending patches
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发送补丁
- en: 'In the previous example, you saw how to create and apply patches. You can,
    of course, attach these patch files directly to an email, but Git provides a way
    to send patches directly as emails with the `git send-email` command. The command
    requires some setting up, but how you do that is heavily dependent on your general
    mail and SMTP configuration. A general guide can be found in the Git help pages
    or by visiting: [http://git-scm.com/docs/git-send-email](http://git-scm.com/docs/git-send-email)[.](http://git-scm.com/docs/git-send-email)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，你看到了如何创建和应用补丁。当然，你可以直接将这些补丁文件附加到电子邮件中，但 Git 提供了一种直接通过电子邮件发送补丁的方法，即 `git
    send-email` 命令。该命令需要一些设置，但如何配置依赖于你的邮件和 SMTP 设置。你可以在 Git 帮助页面找到通用指南，或者访问：[http://git-scm.com/docs/git-send-email](http://git-scm.com/docs/git-send-email)[.](http://git-scm.com/docs/git-send-email)
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll set up the same repository as in the previous example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置与之前示例相同的仓库：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we''ll send the same patch as the one we created in the first example.
    We''ll send it to ourselves using the email address we specified in our Git configuration.
    Let''s create the patch again with `git format-patch` and send it with `git send-email`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将发送与第一个示例中创建的补丁相同的补丁。我们将使用在Git配置中指定的电子邮件地址将其发送给自己。让我们再次使用`git format-patch`创建补丁并使用`git
    send-email`发送：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Save the email address from the Git configuration to a variable as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将Git配置中的邮箱地址保存到一个变量中，如下所示：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Send the patch using the email address in both the `--to` and `--from` fields:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--to`和`--from`字段中的电子邮件地址发送补丁：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Checking your email will reveal a new email in your inbox.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的电子邮件会显示收件箱中有一封新邮件。
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we saw in the previous examples, `git format-patch` creates the patch files
    in the Unix mbox format, so only a little extra effort is required to allow Git
    to send the patch as an email. When sending emails with `git send-email`, make
    sure your **Mail User Agent** (**MUA**) does not break the lines in the patch
    files, replace tabs with spaces, and so on. You can test this easily by sending
    a patch to yourself and checking whether it can be applied cleanly to your repository.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在前面的示例中看到的，`git format-patch` 以Unix mbox格式创建补丁文件，因此只需要一点额外的工作，就可以让Git将补丁作为电子邮件发送。使用`git
    send-email`发送电子邮件时，请确保您的**邮件用户代理**（**MUA**）不会在补丁文件中断行、将制表符替换为空格等。您可以通过将补丁发送给自己并检查它是否能够顺利应用到您的代码库来轻松测试这一点。
- en: There's more...
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `send-email` command can, of course, be used to send more than one patch
    at a time. If a directory is specified instead of a single patch file, all the
    patches in that directory will be sent. We don''t even have to generate the patch
    files before sending them; we can just specify the same range of revisions we
    want to send as we would have specified for the `format-patch` command. Then,
    Git will create the patches on the fly and send them. When we send a series of
    patches this way, it is good practice to create a cover letter with a bit of explanation
    about the patch series that follows. A cover letter can be created by passing
    `--cover-letter` to the `send-email` command. We''ll try sending patches for the
    commits on `develop`, since it is branched from `master` (the same patches as
    in the second example), as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`send-email`命令当然可以一次发送多个补丁。如果指定的是一个目录而不是单个补丁文件，该目录中的所有补丁都会被发送。我们甚至不需要在发送之前生成补丁文件；只需要指定我们希望发送的修订范围，就像为`format-patch`命令指定范围一样。然后，Git会动态生成补丁并发送。当我们以这种方式发送一系列补丁时，最好创建一个求职信，对随后的补丁系列做一些解释。可以通过将`--cover-letter`选项传递给`send-email`命令来创建求职信。我们将尝试发送`develop`分支上的提交补丁，因为它是从`master`分支分出的（与第二个示例中的补丁相同），如下所示：'
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can check our email inbox and see the four emails we sent: the cover letter
    and the three patches.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查我们的邮箱收件箱，看到我们发送的四封邮件：求职信和三个补丁。
- en: Before sending the patches, the cover letter is filled out and, by default,
    has `[PATCH 0/3] `(if sending three patches) in the subject line. A cover letter
    with only the default template subject and body won't be sent as default. In the
    scripts that come with this chapter, the `git send-email` command invokes the
    `--force` and `--confirm=never` options. This was done for script automation to
    force Git to send the mails even though the cover letter has not been changed
    from the default. You can try to remove these options, put in the `--annotate`
    option, and run the scripts again. You should then be able to edit the cover letter
    and emails that contain the patches before sending them.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在发送补丁之前，求职信已填写，并且默认情况下，主题行中会有`[PATCH 0/3]`（如果发送三个补丁）。仅包含默认模板主题和正文的求职信不会作为默认发送。在本章附带的脚本中，`git
    send-email`命令调用了`--force`和`--confirm=never`选项。这样做是为了脚本自动化，即使求职信没有从默认值更改，也强制Git发送邮件。您可以尝试删除这些选项，加入`--annotate`选项，并再次运行脚本。然后，您应该能够在发送邮件之前编辑包含补丁的求职信和电子邮件。
- en: Creating Git bundles
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Git捆绑包
- en: Another method for sharing repository history between repositories is to use
    the `git bundle` command. A Git bundle is a series of commits that can work as
    a remote repository, but without having the full history of a repository included
    in the bundle.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 共享仓库历史记录的另一种方法是使用`git bundle`命令。Git捆绑包是一系列可以作为远程仓库使用的提交，但不包括仓库的完整历史记录。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use a fresh clone of the `offline-sharing` repository, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个全新的`offline-sharing`仓库克隆，如下所示：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, we''ll create a root bundle, as shown in the following command, so that
    the history in the bundle forms a complete history and the initial commit is also
    included:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个根打包，如以下命令所示，这样打包中的历史就形成了一个完整的历史，并且初始提交也被包含在内：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can verify the bundle content with `git bundle verify`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `git bundle verify` 验证打包内容：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To make it easy to remember which commit we included as the latest commit in
    the bundle, we create a `tag` that points to this commit; the commit is also pointed
    to by the `master` branch:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便记住我们作为最新提交包含在打包中的提交，我们创建一个指向该提交的`tag`；该提交也被`master`分支指向：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We have created the root bundle that contains the initial commits of the repository
    history. We can now create a second bundle that contains the history from the
    tag we just created to the tip of the `develop` branch. Note that, in the following
    command, we use the same name for the bundle file, `myrepo.bundle`, and this will
    overwrite the old bundle file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了包含仓库历史初始提交的根打包。现在我们可以创建第二个打包，包含从我们刚创建的标签到 `develop` 分支尖端的历史。请注意，在以下命令中，我们使用相同的打包文件名
    `myrepo.bundle`，这将覆盖旧的打包文件：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: It might seem strange to overwrite the bundle file just after creating it, but
    there is some sense in giving bundle files the same name. As you will also see
    in the next recipe, when using a bundle file, you add it to your repository as
    a remote, the URL being the file path of the bundle. The first time you do this
    is with the root bundle file and the URL. The file path of the bundle file will
    be stored as the URL of the remote repository. So, the next time you need to update
    the repository, you just overwrite the bundle file and perform `fetch` from the
    repository.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 刚创建打包文件后立即覆盖它可能看起来很奇怪，但给打包文件使用相同的名称是有一定道理的。正如你将在下一个示例中看到的那样，在使用打包文件时，你将其作为远程添加到你的仓库，URL
    就是打包文件的路径。第一次这样做时使用的是根打包文件和 URL。打包文件的文件路径将作为远程仓库的 URL 存储。因此，下一次你需要更新仓库时，只需覆盖打包文件并执行
    `fetch` 操作即可。
- en: 'If we verify the bundle, we can see which commit needs to exist in the target
    repository before the bundle can be used:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们验证打包内容，可以看到在目标仓库中需要先存在哪个提交，才能使用该打包：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can check the history and see that the `ead7de4` commit is where `develop`
    is branched off, so it makes sense that this commit is the basis for the bundle
    we have just created:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查历史，看到 `ead7de4` 提交是 `develop` 分支分出的地方，所以这个提交作为我们刚创建的打包的基础是合理的：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The previous command gives the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令给出了以下输出：
- en: '![](img/f99b9719-e249-4d17-99bd-cce29e881308.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f99b9719-e249-4d17-99bd-cce29e881308.png)'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `bundle` command creates a binary file with the history of the specified
    commit range included. When creating the bundle as a range of commits that do
    not include the initial commit in the repository (for example, `bundleForOtherRepo..develop`),
    it's important to make sure that the range matches the history in the repository
    in which the bundle is going to be used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`bundle` 命令创建一个包含指定提交范围历史的二进制文件。当创建一个不包含仓库初始提交的提交范围的打包（例如，`bundleForOtherRepo..develop`）时，重要的是要确保该范围与打算使用该打包的仓库中的历史相匹配。'
- en: Using a Git bundle
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Git 打包
- en: In the last example, we saw how we could create bundles from the existing history,
    which contains a specified range of history. Now, we'll learn how to use these
    bundles either to create a new repository or to add a history to an existing one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们看到了如何从现有历史中创建包含指定历史范围的打包。现在，我们将学习如何使用这些打包，既可以创建一个新仓库，也可以为现有仓库添加历史。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll use the same repository and methods as in the last example to create
    bundles, but we''ll recreate them in this example to be able to use them one at
    a time. First, we''ll prepare the repository and the first bundle, as shown in
    the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与上一个示例相同的仓库和方法来创建打包，但我们将在本示例中重新创建它们，以便能够逐个使用。首先，我们将准备仓库和第一个打包，如以下命令所示：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Now, let''s create a new repository from the bundle file we just created. We
    can do that with the `git clone` command and by specifying the URL to the remote
    repository as the path to the bundle. We''ll see how to do that in the following
    code snippet:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从我们刚创建的打包文件创建一个新仓库。我们可以使用 `git clone` 命令，并通过指定远程仓库的 URL 作为打包路径来实现这一点。我们将在以下代码片段中看到如何操作：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The new repository is created in the `offline-other` folder. Let''s check the
    history of that repository by using the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 新的仓库已在`offline-other`文件夹中创建。让我们使用以下命令检查该仓库的历史记录：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The repository contains, as expected, all the history of the `master` branch
    in the original repository. We can now create a second bundle, the same as in
    the previous example, that contains history from the tag we created (`bundleForOtherRepo`)
    to the tip of the `develop` branch:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该仓库如预期包含原始仓库中`master`分支的所有历史记录。现在我们可以创建第二个捆绑包，跟前面的示例一样，它包含从我们创建的标签（`bundleForOtherRepo`）到`develop`分支顶端的历史记录：
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As we also saw in the previous example, the bundle requires the `ead7de45a504ee19cece26daf45d0184296f3fec`
    commit to already exist in the repository we''ll use with the bundle. Let''s check
    the repository we created from the first bundle for this commit by using the following
    command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的示例中看到的那样，捆绑包要求`ead7de45a504ee19cece26daf45d0184296f3fec`提交已经存在于我们将使用该捆绑包的仓库中。让我们通过以下命令检查我们从第一个捆绑包创建的仓库是否包含此提交：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The commit exists. Now we can use the new bundle file as it has the same filename
    and path as the first bundle we created. We can just use `git fetch` in the `offline-other`
    repository as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 提交存在。现在我们可以使用新的捆绑包文件，它与我们创建的第一个捆绑包具有相同的文件名和路径。我们可以在`offline-other`仓库中使用`git
    fetch`命令，如下所示：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can now `checkout develop`, and verify that the history for the `develop`
    and `master` branches matches the one in the original repository:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以`checkout develop`，并验证`develop`和`master`分支的历史记录是否与原始仓库中的一致：
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The previous command gives the following output:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令输出如下：
- en: '![](img/f262370a-2f5c-4afc-b0dd-0bc0e4b8497a.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f262370a-2f5c-4afc-b0dd-0bc0e4b8497a.jpg)'
- en: There's more...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The bundle is useful for updating the history of repositories on machines where
    the normal transport mechanisms can't be used due to missing network connections
    between the machines, firewall rules, and so on. There are, of course, other methods
    than the Git bundle for transporting history to remote machines. A bare repository
    on a USB stick could also be used, or even plain patches can be applied to a repository.
    The advantage of the Git bundle is that you don't have to write the entire history
    to a bare repository each time you need to update a remote, but only the part
    of history that is missing.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 捆绑包对于在无法使用正常传输机制的机器上更新仓库历史记录非常有用，这些机器之间可能没有网络连接，防火墙规则等。当然，除了Git捆绑包外，还有其他方法可以将历史记录传输到远程机器。也可以使用U盘上的裸仓库，甚至可以将普通的补丁应用到仓库。Git捆绑包的优点是，你不必每次更新远程时都将整个历史记录写入裸仓库，而只需要写入缺失的历史部分。
- en: Creating archives from a tree
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从树形结构创建归档
- en: Sometimes, it's useful to have a snapshot of the directory structure, as specified
    by a particular commit, but without the corresponding history. This can, of course,
    be done by checking the particular commit followed by deleting/omitting the `.git`
    folder when creating an archive. But with Git, there is a better way to do this,
    which is built in so it is possible to create an archive from a particular commit
    or reference. When using Git to create the archive, you also make sure that the
    archive only contains the files tracked by Git and not any untracked files or
    folders you might have in your working directory.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，获取某个特定提交指定的目录结构快照而没有相应历史记录是很有用的。当然，这可以通过检出特定的提交后删除/省略`.git`文件夹来创建归档。但使用Git，有一种更好的方法来做到这一点，它是内建的，因此可以从特定提交或引用创建归档。当使用Git创建归档时，你还确保归档仅包含Git跟踪的文件，而不会包含工作目录中可能存在的任何未跟踪文件或文件夹。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We''ll use the same `offline-sharing` repository as was used in the previous
    examples in this chapter:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本章前面示例中使用的相同的`offline-sharing`仓库：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何执行...
- en: 'We''ll start by creating an archive of the directory structure on the latest
    commit on the `master` branch. The `offline-sharing` repository is checked out
    on the `develop` branch by default, so we''ll use the reference `origin/master`
    to specify the ref for the archive:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建`master`分支上最新提交的目录结构归档。默认情况下，`offline-sharing`仓库是检出的`develop`分支，因此我们将使用`origin/master`来指定归档的引用：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `--prefix` option prepends the specified prefix to each file in the archive,
    effectively adding an `offline` directory as a root directory for the files in
    the repository, and the `-o` option tells Git to create the archive in the `offline.zip`
    file, which of course, is compressed in the ZIP format. We can investigate the
    ZIP archive to check whether the files contain the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`--prefix` 选项会将指定的前缀添加到归档中的每个文件前，实际上是为仓库中的文件添加一个 `offline` 目录作为根目录，而 `-o` 选项告诉
    Git 将归档文件创建为 `offline.zip`，当然，它会以 ZIP 格式进行压缩。我们可以检查 ZIP 归档，查看文件是否包含以下内容：'
- en: '[PRE38]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If we look in the Git repository in the `origin/master` commit, we can see
    that the files are the same; the `-l` option tells Git to specify each file''s
    size, as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 Git 仓库中的 `origin/master` 提交，可以看到文件是相同的；`-l` 选项告诉 Git 指定每个文件的大小，如下所示：
- en: '[PRE39]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: There's more...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `archive` command can also be used to create an archive for a subdirectory
    of the repository. We can use this on the `doc` branch of the repository to ZIP
    the content of the `Documentation` folder:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`archive` 命令也可以用于为仓库的子目录创建归档。我们可以在仓库的 `doc` 分支上使用此命令，将 `Documentation` 文件夹的内容打包成
    ZIP 文件：'
- en: '[PRE40]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Again, we can list the contents of the ZIP file and the `Documentation` tree
    at `origin/doc`, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以列出 ZIP 文件和 `origin/doc` 中的 `Documentation` 树，如下所示：
- en: '[PRE41]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'There are other format options besides the ZIP format for the archive, for
    example, `tar`, `tar.gz`, and so on. The format can be specified with the `--format=<format>`
    option or as a suffix to the output filename with the `-o` option. The following
    two commands will produce the same output file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 ZIP 格式外，归档还有其他格式选项，例如 `tar`、`tar.gz` 等。可以使用 `--format=<format>` 选项指定格式，或者通过
    `-o` 选项将格式作为输出文件名的后缀。以下两个命令将产生相同的输出文件：
- en: '[PRE42]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The Git archive command behaves a bit differently if a commit/tag ID or a tree
    ID is passed as an identifier. If a commit or tag ID is given, the ID will be
    stored in a global extended pax header for the TAR format, and as a file comment
    for the ZIP format. If only the tree ID is given, no extra information will be
    stored. You can actually see this in the previous examples, where the first ID
    was given a branch as a reference. As the branch points to a commit, the ID of
    this commit was written as a comment on the file and we can actually see it in
    the output of the archive listing:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递一个提交/标签 ID 或树 ID 作为标识符，Git 归档命令的行为会有所不同。如果给定了提交或标签 ID，该 ID 会被存储在 TAR 格式的全局扩展
    pax 头中，或者作为文件评论存储在 ZIP 格式中。如果只给定了树 ID，则不会存储额外的信息。实际上，你可以在之前的示例中看到这一点，第一 ID 是作为分支引用的。由于该分支指向一个提交，该提交的
    ID 被写为文件的注释，我们实际上可以在归档列出的输出中看到它：
- en: '[PRE43]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the second example, we also passed a branch as a reference, but furthermore,
    we specified the `Documentation` folder as the subfolder we wanted to create an
    archive from. This corresponds to passing the ID of the tree to the archive command;
    hence, no extra information will be stored in the archive.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，我们也传递了一个分支作为参考，此外，我们指定了 `Documentation` 文件夹作为我们希望从中创建归档的子文件夹。这相当于将树的
    ID 传递给归档命令，因此，归档中不会存储额外的信息。
