["```\n# Simple YAML Data Structure\n---\nplanets:\n  - earth: 'welcome to earth'\n    species: humans\n\n  - mars: 'we come from mars'\n    species: martians\n\n```", "```\n# Simple Jinja syntax\n{{my_var}}\n\n```", "```\n# Example Jinja Playbook\n- hosts: all\n  vars:\n    foo: \"{{ lookup('env', 'FOO' }}\"\n  tasks:\n    - name: Copy file\n      copy: src=\"img/{{ foo }}\" dest=/some/path mode=0775 owner=user group=user\n\n```", "```\n---\n- hosts: all\n  vars :\n    http_port : 80\n    tasks:\n    - name: Install nginx web server\n      apt: pkg=nginx state=installed update_cache=true\n      notify:\n        - start nginx\n\n```", "```\ntasks:\n    - name: Can we use Ansible to Install Apache2 web server\n      apt: pkg=apache2 state=installed update_cache=true\n\n```", "```\ntasks:\n    - name: Use Ansible to Install nginx web server\n      apt: pkg=nginx state=installed update_cache=true\n\ntasks:\n    - name: Use Ansible to Install MySQL web server\n      apt: pkg=mysql-server state=installed update_cache=true\n\n```", "```\ntasks:\n  - name: <some description>     \n   <API>: PARAM1=foo PARAM2=foo PARAM3=foo\n\n```", "```\ntasks:\n  - name: Can we use Ansible to Install nginx web server\n    apt: pkg=nginx state=installed update_cache=true\n\n```", "```\n# Multiple-line strings can be written either as a 'literal block' (using |),\n# or a 'folded block' (using '>').\nliteral_block: |\n    This entire block of text will be the value of the 'literal_block' key,\n    with line breaks being preserved.\n\n    The literal continues until de-dented, and the leading indentation is\n    stripped.\n\n        Any lines that are 'more-indented' keep the rest of their indentation -\n        these lines will be indented by 4 spaces.\nfolded_style: >\n    This entire block of text will be the value of 'folded_style', but this\n    time, all newlines will be replaced with a single space.\n\n    Blank lines, like above, are converted to a newline character.\n\n        'More-indented' lines keep their newlines, too -\n        this text will appear over two lines.\n\n```", "```\n# Initial task definition \ntasks:\n    - name: Can we use Ansible to Install nginx web server\n      apt: pkg=nginx state=installed update_cache=true\n\n# Same task using the scalar folded approach to task definitions\ntasks:     \n    - name: Can we use Ansible to Install nginx web server       \n      apt: >\n        pkg=nginx \n        state=installed \n        update_cache=true\n\n```", "```\n---\n- hosts: all\n  vars:\n    myvar: helloworld\n  vars_files:\n    - /vars/my_vars.yml\n\n```", "```\nExample: Simple Key/Value Variables in Ansible. \n---\n- hosts: all\n  vars:\n    # Single Variable(s) Example\n    myvar: helloworld\n\n  tasks:\n    - name: $myvar\n      ping:\n\n```", "```\n# Task specific variables\ntasks:\n  - name: copy files\n    copy: src={{ item }} dest=/opt/{{ item }}\n    with_items:\n      - foo\n      - bar\n\n```", "```\neast_coast_host_local: virginia\nwest_coast_host_local: oregon\ndefinitions:\n- servers: web\n   instance: apache\n- servers: db\n   instance: cassandra\nping_server: 192.168.10.10\n\n```", "```\n# Example: Simple Variables File in Ansible. \n---\n- hosts: all\n  vars_files:\n    - my_vars_file.yml\n\n  tasks:\n    - name: ping target server\n      ping: $ping_server\n\n```", "```\n# Example: Simple Variables File in Ansible. \n---\n- hosts: all\n  tasks:\n    - name: include default step variables\n      include_vars: my_vars_file.yml\n      ping: $ping_server\n\n```", "```\n# Example: Simple Variables File in Ansible. \n---\n- hosts: all\n  vars_files:\n    - my_vars_file.yml\n    - \"/opt/varsfiles/{{ env_vars }}.yml\"\n\n  tasks:\n    - name: ping target server\n      ping: $ping_server\n\n```", "```\n$> ansible-playbook site.yml -e \"env_vars=dev\" -c local\n\n```", "```\n# This example uses the default hosts file provided by Ansible\n# and executes playbook.yml\n$> ansible-playbook -i hosts playbook.yml\n\n# This example specifies an alternative hosts file\n# and executes playbook.yml\n$> ansible-playbook -i /opt/mynewinventoryfile playbook.yml\n\n# This example specifies a set of hosts directly on the\n# command line and executes playbook.yml\n$> ansible-playbook -i fqdn.example.com,playbook.yml\n\n```", "```\n/etc/ansible/hosts\n\n```", "```\n# Example Ansible hosts file with two defined groups\n\n[WEB]\n192.168.10.10\n[DATABASE]\n192.168.10.11\n\n```", "```\n# Example Ansible Playbook, which targets the 'WEB' group\n---\n- hosts: WEB\n  vars :\n    http_port : 80\n  tasks:\n    - name: Install nginx web server\n      apt: pkg=nginx state=installed update_cache=true\n      notify:\n        - start nginx\n\n```", "```\n# Run Ansible and instruct it to execute the contents of\n# playbook.yml against the inventory file of hosts\n# (the default Ansible inventory)\n$> ansible-playbook playbook.yml -i hosts\n\n```", "```\n# Example hosts line values:\n hosts: all -- Applies the current playbook to all hosts in the specified inventory file\n  hosts: hostname -- Applies the playbook ONLY to the specified host 'hostname'\n  hosts: groupname -- Applies the playbook to all hosts in specified groupname\n  hosts: groupA,groupB -- Applies the playbook to hosts in groupB and groupB\n  hosts: group1,host1 -- A combination of single hosts and groups\n  hosts: *.google.com -- Applies the playbook to wildcard matches\n\n```", "```\n[WEB]\n192.168.10.10\n[PRODUCTION]\n192.168.10.11\n\n```", "```\nhosts: $myhosts -- apply the playbook to all hosts specified in the variable $myhosts\n\n```", "```\n$> ansible-playbook playbook.yml --extra-vars=\"groups=PRODUCTION\"\n\n```", "```\n- name: install the latest version of Apache\n  yum:\n    name: httpd\n    state: latest\n- name: remove the Apache package\n  yum:\n    name: httpd\n    state: absent\n- name: install the latest version of Apache from the testing repo\n  yum:\n    name: httpd\n    enablerepo: testing\n    state: present\n- name: install one specific version of Apache\n  yum:\n    name: httpd-2.2.29-1.4.amzn1\n    state: present\n- name: upgrade all packages\n  yum:\n    name: '*'\n    state: latest\n- name: install the nginx rpm from a remote repo\n  yum:\n    name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n    state: present\n- name: install nginx rpm from a local file\n  yum:\n    name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm\n    state: present\n- name: install the 'Development tools' package group\n  yum:\n    name: \"@Development tools\"\n    state: present- name: install the 'Gnome desktop' environment group\n  yum:\n    name: \"@^gnome-desktop-environment\"\n    state: present\n- name: List Ansible packages and register result to print with debug later.\n  yum:\n    list: ansible\n  register: result\n\n```", "```\n- name: Update repositories cache and install \"foo\" package\n  apt:\n    name: foo\n    update_cache: yes\n\n- name: Remove \"foo\" package\n  apt:\n    name: foo\n    state: absent\n\n- name: Install the package \"foo\"\n  apt:\n    name: foo\n    state: present\n\n- name: Install the version '1.00' of package \"foo\"\n  apt:\n    name: foo=1.00\n    state: present\n\n- name: Update the repository cache and update package \"nginx\" to latest version using default release squeeze-backport\n  apt:\n    name: nginx\n    state: latest\n    default_release: squeeze-backports\n    update_cache: yes\n\n- name: Install latest version of \"openjdk-6-jdk\" ignoring \"install-recommends\"\n  apt:\n    name: openjdk-6-jdk\n    state: latest\n    install_recommends: no\n\n- name: Update all packages to the latest version\n  apt:\n    upgrade: dist\n\n- name: Run the equivalent of \"apt-get update\" as a separate step\n  apt:\n    update_cache: yes\n\n- name: Only run \"update_cache=yes\" if the last one is more than 3600 seconds ago\n  apt:\n    update_cache: yes\n    cache_valid_time: 3600\n\n- name: Pass options to dpkg on run\n  apt:\n    upgrade: dist\n    update_cache: yes\n    dpkg_options: 'force-confold,force-confdef'\n\n- name: Install a .deb package\n  apt:\n    deb: /tmp/mypackage.deb\n\n- name: Install the build dependencies for package \"foo\"\n  apt:\n    pkg: foo\n    state: build-dep\n\n- name: Install a .deb package from the internet.\n  apt:\n    deb: https://example.com/python-ppq_0.1-1_all.deb\n\n```", "```\n# Create a User 'dortiz' ---\n- hosts: all\n\n  tasks:\n    - name: Add David Ortiz User to the System\n      user: \n        name: dortiz\n        comment: \"David Ortiz has entered the building\"\n\n# Create a User 'jdaemon' and add to group baseballplayers ---\n- hosts: all\n\n  tasks:  \n    - name: Add Johnny Daemon User to the System\n      user: \n        name: jdaemon\n        comment: \"Johnny Daemon has entered the building\"\n        groups: baseballplayers\n\n```", "```\n# Create a directory using an Ansible Task\n\n- name: Creates a directory\n  file: path=/opt/helloWorld state=directory\n\n# Create a directory using an Ansible Task,\n# which is owned by the baseballplayersgroup\n\n- name: Creates a directory\n  file: path=/opt/helloWorld state=directory\n\n# Creates a directory owned by the baseballplayers group\n# with CHMO 0775 permissions\n- name: Creates directory\n  file: path=/opt/helloWorld state=directory owner=baseballplayers group=baseballplayers mode=0775\n\n# Changes the ownership of myconfiguration.conf to \n# bob and changes permissions to 0644\n- name:\n    file:\n      path: /opt/myconfiguration.conf\n      owner: bob\n      group: admin\n      mode: 0644\n\n```", "```\n# Example action to start service httpd, if not running\n- service:\n    name: httpd\n    state: started\n\n# Example action to stop service httpd, if running\n- service:\n    name: httpd\n    state: stopped\n\n# Example action to restart service httpd, in all cases\n- service:\n    name: httpd\n    state: restarted\n\n# Example action to reload service httpd, in all cases\n- service:\n    name: httpd\n    state: reloaded\n\n# Example action to enable service httpd, and not touch the running state\n- service:\n    name: httpd\n    enabled: yes\n\n# Example action to start service foo, based on running process /usr/bin/foo\n- service:\n    name: foo\n    pattern: /usr/bin/foo\n    state: started\n\n# Example action to restart network service for interface eth0\n- service:\n    name: network\n    state: restarted\n    args: eth0\n\n```", "```\n# Example from Ansible Playbooks\n- copy:\n    src: /srv/myfiles/foo.conf\n    dest: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: 0644\n\n# The same example as above, but using a symbolic mode\n# equivalent to 0644\n- copy:\n    src: /srv/myfiles/foo.conf\n    dest: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: \"u=rw,g=r,o=r\"\n\n# Another symbolic mode example, adding some permissions\n# and removing others\n- copy:\n    src: /srv/myfiles/foo.conf\n    dest: /etc/foo.conf\n    owner: foo\n    group: foo\n    mode: \"u+rw,g-wx,o-rwx\"\n\n# Copy a new \"ntp.conf file into place, backing up the\n# original if it differs from the copied version\n- copy:\n    src: /mine/ntp.conf\n    dest: /etc/ntp.conf\n    owner: root\n    group: root\n    mode: 0644\n    backup: yes\n\n# Copy a new \"sudoers\" file into place, after passing\n# validation with visudo\n- copy:\n    src: /mine/sudoers\n    dest: /etc/sudoers\n    validate: 'visudo -cf %s'\n\n```"]