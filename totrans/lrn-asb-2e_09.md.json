["```\n$ ansible-galaxy collection install azure.azcollection\n```", "```\n$ pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt\n```", "```\n$ az login\n```", "```\n$ az account list --output table\n$ az account set --subscription <subscription_id>\n```", "```\ndebug_output: false\ngenterate_key: false\n```", "```\napp:\n  name: \"learnansible-wordpress\"\n  shortname: \"ansiblewp\"\n  location: \"westeurope\"\n  location_short: \"euw\"\n  env: \"prod\"\n  public_dns_name: \"learnansible\"\n```", "```\ncommon_tags:\n  \"project\": \"{{ app.name }}\"\n  \"environment\": \"{{ app.env }}\"\n  \"deployed_by\": \"ansible\"\n```", "```\ndict:\n  ansible_warning: \"Resource managed by Ansible\"\n  load_balancer: \"lb\"\n  network_interface: \"nic\"\n  nsg: \"nsg\"\n  private_endpoint: \"pe\"\n  public_ip: \"pip\"\n  resource_group: \"rg\"\n  subnet: \"snet\"\n  virtual_machine: \"vm\"\n  virtualnetwork: \"vnet\"\n```", "```\nload_balancer_name: \"{{ dict.load_balancer }}-{{ app.name }}-{{app.env}}-{{ app.location_short }}\"\nload_balancer_public_ip_name: \"{{ dict.public_ip }}-{{ load_balancer_name }}\"\nnsg_name: \"{{ dict.nsg }}-{{ app.name }}-{{app.env}}-{{ app.location_short }}\"\nresource_group_name: \"{{ dict.resource_group }}-{{ app.name }}-{{app.env}}-{{ app.location_short }}\"\nvirtual_network_name: \"{{ dict.virtualnetwork }}-{{ app.name }}-{{app.env}}-{{ app.location_short }}\"\nvm_name: \"{{ dict.virtual_machine }}-admin-{{ app.name }}-{{app.env}}-{{ app.location_short }}\"\nvnet_name: \"{{ dict.virtualnetwork }}-{{ app.name }}-{{app.env}}-{{ app.location_short }}\"\n```", "```\nvnet_config:\n  cidr_block: \"10.0.0.0/24\"\n  subnets:\n    - {\n        name: \"{{ dict.subnet }}-vms-{{ app.name }}-{{app.env}}-{{ app.location_short }}\",\n        subnet: «10.0.0.0/27»,\n        private: true,\n        service_endpoints: «Microsoft.Storage»,\n      }\n```", "```\ntrusted_ips:\n  - \"\"\ndynamic_ips:\n  - \"{{ your_public_ip }}\"\n```", "```\nnsg_rules:\n  - name: \"allowHTTP\"\n    description: \"{{ dict.ansible_warning }}\"\n    protocol: «Tcp»\n    destination_port_range: «80»\n    source_address_prefix: \"*\"\n    access: \"Allow\"\n    priority: \"100\"\n    direction: \"Inbound\"\n  - name: \"allowSSH\"\n    description: \"{{ dict.ansible_warning }}\"\n    protocol: \"Tcp\"\n    destination_port_range: «{{ load_balancer.ssh_port }}»\n    source_address_prefix: \"{{ trusted_ips|select() + dynamic_ips | unique }}\"\n    access: \"Allow\"\n    priority: \"150\"\n    direction: \"Inbound\"\n```", "```\nload_balancer:\n  ssh_port: \"22\"\n  ssh_port_backend: \"22\"\n  http_port: \"80\"\n  http_port_backend: \"80\"\n```", "```\nvm_config:\n  admin_username: \"adminuser\"\n  ssh_password_enabled: false\n  vm_size: \"Standard_B1ms\"\n  image:\n    publisher: \"Canonical\"\n    offer: \"0001-com-ubuntu-server-jammy\"\n    sku: \"22_04-LTS\"\n    version: \"latest\"\n  disk:\n    managed_disk_type: \"Premium_LRS\"\n    caching: \"ReadWrite\"\n  key:\n    path: \"/home/adminuser/.ssh/authorized_keys\"\n    data: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n```", "```\nlocation: \"{{ app.location }}\"\nhosts_group: \"vmgroup\"\n```", "```\n- name: \"Create the resource group\"\n  azure.azcollection.azure_rm_resourcegroup:\n    name: \"{{ resource_group_name }}\"\n    location: \"{{ location }}\"\n    tags: \"{{ common_tags }}\"\n  register: \"resource_group_output\"\n```", "```\n- name: \"Debug - Resource Group result\"\n  ansible.builtin.debug:\n    var: \"resource_group_output\"\n  when: debug_output\n```", "```\n- name: \"Create the virtual network\"\n  azure.azcollection.azure_rm_virtualnetwork:\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    name: \"{{ virtual_network_name }}\"\n    address_prefixes: \"{{ vnet_config.cidr_block }}\"\n    tags: \"{{ common_tags }}\"\n  register: \"virtual_network_output\"\n```", "```\n- name: \"Add the subnets to the virtual network\"\n  azure.azcollection.azure_rm_subnet:\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    name: \"{{ item.name }}\"\n    address_prefix: \"{{ item.subnet }}\"\n    virtual_network: \"{{ virtual_network_output.state.name }}\"\n    service_endpoints:\n      - service: \"{{ item.service_endpoints }}\"\n  with_items: \"{{ vnet_config.subnets }}\"\n  register: \"subnet_output\"\n```", "```\n- name: \"Find out your current public IP address using https://ipify.org/\"\n  community.general.ipify_facts:\n  register: public_ip_output\n```", "```\n- name: \"Register your public ip as a fact\"\n  ansible.builtin.set_fact:\n    your_public_ip: \"{{ public_ip_output.ansible_facts.ipify_public_ip }}\"\n```", "```\n- name: \"Create the network security group\"\n  azure.azcollection.azure_rm_securitygroup:\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    name: \"{{ nsg_name }}\"\n    rules: \"{{ nsg_rules }}\"\n    tags: \"{{ common_tags }}\"\n  register: \"nsg_output\"\n```", "```\n- name: \"Create the public IP address needed for the load balancer\"\n  azure.azcollection.azure_rm_publicipaddress:\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    allocation_method: \"Static\"\n    name: \"{{ load_balancer_public_ip_name }}\"\n    sku: \"standard\"\n    domain_name: \"{{ app.public_dns_name }}\"\n    tags: \"{{ common_tags }}\"\n  register: \"public_ip_output\"\n```", "```\n- name: \"Create load balancer using the public IP we created\"\n  azure.azcollection.azure_rm_loadbalancer:\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    name: \"{{ load_balancer_name }}\"\n    sku: \"Standard\"\n```", "```\n    frontend_ip_configurations:\n      - name: \"{{ load_balancer_name }}-frontend-ip-config\"\n        public_ip_address: \"{{ public_ip_output.state.name }}\"\n```", "```\n    backend_address_pools:\n      - name: \"{{ load_balancer_name }}-backend-address-pool\"\n```", "```\n    probes:\n      - name: \"{{ load_balancer_name }}-http-probe\"\n        port: «{{ load_balancer.http_port_backend }}»\n        fail_count: \"3\"\n        protocol: \"Tcp\"\n```", "```\n    load_balancing_rules:\n      - name: \"{{ load_balancer_name }}-rule-http\"\n        frontend_ip_configuration: \"{{ load_balancer_name }}-frontend-ip-config\"\n        backend_address_pool: \"{{ load_balancer_name }}-backend-address-pool\"\n        frontend_port: «{{ load_balancer.http_port }}»\n        backend_port: \"{{ load_balancer.http_port_backend }}\"\n        probe: \"{{ load_balancer_name }}-http-probe\"\n```", "```\n    inbound_nat_rules:\n      - name: \"{{ load_balancer_name }}-nat-ssh\"\n        frontend_ip_configuration: \"{{ load_balancer_name }}-frontend-ip-config\"\n        backend_port: \"{{ load_balancer.ssh_port }}\"\n        frontend_port: \"{{ load_balancer.ssh_port }}\"\n        protocol: \"Tcp\"\n```", "```\n    tags: \"{{ common_tags }}\"\n  register: \"load_balancer_output\"\n```", "```\n- name: \"Create the network interface for the wordpress vm\"\n  azure.azcollection.azure_rm_resource:\n    api_version: \"2023-05-01\"\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    provider: \"network\"\n    resource_type: \"networkinterfaces\"\n    resource_name: \"{{ dict.network_interface }}-{{ vm_name }}\"\n    idempotency: true\n```", "```\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}?api-version=2023-05-01\n```", "```\n    body:\n      location: \"{{ location }}\"\n      properties:\n        enableAcceleratedNetworking: false\n        primary: true\n        networksecuritygroup:\n          id: \"{{ nsg_output.state.id }}\"\n        configurations:\n          - name: \"{{ vm_name }}-ipcfg\"\n            properties:\n              subnet:\n                id: \"{{ subnet_output.results[0].state.id }}\"\n              loadBalancerBackendAddressPools:\n                - id: \"{{ load_balancer_output.state.backend_address_pools[0].id }}\"\n              loadBalancerInboundNatRules:\n                - id: \"{{ load_balancer_output.state.inbound_nat_rules[0].id }}\"\n      tags: \"{{ common_tags }}\"\n```", "```\n  register: \"network_interface_output\"\n```", "```\n- name: \"Check user has a key, if not create one for {{ ansible_user_id }}\"\n  ansible.builtin.user:\n    name: \"{{ ansible_user_id }}\"\n    generate_ssh_key: true\n    ssh_key_file: \"~/.ssh/id_rsa\"\n  when: genterate_key\n```", "```\n- name: Create the admin virtual machine\n  azure.azcollection.azure_rm_virtualmachine:\n    resource_group: \"{{ resource_group_output.state.name }}\"\n    name: \"{{ vm_name }}\"\n    admin_username: \"{{ vm_config.admin_username }}\"\n    ssh_public_keys:\n      - path: \"{{ vm_config.key.path }}\"\n        key_data: \"{{ vm_config.key.data }}\"\n    ssh_password_enabled: \"{{ vm_config.ssh_password_enabled }}\"\n    vm_size: \"{{ vm_config.vm_size }}\"\n    managed_disk_type: \"{{ vm_config.disk.managed_disk_type }}\"\n    network_interfaces: \"{{ network_interface_output.response.name }}\"\n    image:\n      offer: \"{{ vm_config.image.offer }}\"\n      publisher: \"{{ vm_config.image.publisher }}\"\n      sku: \"{{ vm_config.image.sku }}\"\n      version: «{{ vm_config.image.version }}»\n    tags: «{{ common_tags }}»\n  register: «vm_output»\n```", "```\n- name: Add the Virtual Machine to the host group\n  ansible.builtin.add_host:\n    groups: \"{{ hosts_group }}\"\n    hostname: \"{{ public_ip_output.state.ip_address }}-{{ load_balancer.ssh_port }}\"\n    ansible_host: \"{{ public_ip_output.state.ip_address }}\"\n    ansible_port: «{{ load_balancer.ssh_port }}»\n```", "```\n- name: \"Wait for the virtual machine to be ready\"\n  ansible.builtin.wait_for:\n    host: \"{{ public_ip_output.state.ip_address }}\"\n    port: «{{ load_balancer.ssh_port }}»\n    delay: 10\n    timeout: 300\n```", "```\n- name: \"Deploy and configure the Azure Environment\"\n  hosts: localhost\n  connection: local\n  gather_facts: true\n  vars_files:\n    - group_vars/common.yml\n  roles:\n    - \"azure\"\n```", "```\n- name: \"Install and configure Wordpress\"\n  hosts: vmgroup\n  gather_facts: true\n  become: true\n  become_method: \"ansible.builtin.sudo\"\n  vars_files:\n    - group_vars/common.yml\n  roles:\n    - \"secrets\"\n    - \"stack_install\"\n    - \"stack_config\"\n    - \"wordpress\"\n```", "```\n- name: \"Check if the file secrets.yml exists\"\n  ansible.builtin.stat:\n    path: \"group_vars/secrets.yml\"\n  register: secrets_file\n  delegate_to: \"localhost\"\n  become: false\n```", "```\n- name: \"Generate the secrets.yml file using a template file if not exists\"\n  ansible.builtin.template:\n    src: \"secrets.yml.j2\"\n    dest: \"group_vars/secrets.yml\"\n  when: secrets_file.stat.exists == false\n  delegate_to: \"localhost\"\n  become: false\n```", "```\ndb_password: \"{{ lookup('community.general.random_string', length=20, upper=true, special=false, numbers=true) }}\" wp_password: \"{{ lookup('community.general.random_string', length=20, upper=true, special=true, override_special=\"@-&*\", min_special=2, numbers=true) }}\"\n```", "```\nwordpress:\n  domain: \"http://{{ app.public_dns_name }}.{{ app.location }}.cloudapp.azure.com/\"\n  password: \"{{ wp_password }}\"\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\n$ ansible-playbook -i hosts destory.yml\n```"]