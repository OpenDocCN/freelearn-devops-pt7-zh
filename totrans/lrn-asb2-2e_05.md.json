["```\n    [default] \n    aws_access_key_id = YOUR_ACCESS_KEY \n    aws_secret_access_key = YOUR_SECRET_KEY \n\n```", "```\n    - hosts: localhost \n      tasks:\n\n```", "```\n    To create the VPC subnetwork: \n      - name: Ensure the VPC subnetwork is present \n        ec2_vpc_subnet: \n          state: present \n          az: AWS_AZ \n          vpc_id: '{{ aws_simple_net.vpc_id }}' \n          cidr: 10.0.1.0/24 \n        register: aws_subnet \n\n```", "```\n      - name: Ensure websg Security Group is present \n        ec2_group: \n          name: web \n          description: Web Security Group \n          region: AWS_AZ \n          vpc_id: VPC_ID \n          rules: \n          - proto: tcp \n            from_port: 80 \n            to_port: 80 \n            cidr_ip: 0.0.0.0/0 \n          - proto: tcp \n            from_port: 443 \n            to_port: 443 \n            cidr_ip: 0.0.0.0/0 \n          rules_egress: \n          - proto: all \n            cidr_ip: 0.0.0.0/0 \n        register: aws_simple_websg \n\n```", "```\n      - name: Ensure wssg Security Group is present \n        ec2_group: \n          name: wssg \n          description: Web Security Group \n          region: eu-west-1 \n          vpc_id: '{{ aws_simple_net.vpcs.0.id }}' \n          rules: \n          - proto: tcp \n            from_port: 22 \n            to_port: 22 \n            cidr_ip: 0.0.0.0/0 \n          - proto: tcp \n            from_port: 80 \n            to_port: 80 \n            cidr_ip: 0.0.0.0/0 \n          - proto: tcp \n            from_port: 443 \n            to_port: 443 \n            cidr_ip: 0.0.0.0/0 \n          rules_egress: \n          - proto: all \n            cidr_ip: 0.0.0.0/0 \n        register: aws_simple_wssg \n\n```", "```\n      - name: Ensure dbsg Security Group is present \n        ec2_group: \n          name: dbsg \n          description: DB Security Group \n          region: eu-west-1 \n          vpc_id: '{{ aws_simple_net.vpcs.0.id }}' \n          rules: \n          - proto: tcp \n            from_port: 3036 \n            to_port: 3036 \n            group_id: '{{ aws_simple_wssg.group_id }}' \n          rules_egress: \n          - proto: all \n            cidr_ip: 0.0.0.0/0 \n        register: aws_simple_dbsg \n\n```", "```\n      - name: Setup instances \n        ec2: \n          assign_public_ip: '{{ item.assign_public_ip }}' \n          image: ami-7abd0209 \n          region: eu-west-1 \n          exact_count: 1 \n          key_name: fale \n          count_tag: \n            Name: '{{ item.name }}' \n          instance_tags: \n            Name: '{{ item.name }}' \n          instance_type: t2.micro \n          group_id: '{{ item.group_id }}' \n          vpc_subnet_id: '{{ aws_simple_subnet.subnets.0.id }}' \n          volumes: \n            - device_name: /dev/sda1 \n              volume_type: gp2 \n              volume_size: 10 \n              delete_on_termination: True \n        register: aws_simple_instances \n        with_items: \n        - name: ws01.simple.aws.fale.io \n          group_id: '{{ aws_simple_wssg.group_id }}' \n          assign_public_ip: True \n        - name: ws02.simple.aws.fale.io \n          group_id: '{{ aws_simple_wssg.group_id }}' \n          assign_public_ip: True \n        - name: db01.simple.aws.fale.io \n          group_id: '{{ aws_simple_dbsg.group_id }}' \n          assign_public_ip: False \n\n```", "```\n      - name: Add route53 entry for server SERVER_NAME \n        route53: \n          command: create \n          zone: ZONE_NAME \n          record: RECORD_TO_ADD \n          type: RECORD_TYPE \n          ttl: TIME_TO_LIVE \n          value: IP_VALUES \n          wait: True \n\n```", "```\n      - name: Add route53 rules for instances \n        route53: \n          command: create \n          zone: aws.fale.io \n          record: '{{ item.tagged_instances.0.tags.Name }}' \n          type: A \n          ttl: 1 \n          value: '{{ item.tagged_instances.0.public_ip }}' \n          wait: True \n        with_items: '{{ aws_simple_instances.results }}' \n        when: item.tagged_instances.0.public_ip \n      - name: Add internal route53 rules for instances \n        route53: \n          command: create \n          zone: aws.fale.io \n          private_zone: True \n          record: '{{ item.tagged_instances.0.tags.Name }}' \n          type: A \n          ttl: 1 \n          value: '{{ item.tagged_instances.0.private_ip }}' \n          wait: True \n        with_items: '{{ aws_simple_instances.results }}' \n\n```", "```\n    - hosts: localhost \n      tasks: \n      - name: Gather information of the EC2 VPC net in eu-west-1 \n        ec2_vpc_net_facts: \n          region: eu-west-1 \n        register: aws_simple_net \n      - name: Gather information of the EC2 VPC subnet in eu-west-1 \n        ec2_vpc_subnet_facts: \n          region: eu-west-1 \n          filters: \n            vpc-id: '{{ aws_simple_net.vpcs.0.id }}' \n        register: aws_simple_subnet \n      - name: Ensure wssg Security Group is present \n        ec2_group: \n          name: wssg \n          description: Web Security Group \n          region: eu-west-1 \n          vpc_id: '{{ aws_simple_net.vpcs.0.id }}' \n          rules: \n          - proto: tcp \n            from_port: 22 \n            to_port: 22 \n            cidr_ip: 0.0.0.0/0 \n          - proto: tcp \n            from_port: 80 \n            to_port: 80 \n            cidr_ip: 0.0.0.0/0 \n          - proto: tcp \n            from_port: 443 \n            to_port: 443 \n            cidr_ip: 0.0.0.0/0 \n          rules_egress: \n          - proto: all \n            cidr_ip: 0.0.0.0/0 \n        register: aws_simple_wssg \n      - name: Ensure dbsg Security Group is present \n        ec2_group: \n          name: dbsg \n          description: DB Security Group \n          region: eu-west-1 \n          vpc_id: '{{ aws_simple_net.vpcs.0.id }}' \n          rules: \n          - proto: tcp \n            from_port: 3036 \n            to_port: 3036 \n            group_id: '{{ aws_simple_wssg.group_id }}' \n          rules_egress: \n          - proto: all \n            cidr_ip: 0.0.0.0/0 \n        register: aws_simple_dbsg \n      - name: Setup instances \n        ec2: \n          assign_public_ip: '{{ item.assign_public_ip }}' \n          image: ami-7abd0209 \n          region: eu-west-1 \n          exact_count: 1 \n          key_name: fale \n          count_tag: \n            Name: '{{ item.name }}' \n          instance_tags: \n            Name: '{{ item.name }}' \n          instance_type: t2.micro \n          group_id: '{{ item.group_id }}' \n          vpc_subnet_id: '{{ aws_simple_subnet.subnets.0.id }}' \n          volumes: \n            - device_name: /dev/sda1 \n              volume_type: gp2 \n              volume_size: 10 \n              delete_on_termination: True \n        register: aws_simple_instances \n        with_items: \n        - name: ws01.simple.aws.fale.io \n          group_id: '{{ aws_simple_wssg.group_id }}' \n          assign_public_ip: True \n        - name: ws02.simple.aws.fale.io \n          group_id: '{{ aws_simple_wssg.group_id }}' \n          assign_public_ip: True \n        - name: db01.simple.aws.fale.io \n          group_id: '{{ aws_simple_dbsg.group_id }}' \n          assign_public_ip: False \n      - name: Add route53 rules for instances \n        route53: \n          command: create \n          zone: aws.fale.io \n          record: '{{ item.tagged_instances.0.tags.Name }}' \n          type: A \n          ttl: 1 \n          value: '{{ item.tagged_instances.0.public_ip }}' \n          wait: True \n        with_items: '{{ aws_simple_instances.results }}' \n        when: item.tagged_instances.0.public_ip \n      - name: Add internal route53 rules for instances \n        route53: \n          command: create \n          zone: aws.fale.io \n          private_zone: True \n          record: '{{ item.tagged_instances.0.tags.Name }}' \n          type: A \n          ttl: 1 \n          value: '{{ item.tagged_instances.0.private_ip }}' \n          wait: True \n        with_items: '{{ aws_simple_instances.results }}' \n\n```", "```\nPLAY [localhost] ***************************************************\nTASK [setup] *******************************************************\nok: [localhost] \nTASK [Gather information of the EC2 VPC net in eu-west-1] **********\nok: [localhost] \nTASK [Gather information of the EC2 VPC subnet in eu-west-1] *******\nok: [localhost] \nTASK [Ensure wssg Security Group is present] ***********************\nchanged: [localhost] \nTASK [Ensure dbsg Security Group is present] ***********************\nchanged: [localhost] \nTASK [Setup instances] *********************************************\nchanged: [localhost] => (item={u'group_id': u'sg-950c2cf2', u'name': u'ws01.simple.aws.fale.io', u'assign_public_ip': True})\nchanged: [localhost] => (item={u'group_id': u'sg-950c2cf2', u'name': u'ws02.simple.aws.fale.io', u'assign_public_ip': True})\nchanged: [localhost] => (item={u'group_id': u'sg-940c2cf3', u'name': u'db01.simple.aws.fale.io', u'assign_public_ip': False}) \nTASK [Add route53 rules for instances] *****************************\nchanged: [localhost] =>\n    .... \nchanged: [localhost] =>\n    .... \nskipping: [localhost] =>\n    .... \nTASK [Add internal route53 rules for instances] ******************\nchanged: [localhost] =>\n    .... \nchanged: [localhost] =>\n    .... \nchanged: [localhost] =>\n    .... \nPLAY RECAP ****************************************************\nlocalhost                  : ok=7    changed=4    unreachable=0    failed=0\n\n```", "```\n      - name: Setup instances \n        ec2: \n          assign_public_ip: '{{ item.assign_public_ip }}' \n          image: ami-7abd0209 \n          region: eu-west-1 \n          exact_count: 1 \n          key_name: fale \n          count_tag: \n            Name: '{{ item.name }}' \n          instance_tags: \n            Name: '{{ item.name }}' \n          instance_type: t2.micro \n          group_id: '{{ item.group_id }}' \n          vpc_subnet_id: '{{ item.vpc_subnet_id }}' \n          volumes: \n            - device_name: /dev/sda1 \n              volume_type: gp2 \n              volume_size: 10 \n              delete_on_termination: True \n        register: aws_simple_instances \n        with_items: \n        - name: ws01.simple.aws.fale.io \n          group_id: '{{ aws_simple_wssg.group_id }}' \n          assign_public_ip: True \n          vpc_subnet_id: '{{ aws_simple_subnet.subnets.0.id }}' \n        - name: ws02.simple.aws.fale.io \n          group_id: '{{ aws_simple_wssg.group_id }}' \n          assign_public_ip: True \n          vpc_subnet_id: '{{ aws_simple_subnet.subnets.1.id }}' \n        - name: db01.simple.aws.fale.io \n          group_id: '{{ aws_simple_dbsg.group_id }}' \n          assign_public_ip: False \n          vpc_subnet_id: '{{ aws_simple_subnet.subnets.0.id }}' \n\n```", "```\n    - hosts: localhost \n      tasks: \n      - name: Add the SSH Key to Digital Ocean \n        digital_ocean: \n          state: present \n          command: ssh \n          name: SSH_KEY_NAME \n          ssh_pub_key: 'ssh-rsa AAAA...' \n          api_token: XXX \n        register: ssh_key \n\n```", "```\n    - hosts: localhost \n      tasks: \n      - name: Add the SSH Key to Digital Ocean \n        digital_ocean: \n          state: present \n          command: ssh \n          name: faleKey \n          ssh_pub_key: 'ssh-rsa AAAA...==' \n          api_token: 259...b3b \n    register: ssh_key \n\n```", "```\n    ansible-playbook -i localhost, playbooks/do_provision.yaml\n\n```", "```\nPLAY [localhost] **************************************************\nTASK [setup] ******************************************************\nok: [localhost] \nTASK [Add the SSH Key to Digital Ocean] ***************************\nchanged: [localhost] \nPLAY RECAP ********************************************************\nlocalhost                  : ok=2    changed=1    unreachable=0    failed=0\n\n```", "```\n      - name: Ensure the ws and db servers are present \n        digital_ocean: \n          state: present \n          ssh_key_ids: KEY_ID \n          name: '{{ item }}' \n          api_token: DIGITAL_OCEAN_KEY \n          size_id: 512mb \n          region_id: lon1 \n          image_id: centos-7-0-x64 \n          unique_name: True \n        with_items: \n        - WEBSERVER 1 \n        - WEBSERVER 2 \n        - DBSERVER 1 \n\n```", "```\n      - name: Ensure the ws and db servers are present \n        digital_ocean: \n          state: present \n          ssh_key_ids: '{{ ssh_key.ssh_key.id }}' \n          name: '{{ item }}' \n          api_token: 259...b3b \n          size_id: 512mb \n          region_id: lon1 \n          image_id: centos-7-0-x64 \n          unique_name: True \n        with_items: \n        - ws01.do.fale.io \n        - ws02.do.fale.io \n        - db01.do.fale.io \n        register: droplets \n\n```", "```\n      - name: Ensure domain resolve properly\n        digital_ocean_domain:\n          api_token: 259...b3b\n          state: present\n          name: '{{ item.droplet.name }}'\n          ip: '{{ item.droplet.ip_address }}'\n        with_items: '{{ droplets.results }}'\n\n```", "```\n    - hosts: localhost \n      tasks: \n      - name: Add the SSH Key to Digital Ocean \n        digital_ocean: \n          state: present \n          command: ssh \n          name: faleKey \n          ssh_pub_key: 'ssh-rsa AAAA...==' \n          api_token: 7e7...f6f \n        register: ssh_key \n      - name: Ensure the ws and db servers are present \n        digital_ocean: \n          state: present \n          ssh_key_ids: '{{ ssh_key.ssh_key.id }}' \n          name: '{{ item }}' \n          api_token: 259...b3b \n          size_id: 512mb \n          region_id: lon1 \n          image_id: centos-7-0-x64 \n          unique_name: True \n        with_items: \n        - ws01.do.fale.io \n        - ws02.do.fale.io \n        - db01.do.fale.io \n        register: droplets \n      - name: Ensure domain resolve properly \n        digital_ocean_domain: \n          api_token: 259...b3b \n          state: present \n          name: '{{ item.droplet.name }}' \n          ip: '{{ item.droplet.ip_address }}' \n        with_items: '{{ droplets.results }}' \n\n```", "```\nansible-playbook -i localhost, playbooks/do_provision.yaml\n\n```", "```\nPLAY [localhost] **************************************************\nTASK [setup] ******************************************************\nok: [localhost] \nTASK [Add the SSH Key to Digital Ocean] ***************************\nchanged: [localhost] \nTASK [Ensure the ws and db servers are present] *******************\nchanged: [localhost] => (item=ws01.do.fale.io)\nchanged: [localhost] => (item=ws02.do.fale.io)\nchanged: [localhost] => (item=db01.do.fale.io) \nTASK [Ensure domain resolve properly] *****************************\nchanged: [localhost] =>\n    .... \nchanged: [localhost] =>\n    .... \nchanged: [localhost] =>\n    .... \nPLAY RECAP ************************************************************\nlocalhost                  : ok=4    changed=3    unreachable=0    failed=0\n\n```"]