- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Branching, Places, and GUIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支、位置和图形界面
- en: 'In this chapter, you will learn about the crucial "five places" for Git: the
    work area, the index, the local repository, the remote repository, and the stash.
    You will see how to use each of these and how they work together.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 Git 中至关重要的“五个位置”：工作区、索引、局部仓库、远程仓库和暂存区。你将学习如何使用这些位置以及它们是如何协同工作的。
- en: Each concept will be illustrated with both code and screenshots, and most Git
    actions will be illustrated in the command line, Visual Studio, and a GUI (GitHub
    Desktop).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个概念将通过代码和截图进行说明，大多数 Git 操作将在命令行、Visual Studio 和 GUI（GitHub Desktop）中进行演示。
- en: You'll also learn about creating branches, committing code, and how to move
    commits from the work area to the repository, and from the repository to the remote
    repository.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习如何创建分支、提交代码，以及如何将提交从工作区移到仓库中，再从仓库移到远程仓库中。
- en: Five places
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 五个位置
- en: 'As a programmer I think of Git as divided into five places:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为程序员，我将 Git 分为五个位置：
- en: The work area
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作区
- en: The index (staging area)
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 索引（暂存区）
- en: The local repository
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 局部仓库
- en: The remote repository
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 远程仓库
- en: The stash
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暂存区
- en: Let's begin by examining each of these in turn.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看这些内容。
- en: The work area
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作区
- en: 'The work area is where your current files are. That is, if you were to open
    Windows Explorer and navigate to the directory you cloned to, you would see the
    version of the program you were currently working on. If you were to open Visual
    Studio 2019, these are the files that would be in the Solution Explorer. Again,
    the work area is where your current files are; if you open Visual Studio on your
    project, the files in the work area are what you will see. As you change branches
    (see below) the work area is updated with the appropriate files. This can be one
    of the hardest concepts in Git: when you change branches you change the files
    that are in your work area – that is, the files for that branch are swapped into
    the Windows (or Mac or Linux) directory.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 工作区是你当前文件所在的位置。也就是说，如果你打开 Windows 资源管理器并导航到你克隆的目录，你会看到你当前正在处理的程序版本。如果你打开 Visual
    Studio 2019，这些文件会出现在解决方案资源管理器中。同样，工作区是你当前文件所在的位置；如果你在你的项目中打开 Visual Studio，工作区中的文件就是你会看到的文件。当你切换分支时（见下文），工作区会更新为适当的文件。这可能是
    Git 中最难理解的概念之一：当你切换分支时，工作区中的文件会发生变化——也就是说，当前分支的文件会被切换到 Windows（或 Mac 或 Linux）目录中。
- en: '**Note**: it is possible to have more than one work area using what are known
    as work trees. These are well beyond the scope of this book, and you can go a
    long while before you will need them.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：可以通过所谓的工作树使用多个工作区。这些超出了本书的范围，你在很长时间内可能都不需要它们。'
- en: 'In our current program the work area looks like this in Windows Explorer:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的程序中，工作区在 Windows 资源管理器中的样子如下：
- en: '![](img/B17441_03_01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_01.png)'
- en: 'Figure 3.1: Current work area'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：当前工作区
- en: 'This same directory can be seen from the command line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个相同的目录可以通过命令行查看：
- en: '![](img/B17441_03_02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_02.png)'
- en: 'Figure 3.2: Current work area from command line'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：来自命令行的当前工作区
- en: 'In Visual Studio, the same work area looks like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，相同的工作区如下所示：
- en: '![](img/B17441_03_03.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_03.png)'
- en: 'Figure 3.3: Current work area from Visual Studio'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：来自 Visual Studio 的当前工作区
- en: If you look at what is in the directory, you will find the exact same files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看目录中的内容，你会发现完全相同的文件。
- en: The index/staging area
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引/暂存区
- en: If you have files in the work area that you would like to commit, you first
    add them to the staging area (often called the index). From the staging area,
    it takes just one command (`commit`) to move these files into the local repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工作区中有你想要提交的文件，你首先需要将它们添加到暂存区（通常称为索引）。从暂存区开始，只需一个命令（`commit`）就能将这些文件移入局部仓库。
- en: '![](img/B17441_03_04.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_04.png)'
- en: 'Figure 3.4: Modifying Program.cs'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：修改 Program.cs
- en: I have added a couple of lines to all three copies we have.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我们拥有的三个副本中都添加了几行。
- en: 'Let''s start at the command line. I make a habit of invoking `git status` before
    doing anything else:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从命令行开始。我有一个习惯，就是在做任何事情之前，先运行`git status`：
- en: '![](img/B17441_03_05.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_05.png)'
- en: 'Figure 3.5: git status from the command line'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5：命令行中的 git status
- en: 'To add this to the index at the command line, you just use the keyword `add`
    followed either by the name of the file or by a period (`.`) indicating you want
    all the files moved to the staging area:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在命令行中将这个文件添加到索引中，只需使用关键字`add`，然后跟上文件名或一个句点（`.`），表示你希望将所有文件移到暂存区：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Git will make no response, but the file is now in the staging area. You can
    see this if you get the status again:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Git 不会做出响应，但文件现在已经进入暂存区。如果你再次查看状态，你会看到这一点：
- en: '![](img/B17441_03_06.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_06.png)'
- en: 'Figure 3.6: Modified file staged'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：已修改文件已暂存
- en: This time, it shows the modified file as ready to be committed. To commit this
    file all you need to do is enter `git commit`. Because the file is already staged,
    it will be immediately committed to the local repository. If you don't add `-m
    "my message"` the editor will be opened for you to add your message.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，它显示已修改的文件已准备好提交。要提交这个文件，你只需输入 `git commit`。因为文件已经暂存，它将立即提交到本地仓库。如果你没有添加 `-m
    "my message"`，编辑器将打开，供你添加消息。
- en: Skipping the staging area
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳过暂存区
- en: 'You can bypass the staging area and go directly to committing the file by using
    the `-a` flag. Thus, with your file unstaged you can write:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以跳过暂存区，直接提交文件，方法是使用 `-a` 参数。因此，当你的文件未暂存时，你可以写：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will immediately commit `Program.cs` with the indicated message. I confess
    this is the way I commit files 90% of the time. (You can also use `git commit
    -a -m "my message"` to commit all the modified files in the working area.)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将立即提交 `Program.cs` 文件，并附上指定的消息。我承认，我 90% 的时间都是这样提交文件的。（你也可以使用 `git commit -a
    -m "my message"` 来提交工作区中所有已修改的文件。）
- en: Visual Studio
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio
- en: 'In Visual Studio the status is visible at all times, in the lower right-hand
    corner:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，状态始终可见，位于右下角：
- en: '![](img/B17441_03_07.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_07.png)'
- en: 'Figure 3.7: Lower right of Visual Studio'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7：Visual Studio 右下角
- en: The 0 with an up arrow indicates that you have no files waiting to be pushed.
    The 1 next to the pencil indicates that you have one modified file. Next comes
    the name of your program and then finally the branch you are on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 0 与上箭头表示你没有文件等待推送。铅笔旁边的 1 表示你有一个已修改的文件。接下来是你的程序名称，最后是你所在的分支。
- en: 'There are a number of ways to commit in Visual Studio. For example, you can
    commit right from the Git menu or by right-clicking on the file and selecting
    **Git**. You will then select **Commit or Stash**. An easier way, however, is
    to click on the pencil, which brings up the **Git Changes** menu:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中有多种提交方式。例如，你可以直接从 Git 菜单提交，或者右键单击文件并选择**Git**。然后选择**提交或暂存**。然而，更简单的方法是点击铅笔图标，打开**Git
    变更**菜单：
- en: '![](img/B17441_03_08.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_08.png)'
- en: 'Figure 3.8: Visual Studio changes window'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8：Visual Studio 变更窗口
- en: 'Here you can see the changed files and their paths. You can choose **Commit
    All** or drop down that button and choose from a number of related options. Fill
    in the message and press **Commit All** and Visual Studio immediately responds
    with a confirmation, reinforcement that you''ve committed to the *local* repository,
    and offers you the opportunity to upload to the remote repository (showing you
    that you have one outgoing file):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到已更改的文件及其路径。你可以选择**全部提交**，或者点击该按钮下拉并选择若干相关选项。填写消息后按下**全部提交**，Visual
    Studio 会立即响应，确认你已提交到*本地*仓库，并提供将更改上传到远程仓库的机会（显示你有一个外发文件）：
- en: '![](img/B17441_03_09.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_09.png)'
- en: 'Figure 3.9: Visual Studio commit and push/pull menu'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9：Visual Studio 提交和推送/拉取菜单
- en: It can be confusing as to which way is outgoing as we tend to think of uploading
    rather than outgoing. Suffice to say that when Visual Studio says outgoing they
    mean going from the local to the remote server, and when they say incoming they
    mean moving from the server to the local repo.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们通常认为上传是“向外”传输，而不是“外发”，所以可能会感到困惑。简单来说，当 Visual Studio 说“外发”时，它指的是从本地到远程服务器，而“内发”则指的是从服务器到本地仓库。
- en: GitHub Desktop
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Desktop
- en: 'GitHub Desktop gives you a tremendous amount of information on one screen:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop 在一个屏幕上给你提供了大量信息：
- en: '![](img/B17441_03_10.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_10.png)'
- en: 'Figure 3.10: GitHub Desktop'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10：GitHub Desktop
- en: On the top row, you can see the name of the repository and the current branch.
    In the window on the upper left, you can see that one file changed, and which
    file that is. On the right, you can see the actual change.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部行，你可以看到仓库名称和当前分支。在左上角的窗口中，你可以看到有一个文件发生了变化，以及是哪个文件。在右侧，你可以看到实际的变化。
- en: Finally, on the lower left, you can put in your message and commit your file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在左下角，你可以输入消息并提交文件。
- en: As soon as you commit, the page is cleared and a new button appears to allow
    you to push the changes to the server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你提交，页面会清空并显示一个新按钮，允许你将更改推送到服务器。
- en: Local and remote repositories
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地与远程仓库
- en: The third and fourth areas for Git are the local and remote repositories. We've
    covered this in the previous chapter so all I'll repeat here is that `commit`
    puts your files into the *local* repository and `push` sends your commit from
    your local repository to the remote one.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的第三和第四个区域是本地仓库和远程仓库。我们在前一章中已经讨论过这个话题，这里我只重复一句：`commit` 将文件提交到*本地*仓库，`push`
    将你的提交从本地仓库推送到远程仓库。
- en: While I believe in committing frequently, you'll want to put in a few commits
    before you push. This will give you the opportunity to combine similar commits
    as we'll see in *Chapter 6,* *Interactive Rebasing* on interactive rebase.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我提倡频繁提交，但你可能希望在推送之前进行几次提交。这样，你就有机会合并相似的提交，正如我们在*第六章*中所看到的，*交互式变基*（Interactive
    Rebasing）中所述。
- en: The stash
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂存区
- en: The fifth and final area for Git is the stash. The stash, as it sounds, is a
    place to stash away files that you've modified but don't want to commit or lose
    when changing branches. We'll see more of this just below, when we discuss branching.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的第五个也是最后一个区域是暂存区。顾名思义，暂存区是用来存放你修改过但不想提交或者在切换分支时不想丢失的文件的地方。我们将在下面的分支讨论中详细了解这个功能。
- en: Branches
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支
- en: 'Using branches is critical to working with Git, not to mention to the success
    of your project. The idea is this: you have a "main" branch that you''ll do your
    releases from. Each time code is added to the main branch it is checked and reviewed
    so that the main branch stays as clean as possible.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分支对 Git 的操作至关重要，更不用说对项目成功的影响了。其基本思想是：你有一个“主”分支，所有发布操作都从这个分支进行。每当有代码添加到主分支时，都会进行检查和审查，以确保主分支保持尽可能干净。
- en: 'When you want to work on a bug or a feature, you create a new branch (often
    called a feature branch). This creates a copy of the code that is currently in
    the main branch. You can work on your feature branch without affecting the main
    branch at all. Once you are done, and all is working, you can then "merge" your
    feature branch into the main branch:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要修复一个 bug 或开发一个新功能时，你会创建一个新的分支（通常称为功能分支）。这将创建一个当前主分支代码的副本。你可以在功能分支上工作，而不会影响主分支。完成工作并确保一切正常后，你可以将功能分支“合并”回主分支：
- en: '![](img/B17441_03_11.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_11.png)'
- en: 'Figure 3.11: First feature branch'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11：第一个功能分支
- en: Notice that there is a pointer named **Head**. This points to whatever is in
    your work area. In this case, we've branched to **Feature 1** and **Head** shows
    that the code for that feature branch is now in our work area.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，存在一个名为**Head**的指针。它指向你工作区中的内容。在这种情况下，我们已经分支到**Feature 1**，**Head**显示该功能分支的代码现在位于我们的工作区中。
- en: That is a pretty good simplification of branching but there is a good deal more
    to it. First, let's see how to do it. Until now, all your code has been on the
    Main branch – a bad practice. We should have created a feature branch before doing
    any coding. That said, we can do so now.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对分支的一个很好的简化，但实际上还有很多内容。首先，让我们来看一下如何操作。直到现在，你的所有代码都在 Main 分支上——这是一种不好的实践。我们应该在编码前就创建一个功能分支。话虽如此，我们现在仍然可以这样做。
- en: 'From the command line, you simply check out Main (putting whatever is at the
    tip of Main into your work area. The tip means the most recent commit). Once you
    are in Main you will `pull` from the remote repository to get the very latest
    version of Main. You are now ready to create your first branch. The sequence of
    commands looks like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行开始，你只需检查 Main（将 Main 上的最新提交内容放入你的工作区。指针“tip”表示最新的提交）。进入 Main 后，你将从远程仓库 `pull`
    以获取 Main 的最新版本。此时，你已经准备好创建你的第一个分支。命令序列如下所示：
- en: '![](img/B17441_03_12.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_12.png)'
- en: 'Figure 3.12: Creating branch on command line'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12：在命令行上创建分支
- en: 'Note that creating the branch `Calculator` did not check it out; you must do
    that as a separate step. However, if you use the `-b` flag, then you can create
    the branch and check it out at the same time:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，创建分支 `Calculator` 并没有自动检出它；你必须作为一个单独的步骤来完成此操作。但是，如果你使用 `-b` 标志，那么你可以同时创建并检出分支：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In either case, the new branch is in the work area. But what is in that branch?
    Because that branch was created from main, and we've not changed anything yet,
    the new branch is identical to the main branch. From here they will diverge. As
    you add code, it will be in the new branch (`Calculator`) but not in the main
    one.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，新分支都在工作区中。但是，那个分支中是什么内容呢？由于该分支是从主分支创建的，而我们还没有做任何更改，因此新分支与主分支完全相同。从这里开始，它们将分叉。随着你添加代码，代码将存在于新分支（`Calculator`）中，但不会出现在主分支中。
- en: Before we look at that in depth, let's create branches for the Visual Studio
    user and for the GitHub Desktop user.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究之前，我们先为 Visual Studio 用户和 GitHub Desktop 用户创建分支。
- en: The easiest way to do this (and the least confusing) is to open Windows Explorer
    and navigate to the `VisualStudio` folder (in my case, **GitHub** | **VisualStudio**
    | **ProGitForProgrammers** | **ProGitForProgrammers**). In that folder is a `.sln`
    file, which I will double-click on, opening Visual Studio. (This book was originally
    named Pro Git For Programmers and you will see that name in the code quite a bit.)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单（也是最不混淆）的方法是打开 Windows 资源管理器，导航到`VisualStudio`文件夹（在我的情况下是**GitHub** | **VisualStudio**
    | **ProGitForProgrammers** | **ProGitForProgrammers**）。在该文件夹中有一个`.sln`文件，我会双击它，打开
    Visual Studio。（这本书最初叫做《Pro Git For Programmers》，你会在代码中看到这个名字。）
- en: Don't be confused between the `VisualStudio` folder (which we are using to demonstrate
    Git in Visual Studio) and the program itself, which we use to modify the code
    in all three places (`CommandLine`, `GitHubDesktop`, and `VisualStudio`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆`VisualStudio`文件夹（我们用它来演示在 Visual Studio 中使用 Git）和程序本身，后者用来修改所有三个地方（`CommandLine`、`GitHubDesktop`
    和 `VisualStudio`）中的代码。
- en: It might be less confusing if you think of these as three separate programmers,
    each one on their own computer (mimicked here by using separate directories).
    Each programmer has a main branch and each one is now branching off for their
    own work.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把这些看作是三个独立的程序员，每个程序员在自己的计算机上（这里通过使用不同的目录来模拟），可能会更容易理解。每个程序员都有一个主分支，现在每个人都在为自己的工作创建分支。
- en: 'We want to put this on a branch as well, and to reduce confusion we''ll call
    this branch `Book`. To create the branch, click on the **Git** menu and select
    **New Branch**.Give the new branch the name `Book`, and press **Create**:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也希望把这个放到一个分支上，为了减少混淆，我们将这个分支命名为`Book`。要创建该分支，点击**Git**菜单，选择**新建分支**。给新分支命名为`Book`，然后按**创建**：
- en: '![](img/B17441_03_13.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_13.png)'
- en: 'Figure 3.13: Creating a new branch in Visual Studio'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13：在 Visual Studio 中创建新分支
- en: 'When you do, a window will open on the left that lists the branches for this
    repository and `Book` will be in bold indicating that it is the current branch:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你这么做时，左侧会弹出一个窗口，列出该仓库的所有分支，`Book`会以粗体显示，表明它是当前分支：
- en: '![](img/B17441_03_14.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_14.png)'
- en: 'Figure 3.14: Branches menu in Visual Studio'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14：Visual Studio 中的分支菜单
- en: Two of the users have now branched off of main. Let's use GitHub Desktop to
    create a third branch. Open the program and click on the menu choice **Repository**.
    On that menu click on **Show In Explorer** and make sure you are in the path `C:\GitHub\GitHubDesktop\ProGitForProgrammers`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有两个用户已经从主分支创建了分支。我们用 GitHub Desktop 来创建第三个分支。打开该程序，点击菜单中的**仓库**。在菜单中点击**在资源管理器中显示**，确保你处在`C:\GitHub\GitHubDesktop\ProGitForProgrammers`路径下。
- en: It should indicate that you have one pull from the origin (the server) and have
    a button that says **Pull Origin**. Go ahead and click that button. That brings
    down the latest version of **Main**. You now should see that the button says **Push
    Origin** – that's to push up to the server the two commits that are now sitting
    in this directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该显示你已经从源（服务器）拉取了一次，并且有一个按钮上写着**拉取源**。点击该按钮。这将下载最新版本的**Main**。你现在应该看到按钮显示**推送源**—这表示将现在位于该目录中的两个提交推送到服务器。
- en: To create your new branch, click on the **Branch** menu choice and select **New
    Branch**. It will prompt you for the name of your new branch. Enter `Movie` and
    click **Create**. The interface now asks if you want to publish your branch. Publishing
    in GitHub Desktop simply means uploading it for the first time. Let's hold off
    on that and first make some commits.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新分支时，点击**分支**菜单，并选择**新建分支**。系统会提示你输入新分支的名称。输入`Movie`并点击**创建**。此时界面会询问你是否要发布该分支。GitHub
    Desktop中的发布仅仅是将其上传到远程仓库。我们先不发布，先进行一些提交。
- en: Programmer 1 (CommandLine) and calculator
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序员 1（命令行）与计算器
- en: 'Open Visual Studio in the `CommandLine` directory path. In the Solution Explorer,
    you should see `Program.cs`, which has five `WriteLine` statements. Add a new
    class named `Calculator` and set it to `public`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CommandLine`目录路径中打开 Visual Studio。在解决方案资源管理器中，你应该能看到`Program.cs`，里面有五个`WriteLine`语句。添加一个名为`Calculator`的新类，并将其设置为`public`：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Normally we would not create a commit after so little work, but for this book,
    to make simple examples, we''ll be doing a great deal of committing. Return to
    the command line and get the status. It will tell you that you have one untracked
    file. Git has recognized that there is a file in the directory that it knows nothing
    about. Our next step is to add it to Git:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们不会在如此少量的工作后就创建提交，但为了本书中的简单示例，我们将进行大量提交。返回命令行并查看状态。它会告诉你有一个未跟踪的文件。Git
    已经识别出该目录中有一个它不了解的文件。我们的下一步是将其添加到 Git 中：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By using the dot, the `add` command will add any modified or new files to the
    staging area. You can then commit the new file just by writing:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用点号，`add`命令将把任何修改过或新增的文件添加到暂存区。然后，你只需通过输入以下命令提交新文件：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you write `git status` now, Git will tell you that you are on the branch
    `Calculator`, that you have nothing to commit, and that your working tree is clean.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在写`git status`，Git 会告诉你当前所在的分支是`计算器`，没有任何需要提交的内容，且工作区是干净的。
- en: 'We''re going to talk about the `log` command in detail in *Chapter* *9,* *Using
    the Log*, but for now, let''s just use it to see our commit and the message that
    went with it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第9章*《使用日志》中详细讨论`log`命令，但现在先用它查看我们的提交和相关消息：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will display all of your commits, one per line:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示你所有的提交，每个提交一行：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The seven-digit hexadecimal identifier is the "short ID" and is enough to uniquely
    identify each commit. They are listed in newest-to-oldest order. Our most recent
    commit says:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 七位十六进制标识符是“短 ID”，足以唯一标识每个提交。它们按最新到最旧的顺序列出。我们最近的提交是：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This tells you that your Head pointer is pointing to your **Calculator** branch
    (that is, what is in your working area right now is the **Calculator** branch)
    and it displays the message we added for that commit. Graphically, it might look
    like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉你，当前的 Head 指针指向**计算器**分支（也就是说，当前工作区中的内容是**计算器**分支），并显示了我们为该提交添加的消息。从图形上看，可能是这样的：
- en: '![](img/B17441_03_15.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_15.png)'
- en: 'Figure 3.15: Head pointer'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15：Head 指针
- en: Notice that the arrow runs from **Calculator** to **Main**. Each commit points
    to its parent.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到箭头从**计算器**指向**主分支**。每个提交都指向其父提交。
- en: Pushing the new branch
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送新分支
- en: 'We can push this commit up to the server, but the server doesn''t know about
    this branch. When we enter `git push`, we get back this message:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个提交推送到服务器，但服务器并不知道这个分支。当我们输入`git push`时，会收到以下消息：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is saying that it could not proceed (`fatal`) because the current branch
    (which is `Calculator`) does not correspond to a branch on the server. Wonderfully,
    however, it gives us the command line to use. Just copy the command and paste
    it at the prompt and hit *Enter*. Hey presto! You''ve pushed your branch up to
    the server:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示无法继续操作（`fatal`），因为当前分支（即`计算器`分支）与服务器上的分支不对应。然而，幸运的是，它给出了我们需要使用的命令行。只需复制该命令，粘贴到命令提示符中，然后按*Enter*键。嘿，搞定了！你已经将分支推送到服务器上：
- en: '![](img/B17441_03_16.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_16.png)'
- en: 'Figure 3.16: Pushing to the server'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16：推送到服务器
- en: For now, you can ignore all the other messages; what you care about is the last
    two lines, indicating that you now have a branch, `Calculator`, on the server,
    and that on the server it is also called `Calculator`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你可以忽略其他所有消息；你关心的是最后两行，它们表明你现在在服务器上有一个分支`计算器`，而且在服务器上这个分支也叫`计算器`。
- en: Note that from now on, when pushing commits on the `Calculator` branch, you
    won't have to use that line; you'll just be able to write `git push`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，从现在开始，在推送`计算器`分支的提交时，你不需要使用那一行命令；你只需要写`git push`。
- en: Examining origin
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看源
- en: 'Let''s go to GitHub and examine our new branch. Sign in and select the `ProGitForProgrammers`
    repository:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去 GitHub 查看我们的新分支。登录后选择`ProGitForProgrammers`代码库：
- en: '![](img/B17441_03_17.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_17.png)'
- en: 'Figure 3.17: Repository on server'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17：服务器上的代码库
- en: 'So, where is our calculator folder? Notice the button in the upper left that
    says **main**. Drop that down and choose **Calculator** – which will display the
    contents of the `Calculator` branch:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，哪里是我们的计算器文件夹呢？注意左上角有一个按钮显示**main**。点击下拉，选择**计算器** —— 这样就会显示`计算器`分支的内容：
- en: '![](img/B17441_03_18.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_18.png)'
- en: 'Figure 3.18: Calculator branch on server'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18：服务器上的计算器分支
- en: You can see that the `Calculator` branch *does* have the expected file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`计算器`分支*确实*有预期的文件。
- en: Adding commits to a branch
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向分支添加提交
- en: 'Let''s add another commit to our branch. Return to Visual Studio and give our
    `Calculator` class an `add` method:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再往分支中添加一个提交。返回 Visual Studio 并为我们的 `Calculator` 类添加一个 `add` 方法：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Again, just to have lots of commits, let''s commit this. The easiest way is
    to combine the add and the commit and to add a message on a single line:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，为了有更多的提交，我们再提交一次。最简单的方式是将添加和提交合并，并在单行中添加提交信息：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To see that this was in fact committed, run the `log` command again:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证这个提交，重新运行 `log` 命令：
- en: '![](img/B17441_03_19.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_19.png)'
- en: 'Figure 3.19: Tracking HEAD'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19：跟踪 HEAD
- en: If you study this for a moment, not only will you see that our commit worked
    (it is the first one listed) but also that we have various pointers. On the first
    line, we see that `HEAD` is pointing to our `Calculator` branch. Good enough.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果稍作分析，你不仅会看到我们的提交成功了（它是列表中的第一个），还会发现我们有多个指针。在第一行，我们看到 `HEAD` 指向我们的 `Calculator`
    分支。很好。
- en: The second line indicates that the `Calculator` branch on origin (GitHub) is
    pointing to the previous commit. We have one commit to push.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行表明，origin（GitHub）上的 `Calculator` 分支指向上一个提交。我们有一个提交需要推送。
- en: The third line shows us that `main` on origin, `HEAD` on origin, the main branch,
    and the `featureOne` branch are all pointing to the third most recent commit.
    All this is fine. We expect `Calculator` to have diverged from main, and we can
    push our commit if we like, or we can wait until we have a few of them.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行显示，`main` 分支、`HEAD`、origin 上的 `main` 分支以及 `featureOne` 分支都指向第三个最新的提交。所有这些都是正常的。我们预期
    `Calculator` 分支会从 `main` 分支分叉，如果需要的话，我们可以推送这个提交，或者等待再提交几个。
- en: The Book branch – Git within Visual Studio
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Book` 分支 – 在 Visual Studio 中的 Git'
- en: Let's turn our attention to the Visual Studio programmer. You will remember
    that this takes place in the `VisualStudio` folder. Let's open Visual Studio in
    that directory, and note that in the upper right, it says **1 outgoing** – this
    indicates that we have a commit to push. Click on it and Visual Studio opens two
    more windows.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将注意力转向 Visual Studio 的开发者。你会记得，这个操作发生在 `VisualStudio` 文件夹中。让我们在该目录下打开 Visual
    Studio，并注意到右上角显示 **1 个待提交** – 这表示我们有一个提交需要推送。点击它，Visual Studio 会打开两个新窗口。
- en: One shows that `Book` is the current branch (see above) and the other shows
    the history of your commits (not unlike `log`).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一个窗口显示 `Book` 是当前分支（见上文），另一个显示你的提交历史（与 `log` 命令类似）。
- en: 'There is a section in the middle window that shows what was committed locally
    and what awaits commitment in the outgoing section. Also note that `Book` and
    `main` are indicated as outgoing:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 中间窗口中有一部分显示了本地提交的内容以及待提交的内容。还注意到，`Book` 和 `main` 被标记为待提交：
- en: '![](img/B17441_03_20.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_20.png)'
- en: 'Figure 3.20: Commitments window Visual Studio'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20：Visual Studio 中的提交窗口
- en: 'To push these commits find the tiny up arrow in the upper-right corner (magnified
    here):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要推送这些提交，找到右上角的小上箭头（这里放大显示）：
- en: '![](img/B17441_03_21.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_21.png)'
- en: 'Figure 3.21: Link to push files on Visual Studio'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21：在 Visual Studio 中推送文件的链接
- en: 'Let''s create a `Book` class. The process is similar to the creation of the
    `Calculator` class above. Right-click on the project and choose **Add** | **Class**.
    Name your new class "Book". Make your `Book` class public and give it three properties:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 `Book` 类。这个过程类似于上面创建 `Calculator` 类的过程。右键点击项目，选择 **添加** | **类**。将新类命名为
    "Book"。使 `Book` 类为 public，并给它三个属性：
- en: '![](img/B17441_03_22.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_22.png)'
- en: 'Figure 3.22: New Book class'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22：新的 Book 类
- en: Let's commit this. To do so either click on the **Git** menu choice and choose
    **Commit or Stash**, or click on the pencil at the bottom of the screen. Either
    way, you will be brought to the commit screen. Notice that it says **1 outgoing**.
    Click on the up arrow. That will push our previous commit. You will get back a
    message saying that you have successfully pushed `Book` to origin.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提交这个。为此，可以点击 **Git** 菜单项并选择 **提交或暂存**，或者点击屏幕底部的铅笔图标。无论哪种方式，都将打开提交界面。注意，它显示
    **1 个待提交**。点击上箭头，这将推送我们之前的提交。你会收到一条消息，表示你已经成功将 `Book` 推送到 origin。
- en: Committing with GitHub Desktop
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Desktop 提交
- en: 'Open Visual Studio in the `GitHubDesktop` directory. Here we will create the
    `Movie` class and give it two properties: `Title` and a collection of people (which
    we will represent as strings to keep things simple):'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于 `GitHubDesktop` 目录中的 Visual Studio。这里我们将创建 `Movie` 类，并为其添加两个属性：`Title`
    和一个人名的集合（我们将使用字符串来表示，以简化操作）：
- en: '![](img/B17441_03_23.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_23.png)'
- en: 'Figure 3.23: Movie class'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23：Movie 类
- en: 'Now open GitHub Desktop. It recognizes and displays the changes (with deleted
    lines in red and new lines in green). It also offers you the opportunity to check
    in the new changes:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开 GitHub Desktop。它会识别并显示更改（删除的行以红色显示，新增的行以绿色显示）。它还为你提供了检查新更改的机会：
- en: '![](img/B17441_03_24.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_24.png)'
- en: 'Figure 3.24: Changes shown in GitHub Desktop'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24：在 GitHub Desktop 中显示的更改
- en: You can see the changes highlighted above, in *Figure 3.24*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *图 3.24* 中看到上面高亮显示的更改。
- en: Status
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态
- en: 'You can see that the GUIs make the work easier, but that the command line makes
    the steps more explicit. Our repository looks like this (conceptually):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，图形界面使工作变得更简单，但命令行使步骤更加明确。我们的仓库大概是这样的（从概念上讲）：
- en: '![](img/B17441_03_25.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_25.png)'
- en: 'Figure 3.25: Multiple branches'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.25：多个分支
- en: What's on origin?
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程仓库是什么状态？
- en: It's important to remember that this map of commits only applies to the local
    repository. What is on the remote repository may or may not be the same for any
    given branch depending on whether you've pushed all your commits. In *Chapter
    6*, *Interactive Rebasing*, we'll review why you might want to hold on to a number
    of commits before pushing them (in short, you will have the ability to combine
    commits to reduce the number of commits a reviewer must slog through).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，这个提交历史图仅适用于本地仓库。远程仓库中的内容可能与某个分支的内容不同，这取决于你是否已经推送了所有的提交。在 *第6章*，*交互式变基*，我们将回顾为什么在推送提交之前你可能希望保留一些提交（简而言之，你将有能力将多个提交合并，以减少审阅者必须逐一检查的提交数量）。
- en: Adding more commits
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加更多的提交
- en: We'd like to add a number of commits so that we can review their history and
    to set us up for future chapters. To do so, we'll want to work on the CommandLine
    project. You can, as we have done already, open Windows Explorer and navigate
    to the appropriate directory, and then double-click on `ProGitForProgrammers.sln`.
    An alternative is to open Visual Studio from anywhere and then choose **File** |
    **Recent Projects and Solutions**, and click on the one you want, in this case, `ProGitForProgrammers`
    (`C:\GitHub\CommandLine\ProGitForProgrammers`).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望添加一些提交，以便能够查看它们的历史记录，并为未来的章节做准备。为此，我们将要在 CommandLine 项目上工作。你可以像我们已经做的那样，打开
    Windows 资源管理器并导航到相应的目录，然后双击 `ProGitForProgrammers.sln`。另外，你也可以从任何位置打开 Visual Studio，然后选择
    **文件** | **最近的项目和解决方案**，点击你想要的那个，在本例中是 `ProGitForProgrammers`（`C:\GitHub\CommandLine\ProGitForProgrammers`）。
- en: 'Visual Studio will open to the `Calculator` folder. Just to triple-check that
    you are in the right place, right-click on the project and select **Open Folder
    In File Explorer**. You should see a Windows Explorer window open in the expected
    folder (no matter which folder you started out in). Let''s add a `Subtract` method:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 会打开 `Calculator` 文件夹。为了确认你在正确的位置，右键点击项目并选择 **在文件资源管理器中打开文件夹**。你应该看到一个
    Windows 资源管理器窗口在预期的文件夹中打开（无论你开始时在哪个文件夹）。让我们添加一个 `Subtract` 方法：
- en: '[PRE12]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'While we normally wouldn''t commit for such a small change, let''s go ahead
    now and turn to the command line. As always we start with a `git status`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常我们不会为如此小的更改提交，但现在我们还是先切换到命令行。像往常一样，我们从 `git status` 开始：
- en: '![](img/B17441_03_26.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_26.png)'
- en: 'Figure 3.26: git status'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.26：git status
- en: Let's read through this carefully. The first line after `git status` confirms
    that you are on the `Calculator` branch. Next comes a notice that you are ahead
    of `origin/Calculator` by one commit. That means that you didn't push your last
    commit (and this is true).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细阅读一下。`git status` 后的第一行确认你当前在 `Calculator` 分支。接下来是一个通知，告诉你当前领先于 `origin/Calculator`
    一个提交。这意味着你没有推送上次的提交（而这确实如此）。
- en: Next comes a paragraph telling you that `Calculator.cs` has been modified and
    gives you a couple of commands you might want to use in this context. Let's use
    the `add` command to place our modified file in the index.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个段落，告诉你 `Calculator.cs` 已经被修改，并给出了一些你可能想在这种情况下使用的命令。我们将使用 `add` 命令把修改后的文件添加到索引中。
- en: 'Rather than typing the name of the modified file, we''ll use a period (`.`)
    to indicate that we want everything changed in the working directory (in this
    case, just the one file):'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个句点（`.`）来代替输入修改文件的名称，表示我们想要提交工作目录中所有更改（在这种情况下，只有一个文件）：
- en: '[PRE13]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Git makes no real acknowledgment, but if you request the status, you''ll find
    that the modified file is now a different color (on most setups) and that the
    message is slightly different, as you now have that modified file in the index:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Git没有做出实际的确认，但如果你请求状态，你会发现修改的文件现在是不同的颜色（在大多数设置中），并且消息略有不同，因为你现在已将该修改文件添加到索引中：
- en: '![](img/B17441_03_27.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_27.png)'
- en: 'Figure 3.27: Modified files in git status'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27：git status中的修改文件
- en: Git helpfully gives you a command to unstage your files if you choose to do
    so. Be careful with the `restore` command, however. If you use it as shown with
    the `--staged` flag you will unstage your file, but if you leave out the flag
    you will restore your file to your last commit, **losing all the work you've done
    in the interim**.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Git会提供一个命令来取消暂存你的文件，如果你选择这么做。但要小心使用`restore`命令。如果你按照示例使用`--staged`标志，它会取消暂存你的文件，但如果你不加该标志，你会将文件恢复到最后一次提交的状态，**丢失你在这期间所做的所有工作**。
- en: 'In our case, we want to commit that change, and so we will enter:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们想要提交这个更改，因此我们将输入：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that we don't need the `-a` flag as the files we want to commit have
    already been added to the index.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们不需要`-a`标志，因为我们要提交的文件已经添加到索引中了。
- en: 'Add a `multiply` method and commit it. Next, add an integer division method
    and commit that as well:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个`multiply`方法并提交。接下来，添加一个整数除法方法并提交：
- en: '[PRE15]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Examining your commits
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查你的提交
- en: 'Enter the `log` command:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`log`命令：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/B17441_03_28.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_28.png)'
- en: 'Figure 3.28: log command'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.28：log命令
- en: Again, examine the output carefully. The first line tells you that `HEAD` is
    pointing to the `Calculator` branch, as we would expect. Below that are a couple
    of commits and then you see a line that indicates that `Calculator` on origin
    is only up to commit `e5c4db9` (the one where the message is `Add calculator class`).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 再次仔细查看输出。第一行告诉你，`HEAD`指向的是`Calculator`分支，这是我们预期的。下面是几次提交记录，然后你会看到一行，表明远程的`Calculator`分支仅有提交`e5c4db9`（即`Add
    calculator class`消息的提交）。
- en: 'Is that right? There are a couple of ways to tell. The easiest is to go to
    GitHub and see if the `Calculator` class has what this indicates:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这对吗？有几种方法可以确认。最简单的办法是去GitHub，看看`Calculator`类是否符合此处的描述：
- en: '![](img/B17441_03_29.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_29.png)'
- en: 'Figure 3.29: Branch on server'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.29：服务器上的分支
- en: Notice in the upper left that we are on the `Calculator` branch. Now drill down
    to the code. What you see is only the class in its initial state. This is consistent
    with what the log showed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在左上角我们处于`Calculator`分支。现在深入查看代码。你看到的只是类的初始状态。这与日志显示的内容是一致的。
- en: 'There is one more way to tell. Return to Visual Studio and click on the **3**
    next to the up arrow on the right side of the very bottom of the application:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种方法可以确认。返回到Visual Studio，并点击应用程序底部右侧向上箭头旁的**3**：
- en: '![](img/B17441_03_30.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_30.png)'
- en: 'Figure 3.30: Accessing history on Visual Studio'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.30：在Visual Studio中访问历史记录
- en: 'When you do, a window will open that shows your local history and the "outgoing"
    files – that is, the ones you''ve not yet pushed:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行此操作时，会打开一个窗口，显示你的本地历史记录和“待推送”文件——也就是那些你还没有推送的文件：
- en: '![](img/B17441_03_31.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_31.png)'
- en: 'Figure 3.31: History in Visual Studio'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.31：Visual Studio中的历史记录
- en: Again, this is consistent with what `log` has shown.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这与`log`所显示的内容一致。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, you have learned about the crucial "five places" for Git:
    the work area, the index, the local repository, the remote repository, and the
    stash. You have seen how to use each of these and how they work together.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经了解了Git的五个关键位置：工作区、索引、局部仓库、远程仓库和暂存区。你已经了解了如何使用这些位置以及它们如何协同工作。
- en: Each concept was illustrated with both code and screenshots, and every Git action
    was illustrated in the command line, Visual Studio, and GitHub Desktop.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 每个概念都通过代码和截图进行了说明，且每个Git操作都在命令行、Visual Studio和GitHub Desktop中进行了展示。
- en: Finally, you have learned about creating branches, committing code, and how
    to move commits from the work area to the repository and from the repository to
    the remote repository.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你已经学习了如何创建分支、提交代码，以及如何将提交从工作区移到仓库，再从仓库移到远程仓库。
- en: Challenge
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Create a private repository on GitHub named `Contacts`, and then clone that
    repository down to a folder on your disk. Using the command line, create a feature
    branch named `Person` and in that feature branch, create a person object with
    their name, age, and social security number. Create commits as you add each attribute.
    Review the log to see what you've created and then add these commits to the remote
    repository.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 上创建一个名为`Contacts`的私有仓库，然后将该仓库克隆到本地磁盘的一个文件夹中。使用命令行，创建一个名为`Person`的功能分支，并在该功能分支中创建一个包含姓名、年龄和社会保障号码的`person`对象。每添加一个属性时创建一个提交。查看日志，看看你创建了什么，然后将这些提交添加到远程仓库。
- en: Answer
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: There is no one right way to do this, but we'll walk through a likely answer.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有唯一的正确方式，但我们将通过一个可能的解决方案来演示。
- en: 'Task #1 – create a private repository on GitHub named `Contacts`. To do this,
    open a browser to [Github.com](http://Github.com) and navigate to your repository
    page. Click on **New** and fill in the fields as shown here:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 #1 – 在 GitHub 上创建一个名为`Contacts`的私有仓库。为此，打开浏览器访问[Github.com](http://Github.com)，并进入你的仓库页面。点击**新建**，并按照如下图填写各字段：'
- en: '![](img/B17441_03_32.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_32.png)'
- en: 'Figure 3.32: New repo on server'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.32: 服务器上的新仓库'
- en: Notice that I've marked the repository as private. Click the **Create Repository**
    button.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我已经将仓库标记为私有。点击**创建仓库**按钮。
- en: 'Task #2 – clone that repository down to a folder on your disk.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 #2 – 将该仓库克隆到你磁盘上的一个文件夹中。'
- en: 'On the same GitHub page, click on **Code** and click on the clipboard to copy
    the HTTPS or SSH path (if you have SSH you''ll know it, otherwise choose HTTPS):'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个 GitHub 页面上，点击**代码**，然后点击剪贴板图标复制 HTTPS 或 SSH 路径（如果你有 SSH，你会知道它，否则选择 HTTPS）：
- en: '![](img/B17441_03_33.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_33.png)'
- en: 'Figure 3.33: Copy address from server'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.33: 从服务器复制地址'
- en: 'Open the command line where you want your cloned repo and type:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你希望放置克隆仓库的命令行窗口，输入：
- en: '[PRE17]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'and paste in the link you just copied:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 然后粘贴你刚才复制的链接：
- en: '[PRE18]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see something like this:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到如下内容：
- en: '![](img/B17441_03_34.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_34.png)'
- en: 'Figure 3.34: Cloning from server to local repo'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.34: 从服务器克隆到本地仓库'
- en: This indicates that you have cloned `Contacts` from GitHub into a directory
    named `Contacts` and then you have changed to that directory.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示你已经将`Contacts`从 GitHub 克隆到一个名为`Contacts`的目录中，并且你已经切换到该目录。
- en: 'Task #3 – using the command line, create a feature branch named `Person`.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 #3 – 使用命令行创建一个名为`Person`的功能分支。'
- en: 'To create a feature branch, we''ll use the `branch` command and the `checkout`
    command (or the `cb` alias):'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个功能分支，我们将使用`branch`命令和`checkout`命令（或者`cb`别名）：
- en: '![](img/B17441_03_35.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_35.png)'
- en: 'Figure 3.35: Creating a branch'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.35: 创建分支'
- en: 'Task #4 – in that feature branch, create a `person` object with their name,
    age, and social security number. Create commits as you add each attribute.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 #4 – 在该功能分支中，创建一个包含姓名、年龄和社会保障号码的`person`对象。每添加一个属性时创建一个提交。'
- en: 'For this I created my project (`Contacts`) and then within a folder, I added
    the `Person` class:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我创建了我的项目（`Contacts`），然后在一个文件夹内添加了`Person`类：
- en: '![](img/B17441_03_36.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_36.png)'
- en: 'Figure 3.36: Adding the Person class'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.36: 添加 Person 类'
- en: 'Creating the class was intentionally trivial:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 创建类时故意让它变得简单：
- en: '![](img/B17441_03_37.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_37.png)'
- en: 'Figure 3.37: Person properties'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.37: Person 属性'
- en: I then returned to the command line to check in these changes.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我回到命令行，检查并提交这些更改。
- en: Remember to save your file before each commit or the command line will tell
    you that there is nothing to commit.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次提交之前，记得保存文件，否则命令行会告诉你没有任何要提交的内容。
- en: 'Task #5 – review the log to see what you''ve created:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 #5 – 查看日志，看看你创建了什么：'
- en: '![](img/B17441_03_38.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_38.png)'
- en: 'Figure 3.38: Examining the log'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.38: 检查日志'
- en: 'Task #6 – add these commits to the remote repository.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '任务 #6 – 将这些提交添加到远程仓库。'
- en: 'We''ll try to push, but the remote repository won''t have heard of our branch.
    Fortunately, Git tells us what to do:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试推送，但远程仓库尚未识别我们的分支。幸运的是，Git 会告诉我们该怎么做：
- en: '![](img/B17441_03_39.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_39.png)'
- en: 'Figure 3.39: Pushing to server'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3.39: 推送到服务器'
- en: 'At this point, you have a local and remote repository named `Contacts` and
    a branch named `Person`. On the branch named `Person` you have code for a skeleton
    class named `Person`. A quick review of GitHub shows that main does not have a
    `Person` object (or class, or folder):'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经拥有一个名为`Contacts`的本地和远程仓库，以及一个名为`Person`的分支。在名为`Person`的分支中，你有一个名为`Person`的骨架类的代码。快速查看
    GitHub 可以发现，主分支（main）并没有`Person`对象（或类，或文件夹）：
- en: '![](img/B17441_03_40.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_40.png)'
- en: 'Figure 3.40: Branches on origin'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.40：原点上的分支
- en: 'But the `Person` branch does:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 `Person` 分支确实有：
- en: '![](img/B17441_03_41.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_03_41.png)'
- en: 'Figure 3.41: Person branch on origin'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.41：原点上的 Person 分支
- en: As you can see, the `Person` branch does have the expected code.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`Person` 分支确实包含了预期的代码。
