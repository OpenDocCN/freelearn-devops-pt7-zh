["```\n$ ansible-playbook example-play.yml\n\n```", "```\n---\n- hosts: webservers\n  user: root\n  vars:\n    apache_version: 2.6\n    motd_warning: 'WARNING: Use by ACME Employees ONLY'\n    testserver: yes\n  tasks:\n    - name: setup a MOTD\n      copy:\n        dest: /etc/motd\n        content: \"{{ motd_warning }}\"\n```", "```\n- hosts: webservers\n  user: root\n```", "```\nvars:\n  apache_version: 2.6\n  motd_warning: 'WARNING: Use by ACME Employees ONLY'\n  testserver: yes\n```", "```\nvars_files:\n  conf/country-AU.yml\n  conf/datacenter-SYD.yml\n  conf/cluster-mysql.yml\n```", "```\n---\nntp: ntp1.au.example.com\nTZ: Australia/Sydney\n```", "```\nvars_prompt:\n  - name: https_passphrase\n    prompt: Key Passphrase\n    private: yes\n```", "```\ntasks:\n  - name: install apache\n    action: yum name=httpd state=installed\n\n  - name: configure apache\n    copy: src=files/httpd.conf dest=/etc/httpd/conf/httpd.conf\n\n  - name: restart apache\n    service:\n      name: httpd\n      state: restarted\n```", "```\n---\n- hosts: dhcp\n  tasks:\n  - name: update to latest DHCP\n    yum\n      name: dhcp\n      state: latest\n    notify: restart dhcp\n\n  - name: copy the DHCP config\n    copy:\n      src: dhcp/dhcpd.conf\n      dest: /etc/dhcp/dhcpd.conf\n    notify: restart dhcp\n\n  - name: start DHCP at boot\n    service:\n      name: dhcpd\n      state: started\n      enabled: yes\n\n  handlers:\n  - name: restart dhcp\n    service:\n      name: dhcpd\n      state: restarted\n```", "```\n---\n- hosts: qroud\n  tasks:\n  - name: checkout Qroud\n    git:\n      repo:git@github.com:smarthall/Qroud.git\n      dest: /opt/apps/Qroud force=no\n    notify:\n      - migrate db\n      - generate static\n      - restart httpd\n\n  handlers:\n  - name: migrate db\n    command: ./manage.py migrate –all\n    args:\n      chdir: /opt/apps/Qroud\n\n  - name: generate static\n    command: ./manage.py collectstatic -c –noinput\n    args:\n       chdir: /opt/apps/Qroud\n\n  - name: restart httpd\n    service:\n      name: httpd\n      state: restarted\n```", "```\n# {{ ansible_managed }}\noptions {\n  listen-on port 53 {\n    127.0.0.1;\n    {% for ip in ansible_all_ipv4_addresses %}\n      {{ ip }};\n    {% endfor %}\n  };\n  listen-on-v6 port 53 { ::1; };\n  directory       \"/var/named\";\n  dump-file       \"/var/named/data/cache_dump.db\";\n  statistics-file \"/var/named/data/named_stats.txt\";\n  memstatistics-file \"/var/named/data/named_mem_stats.txt\";\n};\n\nzone \".\" IN {\n  type hint;\n  file \"named.ca\";\n};\n\ninclude \"/etc/named.rfc1912.zones\";\ninclude \"/etc/named.root.key\";\n\n{# Variables for zone config #}\n{% if 'authorativenames' in group_names %}\n  {% set zone_type = 'master' %}\n  {% set zone_dir = 'data' %}\n{% else %}\n  {% set zone_type = 'slave' %}\n  {% set zone_dir = 'slaves' %}\n{% endif %}\n\nzone \"internal.example.com\" IN {\n  type {{ zone_type }};\n  file \"{{ zone_dir }}/internal.example.com\";\n  {% if 'authorativenames' not in group_names %}\n    masters { 192.168.2.2; };\n  {% endif %}\n};\n```", "```\n# {{ ansible_managed }}\n```", "```\n    {% for ip in ansible_all_ipv4_addresses %}\n      {{ ip }};\n    {% endfor %}\n```", "```\n{# Variables for zone config #}\n```", "```\n{% if 'authorativenames' in group_names %}\n  {% set zone_type = 'master' %}\n  {% set zone_dir = 'data' %}\n{% else %}\n  {% set zone_type = 'slave' %}\n  {% set zone_dir = 'slaves' %}\n{% endif %}\n```", "```\nzone \"internal.example.com\" IN {\n  type {{ zone_type }};\n  file \"{{ zone_dir }}/internal.example.com\";\n  {% if zone_type == 'slave' %}\n    masters { 192.168.2.2; };\n  {% endif %}\n};\n```", "```\n---\n- name: Setup BIND\n  host: allnames\n  tasks:\n  - name: configure BIND\n    template: src=templates/named.conf.j2 dest=/etc/named.conf owner=root group=named mode=0640\n```", "```\n---\n- name: Configure MySQL\n  hosts: mysqlservers\n  tasks:\n  - name: install MySql\n    yum:\n      name: mysql-server\n      state: installed\n\n  - name: Calculate InnoDB buffer pool size\n    set_fact:\n      innodb_buffer_pool_size_mb=\"{{ansible_memtotal_mb/2}}\"\n\n  - name: Configure MySQL\n    template:\n      src: templates/my.cnf.j2\n      dest: /etc/my.cnf\n      owner: root\n      group: root\n      mode: 0644\n    notify: restart mysql\n\n  - name: Start MySQL\n    service:\n      name: mysqld\n      state: started\n      enabled: yes\n\n  handlers:\n  - name: restart mysql\n    service:\n      name: mysqld\n      state: restarted\n```", "```\n# {{ ansible_managed }}\n[mysqld]\ndatadir=/var/lib/mysql\nsocket=/var/lib/mysql/mysql.sock\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\n# Settings user and group are ignored when systemd is used.\n# If we need to run mysqld under a different user or group,\n# customize our systemd unit file for mysqld according to the\n# instructions in http://fedoraproject.org/wiki/Systemd\n\n# Configure the buffer pool\ninnodb_buffer_pool_size = {{ innodb_buffer_pool_size_mb|default(128) }}M\n\n[mysqld_safe]\nlog-error=/var/log/mysqld.log\npid-file=/var/run/mysqld/mysqld.pid\n```", "```\n---\n- hosts: localhost\n  tasks:\n  - name: wait on user input\n    pause:\n      prompt: \"Warning! Press ENTER to continue or CTRL-C to quit.\"\n\n  - name: timed wait\n    pause:\n      seconds: 30\n```", "```\n---\n- hosts: webapps\n  tasks:\n  - name: Install Tomcat\n    yum:\n      name: tomcat7\n      state: installed\n\n  - name: Start Tomcat\n    service:\n      name: tomcat7\n      state: started\n\n  - name: Wait for Tomcat to start\n    wait_for:\n      port: 8080\n      state: started\n```", "```\n---\n- hosts: all\n  tasks:\n  - name: Make a Directory in /opt\n    file:\n      path: /opt/sshkeys\n      state: directory\n      owner: root\n      group: root\n      mode: 0700\n\n  - name: Copy SSH keys over\n    copy:\n      src: \"keys/{{ item }}.pub\"\n      dest: \"/opt/sshkeys/{{ item }}.pub\"\n      owner: root\n      group: root\n      mode: 0600\n    with_items:\n      - dan\n      - kate\n      - mal\n\n  - name: Make the root users SSH config directory\n    file:\n      path: /root/.ssh\n      state: directory\n      owner: root\n      group: root\n      mode: 0700\n\n  - name: Build the authorized_keys file\n    assemble:\n      src: /opt/sshkeys\n      dest: /root/.ssh/authorized_keys\n      owner: root\n      group: root\n      mode: 0700\n```", "```\n---\n- name: Create infrastructure\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Make sure the mailserver exists\n      gce:\n        image: centos-6\n        name: mailserver\n        tags: mail\n        zone: us-central1-a\n      register: mailserver\n      when: '\"mailserver\" not in groups.all'\n\n    - name: Add new machine to inventory\n      add_hosts:\n        name: mailserver\n        ansible_ssh_host: \"{{ mailserver.instance_data[0].public_ip }}\"\n        groups: tag_mail\n      when: not mailserver|skipped\n```", "```\n---\n- name: Create operating system group\n  hosts: all\n  tasks:\n    - group_by: key=os_{{ ansible_distribution }}\n\n- name: Run on CentOS hosts only\n  hosts: os_CentOS\n  tasks:\n  - name: Install Apache\n    yum: name=httpd state=latest\n\n- name: Run on Ubuntu hosts only\n  hosts: os_Ubuntu\n  tasks:\n  - name: Install Apache\n    apt: pkg=apache2 state=latest\n```", "```\n---\n- name: Catergorize hosts\n  hosts: all\n  tasks:\n    - name: Gather hosts by OS\n      group_by:\n        key: \"os_{{ ansible_os_family }}\"\n\n- name: Install keys on RedHat\n  hosts: os_RedHat\n  tasks:\n    - name: Install SSL certificate\n      copy:\n        src: sslcert.pem\n        dest: /etc/pki/tls/private/sslcert.pem\n\n- name: Install keys on Debian\n  hosts: os_Debian\n  tasks:\n    - name: Install SSL certificate\n      copy:\n        src: sslcert.pem\n        dest: /etc/ssl/private/sslcert.pem\n```", "```\n---\n- name: Fetch a SSH key from a machine\n  hosts: bastion01\n  tasks:\n    - name: Fetch key\n      slurp:\n        src: /root/.ssh/id_rsa.pub\n      register: sshkey\n\n- name: Copy the SSH key to all hosts\n  hosts: all\n  tasks:\n    - name: Make directory for key\n      file:\n        state: directory\n        path: /root/.ssh\n        owner: root\n        group: root\n        mode: 0700\n\n    - name: Install SSH key\n      copy:\n        contents: \"{{ hostvars.bastion01.sshkey|b64decode }}\"\n        dest: /root/.ssh/authorized_keys\n        owner: root\n        group: root\n        mode: 0600\n```", "```\n# Correct\n'C:\\Users\\Daniel\\Documents\\secrets.txt'\n'C:\\Program Files\\Fancy Software Inc\\Directory'\n'D:\\\\' # \\\\ becomes \\\n# Incorrect\n\"C:\\Users\\Daniel\\newcar.jpg\" # \\n becomes a new line\n'C:\\Users\\Daniel\\Documents\\' # \\' becomes '\n```", "```\nexport AWS_ACCESS_KEY=\"AKIAIOSFODNN7EXAMPLE\"\nexport AWS_SECRET_KEY=\"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\nexport AWS_REGION=\"us-east-1\"\n```", "```\n---\n- name: Setup an EC2 instance\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Create an EC2 machine\n      ec2:\n        key_name: daniel-keypair\n        instance_type: t2.micro\n        image: ami-b66ed3de\n        wait: yes\n        group: webserver\n        vpc_subnet_id: subnet-59483\n        assign_public_ip: yes\n      register: newmachines\n\n    - name: Wait for SSH to start\n      wait_for:\n        host: \"{{ newmachines.instances[0].public_ip }}\"\n        port: 22\n        timeout: 300\n      delegate_to: localhost\n\n    - name: Add the machine to the inventory\n      add_host:\n        hostname: \"{{ newmachines.instances[0].public_ip }}\"\n        groupname: new\n\n- name: Configure the new machines\n  hosts: new\n  sudo: yes\n  tasks:\n    - name: Install a MOTD\n      template:\n        src: motd.j2\n        dest: /etc/motd\n```"]