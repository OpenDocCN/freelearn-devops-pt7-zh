- en: Chapter 4. Bringing In Your Code – Custom Commands and Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：引入您的代码 – 自定义命令和脚本
- en: Ansible comes with a wide variety of built-in modules that allow us to manage
    various system components, for example, users, packages, network, files, and services.
    Ansible's battery-included approach also provides the ability to integrate the
    components with cloud platforms, databases, and applications such as **Jira**,
    **Apache**, **IRC**, and **Nagios**, and so on. However, every now and then, we
    would find ourselves in a position where we may not find a module that exactly
    does the job for us. For example, installing a package from source involves downloading
    it, extracting a source tarball, followed by the make command, and finally, "make
    install". There is no single module that does this. There will also be times when
    we would like to bring in our existing scripts that we have spent nights creating
    and just have them invoked or scheduled with Ansible, for example, nightly backup
    scripts. Ansible's command modules would come to our rescue in such situations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供了多种内置模块，允许我们管理各种系统组件，例如用户、软件包、网络、文件和服务。Ansible 的内置式方法还提供了将组件与云平台、数据库和应用程序（如**Jira**、**Apache**、**IRC**、**Nagios**等）集成的能力。然而，偶尔我们会遇到找不到完全符合需求的模块的情况。例如，从源代码安装软件包涉及下载它、解压源代码
    tarball、运行 make 命令，最后执行“make install”。没有单一模块可以完成这些操作。有时，我们也希望将已有的脚本（比如我们花费多夜编写的脚本）引入，只需使用
    Ansible 调用或安排执行这些脚本，例如，每夜备份脚本。在这种情况下，Ansible 的命令模块将成为我们的救星。
- en: 'In this chapter, we are going to introduce you to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: How to run custom commands and scripts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行自定义命令和脚本
- en: 'Ansible command modules: raw, command, shell, and script'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 命令模块：raw、command、shell 和 script
- en: How to control the idempotence of a command module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何控制命令模块的幂等性
- en: Registered variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册变量
- en: How to create a WordPress application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建 WordPress 应用
- en: The command modules
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令模块
- en: 'Ansible has four modules that fall in to this category and provide us the options
    to choose from while running system commands or scripts. The four modules are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 有四个模块属于这一类别，并在运行系统命令或脚本时提供了选择选项。这四个模块是：
- en: Raw
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raw
- en: Command
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令
- en: Shell
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell
- en: Script
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Script
- en: We will start learning about these one at a time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐一开始学习这些内容。
- en: Using the raw module
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 raw 模块
- en: 'Most Ansible modules require Python to be present on the target node. However,
    as the name suggests, a raw module provides a way to communicate with hosts over
    SSH to execute raw commands without getting Python involved. The use of this module
    will bypass the module subsystem of Ansible completely. This can come in really
    handy in certain special situations or cases. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Ansible 模块要求目标节点上安装 Python。然而，顾名思义，raw 模块提供了一种通过 SSH 与主机通信的方式，执行原始命令而不涉及
    Python。使用此模块将完全绕过 Ansible 的模块子系统。在某些特殊情况下，这种方法非常有用。例如：
- en: For legacy systems running a Python version older than 2.6, Ansible requires
    the `Python-simplejson` package to be installed before you run playbooks. A raw
    module can be used to connect to the target host and install the prerequisite
    package before executing any Ansible code.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于运行 Python 版本低于 2.6 的遗留系统，Ansible 要求在运行 playbooks 之前安装 `Python-simplejson`
    包。可以使用 raw 模块连接到目标主机并在执行任何 Ansible 代码之前安装所需的前置包。
- en: In the case of network devices, such as routers, switches, and other embedded
    systems, Python may not be present at all. These devices can still be managed
    with Ansible simply using a raw module.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于网络设备，如路由器、交换机以及其他嵌入式系统，可能根本没有 Python。这些设备仍然可以仅通过使用 raw 模块来使用 Ansible 管理。
- en: Apart from these exceptions, for all other cases, it is recommended that you
    use either command or shell modules, as they offer ways to control when, from
    where, and how the commands are run.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些例外情况外，对于所有其他情况，建议使用命令或 shell 模块，因为它们提供了控制命令何时、从哪里以及如何执行的方式。
- en: 'Let''s take a look at the following given examples:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下给定的示例：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command connects to all the hosts in the inventory provided with
    `customhosts` using SSH, runs a raw command uptime, and returns the results. This
    would work even if the target host does not have Python installed. This is equivalent
    to writing a `for` loop to an ad hoc shell command on a group of hosts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令通过 SSH 连接到提供的 `customhosts` 清单中的所有主机，运行 raw 命令 uptime，并返回结果。即使目标主机没有安装 Python，这也能正常工作。这相当于为一组主机编写一个
    `for` 循环的临时 shell 命令。
- en: 'The same command can be converted to a task as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的命令可以转换为如下任务：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using the command module
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令模块
- en: 'This is the most recommended module for executing commands on target nodes.
    This module takes the free-form command sequence and allows you to run any command
    that could be launched from a command-line interface. In addition to the command,
    we could optionally specify:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是执行命令在目标节点上最推荐的模块。该模块接受自由格式的命令序列，并允许你运行任何可以从命令行界面启动的命令。除了命令之外，我们还可以选择性地指定：
- en: Which directory to run the command from
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从哪个目录运行命令
- en: Which shell to use for execution
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用哪个 shell 来执行命令
- en: When not to run the commands
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时不运行命令
- en: 'Let''s take a look at the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下以下示例：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, a command module is called to run `ls -ltr` on the target hosts with an
    argument to change the directory to `/etc` before running the command.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里调用了命令模块，在目标主机上运行 `ls -ltr`，并通过参数将目录更改为 `/etc`，然后再运行命令。
- en: 'In addition to writing it as a task, the command module can directly be invoked
    as:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将其编写为任务外，命令模块还可以直接调用，如下所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using the shell module
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 shell 模块
- en: 'This module is very similar to the command module we just learnt about. It
    takes a free-form command and optional parameters and executes them on the target
    node. However, there are subtle differences between shell modules and command
    modules, which are listed, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块与我们刚学到的命令模块非常相似。它接受自由格式的命令和可选参数，并在目标节点上执行它们。然而，shell 模块和命令模块之间有细微的区别，具体列举如下：
- en: Shell runs the command through the '/`bin/sh`' shell on the target host, which
    also means that any command that gets executed with this module has access to
    all the shell variables on that system
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell 通过目标主机上的 '/`bin/sh`' shell 运行命令，这也意味着使用此模块执行的任何命令都可以访问该系统上的所有 shell 变量。
- en: Unlike the command module, shell also allows the usage of operators, such as
    redirects ( `<, <<, >> , >` ), pipes ( | ) , &&, and ||
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与命令模块不同，shell 还允许使用运算符，例如重定向（ `<, <<, >> , >` ）、管道（ | ）、&& 和 ||
- en: Shell is less secure than a command module, as it can be affected by a shell
    environment on the remote host
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell 比命令模块不那么安全，因为它可能会受到远程主机上 shell 环境的影响
- en: 'Let''s take a look at the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下以下示例：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Similar to using the command module, the preceding task runs the command sequence
    with the shell module. However, in this case, it accepts operators such as `|`
    and `>>`, does filtering with `grep`, and redirects the results to a file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于使用命令模块，前面的任务通过 shell 模块运行命令序列。然而，在这种情况下，它接受如 `|` 和 `>>` 这样的运算符，使用 `grep`
    进行过滤，并将结果重定向到文件。
- en: 'Instead of specifying this task as part of the playbook, it can be run as an
    ad hoc command with Ansible as:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要将此任务指定为 playbook 的一部分，可以将其作为 Ad hoc 命令通过 Ansible 运行，如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, you need to explicitly specify the `--sudo` option, as well as module
    options as arguments, such as `chdir=/etc` and the actual command sequence.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你需要显式指定 `--sudo` 选项，以及作为参数的模块选项，例如 `chdir=/etc` 和实际的命令序列。
- en: Using the script module
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本模块
- en: 'The command modules that we learnt about so far only allow the execution of
    some system commands on the remote host. There will be situations where we would
    have an existing script that needs to be copied to the remote hosts and then executed
    there. Using the shell or command modules, this could be achieved in the following
    two steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们学习的命令模块只允许在远程主机上执行一些系统命令。会有这种情况：我们已经有了一个现有的脚本，需要将其复制到远程主机上并在那里执行。使用 shell
    或命令模块，这可以通过以下两个步骤来实现：
- en: Use a copy module to transfer the script file to a remote host.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用复制模块将脚本文件传输到远程主机。
- en: Then, use a command or shell module to execute the script transferred previously.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用命令或 shell 模块执行之前传输的脚本。
- en: Ansible has a tailor-made module that solves this in a more efficient way. Using
    a script module instead of command or shell, we can copy and execute a script
    in one step.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供了一个量身定制的模块，以更高效的方式解决这个问题。使用脚本模块代替命令或 shell，我们可以一步完成复制和执行脚本。
- en: 'For example, consider the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下代码片段：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As shown in the preceding code snippet, a script can be sourced either from:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，脚本可以从以下位置之一获取：
- en: An inside file directory of the role when invoking this module from a task inside
    a role as shown in the first example
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从角色内部调用此模块时的角色内部文件目录，如第一个示例所示
- en: An absolute system path on the control host (this is the host that runs Ansible
    commands)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制主机上的绝对系统路径（这是运行 Ansible 命令的主机）
- en: 'Just like all the other modules, a script can also be invoked as an ad hoc
    command, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 就像所有其他模块一样，脚本也可以作为临时命令调用，如下所示：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the `script` module is invoked only on hosts that are part of the `www`
    group in the inventory. This command will copy a script at `/usr/local/backup.sh`
    from the control host and run it on the target nodes; in this case, all hosts
    in the `www` group.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`script` 模块只在 `www` 组的主机上调用。此命令将从控制主机复制脚本 `/usr/local/backup.sh` 并在目标节点上运行；在此情况下，所有
    `www` 组中的主机都会执行。
- en: Deploying a WordPress application – a hands-on approach
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 WordPress 应用程序——一种动手实践的方法
- en: In our first iteration, we already configured an Nginx web server and a MySQL
    database to host a simple web page. We will now configure a WordPress application
    on the web server to host news and blogs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次迭代中，我们已经配置了 Nginx Web 服务器和 MySQL 数据库来托管一个简单的网页。现在，我们将配置 WordPress 应用程序，在
    Web 服务器上托管新闻和博客。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Scenario:**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：**'
- en: Following our success of launching a simple web page in iteration 1, the project
    management department has asked us to set up a WordPress application to serve
    news articles and blogs in iteration 2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 次迭代成功启动简单网页后，项目管理部门要求我们在第 2 次迭代中设置一个 WordPress 应用程序，用于发布新闻文章和博客。
- en: WordPress is a popular open source web publishing framework based on the LAMP
    platform, which is Linux, Apache, MySQL, and PHP. WordPress is a simple, yet flexible,
    open source application that powers a lot of blogs and dynamic websites. Running
    WordPress requires a web server, PHP, and MySQL database. We already have an Nginx
    web server and MySQL database configured. We will begin by installing and configuring
    WordPress by creating a role for it and then later on, we will configure PHP.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 是一个基于 LAMP 平台的流行开源网站发布框架，LAMP 平台包含 Linux、Apache、MySQL 和 PHP。WordPress
    是一个简单却灵活的开源应用程序，广泛用于许多博客和动态网站的搭建。运行 WordPress 需要一个 Web 服务器、PHP 和 MySQL 数据库。我们已经配置好了
    Nginx Web 服务器和 MySQL 数据库。接下来，我们将通过为其创建角色来安装和配置 WordPress，稍后我们会配置 PHP。
- en: 'To create the role, we will use the Ansible-Galaxy tool that we learnt about
    in the previous chapter:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建角色，我们将使用 Ansible-Galaxy 工具，这个工具我们在前一章中已经学习过。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will create the scaffolding required for the WordPress role. By now, we
    know that the core logic goes in to tasks and is supported by files, templates,
    handlers, and so on. We will begin by writing tasks to install and configure WordPress.
    First, we will create the main tasks file as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建 WordPress 角色所需的框架。到目前为止，我们知道核心逻辑放在任务中，并由文件、模板、处理程序等支持。我们将从编写任务开始，来安装和配置
    WordPress。首先，我们将创建主任务文件，如下所示：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are following best practices and further modularizing tasks here. Instead
    of putting everything in the `main.yml` file, we will create a `install.yml` file
    and a `configure.yml` file and include them from the main file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循最佳实践，并在此进一步模块化任务。我们不会将所有内容都放入 `main.yml` 文件中，而是创建一个 `install.yml` 文件和一个
    `configure.yml` 文件，并从主文件中引入它们。
- en: Installing WordPress
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 WordPress
- en: 'The installation process of WordPress will be handled from the `install.yml`
    file in the tasks directory. The process of installing WordPress typically involves:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 的安装过程将在任务目录中的 `install.yml` 文件中处理。安装 WordPress 通常包括以下过程：
- en: Downloading the WordPress installation package from [https://wordpress.org](https://wordpress.org).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://wordpress.org](https://wordpress.org) 下载 WordPress 安装包。
- en: Extracting the installation package.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压安装包。
- en: Moving the extracted directory inside the document's `root` directory of the
    web server.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将解压后的目录移动到 Web 服务器文档的 `root` 目录中。
- en: 'We will start writing code for each of the preceding steps mentioned, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始编写每个前述步骤的代码，如下所示：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We saw some new features in the preceding steps. Let''s analyze this code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的步骤中看到了一些新特性。让我们分析一下这段代码：
- en: We are using a new style to write tasks. In addition to using key-value pairs
    for tasks, we could separate parameters and write them one parameter per line
    in the key-value format.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用一种新的方式编写任务。除了使用键值对表示任务外，我们还可以将参数分开，并以键值格式逐行编写每个参数。
- en: To download the WordPress installer, we used the command module with the `wget`
    command. The command takes the executable sequence with additional arguments,
    which are `chdir`, and `creates`.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了下载 WordPress 安装程序，我们使用了命令模块并配合 `wget` 命令。该命令使用可执行序列并附加参数，参数包括 `chdir` 和 `creates`。
- en: '`Creates` is a special option here. With this, we specified the path to the
    file where WordPress installer is being downloaded. We will look at how this is
    useful.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Creates`是一个特殊选项。通过此选项，我们指定了WordPress安装程序下载的文件路径。我们将查看它如何起作用。'
- en: We also registered the result of this module in a variable with the name `wp_download`,
    which we will use in subsequent tasks.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将此模块的结果注册到名为`wp_download`的变量中，稍后将在其他任务中使用该变量。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is recommended that you use the `get_url` module, which is built in to Ansible
    to download files using the HTTP/FTP protocol. Since we want to demonstrate the
    usage of command modules, we chose to use that instead of using the `get_url`
    module.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐使用内置的`get_url`模块，通过HTTP/FTP协议下载文件。由于我们想演示命令模块的使用，因此选择了使用命令模块，而不是`get_url`模块。
- en: Let's now look at the new concepts that we introduced previously.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回顾一下之前介绍的新概念。
- en: Controlling the idempotence of command modules
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制命令模块的幂等性
- en: Ansible comes with a wide range of modules built in it. As we learnt in [Chapter
    1](ch01.html "Chapter 1. Blueprinting Your Infrastructure"), *Blueprinting Your
    Infrastructure*, most of these modules are idempotent, and the logic to determine
    the configuration drift is built in to the module code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible自带了大量的内置模块。正如我们在[第1章](ch01.html "第1章：构建基础架构蓝图")《*构建基础架构蓝图*》中所学，大多数这些模块是幂等的，并且确定配置漂移的逻辑已内置于模块代码中。
- en: However, command modules allow us to run shell commands that are not idempotent
    by nature. Since command modules have no way to determine the outcome of the task,
    it is expected that these modules are not idempotent by default. Ansible provides
    us with a few options to make these modules run conditionally and make them idempotent.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，命令模块允许我们执行本质上非幂等的Shell命令。由于命令模块无法确定任务的结果，因此这些模块默认情况下是非幂等的。Ansible为我们提供了一些选项，使得这些模块可以根据条件运行，从而实现幂等性。
- en: 'The following are the two parameters that determine whether a command is run
    or not:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是决定是否执行命令的两个参数：
- en: '`Creates`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Creates`'
- en: '`Removes`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Removes`'
- en: Both accept filename as the value of the parameter. In the case of `creates`,
    the command will not run if the file exists. The `removes` command does the opposite.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都接受文件名作为参数的值。对于`creates`，如果文件存在，命令将不会执行。`removes`命令则相反。
- en: The "creates" and "removes" options are applicable for all command modules except
    for raw.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"creates" 和 "removes" 选项适用于所有命令模块，除了raw模块。'
- en: 'Here are some guidelines on how to use `creates` and `removes` flags:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用`creates`和`removes`标志的一些指南：
- en: If the command sequence or script that you are executing creates a file, provide
    that filename as a parameter value
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您执行的命令序列或脚本创建了文件，请提供该文件名作为参数值
- en: If the command sequence does not create a flag, make sure you incorporate the
    logic of creating a flag file in your command sequence or script
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果命令序列没有创建标志文件，确保在命令序列或脚本中包含创建标志文件的逻辑
- en: The registered variables
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注册的变量
- en: 'We looked at variables earlier. However, we have never registered one before.
    In the tasks that we wrote to download WordPress, we use the following option:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看过变量，但从未注册过变量。在我们编写的下载WordPress任务中，使用了以下选项：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This option stores the result of the task in a variable by the name `wp_download`.
    This registered result can then be accessed later. The following are some of the
    important components of a registered variable:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将任务的结果存储在名为`wp_download`的变量中。此注册结果稍后可以访问。以下是注册变量的一些重要组件：
- en: '`changed`: This shows the status of whether the state was changed'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`changed`：显示状态是否已更改'
- en: '`cmd`: Through this, the command sequence is launched'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cmd`：通过此项启动命令序列'
- en: '`rc`: This refers to the return code'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rc`：这是返回码'
- en: '`stdout`: This is the output of the command'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdout`：这是命令的输出'
- en: '`stdout_lines`: This is the output line by line'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stdout_lines`：这是逐行输出的内容'
- en: '`stderr`: These state the errors, if any'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stderr`：如果有错误，这里会显示错误信息'
- en: These can then be accessed as `wp_download.rc`, `wp_download.stdout` and could
    be used inside a template, in an action line, or more commonly, with the `when`
    statements. In this case, we are going to use the return code of `wp_download`
    to decide whether to extract the package or not. This makes sense because there
    is no point in extracting a file that does not even exist.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这些可以作为`wp_download.rc`，`wp_download.stdout`访问，并且可以在模板、动作行或更常见的`when`语句中使用。在这种情况下，我们将使用`wp_download`的返回码来决定是否提取包。这是有道理的，因为提取一个根本不存在的文件没有意义。
- en: Extracting WordPress with a shell module
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用shell模块提取WordPress
- en: 'Let''s now write a task to extract the WordPress installer and move it to the
    desired location. Before this, we also need to make sure that the document `root`
    directory has been created before running this code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来编写一个任务来提取WordPress安装程序并将其移动到指定的位置。在此之前，我们还需要确保在运行此代码之前已经创建了文档的`root`目录：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s now analyze what we just wrote:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们分析一下我们刚刚写的内容：
- en: We use the `file` module to create the document root directory for a web server.
    Parameters such as path, user, and group all come from variables.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`file`模块为Web服务器创建文档根目录。路径、用户和组等参数都来自变量。
- en: To extract WordPress, we use the `shell` module instead of a command. This is
    because we are combining the two commands with the `&&` operator here, which the
    command module does not support.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了提取WordPress，我们使用`shell`模块而不是`command`模块。这是因为我们在这里将两个命令通过`&&`操作符结合在一起，而`command`模块不支持这种方式。
- en: We use the `when` statement to decide whether to run extract commands or not.
    To check the condition, we use the return code of the download command that we
    stored in the registered variable `wp_download` earlier.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`when`语句来决定是否运行提取命令。为了检查条件，我们使用之前存储在注册变量`wp_download`中的下载命令的返回码。
- en: Configuring WordPress
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置WordPress
- en: 'After downloading and extracting WordPress, the next step is to configure it.
    The main configuration for WordPress is inside `wp-config.php` under the `wordpress`
    directory that we extracted. As a good practice, we will use a template to manage
    this configuration file. The following is the code to configure WordPress:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并解压WordPress后，下一步是配置它。WordPress的主要配置文件位于我们解压的`wordpress`目录下的`wp-config.php`文件中。作为一种良好的实践，我们将使用模板来管理这个配置文件。以下是配置WordPress的代码：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s analyze this code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这段代码：
- en: The first task sets permissions for all WordPress files recursively.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个任务递归地为所有WordPress文件设置权限。
- en: The second task runs a command locally and registers the results in the `wp_salt`
    variable. This is to provide WordPress with secret keys for additional security.
    This variable will be used inside a template this time.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个任务在本地运行一个命令，并将结果注册到`wp_salt`变量中。这是为了为WordPress提供用于增强安全性的密钥。这个变量这次将在模板中使用。
- en: The final task is to generate a Jinja2 template and copy it over to the target
    host as the `wp-config.php` file.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个任务是生成一个Jinja2模板并将其复制到目标主机作为`wp-config.php`文件。
- en: 'Let''s also look at the Jinja2 template:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也来看看Jinja2模板：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we are filling in the values of the configuration parameters from variables.
    What is also interesting is that we are embedding the output of the salt download
    using the `stdout` variables:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从变量中填充配置参数的值。值得注意的是，我们还嵌入了使用`stdout`变量下载的salt输出：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The resulting file that is created from this template after filling in the
    variables and the `stdut` from a registered variable will be as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个模板生成的文件，在填入变量和从注册变量`stdut`中获取的值后，将会如下所示：
- en: '![Configuring WordPress](img/B03800_04_01.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![配置WordPress](img/B03800_04_01.jpg)'
- en: 'We will now add this new role to the `www.yml` playbook, so that it gets executed
    on all our web servers:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把这个新角色添加到`www.yml` playbook中，以便它能在所有的Web服务器上执行：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we will run the Ansible playbook only for web servers as:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将仅对Web服务器运行Ansible playbook，如下所示：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will download, extract, and configure WordPress on all web server hosts.
    We still have not installed PHP and configured Nginx to serve WordPress pages,
    so our changes won't be reflected as yet.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在所有Web服务器主机上下载、解压并配置WordPress。我们仍然没有安装PHP，也没有配置Nginx来提供WordPress页面，因此我们的更改尚未生效。
- en: Review questions
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你已经足够理解这一章节了吗？尝试回答以下问题来测试你的理解：
- en: Why do we need command modules when Ansible has a battery-included approach?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Ansible 提供了包含一切的方法时，为什么我们还需要命令模块？
- en: When and why do we use the raw module?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时以及为什么要使用 raw 模块？
- en: How do we use the `creates` parameter with a shell when the command being executed
    does not create a file?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当执行的命令不创建文件时，如何在 shell 中使用 `creates` 参数？
- en: How are `command` and `shell` modules different? When would you use a shell?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`command` 模块和 `shell` 模块有什么不同？何时会使用 shell？'
- en: If `var3` is a registered variable, how would you print its output in a template?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `var3` 是一个注册变量，如何在模板中打印其输出？
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, you learnt about how to run custom commands and scripts using
    Ansible's command modules, that is, raw, command, shell, and script. You also
    learnt how to control the idempotence of command modules using the `creates` and
    `removes` flags. We started using registered variables to store the result of
    a task that can then be used later to conditionally run other tasks or embed output
    in a template. Finally, we created a role to install and configure a WordPress
    application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用 Ansible 的命令模块运行自定义命令和脚本，即 raw、command、shell 和 script。您还学习了如何使用
    `creates` 和 `removes` 标志来控制命令模块的幂等性。我们开始使用注册变量来存储任务的结果，稍后可以条件性地运行其他任务或在模板中嵌入输出。最后，我们创建了一个角色来安装和配置
    WordPress 应用程序。
- en: In the next chapter, we are going to start learning about how to control execution
    flow using conditionals, how to apply roles selectively, and also how to use conditional
    control structures in templates.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始学习如何使用条件语句控制执行流程，如何有选择地应用角色，以及如何在模板中使用条件控制结构。
