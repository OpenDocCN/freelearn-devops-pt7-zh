["```\n$ git switch master\n$ git merge bugfix123\n```", "```\n$ git switch maint\nSwitched to branch 'maint'\n$ git merge i18n\nUpdating f41c546..3a0b90c\nFast-forward\n  src/random.c | 2 ++\n  1 file changed, 2 insertions(+)\n```", "```\n$ git merge i18n\nAlready up to date.\n```", "```\n$ git checkout master\nSwitched to branch 'master'\n$ git merge i18n\nMerge made by the 'ort' strategy.\n src/random.c |\n2 ++\n 1 file changed, 2 insertions(+)\n```", "```\n$ git switch i18n\nSwitched to branch 'i18n'\n$ git rebase master\nSuccessfully rebased and updated refs/heads/master.\n```", "```\n$ git merge i18n\nAuto-merging src/rand.c\nCONFLICT (content): Merge conflict in src/rand.c\nAutomatic merge failed; fix conflicts and then commit the result.\n```", "```\n$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n        both modified:\nsrc/rand.c\n```", "```\n<<<<<<< HEAD:src/rand.c\nfprintf(stderr, \"Usage: %s <number> [<count>]\\n\", argv[0]);\n=======\nfprintf(stderr, _(\"Usage: %s <number> [<count>\\n\"), argv[0]);\n>>>>>>> i18n:src/rand.c\n```", "```\nfprintf(stderr, _(\"Usage: %s <number> [<count>]\\n\"), argv[0]);\n```", "```\n<<<<<<< HEAD:src/rand.c\nfprintf(stderr, \"Usage: %s <number> [<count>]\\n\", argv[0]);\n|||||||\nfprintf(stderr, \"Usage: %s <number> [<count>\\n\", argv[0]);\n=======\nfprintf(stderr, _(\"Usage: %s <number> [<count>\\n\"), argv[0]);\n>>>>>>> i18n:src/rand.c\n```", "```\n$ git checkout --conflict=diff3 src/rand.c\n```", "```\n$ git ls-files --unmerged\n100755 ac51efdc3df4f4fd318d1a02ad05331d8e2c9111 1\nsrc/rand.c\n100755 36c06c8752c78d2aaf89571132f3bf7841a7b5c3 2\nsrc/rand.c\n100755 e85207e04dfdd50b0a1e9febbc67fd837c44a1cd 3\nsrc/rand.c\n```", "```\n$ git show :1:src/rand.c\n```", "```\n$ git diff\ndiff --cc src/rand.c\nindex 293c8fc,4b87d29..0000000\n--- a/src/rand.c\n+++ b/src/rand.c\n@@@ -14,16 -14,13 +14,26 @@@ int main(int argc, char *argv[]\nreturn EXIT_FAILURE;\n}\n++<<<<<<< HEAD:src/rand.c\n +fprintf(stderr, \"Usage: %s <number> [<count>]\\n\", argv[0]);\n++=======\n+ fprintf(stderr, _(\"Usage: %s <number> [<count>\\n\"), argv[0]);\n++>>>>>>> i18n:src/rand.c\n```", "```\n$ git log --oneline --left-right HEAD...MERGE_HEAD\n```", "```\n$ git log --oneline --left-right --merge\n```", "```\n$ git show :1:src/rand.c >src/rand.common.c\n$ git show :2:src/rand.c >src/rand.ours.c\n$ git show :3:src/rand.c >src/rand.theirs.c\n```", "```\n$ git merge-file -p \\\n  rand.ours.c rand.common.c rand.theirs.c >rand.c\n```"]