- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Exploring Collaboration in Automation Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索自动化开发中的协作
- en: When you work as a team, collaboration is the key to your team’s harmony. Instead
    of keeping your automation content and knowledge to yourself, you can share it
    with your team, or even other departments. By doing that, the content will be
    useful to many others and also, they can contribute with their own ideas and tips.
    Compared to custom scripts, Ansible content is human-readable and easy for others
    to understand. Hence, they can modify it and later contribute to the content by
    fixing bugs or adding features. It is possible to use any standard methods to
    keep and distribute your Ansible automation content, such as a Git server, Subversion,
    or any other **Version Control System** (**VCS**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当你作为一个团队工作时，协作是团队和谐的关键。与其将你的自动化内容和知识藏在自己手里，不如与团队，甚至其他部门共享。这样，内容将对更多人有用，而且他们还可以贡献自己的想法和技巧。与自定义脚本相比，Ansible
    内容更易读，其他人更容易理解。因此，他们可以修改内容并通过修复 bug 或增加功能来贡献。你可以使用任何标准的方法来保存和分发你的 Ansible 自动化内容，比如
    Git 服务器、Subversion 或任何其他**版本控制系统**（**VCS**）。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: The importance of version control in IT automation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制在 IT 自动化中的重要性
- en: Where should I keep automation artifacts?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该把自动化工件保存在何处？
- en: Managing automation content in a Git server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Git 服务器上管理自动化内容
- en: Collaboration is the key to automation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作是自动化的关键
- en: You will start by looking at GitHub account configuration and access management
    to share content with your team. You will also learn how to manage contributions
    from other users without losing the original content.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从 GitHub 帐户配置和访问管理开始，学习如何与团队共享内容。你还将了解如何管理来自其他用户的贡献，而不丢失原始内容。
- en: This chapter focuses on Git and how to use Git for Ansible content. If you are
    familiar with Git and GitHub, then you may skip the sections about those topics.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点讲解 Git 以及如何使用 Git 管理 Ansible 内容。如果你已经熟悉 Git 和 GitHub，可以跳过关于这些话题的部分。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the technical requirements to proceed with this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是继续本章所需的技术要求：
- en: One Linux machine for the Ansible control node.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台用于 Ansible 控制节点的 Linux 机器。
- en: One or more Linux machines with Red Hat repositories configured (if you are
    using other Linux operating systems instead of RHEL machines, then make sure you
    have appropriate repositories configured to get packages and updates).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台或多台配置了 Red Hat 仓库的 Linux 机器（如果你使用的是其他 Linux 操作系统而非 RHEL 机器，确保你已配置适当的仓库，以便获取软件包和更新）。
- en: An email ID to create a new GitHub account (if you don’t already have a GitHub
    account).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的 GitHub 帐户所需的电子邮件地址（如果你还没有 GitHub 帐户的话）。
- en: Basic knowledge about source control server and version control systems.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关源代码控制服务器和版本控制系统的基础知识。
- en: All the Ansible code, Ansible playbooks, commands, and snippets for this chapter
    can be found in the GitHub repository at [https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-04](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-04).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所有的 Ansible 代码、Ansible 剧本、命令和代码片段都可以在 GitHub 仓库中找到，链接为[https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-04](https://github.com/PacktPublishing/Ansible-for-Real-life-Automation/tree/main/Chapter-04)。
- en: The importance of version control in IT automation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制在 IT 自动化中的重要性
- en: 'Like any other software, configurations, or scripts, it is not a best practice
    to keep your Ansible playbooks and configurations on the local machine, which
    is the Ansible control node. There are many reasons for not keeping the automation
    content on the local Ansible control node. A few of them are listed here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他软件、配置或脚本一样，最好不要把你的 Ansible 剧本和配置保存在本地机器上，也就是 Ansible 控制节点。将自动化内容保存在本地
    Ansible 控制节点上有许多不推荐的原因，下面列出了一些：
- en: If something happens to the Ansible control node, you will lose all your automation
    content, which is not desirable.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 Ansible 控制节点出现问题，你将丧失所有的自动化内容，这是不可取的。
- en: If someone accidentally deletes any files or changes any configurations, you
    will not have the opportunity to restore the original content.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有人不小心删除了文件或更改了配置，你将没有机会恢复原始内容。
- en: If you want to make any changes to configurations or playbooks, then you need
    to make a backup of files and configurations. This is general practice in case
    something goes wrong and you want to restore an old version of your files.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想更改配置或剧本，那么你需要备份文件和配置。这是常见的做法，以防万一发生问题，你可以恢复到文件的旧版本。
- en: You need to consider the Ansible automation content as software code, which
    should keep track of every change and have the option to use old versions at any
    point in time. Keeping multiple versions of the content will give you the freedom
    and confidence to make continuous changes to your automation playbooks and configurations.
    This will also implement the *single-source-of-truth* practice where your Ansible
    playbooks and variables reside in a central place and track all the changes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 Ansible 自动化内容视为软件代码，它应该能够跟踪每一次更改，并且随时可以选择使用旧版本。保持多个版本的内容将使你能够自由地对自动化剧本和配置进行持续的修改，并且给予你信心。这也会实施*单一真实来源*的实践，即你的
    Ansible 剧本和变量都保存在一个中心位置，并跟踪所有更改。
- en: VCSs, such as Git and Subversion, will help you to keep a track of the changes
    for your Ansible automation content and configurations. Depending on the technology,
    all these tools will create new versions of your content whenever there are changes
    made to it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统（VCS），如 Git 和 Subversion，将帮助你跟踪 Ansible 自动化内容和配置的更改。根据技术的不同，这些工具将在内容发生更改时创建新的版本。
- en: You will keep your content in Git servers as repositories, which are collections
    of files and directories. It is possible to create and maintain multiple Git repositories
    based on the content, such as one Git repository for keeping package installation
    playbooks and tasks, another Git repository for Linux remediation automation,
    and so on. You will practice creating and managing Git repositories in the following
    sections of this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把内容保存在 Git 服务器中作为仓库，仓库是文件和目录的集合。可以根据内容创建和维护多个 Git 仓库，例如，一个 Git 仓库用于存储软件包安装剧本和任务，另一个
    Git 仓库用于 Linux 修复自动化，等等。你将在本章接下来的部分中实践如何创建和管理 Git 仓库。
- en: Git Documentation
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Git 文档
- en: Check [https://git-scm.com/doc](https://git-scm.com/doc) for the reference manual,
    books, and videos to learn Git. Learn the important terminologies in Git, such
    as branch, commit, push, pull, clone, and staging. Since this book is focused
    on Ansible, we will not go into detail about these topics.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问 [https://git-scm.com/doc](https://git-scm.com/doc) 查阅参考手册、书籍和视频，学习 Git。了解
    Git 中的重要术语，如分支、提交、推送、拉取、克隆和暂存。由于本书专注于 Ansible，我们不会详细讲解这些主题。
- en: Please note that **Software Configuration Management** (**SCM**) is not the
    same as VCS but VCS is a part or subset of SCM.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**软件配置管理**（**SCM**）与 VCS 不同，但 VCS 是 SCM 的一部分或子集。
- en: Selecting a Git server
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择 Git 服务器
- en: Choose any type of VCS, but in this chapter, we will focus on how to use Git
    servers for storing your Ansible automation content. Organizations use enterprise
    Git solutions such as **GitHub Enterprise**, GitLab **Enterprise Edition** (**EE**),
    and **Atlassian Bitbucket**. If you do not have a Git server in your environment,
    then it is possible to easily set up one using any of the free and open source
    solutions available, such as GitLab **Community Edition** (**CE**), Gogs, and
    Gitea. Most of them are included a web **Graphical User Interface** (**GUI**)
    and you can use them for any general Git use cases, including Ansible automation
    content.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 选择任何类型的版本控制系统（VCS），但在本章中，我们将重点介绍如何使用 Git 服务器来存储你的 Ansible 自动化内容。组织使用企业级 Git
    解决方案，如**GitHub 企业版**、GitLab **企业版**（**EE**）和**Atlassian Bitbucket**。如果你在环境中没有
    Git 服务器，那么可以轻松地通过任何免费且开源的解决方案来搭建一个，例如 GitLab **社区版**（**CE**）、Gogs 和 Gitea。大多数这些解决方案都包含了图形用户界面（**GUI**），你可以使用它们来处理任何一般的
    Git 用例，包括 Ansible 自动化内容。
- en: GitHub
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub
- en: GitHub is a hosted service provider for version control repositories and other
    **Continuous Integration/Continuous Delivery** (**CI/CD**) operations. It is possible
    to create a personal GitHub account and create unlimited public or private repositories
    to store your software or configurations. One of the main limitations of GitHub
    is that you cannot host a private GitHub server for your environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是一个托管服务提供商，用于版本控制仓库和其他**持续集成/持续交付**（**CI/CD**）操作。你可以创建一个个人 GitHub 账户，并创建无限制的公共或私人仓库来存储你的软件或配置。GitHub
    的主要限制之一是，你不能为你的环境托管一个私人 GitHub 服务器。
- en: GitLab
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitLab
- en: GitLab ([gitlab.com](http://gitlab.com)) is another hosted VCS provider similar
    to GitHub but with different features and services. GitLab offers public-hosted
    servers ([gitlab.com](http://gitlab.com)) and also private hosting via GitLab
    EE or CE.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab ([gitlab.com](http://gitlab.com)) 是另一种托管的版本控制系统提供商，类似于 GitHub，但具有不同的功能和服务。GitLab
    提供公共托管服务器 ([gitlab.com](http://gitlab.com))，也支持通过 GitLab EE 或 CE 进行私有托管。
- en: How to Install a Git Server
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如何安装 Git 服务器
- en: Refer to [https://www.techbeatly.com/build-your-own-git-server-using-gogs/](https://www.techbeatly.com/build-your-own-git-server-using-gogs/)
    to learn how to install a Git server using Gogs inside a simple Docker container.
    If you want to install GitLab CE, then refer to the documentation at [https://about.gitlab.com/install/](https://about.gitlab.com/install/)
    for detailed instructions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[https://www.techbeatly.com/build-your-own-git-server-using-gogs/](https://www.techbeatly.com/build-your-own-git-server-using-gogs/)了解如何使用
    Gogs 在简单的 Docker 容器中安装 Git 服务器。如果你想安装 GitLab CE，请参考[https://about.gitlab.com/install/](https://about.gitlab.com/install/)上的文档，获取详细的安装说明。
- en: We have learned the importance of storing Ansible automation content in Git
    servers and about the different Git servers available to use. In the next section,
    we will learn the best practices for storing Ansible content in Git and repository
    guidelines.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了将 Ansible 自动化内容存储在 Git 服务器上的重要性，以及可用的不同 Git 服务器。在下一节中，我们将学习将 Ansible
    内容存储在 Git 中的最佳实践和仓库指南。
- en: Where should I keep automation artifacts?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该将自动化工件存储在哪里？
- en: Keep your playbooks and configurations in multiple Git repositories based on
    the automation and content type.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据自动化和内容类型，将你的 playbooks 和配置保存在多个 Git 仓库中。
- en: Ansible and Git repositories – best practices
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible 和 Git 仓库的最佳实践
- en: There are many best practices for keeping your Ansible automation content in
    a VCS.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多最佳实践用于将你的 Ansible 自动化内容保存在版本控制系统（VCS）中。
- en: Repository for Ansible roles
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible 角色的仓库
- en: If you are creating Ansible roles alone (it is no longer common to create individual
    roles for distribution without a collection), then create one Git repository per
    role so that the development and collaboration will be easy without depending
    on other tasks and configurations. See the sample ansible-role repositories in
    *Figure 4.1*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仅创建 Ansible 角色（不再常见单独创建用于分发的角色，而不包含集合），那么为每个角色创建一个 Git 仓库，以便开发和协作更为便捷，无需依赖其他任务和配置。参见
    *图 4.1* 中的示例 ansible-role 仓库。
- en: '![Figure 4.1 – Separate repositories for Ansible roles ](img/B18383_04_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 为 Ansible 角色创建单独的仓库](img/B18383_04_01.jpg)'
- en: Figure 4.1 – Separate repositories for Ansible roles
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 为 Ansible 角色创建单独的仓库
- en: Repositories for Ansible collections
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible 集合仓库
- en: If you are creating Ansible collections, then create one Git repository per
    collection to make the development and management easy. Move your existing Ansible
    roles, libraries, modules, and other plugins to an Ansible collection repository
    and distribute them in a standard way. See the sample ansible-collection repositories
    in *Figure 4.2*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在创建 Ansible 集合，那么每个集合创建一个 Git 仓库，以便简化开发和管理。将现有的 Ansible 角色、库、模块以及其他插件移至
    Ansible 集合仓库，并以标准方式进行分发。参见 *图 4.2* 中的示例 ansible-collection 仓库。
- en: '![Figure 4.2 – Ansible collection repositories ](img/B18383_04_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – Ansible 集合仓库](img/B18383_04_02.jpg)'
- en: Figure 4.2 – Ansible collection repositories
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – Ansible 集合仓库
- en: Dedicated repositories for teams
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为团队创建专用仓库
- en: It is a best practice to create different repositories for different teams if
    they are working on different items as it will make repository management easy
    and transparent.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是为不同的团队创建不同的仓库，如果他们正在处理不同的项目，这样可以使仓库管理更加简便和透明。
- en: Dedicated repositories for inventories
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为清单创建专用仓库
- en: 'Keeping inventories for different environments and groups in separate Git repositories
    will help you to use them efficiently in playbooks. Also, this practice will avoid
    the accidental execution of automation jobs in wrong inventories. For example,
    you can keep production servers in one repository and development servers in another
    repository, as shown in *Figure 4.3*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将不同环境和组的清单保存在单独的 Git 仓库中，有助于在 playbooks 中高效使用它们。此外，这一做法可以避免在错误的清单中意外执行自动化任务。例如，你可以将生产服务器保存在一个仓库中，将开发服务器保存在另一个仓库中，如
    *图 4.3* 所示：
- en: '![Figure 4.3 – Ansible inventory directory structure for different environments
    ](img/B18383_04_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 不同环境的 Ansible 清单目录结构](img/B18383_04_03.jpg)'
- en: Figure 4.3 – Ansible inventory directory structure for different environments
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 不同环境的 Ansible 清单目录结构
- en: By separating inventories for different environments into different Git repositories,
    it is possible to control the access to these inventories’ data as well, such
    as who can modify or use this content.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将不同环境的清单分离到不同的 Git 仓库中，您可以控制对这些清单数据的访问权限，例如谁可以修改或使用这些内容。
- en: If you use an Ansible controller, this practice will also help you as it is
    possible to import inventories from project repositories. Read [https://docs.ansible.com/automation-controller/latest/html/userguide/inventories.xhtml#sourced-from-a-project](https://docs.ansible.com/automation-controller/latest/html/userguide/inventories.xhtml#sourced-from-a-project)
    to find out more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Ansible 控制器，这个操作同样会帮助您，因为可以从项目仓库中导入清单。请阅读 [https://docs.ansible.com/automation-controller/latest/html/userguide/inventories.xhtml#sourced-from-a-project](https://docs.ansible.com/automation-controller/latest/html/userguide/inventories.xhtml#sourced-from-a-project)
    了解更多信息。
- en: Managing automation content in a Git server
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Git 服务器中管理自动化内容
- en: In this section, you will learn how to create a GitHub ([github.com](http://github.com))
    account, create, install, and configure the repositories, and keep Ansible automation
    content inside the repositories.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何创建 GitHub（[github.com](http://github.com)）账户、创建、安装和配置仓库，并将 Ansible
    自动化内容保存在仓库中。
- en: Setting up a GitHub account
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 GitHub 账户
- en: 'If you already have a GitHub personal or enterprise account, then you can skip
    the account creation steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经拥有 GitHub 的个人账户或企业账户，则可以跳过账户创建步骤：
- en: Open your web browser and go to [github.com](http://github.com), then click
    the **Signup** button in the top-right corner of the page.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的网页浏览器，访问 [github.com](http://github.com)，然后点击页面右上角的 **注册** 按钮。
- en: 'Enter your email address and a password and username on the next screen, as
    shown in *Figure 4.4*. GitHub will tell you whether the username is available
    as usernames in GitHub must be unique:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面中输入您的电子邮件地址、密码和用户名，如*图 4.4*所示。GitHub 会告知您用户名是否可用，因为 GitHub 中的用户名必须唯一：
- en: '![Figure 4.4 – Creating a GitHub account ](img/B18383_04_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 创建 GitHub 账户 ](img/B18383_04_04.jpg)'
- en: Figure 4.4 – Creating a GitHub account
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 创建 GitHub 账户
- en: Click **Continue** and finish the simple puzzle (CAPTCHA) on the next screen
    to verify your identity. Once done, create your account.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **继续** 并完成下一个页面上的简单拼图（验证码）来验证您的身份。完成后，创建您的账户。
- en: On the next screen, GitHub will ask you for the one-time code that you will
    receive on your registered email. Check your email inbox for the code (*Figure
    4.5*).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个页面中，GitHub 会要求您输入在注册邮箱中收到的一次性代码。请检查您的邮箱以获取该代码（*图 4.5*）。
- en: '![Figure 4.5 – Fetching the activation token from your mailbox ](img/B18383_04_05.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 从邮箱中获取激活令牌 ](img/B18383_04_05.jpg)'
- en: Figure 4.5 – Fetching the activation token from your mailbox
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 从邮箱中获取激活令牌
- en: Enter the code into the GitHub window and complete the signup process (*Figure
    4.6*).
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码输入到 GitHub 窗口中并完成注册过程（*图 4.6*）。
- en: '![Figure 4.6 – Inputting the one-time token in GitHub ](img/B18383_04_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 在 GitHub 中输入一次性令牌 ](img/B18383_04_06.jpg)'
- en: Figure 4.6 – Inputting the one-time token in GitHub
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 在 GitHub 中输入一次性令牌
- en: Now, you will be taken to the GitHub home page with your activated account (*Figure
    4.7*).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将进入 GitHub 主页并看到您的激活账户（*图 4.7*）。
- en: '![Figure 4.7 – GitHub account home page ](img/B18383_04_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – GitHub 账户主页 ](img/B18383_04_07.jpg)'
- en: Figure 4.7 – GitHub account home page
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – GitHub 账户主页
- en: Other Git Servers
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 Git 服务器
- en: Use any other Git services, such as GitLab (https://gitlab.com) or Bitbucket
    ([https://bitbucket.org](https://bitbucket.org)), and the sign-up process will
    be more or less the same.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其他 Git 服务，如 GitLab（https://gitlab.com）或 Bitbucket（[https://bitbucket.org](https://bitbucket.org)），注册过程基本相同。
- en: Creating your first Git repository
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建您的第一个 Git 仓库
- en: 'In this exercise, you will create a new Git repository to store your playbooks
    and configurations:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将创建一个新的 Git 仓库来存储您的剧本和配置文件：
- en: From the GitHub home page, click the **+** icon in the upper-right corner and
    select **New repository** from the menu.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 GitHub 主页，点击右上角的 **+** 图标，并从菜单中选择 **新建仓库**。
- en: '![Figure 4.8 – Creating a new repository ](img/B18383_04_08.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 创建新的仓库 ](img/B18383_04_08.jpg)'
- en: Figure 4.8 – Creating a new repository
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 创建新的仓库
- en: Enter the details of the new repository, such as the repository name and description.
    Also select the visibility of the repository as a public or private repository.
    Also, tick the **Add a README file** option as shown in *Figure 4.9*.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入新仓库的详细信息，如仓库名称和描述。同时选择仓库的可见性，可以是公开仓库或私有仓库。同时，勾选 **添加 README 文件** 选项，如 *图 4.9*
    所示。
- en: '![Figure 4.9 – Entering a new repository name and details ](img/B18383_04_09.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 输入新的仓库名称和详细信息](img/B18383_04_09.jpg)'
- en: Figure 4.9 – Entering a new repository name and details
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 输入新的仓库名称和详细信息
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to change all these configurations at any time, but it is a best
    practice not to change the repository name as it may break your integrations and
    paths.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以更改所有这些配置，但最佳实践是不要更改仓库名称，因为这可能会破坏你的集成和路径。
- en: Once you have entered all the details, click on the **Create repository** button.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输入所有细节后，点击 **创建仓库** 按钮。
- en: GitHub will show the repository with default `README.md` file content (*Figure
    4.10*). This file was created automatically because we ticked the **Add a README
    file** option in the previous step.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub 会显示带有默认 `README.md` 文件内容的仓库（*图 4.10*）。该文件是自动创建的，因为我们在上一步中勾选了 **添加 README
    文件** 选项。
- en: '![Figure 4.10 – GitHub repository default view with README.md file ](img/B18383_04_10.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 带有 `README.md` 文件的 GitHub 仓库默认视图](img/B18383_04_10.jpg)'
- en: Figure 4.10 – GitHub repository default view with README.md file
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 带有 `README.md` 文件的 GitHub 仓库默认视图
- en: '`README.md` is a special file that will be used to communicate important information
    about the repository or directory inside a repository. GitHub will render and
    show the content of the `README.md` file as an HTML-equivalent format, which is
    a great way to add your repository information, documentation, and more.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`README.md` 是一个特殊文件，用于传达有关仓库或仓库内目录的重要信息。GitHub 会将 `README.md` 文件的内容以 HTML 等效格式渲染和显示，这是添加仓库信息、文档等的好方法。'
- en: Markdown Format
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown 格式
- en: The `.md` extension is used for Markdown files, which is a lightweight markup
    language. Markdown language is used for creating formatted text using plain-text
    editors that is later rendered to HTML or other formats. Read [https://www.markdownguide.org/getting-started](https://www.markdownguide.org/getting-started)
    for more details.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`.md` 扩展名用于 Markdown 文件，它是一种轻量级标记语言。Markdown 语言用于通过纯文本编辑器创建格式化文本，之后渲染成 HTML
    或其他格式。有关详细信息，请阅读 [https://www.markdownguide.org/getting-started](https://www.markdownguide.org/getting-started)。'
- en: Installing Git on a local machine
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在本地机器上安装 Git
- en: Create and manage your Git repository and content from the GitHub web UI itself,
    but this is limited as you cannot do any bulk operations, such as changing multiple
    files in a single commit. You can manage your repository and content from any
    compatible Git CLI or GUI tools, such as the default Git CLI, GitHub Desktop,
    Sourcetree, TortoiseGit, SmartGit, and Tower.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 GitHub 网络用户界面本身创建和管理 Git 仓库及其内容，但这有限制，因为你不能进行任何批量操作，比如在一次提交中更改多个文件。你也可以通过任何兼容的
    Git 命令行或图形界面工具来管理仓库和内容，比如默认的 Git 命令行、GitHub Desktop、Sourcetree、TortoiseGit、SmartGit
    和 Tower。
- en: 'In this exercise, you will install and use the Git command-line utility to
    access and manage your Git repositories:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将安装并使用 Git 命令行工具来访问和管理 Git 仓库：
- en: 'To install Git on the Ansible control node, use the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ansible 控制节点上安装 Git，请使用以下命令：
- en: '[PRE0]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, verify the Git version:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，验证 Git 版本：
- en: '[PRE1]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Configure the Git username and email address. This step will update the global
    username and email address for your Git environment. You need to use the username
    and email address that you used during the GitHub account creation:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 Git 用户名和电子邮件地址。此步骤将更新你 Git 环境中的全局用户名和电子邮件地址。你需要使用在创建 GitHub 账户时使用的用户名和电子邮件地址：
- en: '[PRE2]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that it is possible to use any other dummy username or email address as
    this information is not used as credentials for GitHub access but the identity
    for local users.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用其他虚拟用户名或电子邮件地址是可能的，因为这些信息不会作为 GitHub 访问的凭据，而是用于本地用户的身份标识。
- en: Git CLI and GUI Clients
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Git 命令行和图形界面客户端
- en: Check out [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    to find out how to install Git on different operating systems. Git GUI clients
    are used for better management of Git repositories without much command-line execution.
    Check out https://git-scm.com/downloads/guis for available Git GUI clients.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问 [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    查找如何在不同操作系统上安装 Git 的方法。Git GUI 客户端用于更好地管理 Git 仓库，而无需频繁执行命令行操作。请访问 https://git-scm.com/downloads/guis
    查找可用的 Git GUI 客户端。
- en: Configuring SSH keys in GitHub
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 GitHub 中配置 SSH 密钥
- en: It is possible to access and manage your GitHub repositories using your username
    and password, but it is not desirable to enter the username and password every
    time you want to update something in the Git server. This is where we can utilize
    SSH keys, and you can use the same or different SSH keys to configure GitHub access.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用用户名和密码访问并管理您的 GitHub 仓库，但每次更新 Git 服务器中的内容时输入用户名和密码并不理想。这时我们可以利用 SSH 密钥，您可以使用相同或不同的
    SSH 密钥来配置 GitHub 访问。
- en: 'In this exercise, you will configure the SSH public keys to GitHub for seamless
    and password-less access from the Git client:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，您将配置 SSH 公钥以实现通过 Git 客户端与 GitHub 的无缝、无需密码的访问：
- en: 'Fetch the SSH public key content. Use the same SSH key pairs that were created
    in the *Setting up SSH key-based authentication* section in [*Chapter 1*](B18383_01.xhtml#_idTextAnchor014),
    *Ansible Automation – Introduction*. Copy the public key content as shown in *Figure
    4.11*:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 SSH 公钥内容。使用在[*第 1 章*](B18383_01.xhtml#_idTextAnchor014)《Ansible 自动化 – 简介》章节中的*设置基于
    SSH 的身份验证*部分创建的相同 SSH 密钥对。复制公钥内容，如*图 4.11*所示：
- en: '![Figure 4.11 – Copy SSH public key content ](img/B18383_04_11.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 复制 SSH 公钥内容](img/B18383_04_11.jpg)'
- en: Figure 4.11 – Copy SSH public key content
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 复制 SSH 公钥内容
- en: Go to **GitHub** | **Settings**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **GitHub** | **设置**。
- en: '![Figure 4.12 – Opening the GitHub settings ](img/B18383_04_12.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 打开 GitHub 设置](img/B18383_04_12.jpg)'
- en: Figure 4.12 – Opening the GitHub settings
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 打开 GitHub 设置
- en: Select the **SSH and GPG keys** tab on the left (*Figure 4.13*).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧选择**SSH 和 GPG 密钥**选项卡（*图 4.13*）。
- en: '![Figure 4.13 – GitHub account SSH and GPG keys configuration  ](img/B18383_04_13.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – GitHub 账户 SSH 和 GPG 密钥配置](img/B18383_04_13.jpg)'
- en: Figure 4.13 – GitHub account SSH and GPG keys configuration
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – GitHub 账户 SSH 和 GPG 密钥配置
- en: Click on the **New SSH key** button and enter a title (any identifiable name)
    and the SSH public key content that we copied in *Step 1*. Click on **Add SSH
    key**.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新增 SSH 密钥**按钮，输入标题（任何可识别的名称）和我们在*步骤 1*中复制的 SSH 公钥内容。点击**添加 SSH 密钥**。
- en: '![Figure 4.14 – Adding SSH public key content ](img/B18383_04_14.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 添加 SSH 公钥内容](img/B18383_04_14.jpg)'
- en: Figure 4.14 – Adding SSH public key content
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 添加 SSH 公钥内容
- en: GitHub will ask for your password to confirm this SSH key addition task.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 会要求您输入密码以确认此次 SSH 密钥添加操作。
- en: Verify that the SSH key has been added (*Figure 4.15*).
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 SSH 密钥是否已添加（*图 4.15*）。
- en: '![Figure 4.15 – Verifying SSH keys  ](img/B18383_04_15.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 验证 SSH 密钥](img/B18383_04_15.jpg)'
- en: Figure 4.15 – Verifying SSH keys
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 验证 SSH 密钥
- en: Add any number of keys here; for example, if you want to manage your GitHub
    repository from another workstation (or your laptop), then add the SSH public
    key from that workstation here. Also, note that if you find that any of the SSH
    keys are not in use or have been compromised, you can remove them from this page
    and deny access.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处添加任意数量的密钥；例如，如果您希望从另一台工作站（或笔记本电脑）管理 GitHub 仓库，则可以在此添加该工作站的 SSH 公钥。另外，注意如果您发现某些
    SSH 密钥没有使用或已经泄露，您可以从此页面删除它们并拒绝访问。
- en: Adding SSH Keys to GitHub
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 向 GitHub 添加 SSH 密钥
- en: Refer to the documentation at [https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
    for more details.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
    了解更多详细信息。
- en: Adding content to the Git repository
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 Git 仓库添加内容
- en: 'In this exercise, you will add your previously created automation playbooks
    (in [*Chapter 2*](B18383_02.xhtml#_idTextAnchor043), *Starting with Simple Automation*)
    and configurations to the newly created GitHub repository. To achieve that, you
    need to **clone** the remote repository (on [github.com](http://github.com)) to
    a local machine:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，你将把之前创建的自动化剧本（位于[*第 2 章*](B18383_02.xhtml#_idTextAnchor043)，*从简单自动化开始*）和配置添加到新创建的
    GitHub 仓库中。为此，你需要**克隆**远程仓库（位于[github.com](http://github.com)）到本地计算机：
- en: Go to GitHub and access your repository.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 GitHub 并进入你的仓库。
- en: '![Figure 4.16 – GitHub repository details ](img/B18383_04_16.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – GitHub 仓库详情 ](img/B18383_04_16.jpg)'
- en: Figure 4.16 – GitHub repository details
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – GitHub 仓库详情
- en: Find the **Code** button, click on the drop-down arrow, switch to the **SSH**
    option, and copy the command to clone the repository to your local machine.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到**代码**按钮，点击下拉箭头，切换到**SSH**选项，并复制命令将仓库克隆到本地计算机。
- en: '![Figure 4.17 – Getting the GitHub repository URL ](img/B18383_04_17.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 获取 GitHub 仓库 URL ](img/B18383_04_17.jpg)'
- en: Figure 4.17 – Getting the GitHub repository URL
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 获取 GitHub 仓库 URL
- en: Since you have configured the SSH keys, you can use the SSH-based clone and
    access the repository. If you are using HTTPS-based cloning, GitHub will ask for
    your username and password every time you update the content back to the remote
    repository.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经配置了 SSH 密钥，你可以使用基于 SSH 的克隆并访问仓库。如果你使用基于 HTTPS 的克隆，每次将内容更新到远程仓库时，GitHub
    都会要求你输入用户名和密码。
- en: 'On your Ansible control node, execute the `git clone` command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Ansible 控制节点上，执行`git clone`命令：
- en: '![Figure 4.18 – Clone Git repository to local machine ](img/B18383_04_18.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 克隆 Git 仓库到本地计算机 ](img/B18383_04_18.jpg)'
- en: Figure 4.18 – Clone Git repository to local machine
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 克隆 Git 仓库到本地计算机
- en: 'Check the content of the cloned Git repository:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查克隆的 Git 仓库的内容：
- en: '![Figure 4.19 – Listing content of cloned Git repository ](img/B18383_04_19.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 列出克隆的 Git 仓库内容 ](img/B18383_04_19.jpg)'
- en: Figure 4.19 – Listing content of cloned Git repository
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 列出克隆的 Git 仓库内容
- en: See the `README.md` file that was created automatically when you created the
    Git repository. The `.git` directory contains all the information about this repository,
    including remote repository and commit details.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 查看在创建 Git 仓库时自动生成的`README.md`文件。`.git`目录包含关于该仓库的所有信息，包括远程仓库和提交详情。
- en: 'Move/copy the files you created in the `Chapter-02` exercise to this directory
    and verify the files are inside the directory as shown in *Figure 4.20*:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你在`Chapter-02`练习中创建的文件移动/复制到此目录，并验证文件是否如*图 4.20*所示，已存在该目录中：
- en: '![Figure 4.20 – Content of Git local repository after files moved ](img/B18383_04_20.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 文件移动后 Git 本地仓库的内容 ](img/B18383_04_20.jpg)'
- en: Figure 4.20 – Content of Git local repository after files moved
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 文件移动后 Git 本地仓库的内容
- en: 'Check `git status` and notice the changes as shown in *Figure 4.21*:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`git status`并注意*图 4.21*中所示的更改：
- en: '![Figure 4.21 – git status output for untracked files ](img/B18383_04_21.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 未追踪文件的 git status 输出 ](img/B18383_04_21.jpg)'
- en: Figure 4.21 – git status output for untracked files
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 未追踪文件的 git status 输出
- en: 'From the preceding output, you can understand the following facts:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中，你可以理解以下事实：
- en: The `ansible.cfg`, `chrony.conf.sample`, `hosts`, and `install-package.yaml`
    files are not in the Git database and are called **untracked files**.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible.cfg`、`chrony.conf.sample`、`hosts` 和 `install-package.yaml` 文件不在 Git
    数据库中，称为**未追踪文件**。'
- en: If you want to add them to Git, you need to use the `git add` command.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想将它们添加到 Git，你需要使用`git add`命令。
- en: 'Add untracked files to Git (you can add them one by one or all at once):'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将未追踪的文件添加到 Git（你可以逐个添加或一次性添加所有文件）：
- en: '[PRE3]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check the `git status` again as shown in *Figure 4.22*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 再次检查`git status`，如*图 4.22*所示。
- en: '![Figure 4.22 – git status after adding file to the Git repository ](img/B18383_04_22.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 将文件添加到 Git 仓库后的 git status ](img/B18383_04_22.jpg)'
- en: Figure 4.22 – git status after adding file to the Git repository
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 在将文件添加到 Git 仓库后执行 git status
- en: Also note that the files are not transferred to the remote repository (GitHub)
    yet.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 还需注意，文件尚未传输到远程仓库（GitHub）。
- en: 'Commit the changes to Git using the `git commit` command. Use appropriate comments
    to identify the change in the repository:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`git commit`命令提交更改到 Git。使用适当的注释来标识仓库中的更改：
- en: '![Figure 4.23 – git commit output ](img/B18383_04_23.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – git commit 输出 ](img/B18383_04_23.jpg)'
- en: Figure 4.23 – git commit output
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – git commit 输出
- en: 'Now, push the changes to the remote repository using the `git push` command
    as shown in *Figure 4.24*:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`git push`命令将更改推送到远程仓库，如*图 4.24*所示：
- en: '![Figure 4.24 – Push changes to the remote Git repository ](img/B18383_04_24.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 推送更改到远程 Git 仓库](img/B18383_04_24.jpg)'
- en: Figure 4.24 – Push changes to the remote Git repository
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 推送更改到远程 Git 仓库
- en: This will transfer all the files and changes to the remote repository.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把所有文件和更改传输到远程仓库。
- en: Verify the content on GitHub.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 GitHub 上的内容。
- en: '![Figure 4.25 – Verifying pushed content on the remote repository ](img/B18383_04_25.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 验证远程仓库中的推送内容](img/B18383_04_25.jpg)'
- en: Figure 4.25 – Verifying pushed content on the remote repository
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 验证远程仓库中的推送内容
- en: As we can see, the files are already available on the Git repository.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，文件已经可以在 Git 仓库中找到。
- en: Verify the commit history on GitHub. Click on the **Commits** link (below the
    **Code** button as shown in *Figure 4.25*) and check the commits.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 上验证提交历史。点击**Commits**链接（如*图 4.25*所示，位于**Code**按钮下方）查看提交记录。
- en: '![Figure 4.26 – Verifying Git commits in GitHub ](img/B18383_04_26.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 在 GitHub 中验证 Git 提交](img/B18383_04_26.jpg)'
- en: Figure 4.26 – Verifying Git commits in GitHub
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 在 GitHub 中验证 Git 提交
- en: 'You can explore commits and history by referring to the Git documentation here:
    https://git-scm.com/docs/gittutorial.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过参考 Git 文档来探索提交记录和历史：https://git-scm.com/docs/gittutorial。
- en: Now we have learned how to add Ansible content to a Git repository and see the
    version history from the GitHub UI. In the next section, we will learn how to
    manage contributions and collaborative development in a Git repository.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经学会了如何将 Ansible 内容添加到 Git 仓库，并通过 GitHub 用户界面查看版本历史。在下一个章节，我们将学习如何管理 Git
    仓库中的贡献和协同开发。
- en: Collaboration is the key to automation
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协作是自动化的关键
- en: 'Now you have your Ansible automation content in your GitHub repository. There
    are several advantages to this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经将 Ansible 自动化内容添加到你的 GitHub 仓库中。这带来了几个优点：
- en: You do not need to take a backup of your files before you make changes (once
    you make the changes, remember to test, commit, and push the changes to a remote
    GitHub repository).
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你进行更改之前，不需要备份文件（进行更改后，记得测试、提交并将更改推送到远程 GitHub 仓库）。
- en: Pull the content to any of the machines whenever needed and test it. For example,
    you can download the code to your local workstation and develop it further. Once
    you make the changes, push it back to the remote repository; a new version of
    the code will be stored there.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随时将内容拉取到任何机器上进行测试。例如，你可以将代码下载到本地工作站并进一步开发。完成更改后，将其推送回远程仓库；新版本的代码将存储在那里。
- en: Other users and developers can test and contribute to your code without having
    access to your Ansible control node. You just need to allow appropriate access
    to other users.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他用户和开发人员可以在无需访问你的 Ansible 控制节点的情况下测试和贡献你的代码。你只需允许其他用户适当的访问权限。
- en: If any of the code is not working after an update, you can revert to an old
    version of the code at any point in time.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果更新后某些代码无法正常工作，你可以随时回退到旧版本的代码。
- en: Let’s learn how to use Git branching in the next session.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一个环节学习如何使用 Git 分支。
- en: Using Git branching
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Git 分支
- en: Git provides a feature called branching, which will help you to create multiple
    versions (or branches) of code in the same Git repository. A `main` (formerly
    `master`) and all your Git commits go to the `main` branch.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Git 提供了一个名为分支的功能，它可以帮助你在同一个 Git 仓库中创建多个版本（或分支）。`main`（以前称为`master`）和所有 Git 提交都会进入`main`分支。
- en: 'You can create multiple branches on the Git repository to take advantage of
    the Git workflow:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Git 仓库中创建多个分支，以利用 Git 工作流：
- en: Create multiple branches for `development` and `staging` to track the changes.
    Once the content of `development` and `staging` branches are tested and confirmed
    as good content, then you can merge the content from these `development` and `staging`
    branches to the `main` branch of your Git repository. With this practice, the
    `main` branch will contain only tested and clean code.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`development`和`staging`创建多个分支以跟踪更改。一旦`development`和`staging`分支的内容经过测试并确认没有问题，就可以将这些分支的内容合并到
    Git 仓库的`main`分支中。通过这种做法，`main`分支将只包含经过测试和清理的代码。
- en: Create different branches for patching or bug fixes and merge them to the `main`
    branch once tested.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为修补程序或 bug 修复创建不同的分支，并在测试后将其合并到`main`分支。
- en: Create a branch for users to contribute their code and merge to the `main` branch
    once tested.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个分支，供用户提交他们的代码，经过测试后合并到 `main` 分支。
- en: 'You can choose any type of branching strategy based on your development workflow
    and the organization’s requirements. For our exercise, we will be using a simple
    Git branching strategy, as shown in *Figure 4.27*:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据开发工作流和组织的需求选择任何类型的分支策略。在我们的练习中，我们将使用一个简单的 Git 分支策略，如 *图 4.27* 所示：
- en: '![Figure 4.27 – Git branching ](img/B18383_04_27.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – Git 分支管理](img/B18383_04_27.jpg)'
- en: Figure 4.27 – Git branching
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – Git 分支管理
- en: 'Git branching and merging may happen for different reasons. The following are
    the typical tasks involved in the Git workflow:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Git 分支和合并可能会因为不同的原因发生。以下是 Git 工作流中典型的任务：
- en: The `main` branch will contain the code, for example, version 1.0 of your automation
    content.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main` 分支将包含代码，例如，你的自动化内容的 1.0 版本。'
- en: Create new feature branches as needed. Once the feature branch is tested and
    good to use, you will raise a merge request (**PR**, or **pull request**). This
    is the stage where a contributor informs the maintainer of the Git repository
    to review code in the feature branch and merge it into the main branch of the
    project. You can call this version of code **2.0**, for example.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要创建新的功能分支。一旦功能分支经过测试并准备好使用，你将提交一个合并请求（**PR**，或 **拉取请求**）。这是贡献者通知 Git 仓库维护者，要求审查功能分支中的代码并将其合并到项目的主分支中的阶段。例如，你可以称这个版本为代码的
    **2.0**。
- en: If you find any issues in the code, duplicate a bugfix branch (same as the feature
    branch) and raise another PR to merge the changes into the main branch. You can
    call this version **2.1** here.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在代码中发现任何问题，复制一个 bugfix 分支（与功能分支相同），并提出另一个 PR，将更改合并到主分支中。你可以称这个版本为 **2.1**。
- en: Let’s look at an example to understand this concept better.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来更好地理解这个概念。
- en: Implementing Git branching
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 Git 分支管理
- en: In this exercise, you will learn how to create multiple branches and contribute
    as different users.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何创建多个分支并以不同的用户身份进行贡献。
- en: 'In this exercise, I am using another workstation to clone the previously created
    repository as a different GitHub user (for example, `ginigangadharan`). Create
    another GitHub account or ask your friend if you can use their account to test
    this:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我使用了另一台工作站，以不同的 GitHub 用户身份（例如 `ginigangadharan`）克隆之前创建的仓库。你可以创建另一个 GitHub
    账户，或者问问你的朋友是否可以用他们的账户来测试这个：
- en: 'Fork the original repository from the web browser as a different user (eg:
    `ginigangadharan`). Click on the **Fork** button as shown in *Figure 4.28*.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从网页浏览器中以不同用户（例如：`ginigangadharan`）的身份分叉原始仓库。点击如 *图 4.28* 所示的 **Fork** 按钮。
- en: '![Figure 4.28 – Opening the repository as a different user ](img/B18383_04_28.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.28 – 作为不同用户打开仓库](img/B18383_04_28.jpg)'
- en: Figure 4.28 – Opening the repository as a different user
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – 作为不同用户打开仓库
- en: GitHub will ask for the target account as shown in the *Figure 4.29* (if you
    have other organization accounts) to fork the repository and will create a copy
    of the original repository in the new user account.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub 会询问目标账户，如 *图 4.29* 所示（如果你有其他组织账户），以便分叉仓库，并会在新用户账户中创建原始仓库的副本。
- en: '![Figure 4.29 – Forking the repository ](img/B18383_04_29.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.29 – 分叉仓库](img/B18383_04_29.jpg)'
- en: Figure 4.29 – Forking the repository
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29 – 分叉仓库
- en: Now you can see a new repository created under the new account, which is forked
    from the original repository.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到在新账户下创建了一个新的仓库，这个仓库是从原始仓库分叉（forked）出来的。
- en: '![Figure 4.30 – Forked repository details ](img/B18383_04_30.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.30 – Forked 仓库详情](img/B18383_04_30.jpg)'
- en: Figure 4.30 – Forked repository details
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30 – Forked 仓库详情
- en: 'Clone this repository to your workstation and check the content; remember to
    clone with the new repository URL:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此仓库克隆到你的工作站并检查内容；记得使用新的仓库 URL 进行克隆：
- en: '![Figure 4.31 – Clone the Git repository from new user account ](img/B18383_04_31.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.31 – 从新用户账户克隆 Git 仓库](img/B18383_04_31.jpg)'
- en: Figure 4.31 – Clone the Git repository from new user account
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31 – 从新用户账户克隆 Git 仓库
- en: 'Create a new Git branch called `feature-1`:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `feature-1` 的新的 Git 分支：
- en: '[PRE4]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Switch to the new branch:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到新分支：
- en: '[PRE5]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Check the Git branches:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 Git 分支：
- en: '[PRE6]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, you can see the `*` symbol, which denotes the current branch.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到 `*` 符号，表示当前分支。
- en: Now, you can update your code, for example, change some lines of code or add
    some tasks to the playbook.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以更新你的代码，例如，修改一些代码行或向 playbook 中添加一些任务。
- en: 'Check git `status` to see the changes:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 git `status` 以查看更改：
- en: '![Figure 4.32 – Git status after updating repositry content ](img/B18383_04_32.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.32 – 更新仓库内容后的 Git 状态](img/B18383_04_32.jpg)'
- en: Figure 4.32 – Git status after updating repositry content
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32 – 更新仓库内容后的 Git 状态
- en: You can see that `install-package.yaml` (or whichever file you have changed)
    is highlighted there.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到 `install-package.yaml`（或你更改的任何文件）已在那里高亮显示。
- en: 'Add the changed file and commit the changes to Git; remember to use appropriate
    commit messages to identify the changes:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加更改的文件并将更改提交到 Git；记得使用适当的提交信息来标识更改：
- en: '![Figure 4.33 – Add update to Git and commit changes ](img/B18383_04_33.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.33 – 添加更新到 Git 并提交更改](img/B18383_04_33.jpg)'
- en: Figure 4.33 – Add update to Git and commit changes
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33 – 添加更新到 Git 并提交更改
- en: 'Check git `log` to review the commit history as shown in *Figure 4.34*:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 git `log` 以查看提交历史，如 *图 4.34* 所示：
- en: '![Figure 4.34 – Details of commits in Git logs ](img/B18383_04_34.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.34 – Git 日志中提交的详细信息](img/B18383_04_34.jpg)'
- en: Figure 4.34 – Details of commits in Git logs
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34 – Git 日志中提交的详细信息
- en: 'Push the new branch and changes to the remote repository:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的分支和更改推送到远程仓库：
- en: '![Figure 4.35 – Push the changes to remote GIt repository ](img/B18383_04_35.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.35 – 推送更改到远程 Git 仓库](img/B18383_04_35.jpg)'
- en: Figure 4.35 – Push the changes to remote GIt repository
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.35 – 推送更改到远程 Git 仓库
- en: Now the updated code is available in the new user’s GitHub repository, which
    is a forked copy of the original repository.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新后的代码已出现在新用户的 GitHub 仓库中，这是原始仓库的一个分叉副本。
- en: Go to the new user’s GitHub repository and select **Pull requests**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到新用户的 GitHub 仓库并选择 **拉取请求**。
- en: '![Figure 4.36 – Pull requests in the GitHub repository ](img/B18383_04_36.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.36 – GitHub 仓库中的拉取请求](img/B18383_04_36.jpg)'
- en: Figure 4.36 – Pull requests in the GitHub repository
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.36 – GitHub 仓库中的拉取请求
- en: 'Click on the **New pull request** button. Select the repository and branches
    and click on the **Create pull request** button to submit a PR (provide the PR
    comment as required):'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **新建拉取请求** 按钮，选择仓库和分支，然后点击 **创建拉取请求** 按钮提交 PR（根据需要提供 PR 评论）：
- en: '![Figure 4.37 – Create a pull request in the GitHub repository ](img/B18383_04_37.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.37 – 在 GitHub 仓库中创建拉取请求](img/B18383_04_37.jpg)'
- en: Figure 4.37 – Create a pull request in the GitHub repository
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.37 – 在 GitHub 仓库中创建拉取请求
- en: Now, go back to the `demouser-2022` user’s GitHub account and check the PRs.
    You will find the PR from the other user (that is, `ginigangadharan`) and can
    open the PR. Verify the merge, check for any conflicts, and click on the **Merge
    pull request** button to accept the changes from this user.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到 `demouser-2022` 用户的 GitHub 账户，查看 PRs。你将看到来自其他用户（即 `ginigangadharan`）的
    PR，并可以打开该 PR。验证合并，检查是否有冲突，然后点击 **合并拉取请求** 按钮接受此用户的更改。
- en: '![Figure 4.38 – Pull request details in GitHub repository ](img/B18383_04_38.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.38 – GitHub 仓库中拉取请求的详细信息](img/B18383_04_38.jpg)'
- en: Figure 4.38 – Pull request details in GitHub repository
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.38 – GitHub 仓库中拉取请求的详细信息
- en: Now you have the latest contribution from another user in your Git repository.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在 Git 仓库中获得了来自另一个用户的最新贡献。
- en: Please note that this is a very basic Git workflow, and you need to include
    additional steps, such as adding PR approvals, creating tests before merging to
    the `main` branch, and other policies as required.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只是一个非常基础的 Git 工作流，你需要包括额外的步骤，比如添加 PR 审批、在合并到 `main` 分支之前创建测试，以及根据需求执行其他政策。
- en: Accept contributions from other users and teams using the preceding workflow
    without giving full access to your repository, which is a common method used for
    any other open source software.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述工作流接受其他用户和团队的贡献，而无需完全开放你的仓库访问权限，这是常见的开源软件使用方法。
- en: Summary
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, you have learned the importance of version control in an IT
    automation environment. You have learned the basics of Git and different Git servers
    and providers. You have practiced creating a GitHub account, Git repository, and
    other steps. You also learned how to accept contributions to your Git content,
    branching methods, and PR processes.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经了解了版本控制在 IT 自动化环境中的重要性。你学习了 Git 的基础知识以及不同的 Git 服务器和提供商。你还实践了创建 GitHub
    账户、Git 仓库等步骤，并了解了如何接受其他用户对你的 Git 内容的贡献、分支方法以及 PR 流程。
- en: In the next chapter, you will learn how to find more automation use cases from
    your workplace and personal projects. You will also learn more about inventory
    management and different strategies to keep your managed nodes’ information.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何从你的工作场所和个人项目中找到更多的自动化使用案例。你还将学习更多关于清单管理和不同策略来保持你管理的节点信息。
- en: Further reading
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics covered in this chapter, please visit the following
    links:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解本章所涉及的主题，请访问以下链接：
- en: '*What is Git?*: [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是Git?*: [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)'
- en: '*What is version control?*: [https://en.wikipedia.org/wiki/Version_control](https://en.wikipedia.org/wiki/Version_control)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是版本控制?*: [https://en.wikipedia.org/wiki/Version_control](https://en.wikipedia.org/wiki/Version_control)'
- en: '*What are pull requests?*: [https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是拉取请求?*: [https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)'
- en: '*Syncing your branch*: [https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*同步你的分支*: [https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/keeping-your-local-repository-in-sync-with-github/syncing-your-branch)'
- en: 'Part 2: Finding Use Cases and Integrations'
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：寻找使用案例和集成
- en: This part of the book will explain how to use Ansible in real-world use cases
    in an IT environment. It will also cover most of the general items, such as infrastructure,
    platforms, and applications.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分将解释如何在IT环境中的实际应用案例中使用Ansible。它还将涵盖大多数常见的项目，如基础设施、平台和应用程序。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包括以下章节：
- en: '[*Chapter 5*](B18383_05.xhtml#_idTextAnchor086)*, Expanding Your Automation
    Landscape*'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18383_05.xhtml#_idTextAnchor086)*, 扩展你的自动化领域*'
- en: '[*Chapter 6*](B18383_06.xhtml#_idTextAnchor105)*, Automating Microsoft Windows
    and Network Devices*'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18383_06.xhtml#_idTextAnchor105)*, 自动化微软Windows和网络设备*'
- en: '[*Chapter 7*](B18383_07.xhtml#_idTextAnchor125)*, Managing Your Virtualization
    and Cloud Platforms*'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18383_07.xhtml#_idTextAnchor125)*, 管理你的虚拟化和云平台*'
- en: '[*Chapter 8*](B18383_08.xhtml#_idTextAnchor144)*, Helping the Database Team
    with Automation*'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18383_08.xhtml#_idTextAnchor144)*, 帮助数据库团队实现自动化*'
- en: '[*Chapter 9*](B18383_09.xhtml#_idTextAnchor161)*, Implementing Automation in
    a DevOps Workflow*'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B18383_09.xhtml#_idTextAnchor161)*, 在DevOps工作流中实现自动化*'
- en: '[*Chapter 10*](B18383_10.xhtml#_idTextAnchor178)*, Managing Containers Using
    Ansible*'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18383_10.xhtml#_idTextAnchor178)*, 使用Ansible管理容器*'
- en: '[*Chapter 11*](B18383_11.xhtml#_idTextAnchor194)*, Managing Kubernetes Using
    Ansible*'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18383_11.xhtml#_idTextAnchor194)*, 使用Ansible管理Kubernetes*'
- en: '[*Chapter 12*](B18383_12.xhtml#_idTextAnchor213)*, Integrating Ansible with
    Your Tools*'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18383_12.xhtml#_idTextAnchor213)*, 将Ansible与你的工具集成*'
- en: '[*Chapter 13*](B18383_13.xhtml#_idTextAnchor241)*, Using Ansible for Secret
    Management*'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18383_13.xhtml#_idTextAnchor241)*, 使用Ansible进行秘密管理*'
