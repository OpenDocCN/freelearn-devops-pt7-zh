["```\n    #!/usr/bin/env python \n\n    import pwd \n    import sys \n    import shlex \n    import json \n\n    def main(): \n        # Parsing argument file \n        args = {} \n        args_file = sys.argv[1] \n        args_data = file(args_file).read() \n        arguments = shlex.split(args_data) \n        for arg in arguments: \n            if '=' in arg: \n                (key, value) = arg.split('=') \n                args[key] = value \n        user = args['user'] \n\n        # Check if user exists \n        try: \n            pwd.getpwnam(user) \n            success = True \n            ret_msg = 'User %s exists' % user \n        except KeyError: \n            success = False \n            ret_msg = 'User %s does not exists' % user \n\n        # Error handling and JSON return \n        if success: \n            print json.dumps({ \n                'msg': ret_msg \n            }) \n            sys.exit(0) \n        else: \n            print json.dumps({ \n                'failed': True, \n                'msg': ret_msg \n            }) \n            sys.exit(1) \n    main() \n\n```", "```\n    #!/usr/bin/env python \n\n    import pwd \n    import sys \n    import shlex \n    import json \n\n```", "```\n    def main(): \n        # Parsing argument file \n        args = {} \n        args_file = sys.argv[1] \n        args_data = file(args_file).read() \n        arguments = shlex.split(args_data) \n        for arg in arguments: \n            if '=' in arg: \n                (key, value) = arg.split('=') \n                args[key] = value \n        user = args['user'] \n\n```", "```\n    # Check if user exists \n    try: \n        pwd.getpwnam(user) \n        success = True \n        ret_msg = 'User %s exists' % user \n    except KeyError: \n        success = False \n        ret_msg = 'User %s does not exists' % user \n\n```", "```\n    # Error handling and JSON return \n    if success: \n        print json.dumps({ \n            'msg': ret_msg \n        }) \n        sys.exit(0) \n    else: \n        print json.dumps({ \n            'failed': True, \n            'msg': ret_msg \n        }) \n        sys.exit(1) \n\n```", "```\n    - hosts: localhost \n      vars: \n        user_ok: root \n        user_ko: this_user_does_not_exists \n      tasks: \n      - name: 'Check if user {{ user_ok }} exists' \n        check_user: \n          user: '{{ user_ok }}' \n      - name: 'Check if user {{ user_ko }} exists' \n        check_user: \n          user: '{{ user_ko }}' \n\n```", "```\nansible-playbook playbooks/check_user.yaml\n\n```", "```\nPLAY [localhost] *************************************************\nTASK [setup] *****************************************************\nok: [localhost] \nTASK [Check if user root exists] *********************************\nok: [localhost] \nTASK [Check if user this_user_does_not_exists exists] ************\nfatal: [localhost]: FAILED! => {\"changed\": false, \"failed\": true, \"msg\": \"User this_user_does_not_exists does not exists\"} \nNO MORE HOSTS LEFT ***********************************************\n to retry, use: --limit @playbooks/check_user.retry \nPLAY RECAP *******************************************************\nlocalhost         : ok=2    changed=0    unreachable=0    failed=1\n\n```", "```\n    #!/usr/bin/env python \n\n    import pwd \n    from ansible.module_utils.basic import AnsibleModule \n\n    def main(): \n        # Parsing argument file \n        module = AnsibleModule( \n            argument_spec = dict( \n                user = dict(required=True) \n            ) \n        ) \n        user = module.params.get('user') \n\n        # Check if user exists \n        try: \n            pwd.getpwnam(user) \n            success = True \n            ret_msg = 'User %s exists' % user \n        except KeyError: \n            success = False \n            ret_msg = 'User %s does not exists' % user \n\n        # Error handling and JSON return \n        if success: \n            module.exit_json(msg=ret_msg) \n        else: \n            module.fail_json(msg=ret_msg) \n\n    if __name__ == \"__main__\": \n        main() \n\n```", "```\n    #!/usr/bin/env python \n\n    import pwd \n    from ansible.module_utils.basic import AnsibleModule \n\n```", "```\n    # Parsing argument file \n    module = AnsibleModule( \n        argument_spec = dict( \n            user = dict(required=True) \n        ) \n    ) \n    user = module.params.get('user') \n\n```", "```\n    # Error handling and JSON return \n    if success: \n        module.exit_json(msg=ret_msg) \n    else: \n        module.fail_json(msg=ret_msg) \n\n```", "```\n    - hosts: localhost \n      vars: \n        user_ok: root \n        user_ko: this_user_does_not_exists \n      tasks: \n      - name: 'Check if user {{ user_ok }} exists' \n        check_user_py2: \n          user: '{{ user_ok }}' \n      - name: 'Check if user {{ user_ko }} exists' \n        check_user_py2: \n          user: '{{ user_ko }}' \n\n```", "```\nansible-playbook playbooks/check_user.yaml\n\n```", "```\nPLAY [localhost] *************************************************\nTASK [setup] *****************************************************\nok: [localhost] \nTASK [Check if user root exists] *********************************\nok: [localhost] \nTASK [Check if user this_user_does_not_exists exists] ************\nfatal: [localhost]: FAILED! => {\"changed\": false, \"failed\": true, \"msg\": \"User this_user_does_not_exists does not exists\"} \nNO MORE HOSTS LEFT ***********************************************\n to retry, use: --limit @playbooks/check_user_py2.retry \nPLAY RECAP *******************************************************\nlocalhost         : ok=2    changed=0    unreachable=0    failed=1\n\n```", "```\n    #!/usr/bin/env python \n\n    import pwd \n    from ansible.module_utils.basic import AnsibleModule \n\n    class CheckUser: \n        def __init__(self, user): \n            self.user = user \n\n        # Check if user exists \n        def check_user(self): \n            uid = '' \n            gid = '' \n            try: \n                user = pwd.getpwnam(self.user) \n                success = True \n                ret_msg = 'User %s exists' % self.user \n                uid = user.pw_uid \n                gid = user.pw_gid \n            except KeyError: \n                success = False \n                ret_msg = 'User %s does not exists' % self.user \n            return success, ret_msg, uid, gid \n\n    def main(): \n        # Parsing argument file \n        module = AnsibleModule( \n            argument_spec = dict( \n                user = dict(required=True) \n            ) \n        ) \n        user = module.params.get('user') \n\n        chkusr = CheckUser(user) \n        success, ret_msg, uid, gid = chkusr.check_user() \n\n        # Error handling and JSON return \n        if success: \n            module.exit_json(msg=ret_msg, uid=uid, gid=gid) \n        else: \n            module.fail_json(msg=ret_msg) \n\n    if __name__ == \"__main__\": \n        main() \n\n```", "```\n    - hosts: localhost \n      vars: \n        user: root \n      tasks: \n      - name: 'Retrive {{ user }} data if it exists' \n        check_user_id: \n          user: '{{ user }}' \n        register: user_data \n      - name: 'Print user {{ user }} data' \n        debug: \n          msg: '{{ user_data }}' \n\n```", "```\nansible-playbook playbooks/check_user.yaml\n\n```", "```\nPLAY [localhost] *************************************************\nTASK [setup] *****************************************************\nok: [localhost] \nTASK [Retrieve fale data if it exists] ****************************\nok: [localhost] \nTASK [Print user fale data] **************************************\nok: [localhost] => {\n \"msg\": {\n \"changed\": false,\n \"gid\": 1000,\n \"msg\": \"User root exists\",\n \"uid\": 1000\n }\n} \nPLAY RECAP *******************************************************\nlocalhost         : ok=3    changed=0    unreachable=0    failed=0\n\n```", "```\ngit clone git://github.com/ansible/ansible.git --recursive\n\n```", "```\nsource ansible/hacking/env-setup\n\n```", "```\nansible/hacking/test-module -m library/check_user_id.py -a \"user=root\"\n\n```", "```\n    * including generated source, if any, saving to: /home/fale/.ansible_module_generated \n    * ansiballz module detected; extracted module source to: /home/fale/debug_dir \n    *********************************** \n    RAW OUTPUT \n\n    {\"msg\": \"User root exists\", \"invocation\": {\"module_args\": {\"user\": \"root\"}}, \"gid\":     0, \"uid\": 0, \"changed\": false} \n\n    *********************************** \n    PARSED OUTPUT \n    { \n        \"changed\": false, \n        \"gid\": 0, \n        \"invocation\": { \n            \"module_args\": { \n                \"user\": \"root\" \n            } \n        }, \n        \"msg\": \"User root exists\", \n        \"uid\": 0 \n    }\n\n```", "```\n    #!/bin/bash \n    source $1 \n\n    SERVICE=$service_name \n\n    JAVA_PIDS=$(/usr/java/default/bin/jps | grep ${SERVICE} | awk '{print $1}') \n\n    if [ ${JAVA_PIDS} ]; then \n        for JAVA_PID in ${JAVA_PIDS}; do \n            /usr/bin/kill -9 ${JAVA_PID} \n        done \n        echo \"failed=False msg=\"Killed all the orphaned processes for ${SERVICE}\"\" \n        exit 0 \n    else \n        echo \"failed=False msg=\"No orphaned processes to kill for ${SERVICE}\"\" \n        exit 0 \n    fi \n\n```", "```\n    source $1 \n\n    SERVICE=$service_name \n\n```", "```\n    if [ ${JAVA_PIDS} ]; then \n        for JAVA_PID in ${JAVA_PIDS}; do \n            /usr/bin/kill -9 ${JAVA_PID} \n        done \n        echo \"failed=False msg=\"Killed all the orphaned processes for ${SERVICE}\"\" \n        exit 0 \n\n```", "```\n    else \n        echo \"failed=False msg=\"No orphaned processes to kill for ${SERVICE}\"\" \n        exit 0 \n    fi \n\n```", "```\n    service_name=jenkins \n\n```", "```\nbash library/kill_java.sh /tmp/arguments\n\n```", "```\nfailed=False msg=\"No orphaned processes to kill for jenkins\"\n\n```", "```\n    #!/usr/bin/env ruby \n\n    require 'rsync' \n    require 'json' \n\n    src = '' \n    dest = '' \n    ret_msg = '' \n    SUCCESS = '' \n\n    def print_message(state, mdg, key='Failed') \n        message = { \n            key => state, \n            \"msg\" => msg \n        } \n        print message.to_json \n        exit 1 if state == false \n        exit 0 \n    end \n\n    args_file = ARGV[0] \n    data = File.read(args_file) \n    arguments = data.split(\" \") \n    arguments.each do |argument| \n        print_message(false, \"Argument should be name-value pairs. Example name=foo\") if not argument.include(\"=\") \n        field.value = argument.split(\"=\") \n        if field == \"src\" \n            src = value \n        elseif field == \"dest\" \n            dest = value \n        else print_message(false, \"Invalid argument provided. Valid arguments are src and dest.\") \n        end \n    end \n\n    result - Rsync.run(\"#{src}\", \"#{dest}\") \n    if result.success? \n        success = true \n        ret_msg = \"Copied file successfully\" \n    else \n        success = false \n        ret_msg = result.error \n    end \n\n    if success \n        print_message(false, \"#{ret_msg}\") \n    else \n        print_message(true, \"#{ret_msg}\") \n    end \n\n```", "```\n    #!/usr/bin/env ruby \n\n    require 'rsync' \n    require 'json' \n\n    src = '' \n    dest = '' \n    ret_msg = '' \n    SUCCESS = '' \n\n    def print_message(state, mdg, key='Failed') \n        message = { \n            key => state, \n            \"msg\" => msg \n        } \n        print message.to_json \n        exit 1 if state == false \n        exit 0 \n    end \n\n```", "```\n    args_file = ARGV[0] \n    data = File.read(args_file) \n    arguments = data.split(\" \") \n    arguments.each do |argument| \n        print_message(false, \"Argument should be name-value pairs. Example name=foo\") if not argument.include(\"=\") \n        field.value = argument.split(\"=\") \n        if field == \"src\" \n            src = value \n        elseif field == \"dest\" \n            dest = value \n        else print_message(false, \"Invalid argument provided. Valid arguments are src and dest.\") \n        end \n    end \n\n```", "```\n    result - Rsync.run(\"#{src}\", \"#{dest}\") \n    if result.success? \n        success = true \n        ret_msg = \"Copied file successfully\" \n    else \n        success = false \n        ret_msg = result.error \n    end \n\n```", "```\n    if success \n        print_message(false, \"#{ret_msg}\") \n    else \n        print_message(true, \"#{ret_msg}\") \n    end \n\n```", "```\n    src=/var/log/ansible.log dest=/tmp/ansible_backup.log \n\n```", "```\nruby library/rsync.rb /tmp/arguments\n\n```", "```\n    {\"failed\":false,\"msg\":\"Copied file successfully\"} \n\n```", "```\n    #!/usr/bin/env python \n\n    import pwd \n    from ansible.module_utils.basic import AnsibleModule \n\n    class User: \n        def __init__(self, user): \n            self.user = user \n\n        # Check if user exists \n        def check_if_user_exists(self): \n            try: \n                user = pwd.getpwnam(self.user) \n                success = True \n                ret_msg = 'User %s exists' % self.user \n            except KeyError: \n                success = False \n                ret_msg = 'User %s does not exists' % self.user \n            return success, ret_msg \n\n    def main(): \n        # Parsing argument file \n        module = AnsibleModule( \n            argument_spec = dict( \n                user = dict(required=True) \n            ) \n        ) \n        user = module.params.get('user') \n\n        chkusr = User(user) \n        success, ret_msg = chkusr.check_if_user_exists() \n\n        # Error handling and JSON return \n        if success: \n            module.exit_json(msg=ret_msg, uid=uid, gid=gid) \n        else: \n            module.fail_json(msg=ret_msg) \n\n    if __name__ == \"__main__\": \n        main() \n\n```", "```\npip install nose\n\n```", "```\n    from nose.tools import assert_equals, assert_false, assert_true \n    import imp \n    imp.load_source(\"check_user\",\"check_user_py3.py\") \n    from check_user import User \n\n    def test_check_user_positive(): \n        chkusr = User(\"root\") \n        success, ret_msg = chkusr.check_if_user_exists() \n        assert_true(success) \n        assert_equals('User root exists', ret_msg) \n\n    def test_check_user_negative(): \n        chkusr = User(\"this_user_does_not_exists\") \n        success, ret_msg = chkusr.check_if_user_exists() \n        assert_false(success) \n        assert_equals('User this_user_does_not_exists does not exists', ret_msg) \n\n```", "```\ncd library\nnosetests -v test_check_users_py3.py\n\n```", "```\ntest_check_user_py3.test_check_user_positive ... ok\ntest_check_user_py3.test_check_user_negative ... ok\n---------------------------------------------------\nRan 2 tests in 0.001s\nOK\n\n```"]