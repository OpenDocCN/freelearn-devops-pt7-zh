["```\n$ git clone https://git.eclipse.org/r/jgit/jgit chapter7.5\nCloning into 'chapter7.5'...\nremote: Counting objects: 2170, done\nremote: Finding sources: 100% (364/364)\nremote: Total 45977 (delta 87), reused 45906 (delta 87)\nReceiving objects: 100% (45977/45977), 10.60 MiB | 1.74 MiB/s, done.\nResolving deltas: 100% (24651/24651), done.\nChecking connectivity... done.\nChecking out files: 100% (1577/1577), done.\n```", "```\n$ cd chapter7.5\n$ git checkout -b descriptioInCommit  --track origin/stable-3.2\nBranch descriptioInCommit set up to track remote branch stable-3.2 from origin.\nSwitched to a new branch 'descriptioInCommit'\n```", "```\n$ git branch --edit-description descriptioInCommit\n```", "```\nRemote agent not connection to server\n\nWhen the remote agent is trying to connect\nit will fail as network services are not up\nand running when remote agent tries the first time\n```", "```\n$ git config --get branch.descriptioInCommit.description\nRemote agent not connection to server\n\nWhen the remote agent is trying to connect\nit will fail as network services are not up\nand running when remote agent tries the first time\n```", "```\n#!/bin/bash\nBRANCH=$(git branch | grep '*'| sed 's/*//g'|  sed 's/ //g')\nDESCRIPTION=$(git config --get branch.${BRANCH}.description)\nif [ -z \"$DESCRIPTION\" ]; then\n echo \"No desc for branch using default template\"\nelse\n # replacing # with n\n DESCRIPTION=$(echo \"$DESCRIPTION\" | sed 's/#/\\n/g')\n # replacing the first \\n with \\n\\n\n DESCRIPTION=$(echo \"$DESCRIPTION\" | sed 's/\\n/\\n\\n/')\n# append default commit message\nDESCRIPTION=$(echo \"$DESCRIPTION\" && cat $1)\n# and write it all to the commit message\necho \"$DESCRIPTION\" > $1\nfi\n```", "```\n$ git commit --allow-empty\n```", "```\nRemote agent not connection to server\n\nWhen the remote agent is trying to connect\nit will fail as network services are not up\nand running when remote agent tries the first time\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch descriptioInCommit\n# Your branch is up-to-date with 'origin/stable-3.2'.\n#\n# Untracked files:\n#       hen the remote agent is trying to connect\n#\n```", "```\n$ git log -1\ncommit 92447c6aac2f6d675f8aa4cb88e5abdfa46c90b0\nAuthor: John Doe <john.doe@example.com>\nDate:   Sat Mar 15 00:19:35 2014 +0100\n\n   Remote agent not connection to server\n```", "```\n   When the remote agent is trying to connect\n   it will fail as network services are not up\n   and running when remote agent tries the first time\n```", "```\n$ git checkout -b noDescriptionBranch\nSwitched to a new branch 'noDescriptionBranch'\n```", "```\n$ git commit --allow-empty\n```", "```\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit. #\n# On branch noDescriptionBranch\n```", "```\n$ git init chapter7\nInitialized empty Git repository in /Users/JohnDoe/repos/chapter7/.git/\n$ cd chapter7\n```", "```\n$ ls .git/hooks/\napplypatch-msg.sample  pre-applypatch.sample \npre-rebase.sample      commit-msg.sample\npre-commit.sample      prepare-commit-msg.sample\npost-update.sample     pre-push.sample \nupdate.sample\n```", "```\n$ cd .git/hooks/\n$ mv prepare-commit-msg.sample prepare-commit-msg\n$ cd -\n```", "```\n#!/bin/bash \necho \"I refuse to commit\"\nexit 1\n```", "```\n$ git commit --allow-empty\nI refuse to commit\n```", "```\n$ git log -1\nfatal: your current branch 'master' does not have any commits yet\n```", "```\n#!/bin/bash\nif [ \"$2\" == \"commit\" ]; then \n  echo \"Not allowed to amend\"\n  exit 1\nfi\n```", "```\n$ echo \"alot of fish\" > fishtank.txt\n$ git add fishtank.txt\n$ git commit -m \"All my fishes are belong to us\"\n[master (root-commit) f605886] All my fishes are belong to us\n1 file changed, 1 insertion(+)\ncreate mode 100644 fishtank.txt\n```", "```\n$ git commit --amend\nNot allowed to amend\n```", "```\n#!/bin/bash\nif [ \"$2\" == \"commit\" ]; then \n  echo \"Not allowed to amend\"\n  exit 1\nfi\nMESSAGE=$(curl -s http://whatthecommit.com/index.txt)\necho \"$MESSAGE\" > $1\n```", "```\n$ echo \"gravel, plants, and food\" >>fishtank.txt\n$ git add fishtank.txt\n$ git commit\n```", "```\n$ git log -1\ncommit c087f75665bf516af2fe30ef7d8ed1b775bcb97d\nAuthor: John Doe <john.doe@example.com>\nDate:   Wed Mar 5 21:12:13 2014 +0100\n\n   640K ought to be enough for anybody\n```", "```\n# You have the following artifacts assigned\n# Remove the # to add the artifact ID to the commit message\n\n#[artf23456] Error 02 when using update handler on wlan\n#[artf43567] Enable Unicode characters for usernames\n#[artf23451] Use stars instead of & when keying pword\n```", "```\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```", "```\n$ echo \"saltwater\" >> fishtank.txt\n```", "```\n$ git status --porcelain\nM fishtank.txt\n```", "```\n$ git add fishtank.txt\n```", "```\n$ git status --porcelain\nM  fishtank.txt\n```", "```\n$ echo \"sharks and oysters\" >> fishtank.txt\n$ git status --porcelain\nMM fishtank.txt\n```", "```\nfor file in $(git status --porcelain)\ndo\n if [ ${file:1:1} ]; then \n    DIRTY=1\n  fi\n  done\n  if [ \"${DIRTY}\" ]; then\n    # -i '' is not needed on Linux \n    sed -i '' \"s/# Please/You have a dirty workarea are you sure you wish to commit ?&/\" $1\n  fi\n```", "```\n$ git commit\n```", "```\nsomebody keeps erasing my changes.\nYou have a dirty workarea are you sure you wish to commit ?\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n#       modified:   fishtank.txt\n# \n# Changes not staged for commit:\n#       modified:   fishtank.txt\n#\n```", "```\n$ git log -1\ncommit 70cad5f7a2c3f6a8a4781da9c7bb21b87886b462\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 6 08:25:21 2014 +0100\n\n    somebody keeps erasing my changes.\n    You have a dirty workarea are you sure you wish to commit ?\n```", "```\n$ git reset --hard HEAD\nHEAD is now at 70cad5f somebody keeps erasing my changes.\n```", "```\n$ git checkout -b commit-msg-example\nSwitched to a new branch 'commit-msg-example'\n$ mv .git/hooks/prepare-commit-msg .git/hooks/prepare-commit-msg.example\n```", "```\n$ cp .git/hooks/commit-msg.sample .git/hooks/commit-msg\n```", "```\n#!/bin/bash\necho \"you are not allowed to commit\"\nexit 1\n```", "```\n$ echo \"Frogs, scallops, and coco shell\" >> fishtank.txt\n$ git add fishtank.txt\n$ git commit\n```", "```\nyou are not allowed to commit\n$ git log -1\ncommit 70cad5f7a2c3f6a8a4781da9c7bb21b87886b462\n```", "```\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 6 08:25:21 2014 +0100\n\n    somebody keeps erasing my changes.\nYou have a dirty workarea are you sure you wish to commit ?\n```", "```\n#!/bin/bash\nJIRA_ID=$(cat $1 | grep jenkins | sed 's/jenkins //g')\nISSUE_INFO=$(curl -g \"https://issues.jenkins-ci.org/browse/JENKINS-${JIRA_ID}\")\nif [ -z \"${ISSUE_INFO}\" ]; then \n  echo \"Jenkins issue ${JIRA_ID} does not exist\"\n  echo \"Please try again\"\n  exit 1\nelse\n  TITLE=$(curl -g \"https://issues.jenkins-ci.org/browse/JENKINS-$JIRA_ID}\" | grep -E \"<title>.*</title>\")\n  echo \"Jenkins issue ${JIRA_ID}\"\n  echo \"${TITLE}\"\n  exit 0\nfi\n```", "```\n$ echo \"more water\" >> fishtank.txt\n$ git add fishtank.txt\n$ git commit\n```", "```\nFeature: Cascading...\n\njenkins 384895\n```", "```\nJenkins issue 384895 does not exist\nPlease try again\n```", "```\n$ git status\nOn branch commit-msg-example\nChanges to be committed:\n(use \"git reset HEAD <file>...\" to unstage)\n\n  modified:   fishtank.txt\n```", "```\n$ git commit\n```", "```\nFeature: Cascading...\n\njenkins 51444\n```", "```\n<title>[#JENKINS-51444] Maven Parser creates errors during affectedFilesResolving - Jenkins JIRA</title>\n[commit-msg-example 3d39ca3] Feature: Cascading...\n1 file changed, 2 insertions(+)\n```", "```\nTITLE=$(curl https://issues.jenkins-ci.org/browse/JENKINS-${JIRA_ID} | grep -E \"<title>.*</title>\")\nTITLE=$(echo ${TITLE} | sed 's/^<title>//' | sed 's/<\\/title>$//')\necho \"${TITLE}\" >> $1\necho \"Jenkins issue ${JIRA_ID}\"\necho \"${TITLE}\"\nexit 0\n```", "```\n$ echo \"Shrimps and mosquitos\" >> fishtank.txt\n$ git add fishtank.txt\n$ git commit\nAfter saving the commit message editor you will get an output similar like this. \nJenkins issue 51444\n[JENKINS-51444] Maven Parser creates errors during affectedFilesResolving - Jenkins JIRA\n[commit-msg-example 6fa2cb4] Feature: Cascading...\n1 file changed, 1 insertion(+)\n```", "```\n$ git log -1\ncommit 6fa2cb47989e12b05cd2689aa92244cb244426fc\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 6 09:46:18 2014 +0100\n\n    Feature: Cascading...\n\n    jenkins 51444\n    [#JENKINS-51444] Maven Parser creates errors during affectedFilesResolving - Jenkins JIRA\n```", "```\n$ git clone https://git.eclipse.org/r/jgit/jgit chapter7.1\nCloning into 'chapter7.1'...\n  remote: Counting objects: 2429, done\n  remote: Finding sources: 100% (534/534)\n  remote: Total 45639 (delta 145), reused 45578 (delta 145)\n  Receiving objects: 100% (45639/45639), 10.44 MiB | 2.07 MiB/s, done.\n  Resolving deltas: 100% (24528/24528), done.\n  Checking connectivity... done.\n  Checking out files: 100% (1576/1576), done.\n```", "```\n$ git clone --branch master ./chapter7.1/ chapter7.2\nCloning into ' chapter7.2'...\ndone.\nChecking out files: 100% (1576/1576), done.\n$ cd chapter7.2 $ git branch\n* master \n```", "```\n$ git checkout -b prepushHook  --track origin/master\nBranch prepushHook set up to track remote branch master from origin.\nSwitched to a new branch 'prepushHook'\n```", "```\n$ git reset --hard 2e0d178\nHEAD is now at 2e0d178 Add recursive variant of Config.getNames() methods\n```", "```\n$ sed -i '' 's/2.9.1/3.0.0/g' pom.xml\n$ git add pom.xml\n$ git commit -m \"Please nopush\"\n[prepushHook 69d571e] Please nopush\n1 file changed, 1 insertion(+), 1 deletion(-)\n```", "```\n$ git log -1\ncommit 1269d14fe0c32971ea33c95126a69ba6c0d52bbf\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 6 23:07:54 2014 +0100\n\n   Please nopush\n```", "```\n$ cp .git/hooks/pre-push.sample .git/hooks/pre-push\n```", "```\n#!/bin/bash\necho \"You are not allowed to push\"\nexit 1\n```", "```\n$ git push origin HEAD:refs/heads/master\nYou are not allowed to push\nerror: failed to push some refs to '../chapter7.1/'\n```", "```\n$ git log --grep \"nopush\"\ncommit 51201284a618c2def690c9358a07c1c27bba22d5\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 6 23:07:54 2014 +0100\n\n    Please nopush\n```", "```\n#!/bin/bash\nCOMMITS=$(git log --grep \"nopush\")\nif [ \"$COMMITS\" ]; then \n  echo \"You have commit(s) with nopush message\"\n  echo \"aborting push\"\n  exit 1\nfi\n```", "```\n$ git push origin HEAD:refs/heads/master\nYou have commit(s) with nopush message\naborting push\nerror: failed to push some refs to '/Users/JohnDoe/repos/./chapter7.1/'\n```", "```\n#!/bin/bash\nCOMMITS=$(git log --grep \"nopush\" --format=format:%H)\nif [ \"$COMMITS\" ]; then\n  exitmaybe=1\nfi\nif [ $exitmaybe -eq 1 ]; then\nwhile true\ndo\n  clear\nfor commit in $COMMITS\ndo\n  echo \"$commit has no push in the message\"\ndone\n   echo \"Are you sure you want to push the commit(s) \"\n    read -r REPLY <&1\n    case $REPLY in\n    [Yy]* ) break;;\n    [Nn]* ) exit 1;;\n  * ) echo \"Please answer yes or no.\";;\nesac\ndone\nfi\n```", "```\n$ git push origin HEAD:refs/heads/master\nCommit 70fea355bac0c65fd51f4874d75e65b4a29ad763 has nopush in message\nAre you sure you want to push the commit(s)\n```", "```\nerror: failed to push some refs to '/Users/JohnDoe/repos/./chapter7.1/'\n```", "```\n$ git push origin HEAD:refs/heads/master\n054c5f78fdc82141e9d73e6b6955c38ff79c8b2e has no push in the message\nAre you sure you want to push the commit(s)\ny\nTo /Users/JohnDoe/repos/./chapter7.1/\n! [rejected]        HEAD -> master (non-fast-forward)\nerror: failed to push some refs to 'c:/Users/Rasmus/repos/./chapter7.1/'\nhint: Updates were rejected because a pushed branch tip is behind its remote\nhint: counterpart. Check out this branch and integrate the remote changes\nhint: (e.g. 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```", "```\n$ git checkout -b gitAlias --track origin/stable-3.2\nBranch gitAlias set up to track remote branch stable-3.2 from origin.\nSwitched to a new branch 'gitAlias'\n```", "```\n$ git config alias.amm 'commit --amend'\n```", "```\n$ git amm\nPrepare post 3.2.0 builds\n\nChange-Id: Ie2bfdee0c492e3d61d92acb04c5bef641f5f132f\nSigned-off-by: Matthias Sohn matthias.sohn@sap.com\n```", "```\n$ git config alias.lline 'log --oneline -10'\n```", "```\n$ git lline\n314a19a Prepare post 3.2.0 builds\n699900c JGit v3.2.0.201312181205-r\n0ff691c Revert \"Fix for core.autocrlf=input resulting in mo\n1def0a1 Fix for core.autocrlf=input resulting in modified f\n0ce61ca Canonicalize worktree path in BaseRepositoryBuilder\nbe7942f Add missing @since tags for new public methods ig\nea04d23 Don't use API exception in RebaseTodoLine\n3a063a0 Merge \"Fix aborting rebase with detached head\" into \ne90438c Fix aborting rebase with detached head\n2e0d178 Add recursive variant of Config.getNames() methods\n```", "```\n$ git config alias.co checkout\n```", "```\n$ git co master\nSwitched to branch 'master'\nYour branch is up-to-date with 'origin/master'.\n$ git co gitAlias\nSwitched to branch 'gitAlias'\nYour branch and 'origin/stable-3.2' have diverged,\nand have 1 and 1 different commit each, respectively.\n(use \"git pull\" to merge the remote branch into yours)\n```", "```\n$ git config alias.ca 'commit -a -m \"Quick commit\"'\n```", "```\n$ echo \"Sharks\" > aquarium\n$ echo \"New HEADERTEXT\" > pom.xml\n```", "```\nChanges not staged for commit:\n(use \"git add <file>...\" to update what will be committed)\n(use \"git checkout -- <file>...\" to discard changes in working directory)\n\n modified:   pom.xml\n\n  Untracked files:\n      (use \"git add <file>...\" to include in what will be committed)\n\n      aquarium\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```", "```\n$ git ca\n[gitAlias ef9739d] Quick commit\n1 file changed, 1 insertion(+), 606 deletions(-)\nrewrite pom.xml (100%)\n```", "```\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n  aquarium\n\n  nothing added to commit but untracked files present (use \"git add\" to track)\n```", "```\n$ git log -1\ncommit ef9739d0bffe354c75b82f3b785780f5e3832776\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 13 00:01:49 2014 +0100\n\n    Quick commit\n```", "```\n$ git config alias.count '!git log --all --oneline | wc -l'\n```", "```\n$ git count\n    3008\n```", "```\n$ git config alias.wa '!explorer .' # Windows\n$ git config alias.wa '!open .' # MacOS\n$ git config alias.wa '!xdg-open .' # Linux\n```", "```\n$ git config alias.gl1 'log -1 --name-status'\n```", "```\n$ git gl1\ncommit ef9739d0bffe354c75b82f3b785780f5e3832776\nAuthor: John Doe <john.doe@example.com>\nDate:   Thu Mar 13 00:01:49 2014 +0100\n\n Quick commit\n\n    M       pom.xml\n```", "```\n$ git gl1 origin/stable-2.1\ncommit 54c4eb69acf700fdf80304e9d0827d3ea13cbc6d\nAuthor: Matthias Sohn <matthias.sohn@sap.com>\nDate:   Wed Sep 19 09:00:33 2012 +0200\n\n    Prepare for 2.1 maintenance changes\n\n    Change-Id: I436f36a7c6dc86916eb4cde038b27f9fb183465a\n    Signed-off-by: Matthias Sohn <matthias.sohn@sap.com>\n\nM       org.eclipse.jgit.ant.test/META-INF/MANIFEST.MF\nM       org.eclipse.jgit.ant.test/pom.xml\nM       org.eclipse.jgit.ant/META-INF/MANIFEST.MF\nM       org.eclipse.jgit.ant/pom.xml\nM       org.eclipse.jgit.console/META-INF/MANIFEST.MF\nM       org.eclipse.jgit.console/pom.xml\nM       org.eclipse.jgit.http.server/META-INF/MANIFEST.MF\nM       org.eclipse.jgit.http.server/pom.xml ... more output\n```", "```\n$ git config --list  | grep alias\nalias.amm=commit --amend\nalias.lline=log --oneline -10\nalias.co=checkout\nalias.ca=commit -a -m \"Quick commit\"\nalias.count=!git log --all --oneline | wc -l\n```", "```\n#!/bin/bash\nNUMBEROFCOMMITS=$(git log --all --oneline | wc -l)\nwhile :\nWHICHCOMMIT=$(( ( RANDOM % $NUMBEROFCOMMITS ) + 1 ))\nCOMMITSUBJECT=$(git log --oneline --all -${WHICHCOMMIT} | tail -n1)\nCOMMITSUBJECT_=$(echo \"$COMMITSUBJECT\" | cut -b1-60)\ndo\n if [ $RANDOM -lt 14000 ]; then \n echo \"${COMMITSUBJECT_} PASSED\"\n elif [ $RANDOM -gt 15000 ]; then \n echo \"${COMMITSUBJECT_} FAILED\"\n fi \ndone\n```", "```\n$ git likeaboss\n5ec4977 Create a MergeResult for deleted/modified    PASSED\nfcc3349 Add reflog message to TagCommand             PASSED\n591998c Do not allow non-ff-rebase if there are ed   PASSED\n0d7dd66 Make sure not to overwrite untracked notfil  PASSED\n5218f7b Propagate IOException where possible where   FAILED\nf5fe2dc Teach PackWriter how to reuse an existing s  FAILED\n```", "```\n$ git likeboss\ngit: 'likeboss' is not a git command. See 'git --help'.\n\nDid you mean this?\n  likeaboss\n```", "```\n#subject no more than 74 characters please\n\n#BugFix id in the following formats\n#artf [123456]\n#PCP [AN12354365478]\n#Bug: 123456\n#Descriptive text about what you have done \n#Also why you have chosen to do in that way as \n#this will make it easier for reviewers and other\n#developers.\n```", "```\n$ git config commit.template  ~/committemplate\n```", "```\n$ git config --list | grep template\ncommit.template=/Users/JohnDoe/committemplate\n```", "```\n$ git commit --allow-empty\n```", "```\n#subject no more than 74 characters please\n\n#BugFix id in the following formats\n#artf [123456]\n#PCP [AN12354365478]\n#Bug: 123456\n#Descriptive text about what you have done\n#Also why you have chosen to do in that way as\n#this will make it easier for reviewers and other\n#developers.\n```"]