["```\nignore_errors: yes\n```", "```\n- name: Run a command that will return 1\n  ansible.builtin.command: /bin/false\n  ignore_errors: yes\n```", "```\n---\n- hosts: all\n  tasks:\n  - name: Display all variables/facts known for a host\n    ansible.builtin.debug:\n      var: hostvars[inventory_hostname]\n```", "```\n    ---\n    - hosts: localhost\n      tasks:\n      - ansible.builtin.shell: /usr/bin/uptime\n        register: result\n      - ansible.builtin.debug:\n          var: result\n    ```", "```\n    $ ansible-playbook debug.yaml\n    ```", "```\nPLAY [localhost] **********************************************************************************\nTASK [Gathering Facts] ****************************************************************************\nok: [localhost]\nTASK [shell] **************************************************************************************\nchanged: [localhost]\nTASK [debug] **************************************************************************************\nok: [localhost] => {\n    \"result\": {\n        \"changed\": true,\n        \"cmd\": \"/usr/bin/uptime\",\n        \"delta\": \"0:00:00.003461\",\n        \"end\": \"2019-06-16 11:30:51.087322\",\n        \"failed\": false,\n        \"rc\": 0,\n        \"start\": \"2019-06-16 11:30:51.083861\",\n        \"stderr\": \"\",\n        \"stderr_lines\": [],\n        \"stdout\": \" 11:30:51 up 40 min, 1 user, load average: 1.11, 0.73, 0.53\",\n        \"stdout_lines\": [\n            \" 11:30:51 up 40 min, 1 user, load average: 1.11, 0.73, 0.53\"\n        ]\n    }\n}\nPLAY RECAP ****************************************************************************************\nansible.builtin.command module to execute the uptime command and saved its output in the result variable. Then, in the second task, we used the ansible.builtin.debug module to print the content of the result variable.\nThe `ansible.builtin.debug` module is the module that allows you to print the value of a variable (by using the `var` option) or a fixed string (by using the `msg` option) during Ansible’s execution.\nThe `ansible.builtin.debug` module also provides the `verbosity` option. Let’s say you change the playbook in the following way:\n\n```", "```\n\n Now, if you try to execute it in the same way you did previously, you will notice that the debug step won’t be executed and that the following line will appear in the output instead:\n\n```", "```\n\n This is because we set the minimum required `verbosity` to `2`, and by default, Ansible runs with `verbosity` set to `0`.\nTo see the result of using the debug module with this new playbook, we will need to run a slightly different command:\n\n```", "```\n\n By putting two `-v` options in the command line, we will be running Ansible with `verbosity` set to `2`. This will not only affect this specific module but all the modules (or Ansible itself) that are set to behave differently at different debug levels.\nNow that you have learned how to test with a playbook, let’s learn how to use check mode.\nUsing check mode\nAlthough you might be confident in the code you have written, it still pays to test it before running it for real in a production environment. In such cases, it is a good idea to be able to run your code, but with a safety net in place. This is what check mode is for. Follow these steps:\n\n1.  First of all, we need to create an easy playbook to test this feature. Let’s create a playbook called `check-mode.yaml` that contains the following content:\n\n    ```", "```\n\n     2.  Now, we can run the playbook in check mode by specifying the `--check` option in the invocation:\n\n    ```", "```\n\nThis will output everything as if it were really performing the operation, as follows:\n\n```", "```\n$ ansible-playbook check-mode.yaml --diff\n```", "```\nPLAY [localhost] **********************************************************************************\nTASK [Gathering Facts] ****************************************************************************\nok: [localhost]\nTASK [Touch a file] *******************************************************************************\n--- before\n+++ after\n@@ -1,6 +1,6 @@\n {\n- \"atime\": 1560693571.3594637,\n- \"mtime\": 1560693571.3594637,\n+ \"atime\": 1560693571.3620908,\n+ \"mtime\": 1560693571.3620908,\n \"path\": \"/tmp/myfile\",\n- \"state\": \"absent\"\n+ \"state\": \"touch\"\n }\nchanged: [localhost]\nPLAY RECAP ****************************************************************************************\nlocalhost : ok=2 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n```", "```\n    ---\n    - hosts: all\n      tasks:\n      - name: Touch a file\n        ansible.builtin.file:\n          path: /tmp/myfile\n          state: touch\n    ```", "```\n    $ ansible-playbook -i host.example.com, remote.yaml\n    ```", "```\nPLAY [all] ****************************************************************************************\nTASK [Gathering Facts] ****************************************************************************\nfatal: [host.example.com]: UNREACHABLE! => {\"changed\": false, \"msg\": \"Failed to connect to the host via ssh: ssh: Could not resolve hostname host.example.com: Name or service not known\", \"unreachable\": true}\nPLAY RECAP ****************************************************************************************\nhost.example.com : ok=0 changed=0 unreachable=1 failed=0 skipped=0 rescued=0 ignored=0\nThere is also the possibility that we'll receive a different error:\nPLAY [all] ****************************************************************************************\nTASK [Gathering Facts] ****************************************************************************\nfatal: [host.example.com]: UNREACHABLE! => {\"changed\": false, \"msg\": \"Failed to connect to the host via ssh: fale@host.example.com: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).\", \"unreachable\": true}\nPLAY RECAP ****************************************************************************************\nhost.example.com : ok=0 changed=0 unreachable=1 failed=0 skipped=0 rescued=0 ignored=0\n```", "```\n$ ssh host.example.com -vvv\n```", "```\n$ ssh fale@host.example.com -vvv\n```", "```\n    ---\n    - hosts: localhost\n      tasks:\n      - ansible.builtin.debug:\n          var: variable\n    ```", "```\n    $ ansible-playbook printvar.yaml --extra-vars='{\"variable\": \"Hello, World!\"}'\n    ```", "```\nPLAY [localhost] **********************************************************************************\nTASK [Gathering Facts] ****************************************************************************\nok: [localhost]\nTASK [debug] **************************************************************************************\nok: [localhost] => {\n \"variable\": \"Hello, World!\"\n}\nPLAY RECAP ****************************************************************************************\nlocalhost : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n```", "```\n    ---\n    - hosts: all\n      tasks:\n      - ansible.builtin.debug:\n          msg: \"Hello, World!\"\n    ```", "```\n    [hosts]\n    host1.example.com\n    host2.example.com\n    host3.example.com\n    ```", "```\n$ ansible-playbook -i inventory helloworld.yaml\n```", "```\nPLAY [all] ****************************************************************************************\nTASK [Gathering Facts] ****************************************************************************\nok: [host1.example.com]\nok: [host3.example.com]\nok: [host2.example.com]\nTASK [debug] **************************************************************************************\nok: [host1.example.com] => {\n \"msg\": \"Hello, World!\"\n}\nok: [host2.example.com] => {\n \"msg\": \"Hello, World!\"\n}\nok: [host3.example.com] => {\n \"msg\": \"Hello, World!\"\n}\nPLAY RECAP ****************************************************************************************\nhost1.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\nhost2.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\nhost3.example.com, we will need to specify this on the command line, as follows:\n\n```", "```\n\n To prove that this works as expected, we can run it. By doing this, we will receive the following output:\n\n```", "```\n$ ansible-playbook -i inventory helloworld.yaml --limit=host2.example.com,host3.example.com\n$ ansible-playbook -i inventory helloworld.yaml --limit=host[2-3].example.com\n```", "```\n$ ansible-playbook -i inventory helloworld.yaml --limit=host4.example.com\n```", "```\n[WARNING]: Could not match supplied host pattern, ignoring: host4.example.com\nERROR! Specified hosts and/or --limit does not match any hosts\n```", "```\nansible-playbook -i inventory helloworld.yaml --flush-cache\n```", "```\n    ---\n    - hosts: all\n      tasks:\n      - ansible.builtin.debug:\n        msg: \"Hello, World!\"\n    ```", "```\n    $ ansible-playbook syntaxcheck.yaml --syntax-check\n    ```", "```\nERROR! 'msg' is not a valid attribute for a Task\nThe error appears to be in '/home/fale/ansible/Ansible2Cookbook/Ch11/syntaxcheck.yaml': line 4, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\nThe offending line appears to be:\n tasks:\n - debug:\n ^ here\nThis error can be suppressed as a warning using the \"invalid_task_attribute_failed\" configuration\n```", "```\n    ---\n    - hosts: all\n      tasks:\n      - ansible.builtin.debug:\n          msg: \"Hello, World!\"\n    ```", "```\n$ ansible-playbook syntaxcheck-fixed.yaml --syntax-check\nplaybook: syntaxcheck.yaml\n```", "```\n\n```", "```\n\n```"]