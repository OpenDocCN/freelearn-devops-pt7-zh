["```\n- name: \"Deploy and configure the AWS Environment\"\n  hosts: localhost\n  connection: local\n  gather_facts: true\n  vars:\n    state: \"present\"\n  vars_files:\n    - group_vars/common.yml\n  roles:\n    - vpc\n    - subnets\n    - gateway\n    - securitygroups\n    - elb\n    - efs\n    - rds\n    - ec2tmp\n    - endpoints\n```", "```\n- name: \"Install and configure Wordpress\"\n  hosts: vmgroup\n  gather_facts: true\n  become: true\n  become_method: \"ansible.builtin.sudo\"\n  vars_files:\n    - group_vars/common.yml\n    - group_vars/generated_aws_endpoints.yml\n  roles:\n    - stack_install\n    - stack_config\n    - wordpress\n```", "```\n- name: \"Create AMI and update the Auto Scaling Group\"\n  hosts: localhost\n  connection: local\n  gather_facts: true\n  vars:\n    state: \"present\"\n  vars_files:\n    - group_vars/common.yml\n  roles:\n    - ec2ami\n    - autoscaling\n```", "```\ndebug_output: false\n```", "```\napp:\n  name: \"learnansible\"\n  region: \"eu-west-1\"\n  env: \"prod\"\n```", "```\nwp_database:\n  name: \"{{ rds.db_name }}\"\n  username: \"{{ rds.db_username }}\"\n  password: \"{{ rds.db_password }}\"\n```", "```\nwordpress:\n  domain: \"http://{{ aws_endpoints.elb }}/\"\n  title: \"WordPress installed by Ansible on {{ os_family }}\"\n  username: \"ansible\"\n  password: \"{{ rds.db_password }}\"\n  email: \"test@test.com\"\n  plugins:\n    - \"jetpack\"\n    - \"wp-super-cache\"\n    - \"wordpress-seo\"\n    - \"wordfence\"\n    - \"nginx-helper\"\n```", "```\nstack_packages:\n  - \"nginx\"\n  - \"mariadb-client\"\n  - \"php-cli\"\n  - \"php-curl\"\n  - \"php-fpm\"\n  - \"php-gd\"\n  - \"php-intl\"\n  - \"php-mbstring\"\n  - \"php-mysql\"\n  - \"php-soap\"\n  - \"php-xml\"\n  - \"php-xmlrpc\"\n  - \"php-zip\"\n  - \"nfs-common\" # Added for AWS\n  - \"nfs4-acl-tools\" # Added for AWS\n  - \"autofs\"  # Added for AWS\n  - \"rpcbind\"  # Added for AWS\n```", "```\nnfs:\n  mount_point: \"/var/www/\"\n  mount_options: \"nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\"\n  state: \"mounted\"\n  fstype: \"nfs4\"\n```", "```\nvpc_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.vpc }}\"\ninternet_gateway_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.internet_gateway }}\"\ninternet_gateway_route_name: \"{{ internet_gateway_name }}-{{ playbook_dict.route }}\"\nelb_target_group_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.elb_target_group }}\"\nelb_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.elb }}\"\nefs_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.efs }}\"\nrds_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.rds }}\"\nec2_tmp_name: \"{{ app.name }}-tmp-{{ playbook_dict.ec2 }}\"\nami_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.ami }}\"\nec2_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.ec2 }}\"\nlaunch_template_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.lt }}\"\nasg_name: \"{{ app.name }}-{{ app.env }}-{{ playbook_dict.asg }}\"\n```", "```\nplaybook_dict:\n  deployedBy: \"Ansible\"\n  ansible_warning: \"Resource managed by Ansible\"\n  vpc: \"vpc\"\n```", "```\nec2:\n  instance_type: \"t2.micro\"\n  public_ip: true\n  ssh_port: \"22\"\n```", "```\n  asg:\n    min_size: 1\n    max_size: 3\n    desired_capacity: 2\n    health_check_type: \"EC2\"\n    replace_batch_size: 1\n    health_check_period: 300\n    replace_all_instances: true\n    wait_for_instances: true\n    wait_timeout: 900\n    disable_api_termination: true\n```", "```\n  ami:\n    owners: \"099720109477\"\n    filters:\n      name: \"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"\n      virtualization_type: \"hvm\"\n```", "```\n  keypair:\n    name: \"ssh_keypair\"\n    key_material: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n```", "```\nrds:\n  db_username: \"{{ app.name }}\"\n  db_password: \"{{ lookup('password', 'group_vars/generated_rds_passwordfile chars=ascii_letters,digits length=30') }}\"\n  db_name: \"{{ app.name }}\"\n  instance_type: \"db.t2.micro\"\n  engine: \"mysql\"\n  engine_version: \"8.0\"\n  allocated_storage: \"5\"\n```", "```\nefs:\n  wait: \"yes\"\n  wait_time: \"1200\"\n```", "```\nelb_seach_string: \"elb\"\nec2_seach_string: \"ec2\"\nrds_seach_string: \"rds\"\nefs_seach_string: \"efs\"\n```", "```\nregion: \"{{ app.region }}\"\n```", "```\n- name: \"Provision the target group\"\n  community.aws.elb_target_group:\n    name: \"{{ elb_target_group_name }}\"\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    protocol: \"http\"\n    port: \"80\"\n    deregistration_delay_timeout: \"15\"\n    vpc_id: \"{{ vpc_output.vpc.id }}\"\n    modify_targets: \"false\"\n    tags:\n      \"Name\": \"{{ elb_target_group_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"target-group\"\n  register: elb_target_group_output\n```", "```\n- name: \"Debug: ELB Target Group Output\"\n  ansible.builtin.debug:\n    var: \"elb_target_group_output\"\n  when: debug_output\n```", "```\n- name: Extract ELB Group ID\n  ansible.builtin.set_fact:\n    elb_group_id: \"{{ item.group_id }}\"\n  loop: \"{{ security_groups_with_rules_output.results }}\"\n  when: item.group_name is search(elb_seach_string)\n```", "```\n- name: \"Provision an application elastic load balancer\"\n  amazon.aws.elb_application_lb:\n    region: \"{{ region }}\"\n    name: \"{{ elb_name }}\"\n    state: \"{{ state }}\"\n    security_groups: \"{{ elb_group_id }}\"\n    subnets: \"{{ subnet_public_ids }}\"\n    listeners:\n      - Protocol: \"HTTP\"\n        Port: \"80\"\n        DefaultActions:\n          - Type: \"forward\"\n            TargetGroupArn: \"{{ elb_target_group_output.target_group_arn }}\"\n    tags:\n      \"Name\": \"{{ elb_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"load-balancer\"\n  register: loadbalancer_output\n```", "```\n- name: \"Generate the efs targets vars file\"\n  ansible.builtin.template:\n    src: \"targets.j2\"\n    dest: \"group_vars/generated_efs_targets.yml\"\n    mode: \"0644\"\n```", "```\nefs_targets:\n{% for item in subnet_storage_ids %}\n      - subnet_id: \"{{ item }}\"\n        security_groups: [ \"{{ efs_group_id }}\" ]\n{% endfor %}\n```", "```\nefs_targets:\n      - subnet_id: \"subnet01_id\"\n        security_groups: [ \"efs_group_id\" ]\n      - subnet_id: \"subnet02_id\"\n        security_groups: [ \"efs_group_id\" ]\n      - subnet_id: \"subnet03_id\"\n        security_groups: [ \"efs_group_id\" ]\n```", "```\n- name: \"Include the efs targets vars file\"\n  ansible.builtin.include_vars: \"group_vars/generated_efs_targets.yml\"\n```", "```\n- name: \"Create the EFS File System\"\n  community.aws.efs:\n    name: \"{{ efs_name }}\"\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    tags:\n      \"Name\": \"{{ efs_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"efs\"\n    targets: \"{{ efs_targets }}\"\n    wait: \"{{ efs.wait }}\"\n    wait_timeout: \"{{ efs.wait_time }}\"\n  register: efs_output\n```", "```\n- name: \"Add RDS subnet group\"\n  amazon.aws.rds_subnet_group:\n    name: \"{{ rds_name }}\"\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    description: \"{{ dict.ansible_warning }}\"\n    subnets: \"{{ subnet_database_ids }}\"\n    tags:\n      \"Name\": \"{{ rds_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"rds\"\n  register: rds_subnet_group_output\n```", "```\n- name: \"Create the RDS instance\"\n  amazon.aws.rds_instance:\n    id: \"{{ rds_name }}\"\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    db_instance_class: \"{{ rds.instance_type }}\"\n    engine: \"{{ rds.engine }}\"\n    engine_version: \"{{ rds.engine_version }}\"\n    allocated_storage: \"{{ rds.allocated_storage }}\"\n    username: \"{{ rds.db_username }}\"\n    password: \"{{ rds.db_password }}\"\n    db_name: \"{{ rds.db_name }}\"\n    db_subnet_group_name: \"{{ rds_subnet_group_output.subnet_group.name }}\"\n    vpc_security_group_ids: [\"{{ rds_group_id }}\"]\n    tags:\n      \"Name\": \"{{ rds_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"rds\"\n  register: rds_instance_output\n```", "```\n- name: \"Gather information about AMIs with the specified filters\"\n  amazon.aws.ec2_ami_info:\n    region: \"{{ region }}\"\n    owners: \"{{ ec2.ami.owners }}\"\n    filters:\n      name: \"{{ ec2.ami.filters.name }}\"\n      virtualization-type: \"{{ ec2.ami.filters.virtualization_type }}\"\n  register: ubuntu_ami_info\n```", "```\n- name: \"Filter the list of AMIs to find the latest one\"\n  ansible.builtin.set_fact:\n    ami: \"{{ ubuntu_ami_info.images | sort(attribute='creation_date') | last }}\"\n```", "```\n- name: \"Create a SSH Key Pair\"\n  amazon.aws.ec2_key:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    name: \"{{ ec2.keypair.name }}\"\n    key_material: \"{{ ec2.keypair.key_material }}\"\n    tags:\n      \"Name\": \"{{ ec2.keypair.name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"ssh_keypair\"\n  register: keypair_output\n```", "```\n- name: \"Create the temporary ec2 instance\"\n  amazon.aws.ec2_instance:\n    name: \"{{ ec2_tmp_name }}\"\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    vpc_subnet_id: \"{{ subnet_compute_ids[0] }}\"\n    instance_type: \"{{ ec2.instance_type }}\"\n    security_group: \"{{ ec2_group_id }}\"\n    key_name: \"{{ ec2.keypair.name }}\"\n    network:\n      assign_public_ip: \"{{ ec2.public_ip }}\"\n    image_id: \"{{ ami.image_id }}\"\n    tags:\n      Name: \"{{ ec2_tmp_name }}\"\n      Description: \"{{ dict.ansible_warning }}\"\n      Project: \"{{ app.name }}\"\n      Environment: \"{{ app.env }}\"\n      Deployed_by: \"Ansible\"\n      Role: \"tmp\"\n  register: ec2_tmp_instance_output\n```", "```\n- name: \"Get information about the temporary EC2 instance to see if it is running\"\n  amazon.aws.ec2_instance_info:\n    region: \"{{ region }}\"\n    filters:\n      instance-id: \"{{ ec2_tmp_instance_output.instances[0].instance_id }}\"\n  register: ec2_tmp_instance_state\n  delay: 5\n  retries: 50\n  until: ec2_tmp_instance_state.instances[0].state.name == \"running\"\n```", "```\n- name: \"Add the temporary EC2 instance to the vmgroup\"\n  ansible.builtin.add_host:\n    name: \"{{ ec2_tmp_instance_output.instances[0].public_dns_name }}\"\n    ansible_ssh_host: \"{{ ec2_tmp_instance_output.instances[0].public_ip_address }}\"\n    groups: \"vmgroup\"\n```", "```\n- name: \"Wait for the temporary EC2 instance to be ready to accept SSH connections\"\n  ansible.builtin.wait_for:\n    host: \"{{ ec2_tmp_instance_output.instances[0].public_ip_address }}\"\n    port: \"{{ ec2.ssh_port }}\"\n    delay: 10\n    timeout: 300\n```", "```\n- name: \"Generate the aws endpoints file\"\n  ansible.builtin.template:\n    src: \"endponts.j2\"\n    dest: \"group_vars/generated_aws_endpoints.yml\"\n    mode: \"0644\"\n```", "```\naws_endpoints:\n  efs: \"{{ efs_output.efs.filesystem_address.split(':')[0] }}\"\n  rds: \"{{ rds_instance_output.endpoint.address }}\"\n  elb: \"{{ loadbalancer_output.dns_name }}\"\n```", "```\n- name: \"Check that the EFS volume is ready\"\n  ansible.builtin.wait_for:\n    host: \"{{ aws_endpoints.efs }}\"\n    port: \"2049\"\n    delay: 10\n    timeout: 300\n```", "```\n- name: \"ensure rpcbind service is running\"\n  ansible.builtin.service:\n    name: \"rpcbind\"\n    state: \"started\"\n    enabled: true\n```", "```\n- name: \"mount the EFS volume\"\n  ansible.posix.mount:\n    src: \"{{ aws_endpoints.efs }}:/\"\n    path: \"{{ nfs.mount_point }}\"\n    opts: \"{{ nfs.mount_options }}\"\n    state: \"{{ nfs.state }}\"\n    fstype: \"{{ nfs.fstype }}\"\n```", "```\nphp_fpm_path: \"/etc/php/8.1/fpm/pool.d/www.conf\"\nphp_ini_path: \"/etc/php/8.1/fpm/php.ini\"\nphp_service_name: \"php8.1-fpm\"\n```", "```\nphp_fpm_path: \"/etc/php/{{ php_version }}/fpm/pool.d/www.conf\"\nphp_ini_path: \"/etc/php/{{ php_version }}/fpm/php.ini\"\nphp_service_name: \"php{{ php_version }}-fpm\"\n```", "```\n- name: \"Get the PHP version\"\n  ansible.builtin.shell:\n    cmd: \"php -v | head -n 1 | cut -d ' ' -f 2 | cut -c 1-3\"\n  register: php_version_output\n```", "```\n- name: \"Set the PHP version\"\n  ansible.builtin.set_fact:\n    php_version: \"{{ php_version_output.stdout }}\"\n```", "```\n- name: \"Find out some facts about the instance we have been using\"\n  amazon.aws.ec2_instance_info:\n    region: \"{{ region }}\"\n    filters:\n      dns-name: \"{{ groups['vmgroup'] }}\"\n  register: our_instance\n```", "```\n- name: \"Create the AMI\"\n  amazon.aws.ec2_ami:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    instance_id: \"{{ our_instance.instances[0].instance_id }}\"\n    wait: \"yes\"\n    name: \"{{ ami_name }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}\"\n    tags:\n      \"Name\": \"{{ ami_name }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}\"\n      \"buildDate\": \"{{ ansible_date_time.date }} {{ ansible_date_time.time }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"{{ playbook_dict.ami }}\"\n  register: ami_output\n```", "```\n- name: \"Remove any temporary  instances which are running\"\n  amazon.aws.ec2_instance:\n    region: \"{{ region }}\"\n    state: \"absent\"\n    name: \"{{ ec2_tmp_name }}\"\n    filters:\n      instance-state-name: \"running\"\n      \"tag:Name\": \"{{ ec2_tmp_name }}\"\n      \"tag:Role\": \"tmp\"\n      \"tag:Project\": \"{{ app.name }}\"\n```", "```\n- name: \"Wait for 2 minutes before continuing\"\n  ansible.builtin.pause:\n    minutes: 2\n```", "```\n- name: \"Search for all of our AMIs\"\n  amazon.aws.ec2_ami_info:\n    region: \"{{ region }}\"\n    filters:\n      name: \"{{ ami_name }}-*\"\n  register: ami_find\n```", "```\n- name: \"Find the last one we built\"\n  ansible.builtin.set_fact:\n    ami_sort_filter: \"{{ ami_find.images | sort(attribute='creation_date') | last }}\"\n```", "```\n- name: \"Grab AMI ID and name of the most recent result\"\n  ansible.builtin.set_fact:\n    our_ami_id: \"{{ ami_sort_filter.image_id }}\"\n    our_ami_name: \"{{ ami_sort_filter.name }}\"\n```", "```\n- name: \"Create the launch template\"\n  community.aws.ec2_launch_template:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    name: \"{{ launch_template_name }}\"\n    version_description: \"{{ our_ami_name }}\"\n    image_id: \"{{ our_ami_id }}\"\n    security_group_ids: [\"{{ ec2_group_id.security_groups[0].group_id }}\"]\n    instance_type: \"{{ ec2.instance_type }}\"\n    disable_api_termination: \"{{ ec2.asg.disable_api_termination }}\"\n    tags:\n      \"Name\": \"{{ ec2_name }}\"\n      \"projectName\": \"{{ app.name }}\"\n      \"environment\": \"{{ app.env }}\"\n      \"deployedBy\": \"{{ playbook_dict.deployedBy }}\"\n      \"description\": \"{{ playbook_dict.ansible_warning }}\"\n      \"role\": \"launchTemplate\"\n```", "```\n- name: \"Find out the target group ARN\"\n  community.aws.elb_target_group_info:\n    region: \"{{ region }}\"\n    names:\n      - \"{{ elb_target_group_name }}\"\n  register: elb_target_group_output\n```", "```\n- name: \"Get information on the ec2 subnets\"\n  amazon.aws.ec2_vpc_subnet_info:\n    region: \"{{ region }}\"\n    filters:\n      tag:role: \"*{{ subnet_role_compute }}*\"\n  register: ec2_subnet_output\n```", "```\n- name: \"Create a list of subnet IDs\"\n  ansible.builtin.set_fact:\n    subnet_ec2_ids: \"{{ subnet_ec2_ids | default([]) + [item.subnet_id] }}\"\n  loop: \"{{ ec2_subnet_output.subnets }}\"\n```", "```\n- name: \"Create/update the auto-scaling group using the launch template we just created\"\n  amazon.aws.autoscaling_group:\n    region: \"{{ region }}\"\n    state: \"{{ state }}\"\n    name: \"{{ asg_name }}\"\n    target_group_arns: [\"{{ elb_target_group_output.target_groups[0].target_group_arn }}\"]\n    launch_template:\n      launch_template_name: \"{{ launch_template_name }}\"\n    min_size: \"{{ ec2.asg.min_size }}\"\n    max_size: \"{{ ec2.asg.max_size }}\"\n    desired_capacity: \"{{ ec2.asg.desired_capacity }}\"\n    health_check_period: \"{{ ec2.asg.health_check_period }}\"\n    health_check_type: \"{{ ec2.asg.health_check_type }}\"\n    replace_all_instances: \"{{ ec2.asg.replace_all_instances }}\"\n    replace_batch_size: \"{{ ec2.asg.replace_batch_size }}\"\n    vpc_zone_identifier: \"{{ subnet_ec2_ids }}\"\n    wait_for_instances: \"{{ ec2.asg.wait_for_instances }}\"\n    wait_timeout: \"{{ ec2.asg.wait_timeout }}\"\n    tags:\n      - key: \"Name\"\n        value: \"{{ ec2_name }}\"\n        propagate_at_launch: true\n      - key: \"Project\"\n        value: \"{{ app.name }}\"\n        propagate_at_launch: true\n      - key: \"Environment\"\n        value: \"{{ app.env }}\"\n        propagate_at_launch: true\n      - key: \"Deployed_by\"\n        value: \"Ansible\"\n        propagate_at_launch: true\n  register: ec2_asg_output\n```", "```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA\n$ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\nPLAY [Deploy and configure the AWS Environment] ***********\nTASK [Gathering Facts] ************************************\nok: [localhost]\nTASK [roles/vpc : Create VPC] *****************************\nchanged: [localhost]\n```", "```\nTASK [roles/subnets : Get some information on the available zones] *************\nok: [localhost]\n```", "```\nTASK [roles/subnets : Create all subnets] *****************\nincluded: create_subnet.yml for localhost => (item={'name': 'ec2', 'role': 'compute'})\nincluded: create_subnet.yml for localhost => (item={'name': 'rds', 'role': 'database'})\nincluded: create_subnet.yml for localhost => (item={'name': 'efs', 'role': 'storage'})\nincluded: create_subnet.yml for localhost => (item={'name': 'dmz', 'role': 'public'})\n```", "```\nTASK [roles/subnets : Create subnet in the availability zone] *****************************************************\nchanged: [localhost] => (item={'state': 'available', 'opt_in_status': 'opt-in-not-required', 'messages': [], 'region_name': 'eu-west-1', 'zone_name': 'eu-west-1a', 'zone_id': 'euw1-az1', 'group_name': 'eu-west-1', 'network_border_group': 'eu-west-1', 'zone_type': 'availability-zone'})\nchanged: [localhost] => (item={'state': 'available', 'opt_in_status': 'opt-in-not-required', 'messages': [], 'region_name': 'eu-west-1', 'zone_name': 'eu-west-1b', 'zone_id': 'euw1-az2', 'group_name': 'eu-west-1', 'network_border_group': 'eu-west-1', 'zone_type': 'availability-zone'})\nchanged: [localhost] => (item={'state': 'available', 'opt_in_status': 'opt-in-not-required', 'messages': [], 'region_name': 'eu-west-1', 'zone_name': 'eu-west-1c', 'zone_id': 'euw1-az3', 'group_name': 'eu-west-1', 'network_border_group': 'eu-west-1', 'zone_type': 'availability-zone'})\n```", "```\nTASK [roles/gateway : Create an Internet Gateway] *********\nchanged: [localhost]\nTASK [roles/gateway : Create a route table so the internet gateway can be used by the public subnets] ****************\nchanged: [localhost]\n```", "```\nTASK [roles/securitygroups : Find out your current public IP address using https://ipify.org/] **********************\nok: [localhost]\nTASK [roles/securitygroups : Set your public ip as a fact]*\nok: [localhost]\n```", "```\nTASK [roles/securitygroups : Create the base security groups] ***************************************************\nchanged: [localhost] => (item={'name': 'learnansible-elb-security-group', 'description': 'opens port 80 and 443 to the world', 'id_var_name': 'elb_group_id', 'rules': [{'proto': 'tcp', 'from_port': '80', 'to_port': '80', 'cidr_ip': '0.0.0.0/0', 'rule_desc': 'allow all on port 80'}, {'proto': 'tcp', 'from_port': '443', 'to_port': '443', 'cidr_ip': '0.0.0.0/0', 'rule_desc': 'allow all on port 443'}]})\nchanged: [localhost] => (item={'name': 'learnansible-ec2-security-group', 'description': 'opens port 22 to a trusted IP and port 80 to the elb group', 'id_var_name': 'ec2_group_id', 'rules': [{'proto': 'tcp', 'from_port': '22', 'to_port': '22', 'cidr_ip': '86.177.22.88/32', 'rule_desc': 'allow 86.177.22.88/32 access to port 22'}, {'proto': 'tcp', 'from_port': '80', 'to_port': '80', 'group_id': '', 'rule_desc': 'allow access to port 80 from ELB'}]})\nchanged: [localhost] => (item={'name': 'learnansible-rds-security-group', 'description': 'opens port 3306 to the ec2 instances', 'id_var_name': 'rds_group_id', 'rules': [{'proto': 'tcp', 'from_port': '3306', 'to_port': '3306', 'group_id': '', 'rule_desc': 'allow  access to port 3306'}]})\nchanged: [localhost] => (item={'name': 'learnansible-efs-security-group', 'description': 'opens port 2049 to the ec2 instances', 'id_var_name': 'efs_group_id', 'rules': [{'proto': 'tcp', 'from_port': '2049', 'to_port': '2049', 'group_id': '', 'rule_desc': 'allow  access to port 2049'}]})\n```", "```\nTASK [roles/securitygroups : Set the fact for the security group ids] ************************************************\nok: [localhost] => (item={'name': 'learnansible-elb-security-group', 'description': 'opens port 80 and 443 to the world', 'id_var_name': 'elb_group_id', 'rules': [{'proto': 'tcp', 'from_port': '80', 'to_port': '80', 'cidr_ip': '0.0.0.0/0', 'rule_desc': 'allow all on port 80'}, {'proto': 'tcp', 'from_port': '443', 'to_port': '443', 'cidr_ip': '0.0.0.0/0', 'rule_desc': 'allow all on port 443'}]})\nok: [localhost] => (item={'name': 'learnansible-ec2-security-group', 'description': 'opens port 22 to a trusted IP and port 80 to the elb group', 'id_var_name': 'ec2_group_id', 'rules': [{'proto': 'tcp', 'from_port': '22', 'to_port': '22', 'cidr_ip': '86.177.22.88/32', 'rule_desc': 'allow 86.177.22.88/32 access to port 22'}, {'proto': 'tcp', 'from_port': '80', 'to_port': '80', 'group_id': '', 'rule_desc': 'allow access to port 80 from ELB'}]})\nok: [localhost] => (item={'name': 'learnansible-rds-security-group', 'description': 'opens port 3306 to the ec2 instances', 'id_var_name': 'rds_group_id', 'rules': [{'proto': 'tcp', 'from_port': '3306', 'to_port': '3306', 'group_id': '', 'rule_desc': 'allow  access to port 3306'}]})\nok: [localhost] => (item={'name': 'learnansible-efs-security-group', 'description': 'opens port 2049 to the ec2 instances', 'id_var_name': 'efs_group_id', 'rules': [{'proto': 'tcp', 'from_port': '2049', 'to_port': '2049', 'group_id': '', 'rule_desc': 'allow  access to port 2049'}]})\n```", "```\nTASK [roles/securitygroups : Provision security group rules] ****************************************************\nchanged: [localhost] => (item={'name': 'learnansible-elb-security-group', 'description': 'opens port 80 and 443 to the world', 'id_var_name': 'elb_group_id', 'rules': [{'proto': 'tcp', 'from_port': '80', 'to_port': '80', 'cidr_ip': '0.0.0.0/0', 'rule_desc': 'allow all on port 80'}, {'proto': 'tcp', 'from_port': '443', 'to_port': '443', 'cidr_ip': '0.0.0.0/0', 'rule_desc': 'allow all on port 443'}]})\nchanged: [localhost] => (item={'name': 'learnansible-ec2-security-group', 'description': 'opens port 22 to a trusted IP and port 80 to the elb group', 'id_var_name': 'ec2_group_id', 'rules': [{'proto': 'tcp', 'from_port': '22', 'to_port': '22', 'cidr_ip': '86.177.22.88/32', 'rule_desc': 'allow 86.177.22.88/32 access to port 22'}, {'proto': 'tcp', 'from_port': '80', 'to_port': '80', 'group_id': 'sg-04f31e782e30e1f0a', 'rule_desc': 'allow access to port 80 from ELB'}]})\nchanged: [localhost] => (item={'name': 'learnansible-rds-security-group', 'description': 'opens port 3306 to the ec2 instances', 'id_var_name': 'rds_group_id', 'rules': [{'proto': 'tcp', 'from_port': '3306', 'to_port': '3306', 'group_id': 'sg-05bffd3eb96602519', 'rule_desc': 'allow sg-05bffd3eb96602519 access to port 3306'}]})\nchanged: [localhost] => (item={'name': 'learnansible-efs-security-group', 'description': 'opens port 2049 to the ec2 instances', 'id_var_name': 'efs_group_id', 'rules': [{'proto': 'tcp', 'from_port': '2049', 'to_port': '2049', 'group_id': 'sg-05bffd3eb96602519', 'rule_desc': 'allow sg-05bffd3eb96602519 access to port 2049'}]})\n```", "```\nTASK [roles/elb : Provision the target group] *************\nchanged: [localhost]\nTASK [roles/elb : Provision an application elastic load balancer] *************************************************\nchanged: [localhost]\n```", "```\nTASK [roles/efs : Generate the efs targets vars file] *****\nchanged: [localhost]\nTASK [roles/efs : Include the efs targets vars file] ******\nok: [localhost]\nTASK [roles/efs : Create the EFS File System] *************\nchanged: [localhost]\n```", "```\nTASK [roles/rds : Add RDS subnet group] *******************\nchanged: [localhost]\nTASK [roles/rds : Create the RDS instance] ****************\nchanged: [localhost]\n```", "```\nTASK [roles/ec2tmp : Gather information about AMIs with the specified filters] ****************************************\nok: [localhost]\nTASK [roles/ec2tmp : filter the list of AMIs to find the latest one] ***********************************************\nok: [localhost]\n```", "```\nTASK [roles/ec2tmp : Create an SSH Key Pair] **************\nchanged: [localhost]\n```", "```\nTASK [roles/ec2tmp : Create the temporary ec2 instance] ***\nchanged: [localhost]\n```", "```\nTASK [roles/ec2tmp : Get information about the temporary EC2 instance to see if it is running] ***\nFAILED - RETRYING: [localhost]: Get information about the temporary EC2 instance to see if it is running (50 retries left).\n. . . .\nFAILED - RETRYING: [localhost]: Get information about the temporary EC2 instance to see if it is running (46 retries left).\nok: [localhost]\n```", "```\nTASK [roles/ec2tmp : Add the temporary EC2 instance to the vmgroup] **************************************************\nchanged: [localhost]\nTASK [roles/ec2tmp : Wait for the temporary EC2 instance to be ready to accept SSH connections] ***********************\nok: [localhost]\n```", "```\nTASK [roles/endpoints : Generate the aws endpoints file] **\nchanged: [localhost]\n```", "```\nPLAY [Install and configure Wordpress] ********************\nTASK [Gathering Facts] ************************************\nok: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\n```", "```\nTASK [roles/stack_config : Check that the EFS volume is ready] ****************************************************\nok: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\nTASK [roles/stack_config : ensure rpcbind service is running] **************************************************\nok: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\nTASK [roles/stack_config : mount the EFS volume] **********\nchanged: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\n```", "```\nTASK [roles/stack_config : Get the PHP version] ***********\nchanged: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\nTASK [roles/stack_config : Set the PHP version] ***********\nok: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\n```", "```\nRUNNING HANDLER [roles/stack_config : restart nginx] ******\nchanged: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\nRUNNING HANDLER [roles/stack_config : restart php-fpm] ****\nchanged: [ec2-18-203-221-2.eu-west-1.compute.amazonaws.com]\n```", "```\nTASK [roles/ec2ami : find out some facts about the instance we have been using] ***************************************\nok: [localhost]\nTASK [roles/ec2ami : create the AMI] **********************\nchanged: [localhost]\nTASK [roles/ec2ami : remove any temporary instances which are running] **********************************************\nchanged: [localhost]\n```", "```\nTASK [roles/ec2ami : wait for 2 minutes before continuing]\nPausing for 120 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n```", "```\nTASK [roles/autoscaling : Search for all of our AMIs] *****\nok: [localhost]\nTASK [roles/autoscaling : Find the last one we built] *****\nok: [localhost]\nTASK [roles/autoscaling : Grab AMI ID and name of the most recent result] ********************************************\nok: [localhost]\n```", "```\nTASK [roles/autoscaling : Create the launch template] *****\nchanged: [localhost]\n```", "```\nTASK [roles/autoscaling : find out the target group ARN] **\nok: [localhost]\nTASK [roles/autoscaling : get information on the ec2 subnets] **************************************************\nok: [localhost]\n```", "```\nTASK [roles/autoscaling : create a list of subnet IDs] ****\nok: [localhost] => (item={'availability_zone': 'eu-west-1c', 'availability_zone_id': 'euw1-az3', 'available_ip_address_count': 27, 'cidr_block': '10.0.0.64/27', 'default_for_az': False, 'map_public_ip_on_launch': False, 'map_customer_owned_ip_on_launch': False, 'state': 'available', 'subnet_id': 'subnet-091ea1834c5fc8e48', 'vpc_id': 'vpc-008808ff628883751', 'owner_id': '687011238589', 'assign_ipv6_address_on_creation': False, 'ipv6_cidr_block_association_set': [], 'tags': {'role': 'compute', 'deployedBy': 'Ansible', 'Name': 'ec2-subnet-euw1-az3', 'environment': 'prod', 'description': 'Resource managed by Ansible', 'projectName': 'learnansible'}, 'subnet_arn': 'arn:aws:ec2:eu-west-1:687011238589:subnet/subnet-091ea1834c5fc8e48', 'enable_dns64': False, 'ipv6_native': False, 'private_dns_name_options_on_launch': {'hostname_type': 'ip-name', 'enable_resource_name_dns_a_record': False, 'enable_resource_name_dns_aaaa_record': False}, 'id': 'subnet-091ea1834c5fc8e48'})\n```", "```\nTASK [roles/autoscaling : Create/update the auto-scaling group using the launch template we just created] **********\nchanged: [localhost]\n```", "```\nPLAY RECAP ************************************************\nec2-18-203-221-2.eu-west-1.compute.amazonaws.com :\nok=37   changed=28   unreachable=0    failed=0    skipped=1    rescued=0    ignored=2\nlocalhost :\nok=56   changed=23   unreachable=0    failed=0    skipped=30   rescued=0    ignored=0\n```", "```\n$ ansible-playbook -i hosts destroy.yml\n```", "```\nPLAY [Destroy the AWS Environment created by the site.yml playbook] ************\nTASK [Gathering Facts] ************************************\nok: [localhost]\nTASK [Delete the Auto Scaling Group] **********************\nchanged: [localhost]\nTASK [Delete the Launch Template] *************************\nchanged: [localhost]\n```", "```\nTASK [Get information about the AMIs] *********************\nok: [localhost]\nTASK [Delete the AMI(s)] **********************************\nchanged: [localhost] => (item={'architecture': 'x86_64', 'creation_date': '2024-01-12T09:44:07.000Z', 'image_id': 'ami-0ddfeb5a1fb64c23a', 'image_location': '687011238589/learnansible-prod-ami-2024-01-12_0944', 'image_type': 'machine', 'public': False, 'tags': {'Name': 'learnansible-prod-ami-2024-01-12_0944', 'deployedBy': 'Ansible', 'environment': 'prod', 'buildDate': '2024-01-12 09:44:06', 'description': 'Resource managed by Ansible', 'projectName': 'learnansible', 'role': 'ami'}, 'virtualization_type': 'hvm', 'source_instance_id': 'i-050689909fa289998'})\n```", "```\nTASK [Create a SSH Key Pair] ******************************\nchanged: [localhost]\nTASK [Delete the group_vars/generated_aws_endpoints.yml file] *****************************************************\nchanged: [localhost]\nTASK [Delete the RDS database] ****************************\nchanged: [localhost]\nTASK [Delete RDS subnet group] ****************************\nchanged: [localhost]\nTASK [Delete the group_vars/generated_rds_passwordfile file] *****************************************************\nchanged: [localhost]\nTASK [Delete the EFS File System] *************************\nchanged: [localhost]\nTASK [Delete the group_vars/generated_efs_targets.yml file]\nchanged: [localhost]\nTASK [Delete the application elastic load balancer]********\nchanged: [localhost]\nTASK [Delete the target group] *********************************************************************\nchanged: [localhost]\n```", "```\nTASK [Create a reversed list of the security group names] *\nok: [localhost]\nTASK [Delete the security groups] *************************\nchanged: [localhost] => (item=learnansible-efs-security-group)\nchanged: [localhost] => (item=learnansible-rds-security-group)\nchanged: [localhost] => (item=learnansible-ec2-security-group)\nFAILED - RETRYING: [localhost]: Delete the security groups (50 retries left).\n. . . . .\nFAILED - RETRYING: [localhost]: Delete the security groups (46 retries left).\nchanged: [localhost] => (item=learnansible-elb-security-group)\n```", "```\nTASK [Get information about the VPC] **********************\nok: [localhost]\nTASK [Get information about the Route Table] **************\nok: [localhost]\nTASK [Delete the Route Table] *****************************\nchanged: [localhost] => (item={'associations': [{'main': False, 'route_table_association_id': 'rtbassoc-0738bb9e5aaf44848', 'route_table_id': 'rtb-04bc7177949ad2c92', 'subnet_id': 'subnet-07c28d376283741f6', 'association_state'\nTASK [Delete the Internet Gateway]*************************\nchanged: [localhost]\n```", "```\nTASK [Get information on the subnets] **************************************************************\nok: [localhost]\nTASK [Delete the subnets] *********************************\nchanged: [localhost] => (item={'availability_zone': 'eu-west-1c', 'availability_zone_id': 'euw1-az3', 'available_ip_address_count': 27, 'cidr_block': '10.0.0.64/27', 'default_for_az': False, 'map_public_ip_on_launch': False, 'map_customer_owned_ip_on_launch': False, 'state': 'available', 'subnet_id': 'subnet-091ea1834c5fc8e48', 'vpc_id': 'vpc-008808ff628883751', 'id': 'subnet-091ea1834c5fc8e48'})\n. . . . .\nchanged: [localhost] => (item={'availability_zone': 'eu-west-1b', 'availability_zone_id': 'euw1-az2', 'available_ip_address_count': 27, 'cidr_block': '10.0.0.128/27', 'default_for_az': False, 'map_public_ip_on_launch': False, 'map_customer_owned_ip_on_launch': False, 'state': 'available', 'subnet_id': 'subnet-0fd4610392872d442', 'vpc_id': 'vpc-008808ff628883751', 'id': 'subnet-0fd4610392872d442'})\n```", "```\nTASK [Delete the VPC] *************************************\nchanged: [localhost]\nPLAY RECAP ************************************************\nlocalhost :\nok=23   changed=17   unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```"]