- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Fixing Mistakes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修正错误
- en: The most common reaction to making a mistake in Git is to panic. What if you
    have just lost all your work? Worse, what if you have broken the master branch?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中犯错最常见的反应是恐慌。如果你刚刚丢失了所有的工作怎么办？更糟的是，如果你搞砸了主分支呢？
- en: This chapter will review a number of common Git mistakes and how to fix them.
    The first rule, of course, is stay calm, or as Douglas Adams said, *Don't Panic!*
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将回顾一些常见的 Git 错误以及如何修复它们。当然，第一条规则是保持冷静，或者像道格拉斯·亚当斯所说的那样，*不要恐慌*！
- en: 'The problems we''ll review are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回顾一些常见的 Git 错误以及如何修复它们的问题：
- en: You wrote the wrong message in a commit.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在提交中写了错误的消息。
- en: You forgot to add changed files from your last commit.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您忘记添加上次提交的更改文件。
- en: Problems with the order of commits or their messages.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交的顺序或它们的消息有问题。
- en: You need to undo changes made in a commit.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要撤消提交中所做的更改。
- en: You misnamed your branch.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您错误命名了分支。
- en: You committed to the wrong branch.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您提交到错误的分支。
- en: You trashed a file in a previous commit.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您在之前的提交中损坏了一个文件。
- en: You messed up the remote by pushing a broken branch.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您通过推送一个损坏的分支搞乱了远程。
- en: 'To see the answers at work, let''s mirror `Panofy` into `ErrorsDemo`. Here
    are the steps we''ll be doing:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看答案的运行情况，让我们将 `Panofy` 镜像到 `ErrorsDemo`。以下是我们将要执行的步骤：
- en: On the remote, create `ErrorsDemo` and get its URL.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在远程上，创建 `ErrorsDemo` 并获取其 URL。
- en: Go to the local branch you want to mirror (in our case, `Panofy`).
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您想要镜像的本地分支（在我们的例子中为 `Panofy`）。
- en: Push that up to the server with the mirror command, using `ErrorsDemo`'s URL.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ErrorsDemo`的URL，将其推送到服务器上的镜像命令。
- en: Clone the new branch (be sure to clone it in the directory you want it).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆新分支（确保在您想要的目录中克隆它）。
- en: Change directory to the new (cloned) directory (`ErrorsDemo`).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到新的（克隆的）目录（`ErrorsDemo`）。
- en: You can see this walked through in *Chapter 10*, *Important Git Commands & Metadata*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 *第 10 章*，*重要的 Git 命令和元数据* 中看到这一点的具体步骤。
- en: You wrote the wrong message in the last commit
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您在上次提交中写了错误的消息
- en: 'Let''s start with the log so that we can see the change:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从日志开始，这样我们就可以看到更改：
- en: '![](img/B17441_12_01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_01.png)'
- en: 'Figure 12.1: Log of initial state'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：初始状态的日志
- en: 'This one is easy; all you need do is enter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易；您只需输入：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Your editor will open and allow you to change the message. To change the wording
    of the message just change the "pick" to "reword."
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您的编辑器将打开并允许您更改消息。要更改消息的措辞，只需将 "pick" 更改为 "reword"。
- en: 'After you save your file, the message of the last commit will be changed as
    shown in *Figure 12.2*:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，最后一个提交的消息将如 *图 12.2* 所示更改：
- en: '![](img/B17441_12_02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_02.png)'
- en: 'Figure 12.2: Log after amend (changed message in the last commit)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：修订后的日志（在最后一次提交中更改了消息）
- en: You forgot to add changed files from your last commit
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您忘记添加上次提交的更改文件
- en: 'You solve this problem in the exact same way you solved the problem of fixing
    the message in your last commit: with `--amend`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过与上次提交修复消息的方式解决此问题：使用 `--amend`。
- en: 'First, stage your new or changed files. Then enter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将新的或更改的文件暂存。然后输入：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you don''t want to edit the message when you add the files, enter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想在添加文件时编辑消息，请输入：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Problems with the order of commits or their messages
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交的顺序或它们的消息有问题
- en: If the problem is not with the last commit (in which case you'd use `--amend`),
    it's time to break out interactive rebase as shown in *Chapter 8*, *Interactive
    Rebasing*. If you haven't pushed yet, Interactive Rebase will let you do all this
    and more.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题不是在最后一次提交中（在这种情况下，您将使用 `--amend`），那么现在是时候使用交互式 rebase 了，如 *第 8 章*，*交互式 Rebase*
    所示。如果您尚未推送，交互式 rebase 将让您执行所有这些操作及更多操作。
- en: You need to undo changes made in a commit
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要撤消提交中所做的更改。
- en: 'All you need to do here is to call the log, get the ObjectID of the commit
    you want to undo and call:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里您所需做的就是调用日志，获取您想要撤消的提交的 ObjectID，并调用：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s go back to the log:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到日志：
- en: '![](img/B17441_12_03.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_03.png)'
- en: 'Figure 12.3: Log, starting point'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：日志，起始点
- en: 'Now let''s revert the commit that added the hello message:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回滚添加 hello 消息的提交：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Because I reverted a change in the middle of the branch, it''s no surprise
    that I run into a merge conflict:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我在分支中间撤销了一个更改，所以遇到合并冲突不足为奇：
- en: '![](img/B17441_12_04.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_04.png)'
- en: 'Figure 12.4: Merge conflict'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4：合并冲突
- en: 'To solve this I will call `git mergetool`, invoking the tool I set up in *Chapter
    4*, *Merging, Pull Requests, and Handling Merge Conflicts*. Kdiff3 is smart enough
    to fix all the conflicts without my help:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我将调用`git mergetool`，启动我在*第4章*，*合并、拉取请求与解决合并冲突*中设置的工具。Kdiff3足够智能，能够在没有我的帮助下解决所有冲突：
- en: '![](img/B17441_12_05.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_05.png)'
- en: 'Figure 12.5: Kdiff3 fixes the conflicts for me'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：Kdiff3为我解决了冲突
- en: 'Sure enough, when we open `Program.cs` the Hello World is gone:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 果然，当我们打开`Program.cs`时，Hello World不见了：
- en: '![](img/B17441_12_06.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_06.png)'
- en: 'Figure 12.6: Program.cs after revert'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：Program.cs在回退后的样子
- en: You misnamed your branch
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你给分支命名错误
- en: 'Checkout the branch in question and enter:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 检出相关分支并输入：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s what we get:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们得到的结果：
- en: '![](img/B17441_12_07.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_12_07.png)'
- en: 'Figure 12.7: Renaming branch foo to bar'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7：将分支foo重命名为bar
- en: In *Figure 12.7* you create the branch foo and then check it out. Finally, you
    rename it as shown above and your branch name is changed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图12.7*中，你创建了foo分支并将其检出。最后，你按上面所示重命名它，分支名称就被改变了。
- en: You committed to the wrong branch
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你提交到了错误的分支
- en: 'The way this plays out for me (again and again!) is that I forget to create
    a new branch and so make my changes on the develop branch or to main. To fix this,
    enter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况对我来说（一次又一次！）通常是我忘记创建新分支，所以在开发分支或主分支上进行更改。要解决这个问题，请输入：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You are creating the new branch, then removing the check-in from main (`HEAD~`)
    but leaving the files in the new branch.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在创建一个新的分支，然后从main（`HEAD~`）中移除该提交，但将文件保留在新分支中。
- en: You trashed a file in a previous commit
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你在之前的提交中丢失了一个文件
- en: 'You ruin a file but you only find out about it after a number of other commits.
    Ouch. Use `git log` to find the ObjectID for a commit from *before* the problem
    commit. Now we want to get only that file from the commit. For this, we enter:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你破坏了一个文件，但在之后的几个提交中才发现，真痛。使用`git log`查找问题提交之前的提交的ObjectID。现在，我们只想获取那个提交中的文件。为此，我们输入：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (The path to the file is relative to the root of the project.)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: （文件的路径是相对于项目根目录的。）
- en: You now have the earlier version in the staging area. You can "unstage" it and
    edit it from the work area.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在暂存区有了较早的版本。你可以将其“取消暂存”并从工作区进行编辑。
- en: 'An alternative to using the ObjectID is to count back from `HEAD`, such as:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ObjectID的替代方法是从`HEAD`向后计数，例如：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This just says "go back 4 commits and get the file from there." The two approaches
    work equally well.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是说“回退到4个提交之前并从那里获取文件。”这两种方法同样有效。
- en: You messed up the remote by pushing a broken branch
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你通过推送一个损坏的分支弄坏了远程仓库
- en: If (and when) you break the Master branch by pushing an incomplete and broken
    local copy, dry your tears, take heart! This can be fixed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（以及当）你通过推送一个不完整且损坏的本地副本破坏了主分支，别难过，振作起来！这是可以修复的。
- en: Note, this should not be possible. If you are using Azure DevOps (or something
    similar) your pipeline should not accept any merge that doesn't compile (and arguably
    pass a set of unit tests). But I digress…
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这不应该是可能的。如果你正在使用Azure DevOps（或类似工具），你的流水线不应该接受任何无法编译的合并（可以说，应该通过一组单元测试）。不过，我有点跑题了……
- en: 'The first command you want is:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要的第一个命令是：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That resets your local copy of `<Yourbranch>` to the last synchronized version
    of `<remoteRepo>`. Thus, if your branch is Feature1 and it is on origin, you would
    write:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将你本地的`<Yourbranch>`重置为`<remoteRepo>`的最后同步版本。因此，如果你的分支是Feature1并且它在origin上，你需要输入：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now you want to restore the remote repo to its state before you broke it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你想将远程仓库恢复到你破坏它之前的状态：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Quiz
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验
- en: The challenge for this chapter consists of a quiz. The answers are all at the
    end of the quiz.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的挑战是一个测验。答案在测验的最后。
- en: What do you do if you left out a changed file in the last commit?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在上次提交中漏掉了一个更改的文件，该怎么办？
- en: What do you do if you committed to the wrong branch?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你提交到了错误的分支，该怎么办？
- en: What do you do if you corrupted a file in a previous commit?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在之前的提交中损坏了一个文件，该怎么办？
- en: What do you do if you need to undo changes made in a commit?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要撤销某次提交中的更改，该怎么办？
- en: What do you do if you trash Master by pushing a broken branch?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你通过推送一个损坏的分支破坏了主分支，该怎么办？
- en: Answers
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: What do you do if you left out a changed file in the last commit?
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你在上次提交中漏掉了一个更改的文件，该怎么办？
- en: 'You solve this with the same command you use to modify the message in the last
    commit, using `--amend`, but you need to indicate that you do not want to edit
    the message (make sure your files are staged):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用与修改上次提交消息相同的命令，使用`--amend`，但你需要表明你不想编辑消息（确保你的文件已暂存）：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What do you do if you committed to the wrong branch?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你提交到了错误的分支，该怎么办？
- en: 'Checkout or create the branch you want to have committed to and then use reset
    to remove the change from the remote branch, but leave your files in the index
    (staging area) to be committed to the new branch:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 检出或创建你想要提交的分支，然后使用 reset 命令将变更从远程分支中移除，但保留文件在暂存区，以便提交到新的分支：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What do you do if you corrupted a file in a previous commit?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你在之前的提交中破坏了某个文件，该怎么办？
- en: 'First, use `git log` to find a commit before the corruption. Get the ObjectID
    of that commit. Next, get the problem file (and only that file) from the good
    commit:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 `git log` 查找损坏之前的提交，获取该提交的 ObjectID。接下来，从正常的提交中获取问题文件（仅获取该文件）：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Remember: The path to the file is relative to the root of the project.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住：文件的路径是相对于项目根目录的。
- en: You now have the healthy version of the file in the staging area. If that file
    needs editing you can unstage it, but the more likely case is that you can use
    this older version as is. In that case, you can just commit it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经在暂存区得到了该文件的健康版本。如果该文件需要编辑，你可以将其取消暂存，但更常见的情况是，你可以直接使用这个较旧的版本。在这种情况下，你可以直接提交。
- en: What do you do if you need to undo changes made in a commit?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你需要撤销某个提交中的变更，该怎么办？
- en: 'In this case, open the log and get the ObjectID of the commit you want to undo.
    You can now call `revert` on that ObjectID:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，打开日志，获取你想撤销的提交的 ObjectID。现在，你可以在该 ObjectID 上调用 `revert` 命令：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What do you do if you trashed Master by pushing a broken branch?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你通过推送一个损坏的分支把 Master 分支弄坏了，该怎么办？
- en: 'If your DevOps system allowed you to push a broken branch to Master, fix this
    immediately. In fact, if you can, tell the rest of your team not to commit to
    Master until you fix it. After they stop yelling at you, do this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 DevOps 系统允许你将一个损坏的分支推送到 Master，立即修复这个问题。事实上，如果可能的话，告诉你的团队在你修复之前不要提交到 Master。等他们不再对你大喊大叫后，按照以下步骤操作：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'That resets your local copy of `<Yourbranch>` to the last synchronized version
    of `<remoteRepo>`. Thus, if your branch is `myFeature` and it is on origin, you
    would write:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把你本地的 `<Yourbranch>` 重置为 `<remoteRepo>` 的最后同步版本。因此，如果你的分支是 `myFeature`，并且它在
    origin 上，你将写：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now you need to restore the remote repo to its state before you broke it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要将远程仓库恢复到破坏之前的状态：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Master should now be fixed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Master 分支应该已经修复。
- en: Great job with the quiz! Keep this chapter around for the inevitable day you
    will need it.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好！将这一章留着，以备未来你需要时用到。
