["```\n- hosts: all\n  tasks:\n    - name: Install mlocate\n      yum: name=mlocate state=installed\n\n    - name: Run updatedb\n      command: /usr/bin/updatedb\n      async: 300\n      poll: 10\n```", "```\ntasks:\n- name: Secure config files file:\n    path: \"/etc/{{ item }}\"\n    mode: 0600\n    owner: root\n    group: root with_items: - my.cnf - shadow - fstab\n```", "```\ntasks: - name: Make key directory file:\n    path: /root/.sshkeys\n    ensure: directory\n    mode: 0700\n    owner: root\n    group: root - name: Upload public keys copy:\n    src: \"{{ item }}\"\n    dest: /root/.sshkeys\n    mode: 0600\n    owner: root\n    group: root with_fileglob: - keys/*.pub - name: Assemble keys into authorized_keys file assemble:\n    src: /root/.sshkeys\n    dest: /root/.ssh/authorized_keys\n    mode: 0600\n    owner: root\n    group: root\n```", "```\n---\n- name: Install VIM\n  hosts: all\n  tasks:\n    - name: Install VIM via yum\n      yum:\n        name: vim-enhanced\n        state: installed\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install VIM via apt\n      apt:\n        name: vim\n        state: installed\n      when: ansible_os_family == \"Debian\"\n\n    - name: Unexpected OS family\n      debug:\n        msg: \"OS Family {{ ansible_os_family }} is not supported\"\n        fail: yes\n      when: ansible_os_family != \"RedHat\" and ansible_os_family != \"Debian\"\n```", "```\nname: pause for unexpected conditions\npause: prompt=\"Unexpected OS\"\nwhen: ansible_os_family != \"RedHat\"\n```", "```\n---\n- name: Fetch configuration from all webservers\n  hosts: webservers\n  tasks:\n    - name: Get config\n      get_url:\n        dest: \"configs/{{ ansible_hostname }}\"\n        force: yes\n        url: \"http://{{ ansible_hostname }}/diagnostic/config\"\n      delegate_to: localhost\n```", "```\n--- #1\n- name: Fetch configuration from all webservers     #2\n  hosts: webservers     #3\n  tasks:     #4\n    - name: Get config     #5\n      local_action: get_url dest=configs/{{ ansible_hostname }}.cfg url=http://{{ ansible_hostname }}/diagnostic/config     #6\n```", "```\n---\n- name: Setup DNS Servers\n  hosts: allnameservers\n  tasks:\n    - name: Install BIND\n      yum:\n        name: named\n        state: installed\n\n- name: Setup Slaves\n  hosts: slavenamesservers\n  tasks:\n    - name: Get the masters IP\n      set_fact:\n        dns_master: \"{{ hostvars.ns1.ansible_default_ipv4.address }}\"\n\n    - name: Configure BIND\n      template:\n        dest: /etc/named.conf src: templates/named.conf.j2\n```", "```\n---\n- name: Configure the database\n  hosts: dbservers\n  user: root\n  tasks:\n    - name: Install mysql\n      yum:\n        name: \"{{ item }}\"\n        state: installed\n      with_items:\n      - mysql-server\n      - MySQL-python\n\n    - name: Start mysql\n      service:\n        name: mysqld\n        state: started\n        enabled: true\n\n    - name: Create a user for all app servers\n      with_items: groups.appservers\n      mysql_user:\n        name: kate\n        password: test\n        host: \"{{ hostvars.[item].ansible_eth0.ipv4.address }}\" state: present\n```", "```\n{% for host in groups['all'] %}\n{{ hostvars[host]['ansible_hostname'] }}\n{{ hostvars[host]['ansible_ssh_host_key_rsa_public'] }}\n{% endfor %}\n```", "```\n---\nhosts: all\ntasks:\n- name: Setup known hosts\n  hosts: all\n  tasks:\n    - name: Create known_hosts\n      template:\n        src: templates/known_hosts.j2 dest: /etc/ssh/ssh_known_hosts\n        owner: root\n        group: root mode: 0644\n```", "```\n- name: Setup SSH\n  hosts: sshservers\n  tasks:\n    - name: For secure machines\n      set_fact:\n        sshconfig: files/ssh/sshd_config_secure\n      when: \"'secure' in group_names\"\n\n    - name: For non-secure machines\n      set_fact:\n        sshconfig: files/ssh/sshd_config_default\n      when: \"'secure' not in group_names\"\n\n    - name: Copy over the config\n      copy:\n        src: \"{{ sshconfig }}\"\n        dest: /tmp/sshd_config\n```", "```\n---\n- name: Configure NRPE for the right architecture\n  hosts: ansibletest\n  user: root\n  tasks:\n    - name: Copy in the correct NRPE config file\n      copy:\n        src: \"files/nrpe.{{ ansible_architecture }}.conf\" dest: \"/etc/nagios/nrpe.cfg\"\n```", "```\n---\n- name: Install an Apache config file\n  hosts: ansibletest\n  user: root\n  tasks:\n   - name: Get the best match for the machine\n     copy:\n       dest: /etc/apache.conf\n       src: \"{{ item }}\"\n     first_available_file:\n      - \"files/apache/{{ ansible_os_family }}-{{ ansible_architecture }}.cfg\"\n      - \"files/apache/default-{{ ansible_architecture }}.cfg\"\n      - files/apache/default.cfg\n```", "```\nansible [host pattern] -m setup\n\n```", "```\n---\n- name: Upload a remote file via S3\n  hosts: ansibletest\n  user: root\n  tasks:\n    - name: Setup EPEL\n      command: >\n        rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/ epel-release-6-8.noarch.rpm\n        creates=/etc/yum.repos.d/epel.repo\n\n    - name: Install pip\n      yum:\n        name: python-pip\n        state: installed\n\n    - name: Install the AWS tools\n      pip:\n        name: awscli\n        state: present\n\n    - name: Upload the file\n      shell: >\n        aws s3 put-object\n        --bucket=my-test-bucket\n        --key={{ ansible_hostname }}/fstab\n        --body=/etc/fstab\n        --region=eu-west-1\n      environment:\n        AWS_ACCESS_KEY_ID: XXXXXXXXXXXXXXXXXXX\n        AWS_SECRET_ACCESS_KEY: XXXXXXXXXXXXXXXXXXXXX\n```", "```\n---\n- name: Downloads a file using a proxy\n  hosts: all\n  tasks:\n    - name: Download file\n      get_url:\n        dest: /var/tmp/file.tar.gz url: http://server/file.tar.gz\n      environment:\n        http_proxy: \"{{ lookup('env', 'http_proxy') }}\"\n```", "```\n---\n- name: Registers the app server farm\n  hosts: localhost\n  connection: local\n  vars:\n    hostcount: 5\n  tasks:\n   - name: Register the webapp farm\n      local_action: add_host name={{ item }} groupname=webapp\n      with_sequence: start=1 end={{ hostcount }} format=webapp%02x\n```", "```\n---\n- name: Using register\n  hosts: ansibletest\n  user: root\n  tasks:\n    - name: Get /tmp info\n      file:\n        dest: /tmp\n        state: directory\n      register: tmp\n\n    - name: Set mode on /var/tmp\n      file:\n        dest: /tmp/subtmp\n        mode: \"{{ tmp.mode }}\"\n        state: directory\n```", "```\n---\n- name: Create user accounts\n  hosts: all\n  vars:\n    users:\n  tasks:\n    - name: Create accounts\n      user: name={{ item|lower }} state=present\n      with_items:\n        - Fred\n        - John\n        - DanielH\n```", "```\n---\n- name: Demonstrate the debug module\n  hosts: ansibletest\n  user: root\n  vars:\n    hostcount: 5\n  tasks:\n    - name: Print interface\n      debug:\n        msg: \"{{ item }}\"\n      with_items: ansible_interfaces\n```", "```\nPLAY [Demonstrate the debug module] *********************************\n\nGATHERING FACTS *****************************************************\nok: [ansibletest]\n\nTASK: [Print interface] *********************************************\nok: [ansibletest] => (item=lo) => {\"item\": \"lo\", \"msg\": \"lo\"}\nok: [ansibletest] => (item=eth0) => {\"item\": \"eth0\", \"msg\": \"eth0\"}\n\nPLAY RECAP **********************************************************\nansibletest                : ok=2    changed=0    unreachable=0    failed=0\n```", "```\nansible-playbook --verbose playbook.yml\n\n```"]