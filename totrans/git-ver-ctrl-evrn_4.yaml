- en: Chapter 4. Split the Load – Distributed Working with Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：分担负载——使用 Git 进行分布式工作
- en: '*So far we have worked entirely with a single local repository. It''s high
    time to go one step further and explore the most highlighted feature of Git in
    earlier chapters: distributed working with Git.*'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*到目前为止，我们一直在使用单个本地仓库。现在是时候更进一步，探索 Git 在前几章中提到的最重要功能之一：使用 Git 进行分布式工作。*'
- en: 'In this chapter you will learn the essentials for collaborative development:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章你将学习协作开发的基本要点：
- en: How to share your files/projects over the Internet and intranet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过互联网和内联网共享你的文件/项目
- en: 'Various concepts such as:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种概念包括：
- en: Git clone
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git clone
- en: Git fetch
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git fetch
- en: Git merge
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git merge
- en: Git pull
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git pull
- en: Git push
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git push
- en: Git remote
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git remote
- en: These concepts are involved in sharing your files over the Internet and intranet
    *progressively* and *continuously*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念涉及在互联网和内联网中逐步且持续地共享你的文件。
- en: Why share your files
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要共享你的文件
- en: Let's take the same computer gaming analogy which has helped us to understand
    the basics of Git.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用之前帮助我们理解 Git 基础的计算机游戏类比。
- en: 'Scenario 1: single player'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 1：单人游戏
- en: Think of your favorite game that allows you to save the state of the game in
    your system at any given point of time and resume it later on. Now let's consider
    a situation where you are in some remote location with access to a computer and
    want to resume the game, but are not able to because the saved game file is not
    accessible from that system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你最喜欢的游戏，它允许你在任何时候将游戏状态保存到你的系统中，并在之后继续游戏。现在假设你身处远程地点，能够访问一台电脑，但无法继续游戏，因为保存的游戏文件无法从那台电脑访问。
- en: Apply the same situation to your data files. On average we spend most of our
    time of the day at two to three different locations; think about how productive
    it might be to *continue our work across systems* without having to start from
    scratch on each new system we lay our hands on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将这种情况应用到你的数据文件上。平均来说，我们大部分时间都待在两个到三个不同的地方；想一想，如果能够在不同系统之间*继续工作*，而不必在每次切换到新系统时重新开始工作，会有多么高效。
- en: 'Scenario 2: multiple players – one at a time'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 2：多人游戏——一次一个
- en: Think of your favorite adventure game that has multiple levels. Consider a scenario
    where you are stuck in a level without knowing how to proceed forward. After desperate
    attempts, which ended in vain, you suddenly realize that your friend is an expert
    on that level, and you want to use your friend's help. So you quickly share the
    last saved state of the game file with him so he can finish that level for you,
    save the state, and push the file back to you, which will enable you to continue
    the game.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你最喜欢的冒险游戏，它有多个关卡。假设你在某个关卡卡住了，不知道该如何前进。经过无数次徒劳的尝试后，你突然意识到你的朋友在那个关卡是专家，你希望借助朋友的帮助。于是，你快速将游戏的最后保存状态文件分享给他，让他帮你完成那个关卡，保存进度，并将文件推送回给你，这样你就可以继续游戏了。
- en: The same situation can apply to you when you are working with datafiles, especially
    when you are working as a team where different people take care of different parts
    of a bigger task to produce a single result. Another possibility might be that
    you want the domain experts to handle specific portions of the work, and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与数据文件一起工作时，尤其是在团队合作的情况下，不同的人负责完成较大任务的不同部分，以最终产生单一结果时，同样的情况也可能适用。另一种可能性是，你希望领域专家处理工作的特定部分，等等。
- en: When it comes to sharing files over the network there can be only two modes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及通过网络共享文件时，只有两种模式可供选择。
- en: Internet
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网
- en: Intranet
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联网
- en: The appropriate method is employed based on proximity.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 基于接近程度选择合适的方法。
- en: Kid's play – push and pull for a remote source
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 孩子的游戏——为远程源进行推送和拉取
- en: 'Before getting into the concept of a **distributed file system** as in *Scenario
    1* or **collaborative development** as in *Scenario 2*, it''s time we add five
    more entries to our Git lingo, namely:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨**分布式文件系统**（如场景 1）或**协作开发**（如场景 2）之前，是时候将五个新的术语加入到我们的 Git 词汇中，分别是：
- en: Git clone
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git clone
- en: Git fetch
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git fetch
- en: Git merge
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git merge
- en: Git push
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git push
- en: Git remote
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git remote
- en: Let's quickly understand what these terms mean and where can they be put to
    use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速理解这些术语的含义，并看看它们可以在哪里应用。
- en: Cloning ain't banned here
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在这里，克隆并不是被禁止的
- en: Yes, we are talking about Git's **clone** functionality . Git clone is used
    when we need an exact replica or a copy of an existing repository along with its
    history.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们现在谈论的是 Git 的**clone**功能。Git clone 用于当我们需要现有仓库的精确副本或复制品时，并且需要包括其历史记录。
- en: So a question may arise as to how all the cloned repositories maintain sync
    with each other.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可能会产生一个问题：所有克隆的仓库是如何保持同步的。
- en: Well, the answer to that lies in the remaining four Git commands, which are
    listed previously after `git clone`, namely `git fetch`, `git merge`, `git push`,
    and `git remote`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，答案就在剩下的四个 Git 命令中，它们在`git clone`之后列出，即`git fetch`、`git merge`、`git push`和`git
    remote`。
- en: '**Git fetch**: This command is used to fetch the changes from source to destination.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git fetch**：此命令用于从源获取更改到目标。'
- en: '**Git merge**: Merge is used to combine two workspaces (technically called
    branches) into one. It is frequently used to combine the current user''s workspace
    with the one from the remote user, after fetching the changes from the remote
    source.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git merge**：合并用于将两个工作区（技术上称为分支）合并为一个。它通常用于将当前用户的工作区与远程用户的工作区合并，在从远程源获取更改之后。'
- en: Note
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Git pull**: Executing `git pull` will internally execute `git fetch` followed
    by `git merge`. Hence, it is used as an alternate to fetch plus merge.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Git pull**：执行 `git pull` 将内部执行 `git fetch`，然后是 `git merge`。因此，它作为 `fetch`
    和 `merge` 的替代方案使用。'
- en: '**Git push**: This command is used to push our contents from source to destination.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git push**：此命令用于将我们的内容从源推送到目标。'
- en: '**Git remote**: This command is used to manage one''s source and destination.
    It says where and how you can share your work with others and vice versa.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git remote**：此命令用于管理源和目标。它指定了你可以如何与他人共享你的工作，反之亦然。'
- en: Any operation which enables data sharing makes use of remote connections, which
    are established by `git remote`. Here, `git fetch`, `git push`, and `git pull`
    make use of the remote connections established by `git remote`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使数据共享成为可能的操作，都需要通过 `git remote` 建立远程连接。在这里，`git fetch`、`git push` 和 `git pull`
    都利用了 `git remote` 建立的远程连接。
- en: Now that we have a heads up on a few concepts, let's see how they are put to
    use.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了一些概念，让我们看看如何将它们付诸实践。
- en: 'Scenario 1: solution'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 1：解决方案
- en: We shall learn how to utilize Git to serve you in the case of *Scenario 1* as
    mentioned previously.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在前面提到的*场景 1*中利用 Git 为你提供服务。
- en: Going public – sharing over the Internet
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 公有化——通过互联网共享
- en: There are several online Git hosting providers available for use with different
    pricing models. Broadly speaking a few of them offer a free service for limited
    functional use and ask you to pay for additional usage; a few others offer full
    functional access for a limited time and ask you to choose a payment plan to continue,
    and there are a few others who combine a bit of both.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个在线 Git 托管服务提供商可供使用，且定价模式各不相同。大致来说，有些提供有限功能的免费服务，并要求你为额外使用支付费用；另一些提供完整功能的免费使用期限，之后要求你选择支付计划继续使用；还有一些则结合了上述两种模式。
- en: I am going to choose Bitbucket, a reliable service provider belonging to the
    third category, from now on to take you through the concepts related to sharing
    over the Internet.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，我将选择 Bitbucket，一个可靠的第三类服务提供商，带你了解与互联网共享相关的概念。
- en: Bitbucket is a product of Atlassian, which currently offers free, unlimited
    public and private repositories with the only restriction being the number of
    users with whom your private repositories are shared. This means we can share
    our private repository over the Internet with five people who have read and write
    access to it, for free.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Bitbucket 是 Atlassian 的一款产品，目前提供免费的无限公共和私有仓库，唯一的限制是你与哪些人共享私有仓库的数量。这意味着我们可以与五个具有读写权限的人免费共享我们的私有仓库。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are a few other competitive products such as GitHub, Codaset, and others.
    We chose Bitbucket as it provides private repositories for free.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他竞争产品，如 GitHub、Codaset 等。我们选择 Bitbucket 是因为它提供免费的私有仓库。
- en: A bit of Bitbucket
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 一点关于 Bitbucket
- en: 'Let''s do a quick signup for their services; open up your browser, go to [http://bitbucket.org](http://bitbucket.org),
    click on the **Pricing and Signup** button, and then click on the first **Sign
    up** button under the **free** quota. It then leads you to the registration page
    where you choose an individual account type for now (it is possible to have a
    entire team use a single account) and choose your username and password for the
    **username** and **password** fields respectively, and enter your active e-mail
    address in the **Email address** field, whereas your **First name** and **Last
    name** are optional fields as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速注册他们的服务；打开浏览器，访问 [http://bitbucket.org](http://bitbucket.org)，点击**定价与注册**按钮，然后点击**免费**配额下的第一个**注册**按钮。接下来，你会进入注册页面，选择一个个人账户类型（也可以让整个团队使用一个账户），然后分别在**用户名**和**密码**字段中输入你的用户名和密码，再在**电子邮件地址**字段中输入你的有效邮箱地址，而**名字**和**姓氏**是可选字段，如下图所示：
- en: '![A bit of Bitbucket](img/7522_04_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Bitbucket的简要介绍](img/7522_04_01.jpg)'
- en: After completing the procedures you can expect a confirmation e-mail from Bitbucket
    to validate your e-mail address.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 完成相关程序后，你可以期待收到来自Bitbucket的确认邮件，以验证你的电子邮件地址。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As an alternative to going through this entire sign up process, you can also
    sign in with your OpenID if you have one.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作为完成整个注册流程的替代方法，如果你有OpenID账户，可以使用它进行登录。
- en: 'The beauty of Bitbucket is that it has keyboard shortcuts for almost all actions
    like in Gmail. Similar to Gmail you can press *Shift* + *?* to see the list of
    shortcuts available. The following is a tabulation of frequently used shortcut
    keys for your reference:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Bitbucket的一个亮点是它几乎对所有操作都提供了键盘快捷键，像Gmail一样。类似Gmail，你可以按 *Shift* + *?* 查看可用的快捷键列表。以下是一些常用快捷键的汇总，供你参考：
- en: '| Key combination | Action |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 键盘快捷键组合 | 操作 |'
- en: '| --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *?* | Display keyboard shortcuts help. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| *?* | 显示键盘快捷键帮助。 |'
- en: '| *c* + *r* | Create repository. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| *c* + *r* | 创建仓库。 |'
- en: '| *i* + *r* | Import repository. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| *i* + *r* | 导入仓库。 |'
- en: '| *g* + *d* | Go to dashboard. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| *g* + *d* | 进入仪表盘。 |'
- en: '| *g* + *a* | Go to account settings. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| *g* + *a* | 进入账户设置。 |'
- en: '| *g* + *i* | Go to inbox. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| *g* + *i* | 进入收件箱。 |'
- en: '| */* | Focus on the site search. Puts your cursor on the site field. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| */* | 聚焦到站点搜索框。将光标定位到搜索框中。 |'
- en: '| *Esc* | Dismiss the help dialog or remove the focus from a form field. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| *Esc* | 关闭帮助对话框或移除表单字段的焦点。 |'
- en: '| *u* | Go back up the stack you just went down with the shortcuts. Like the
    back button in a browser, this takes you back through the Bitbucket pages you
    just paged through. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| *u* | 返回到你刚刚通过快捷键浏览过的页面，就像浏览器的返回按钮一样，它将带你回到你在Bitbucket中浏览过的页面。 |'
- en: Let's start our journey by creating a new repository in your account. You can
    either press *c* + *r*, or click on the **Create repository** option from the
    **Repositories** menu at the top, or simply click on the **Create a repository**
    link from the repositories block at your right side and this will take you to
    the page that will guide you in creating a new repository/repo (repo is a widely
    used shortform for repository).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在你的账户中创建一个新的仓库来开始我们的旅程。你可以按 *c* + *r*，或者点击顶部菜单中的**创建仓库**选项，或者直接点击右侧仓库块中的**创建仓库**链接，这将带你到一个页面，指导你创建新的仓库（repo是仓库的常用简写）。
- en: '| Field name | Value | Reason |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 字段名称 | 值 | 原因 |'
- en: '| --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Name** | `online_workbench` | We are going to import the same `Workbench`
    repository on our desktop to this online portal. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | `online_workbench` | 我们将把桌面上的`Workbench`仓库导入到这个在线平台。 |'
- en: '| **Description** | `An online Git repository to showcase the collaboration
    function of Git` | This is a brief description of your repository. You can have
    your own description here that best describes the purpose of the repository. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | `一个在线Git仓库，用于展示Git的协作功能` | 这是你仓库的简短描述。你可以在这里写下一个描述，最好能够表达仓库的用途。
    |'
- en: '| **Access level** | `Checked` | A private repo is only visible to you and
    those you give access to (more about this later). If this box is unchecked, everyone
    can see your repo. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **访问级别** | `已勾选` | 私有仓库仅对你和你授权的人可见（稍后会详细讲解）。如果此框未勾选，所有人都可以看到你的仓库。 |'
- en: '| **Repository type** | `Git` | Bitbucket supports both Git and Mercurial version
    control systems.As we are going to import a Git repository, let''s select that.
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **仓库类型** | `Git` | Bitbucket支持Git和Mercurial版本控制系统。由于我们要导入一个Git仓库，所以选择Git。
    |'
- en: 'Enter the values in the fields as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段中的值，如下图所示：
- en: '![A bit of Bitbucket](img/7522_04_02.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Bitbucket介绍](img/7522_04_02.jpg)'
- en: 'Click on the **Create repository** button to complete the repository creation
    process. Now that you have an empty repository, Bitbucket prompts us for immediate
    action as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建仓库**按钮以完成仓库创建过程。现在你已经拥有一个空仓库，Bitbucket会提示你立即采取行动，如下图所示：
- en: '![A bit of Bitbucket](img/7522_04_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Bitbucket介绍](img/7522_04_03.jpg)'
- en: Here we have two different startup options.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种不同的启动选项。
- en: Create a new directory in our machine, initialize it as a repository, and link
    that to the remote Bitbucket repository that we just created, which is represented
    by the **I'm starting from scratch** link
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的机器上创建一个新目录，将其初始化为仓库，并将其链接到我们刚刚创建的远程Bitbucket仓库，通过**我从头开始**链接来表示。
- en: Skip to the later part, which is linking our existing repository to the remote
    Bitbucket repository and pushing our contents to it, which is represented by the
    option **I have code I want to import** link
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳到后面的部分，即将我们现有的仓库链接到远程Bitbucket仓库并推送内容，这通过**我有代码要导入**链接来表示。
- en: 'As we already have our repository created, let''s select the second option
    which leads us to a screen as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经创建了仓库，让我们选择第二个选项，它将引导我们到如下屏幕：
- en: '![A bit of Bitbucket](img/7522_04_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Bitbucket介绍](img/7522_04_04.jpg)'
- en: We are getting to the core part now. Shown in the screen are instructions for
    CLI users to link the `Workbench` repository from the desktop to the `online_workbench`
    repository in Bitbucket.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在进入了核心部分。屏幕上显示了CLI用户链接`Workbench`仓库从桌面到Bitbucket中的`online_workbench`仓库的说明。
- en: Time for action – adding a remote origin using CLI mode
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 使用CLI模式添加远程源
- en: 'Linking or adding a remote origin to your repository (yet another addition
    to your Git lingo) is a simple process. Fire up your command-line interface and
    enter the following commands:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 将远程源链接或添加到你的仓库（又一个Git术语）是一个简单的过程。启动命令行界面并输入以下命令：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the execution of the `git push` command you will be prompted for your
    Bitbucket account password to complete the process as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`git push`命令后，系统会提示你输入Bitbucket账户密码以完成该过程，如下所示：
- en: '![Time for action – adding a remote origin using CLI mode](img/7522_04_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间 – 使用CLI模式添加远程源](img/7522_04_05.jpg)'
- en: If you see a similar message in your window, the linkage cum transfer was successful.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在窗口中看到类似的消息，则表示链接和传输成功。
- en: '*What just happened?*'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We just created a remote link for our `Workbench` repository with the `online_workbench`
    repository and pushed our files to it making them available online, thus opening
    the door for a distributed file system, using the CLI mode.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为`Workbench`仓库创建了一个远程链接，并将我们的文件推送到`online_workbench`仓库，使它们在线可用，从而开启了分布式文件系统的大门，使用CLI模式。
- en: '`git remote add` is the command to add a Git repository identified by its path
    to your present repository''s configuration file so that your changes in one repository
    get tracked in another. Let''s just say **origin** is nothing but an alias for
    the path representing the remote repository.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`git remote add`是用来将通过路径识别的Git仓库添加到当前仓库配置文件中的命令，以便在一个仓库中的更改可以在另一个仓库中被追踪。可以说，**origin**不过是远程仓库路径的别名。'
- en: The parameter `–u origin master`, which is used with `git pull` is to default
    the repositories' push and pull operations to that specified remote branch.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`–u origin master`，与`git pull`一起使用，用于将仓库的推送和拉取操作默认指向指定的远程分支。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If `–u` is not used initially, then for each and every pull and push request
    we need to specify `origin master` along with the request. Now it's enough for
    us to say `git push` for pushing and `git pull` for pulling.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有使用`–u`，那么每次执行拉取或推送请求时，我们都需要在请求中指定`origin master`。现在，我们只需要输入`git push`进行推送，输入`git
    pull`进行拉取。
- en: This means you can continue your work from anywhere if you have access to a
    computer with Git and your application software installed on it (it's Microsoft
    Word in this case as we are dealing with a Word document).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着只要你可以访问安装了Git和应用程序软件的计算机，你就可以随时随地继续工作（在这种情况下我们处理的是Word文档，应用软件是Microsoft
    Word）。
- en: Time for action – resume your work from anywhere using CLI mode
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间 – 使用CLI模式从任何地方恢复工作
- en: Now let's enter the second phase, where we would like to resume our work from
    a remote machine.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入第二阶段，我们想要从远程机器恢复工作。
- en: There are only three stages involved here.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只涉及三个阶段。
- en: Clone the repository from the server.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器克隆仓库。
- en: '[PRE1]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Make your changes to the files needed.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对需要修改的文件进行更改。
- en: Add/stage the modifications made in files, commit, and push.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加/暂存文件中的修改，提交并推送。
- en: '[PRE2]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As an alternative to `git pull`, we can also use `git fetch` followed by `git
    merge @{u}`.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为`git pull`的替代方法，我们也可以使用`git fetch`，然后再执行`git merge @{u}`。
- en: '*What just happened?*'
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚刚发生了什么？*'
- en: We just practiced a working solution for maximizing productivity by effectively
    handling situations as described in *Scenario 1*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚实践了通过有效处理如*场景1*中所述情况来最大化生产力的解决方案。
- en: '`Git add *` stages/adds all your changes, which is confirmed and recorded by
    the `git commit` command. `Git pull` is used to check whether there are unsynced
    updates in the server; if present, they are synced appropriately followed by `git
    push`, which updates the server''s files with the changes that you have made and
    committed in your local repository.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`Git add *`会暂存/添加你所有的更改，这些更改通过`git commit`命令被确认并记录。`git pull`用来检查服务器上是否有未同步的更新；如果有，系统会将它们同步，然后再执行`git
    push`，该命令将你在本地仓库中所做并提交的更改推送到服务器，更新服务器上的文件。'
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You might happen to think why we are doing `git pull` before `git push` when
    our sole intention was to push the updated files to the server. Wonderful question
    – hold that thought right there; you will get to know more about it when we discuss
    the concepts of branching.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么在我们唯一的目的是将更新的文件推送到服务器时，要先执行`git pull`再执行`git push`。这个问题非常好——请保持这个思考，等到我们讨论分支概念时，你会更清楚地理解。
- en: Time for action – adding a remote origin using GUI mode
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——使用GUI模式添加远程源
- en: 'Linking or adding a remote origin to our `Workbench` repository present in
    our desktop and syncing the contents using the Git GUI is performed as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Git GUI将远程源链接或添加到我们桌面上的`Workbench`仓库并同步内容，步骤如下：
- en: Open up your Git GUI window for our `Workbench` repository from the desktop.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你桌面上的Git GUI窗口，查看我们的`Workbench`仓库。
- en: Click on the **Add** option from the **Remote** menu in your GUI window.![Time
    for action – adding a remote origin using GUI mode](img/7522_04_06.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的GUI窗口中，点击**远程**菜单中的**添加**选项。![行动时间——使用GUI模式添加远程源](img/7522_04_06.jpg)
- en: 'This opens up the **Add New Remote** window where we enter the following details:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这会打开**添加新远程**窗口，在其中输入以下信息：
- en: '| Field name | Value |'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 字段名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Name** | `origin` |'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **名称** | `origin` |'
- en: '| **Location** | [https://your_bitbucket_repo_identity_here/online_workbench.git](https://your_bitbucket_repo_identity_here/online_workbench.git)
    |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **位置** | [https://your_bitbucket_repo_identity_here/online_workbench.git](https://your_bitbucket_repo_identity_here/online_workbench.git)
    |'
- en: '| **Further Action** | **Do Nothing Else Now** |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **进一步操作** | **现在不做其他操作** |'
- en: This is shown in the following screenshot; click on the **Add** button:![Time
    for action – adding a remote origin using GUI mode](img/7522_04_07.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，点击**添加**按钮：![行动时间——使用GUI模式添加远程源](img/7522_04_07.jpg)
- en: We have now successfully added a remote to our `Workbench` repository.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经成功地将远程源添加到`Workbench`仓库。
- en: To push our code to the `online_workbench` repository, go to the same **Remote**
    menu and select the option **Push**, which will lead you to the **Push Branches**
    window as shown in the following screenshot:![Time for action – adding a remote
    origin using GUI mode](img/7522_04_08.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将我们的代码推送到`online_workbench`仓库，打开相同的**远程**菜单并选择**推送**选项，这会将你引导到**推送分支**窗口，如下图所示：![行动时间——使用GUI模式添加远程源](img/7522_04_08.jpg)
- en: By default, **master** will be selected under **Source Branches**, and **origin**
    will be selected in the listbox for the **Remote** option under **Destination
    Repository**. Leave it as it is, click on the **Push** button, and wait for some
    time; it should lead you to a screen where you will be prompted for your Bitbucket
    account password to proceed as shown in the following screenshot:![Time for action
    – adding a remote origin using GUI mode](img/7522_04_09.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，**master**会被选中为**源分支**，而在**目标仓库**下的**远程**选项列表框中，**origin**会被选中。保持默认设置，点击**推送**按钮，等待片刻，系统会提示你输入Bitbucket账户密码，如下图所示：![行动时间——使用GUI模式添加远程源](img/7522_04_09.jpg)
- en: Upon successful authentication, your content will be synced with the `online_workbench`
    repository, which can be understood from the following screenshot:![Time for action
    – adding a remote origin using GUI mode](img/7522_04_10.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过身份验证成功后，你的内容将与 `online_workbench` 仓库同步，以下截图可以证明这一点：![行动时间 – 使用 GUI 模式添加远程
    origin](img/7522_04_10.jpg)
- en: It says that the master branch of your local `Workbench` repository is synced
    with the master branch of the `online_workbench` repository (more on branches
    in later chapters).
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这表示你的本地 `Workbench` 仓库的主分支与 `online_workbench` 仓库的主分支已同步（更多关于分支的内容将在后续章节讲解）。
- en: '*What just happened?*'
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: We just created a remote link for our `Workbench` repository with the `online_workbench`
    repository and pushed our files to it making them available online, thus opening
    the door for a distributed file system, using GUI mode.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的 `Workbench` 仓库创建了一个与 `online_workbench` 仓库的远程连接，并将我们的文件推送到它，使其在线可用，从而为分布式文件系统打开了大门，使用的是
    GUI 模式。
- en: 'Now if you open your Bitbucket account in your browser you will see history
    updated on your dashboard as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在浏览器中打开你的 Bitbucket 账户，你会看到如以下截图所示，你的历史记录已经更新：
- en: '![What just happened?](img/7522_04_11.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_04_11.jpg)'
- en: This means you can continue your work from anywhere if you have access to a
    computer with Git and your application software installed on it (it's Microsoft
    Word in this case as we are dealing with a Word document).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果你能访问安装了 Git 和应用软件的计算机，你可以从任何地方继续工作（在这个例子中是 Microsoft Word，因为我们处理的是 Word
    文档）。
- en: Go ahead and browse through the different tabs available to make yourself comfortable
    with it. Once you are done with it, let's move to the next half to see how we
    can resume our work form distributed locations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 继续浏览可用的不同标签页，使自己熟悉它。一旦你完成了这部分，我们就可以进入下一部分，看看如何从分布式位置恢复我们的工作。
- en: Time for action – resume your work from anywhere using GUI mode
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 使用 GUI 模式从任何地方恢复你的工作
- en: Here, we are reaping the benefits for what we did earlier by creating an online
    repository, remoting to it, and syncing our local files to the online one. Resuming
    your work on any machine you lay your hands on is an easy three-phase process.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过创建在线仓库、远程连接并同步本地文件到在线仓库，获得了之前所做的工作的好处。从任何你能接触到的机器上恢复工作是一个简单的三阶段过程。
- en: Clone the repository from the server.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务器克隆仓库。
- en: Open Git GUI and select the **Clone Existing Repository** option as shown in
    the following screenshot:![Time for action – resume your work from anywhere using
    GUI mode](img/7522_04_12.jpg)
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Git GUI 并选择**克隆现有仓库**选项，如下图所示：![行动时间 – 使用 GUI 模式从任何地方恢复你的工作](img/7522_04_12.jpg)
- en: 'This leads you to the respective window where you are prompted for **Source
    Location** and **Target Directory** where you enter the values as follows:'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将引导你到相应的窗口，在那里你将被提示输入**源位置**和**目标目录**，并按以下方式输入相应的值：
- en: '| Field name | Value |'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
  zh: '| 字段名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Source location** | [https://your_name@bitbucket.org/username/online_workbench.git](https://your_name@bitbucket.org/username/online_workbench.git)
    |'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
  zh: '| **源位置** | [https://your_name@bitbucket.org/username/online_workbench.git](https://your_name@bitbucket.org/username/online_workbench.git)
    |'
- en: '| **Target Directory** | `/Path/where/you/want/to/have/the_cloned_repository_for_ease_of_work`
    |'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_TB
  zh: '| **目标目录** | `/Path/where/you/want/to/have/the_cloned_repository_for_ease_of_work`
    |'
- en: 'This is shown in the following screenshot; click on the **Clone** button:'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下图所示；点击**克隆**按钮：
- en: '![Time for action – resume your work from anywhere using GUI mode](img/7522_04_13.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 – 使用 GUI 模式从任何地方恢复你的工作](img/7522_04_13.jpg)'
- en: Once the clone process starts you will be prompted for your Bitbucket account
    password. Upon successful authentication, you will have a cloned repository with
    the files with which you can resume your work.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦克隆过程开始，你将被提示输入你的 Bitbucket 账户密码。通过身份验证后，你将获得一个克隆的仓库，里面包含你可以继续工作的文件。
- en: Make your changes to the files as needed.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据需要对文件进行修改。
- en: Add/stage the modifications made in files, commit, fetch, merge, and push.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加/暂存文件中所做的修改，提交、获取、合并并推送。
- en: We already know how to add/stage the modifications made to files and commit
    them to the repository. So let's start from fetch now. To perform a fetch operation,
    go to the **Remote** | **Fetch from** | **Origin** menu option. This should bring
    you the remote fetch window, which will prompt you for your Bitbucket account
    password as shown in the following screenshot:![Time for action – resume your
    work from anywhere using GUI mode](img/7522_04_14.jpg)
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经知道如何将修改添加/暂存到文件并提交到仓库。那么，现在让我们从fetch开始。要执行fetch操作，请进入**远程** | **从** | **Origin**菜单选项。这将弹出远程fetch窗口，提示你输入Bitbucket账户密码，如下截图所示：![随时随地使用GUI模式恢复工作](img/7522_04_14.jpg)
- en: Upon entering the correct password and a successful authentication, if there
    are any new changes to the files in the server that are not updated in your local
    repository, those changes are synced.
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入正确的密码并成功认证后，如果服务器中有任何文件的更新尚未同步到本地仓库，这些更改将会被同步。
- en: '![Time for action – resume your work from anywhere using GUI mode](img/7522_04_15.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![随时随地使用GUI模式恢复工作](img/7522_04_15.jpg)'
- en: The previous screenshot shows you the sync process and the status of the sync.
    Upon success we can close the window and proceed to merge these two workspaces.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上一张截图展示了同步过程和同步状态。同步成功后，我们可以关闭窗口并继续合并这两个工作空间。
- en: Merging two workspaces, namely local master (your local workspace, which you
    have been using to make changes) and remote master (the workspace which is present
    in the server), is performed by selecting the **Merge** | **Local merge** menu
    option. This opens up a local merge window as shown in the following screenshot:![Time
    for action – resume your work from anywhere using GUI mode](img/7522_04_16.jpg)
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并两个工作空间，即本地主分支（你的本地工作空间，已用来做更改）和远程主分支（服务器上的工作空间），可以通过选择**合并** | **本地合并**菜单选项来执行。这将打开一个本地合并窗口，如下截图所示：![随时随地使用GUI模式恢复工作](img/7522_04_16.jpg)
- en: The default selected option would be **origin/master**; leave it as it is, and
    click on the **Merge** button.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认选中的选项是**origin/master**；保持默认，点击**合并**按钮。
- en: If there are no conflicts in merging you should see a success message like the
    one shown in the following screenshot:![Time for action – resume your work from
    anywhere using GUI mode](img/7522_04_17.jpg)
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在合并时没有冲突，你应该会看到如下截图中显示的成功消息：![随时随地使用GUI模式恢复工作](img/7522_04_17.jpg)
- en: This marks that you have successfully down-synced the contents present in the
    server with yours. Now let's up-sync your content with the one present in the
    servers by using the `git push` functionality, which can be accessed from the
    **Remote** | **Push** menu option.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这标志着你已经成功将服务器中的内容与本地内容同步。现在，让我们使用`git push`功能，将你的内容上传到服务器中，这个功能可以通过**远程** |
    **推送**菜单选项访问。
- en: '*What just happened?*'
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: We just practiced a working solution for maximizing productivity by effectively
    handling situations as described in *Scenario 1*, using Git GUI.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚实践了一个有效的解决方案，通过使用Git GUI来有效处理*场景 1*中描述的情况，从而最大化生产力。
- en: 'Scenario 2: solution'
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 2：解决方案
- en: Handling *Scenario 2* is very easy now that we know how we handled *Scenario
    1*. The only addition to *Scenario 2* when compared to the former is the involvement
    of multiple people to the same repository.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 处理*场景 2*现在变得非常简单，因为我们已经知道如何处理*场景 1*。与前者相比，*场景 2*的唯一新增内容是多个用户参与同一个仓库。
- en: Inviting users to your Bitbucket repository
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邀请用户访问你的Bitbucket仓库
- en: 'Inviting your friend to access your game file so that he can finish that level
    for you is an easy two-step process from your side as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 邀请你的朋友访问你的游戏文件，让他帮你完成那个关卡，这是一个非常简单的两步操作，具体如下：
- en: From your repository homepage, click on the **Share** icon or the **invite**
    button as shown in the following screenshot:![Inviting users to your Bitbucket
    repository](img/7522_04_18.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的仓库主页，点击**分享**图标或**邀请**按钮，如下截图所示：![邀请用户访问你的Bitbucket仓库](img/7522_04_18.jpg)
- en: This will prompt you to enter the details about the user whom you wanted to
    invite or share your repository with. If it's an existing user you can enter his/her
    username and if it's a new user you can enter his/her e-mail ID and click on the
    **Add** button as shown in the following screenshot:![Inviting users to your Bitbucket
    repository](img/7522_04_19.jpg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这时你需要输入你想要邀请或共享你的仓库的用户的详细信息。如果是现有用户，你可以输入他/她的用户名；如果是新用户，你可以输入他/她的电子邮件地址，并点击如以下截图所示的**添加**按钮：![邀请用户到你的
    Bitbucket 仓库](img/7522_04_19.jpg)
- en: Now the username/e-mail ID gets added to the list and you will be prompted to
    specify the access level for the user that you have added. Click on the **Write**
    button and then click on the **Share** button as shown in the following screenshot:![Inviting
    users to your Bitbucket repository](img/7522_04_20.jpg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，用户名/电子邮件地址已添加到列表中，你将被提示指定你所添加用户的访问权限。点击**写入**按钮，然后点击**共享**按钮，如以下截图所示：![邀请用户到你的
    Bitbucket 仓库](img/7522_04_20.jpg)
- en: That's it! You will see a success message at the top of your page, as shown
    in the following screenshot, as an acknowledgement for sharing:![Inviting users
    to your Bitbucket repository](img/7522_04_21.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！你将在页面顶部看到一个成功消息，如以下截图所示，以确认共享：![邀请用户到你的 Bitbucket 仓库](img/7522_04_21.jpg)
- en: 'And the user you have added will receive an e-mail mentioning that you wanted
    to share your repository with him/her as shown in the following screenshot:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 而你添加的用户将收到一封电子邮件，告知他/她你希望与他/她共享你的仓库，如以下截图所示：
- en: '![Inviting users to your Bitbucket repository](img/7522_04_22.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![邀请用户到你的 Bitbucket 仓库](img/7522_04_22.jpg)'
- en: Upon clicking the link you will be given two options.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击链接后，你将有两个选项。
- en: '**Sign up**: If your friend is a new user of Bitbucket, he/she needs to go
    through the registration process as discussed earlier in this chapter. Post registration
    you will be routed to your dashboard.'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册**：如果你的朋友是 Bitbucket 的新用户，他/她需要按照本章前面讨论的注册流程进行注册。注册后，你将被引导到仪表盘。'
- en: '**Log in with your existing username**: If your friend already has a Bitbucket
    account and once he/she logs in with his/her credentials, he/she will be prompted
    for acceptance to the shared repository as shown in the following screenshot:'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用现有用户名登录**：如果你的朋友已经有 Bitbucket 账户，登录凭据后，他/她将被提示接受共享仓库，如以下截图所示：'
- en: '![Inviting users to your Bitbucket repository](img/7522_04_23.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![邀请用户到你的 Bitbucket 仓库](img/7522_04_23.jpg)'
- en: When the **Accept invitation** button is clicked, the user will be taken to
    his/her dashboard.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当点击**接受邀请**按钮时，用户将被带到他/她的仪表盘。
- en: 'And the dashboard will contain affirmation in the form of an onscreen notification
    as shown in the following screenshot along with an e-mail which is sent to your
    registered e-mail ID which contains the details of the repository that you have
    been given access to:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仪表盘将包含一条屏幕通知的确认信息，如以下截图所示，同时，你注册的电子邮件地址也会收到一封电子邮件，邮件中包含你被授予访问权限的仓库的详细信息：
- en: '![Inviting users to your Bitbucket repository](img/7522_04_24.jpg)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![邀请用户到你的 Bitbucket 仓库](img/7522_04_24.jpg)'
- en: And an e-mail is sent to that user with the details about the repository which
    he/she has access to.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时，这个用户会收到一封电子邮件，邮件中包含他/她可以访问的仓库的详细信息。
- en: '*What just happened?*'
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*刚才发生了什么？*'
- en: Voila! We have successfully practiced a working solution for handling *Scenario
    2* cases effectively.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！我们已经成功地实践了一个有效的解决方案来处理*情景 2*的案例。
- en: This means you can split a bigger task into smaller ones, and share those tasks
    and related files with others so that they can fill in their sectors to produce
    a common output.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以将一个较大的任务拆分成更小的任务，并与其他人共享这些任务和相关文件，以便他们能够填补各自的部分，最终产生一个共同的结果。
- en: Staying local – share over the intranet
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持本地 – 通过内联网共享
- en: There are situations where you work within a local network, like in different
    floors of a building, and don't want to upload your files to the web due to various
    reasons such as cost involved, bandwidth consumption for every put and get, security,
    and others.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，你可能在局域网内工作，比如在同一栋楼的不同楼层，而因为各种原因（例如成本、上传下载带宽消耗、安全性等），你不想将文件上传到网上。
- en: 'In such cases there are several ways to handle this – the most commonly used
    are:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有几种方法可以处理这种情况，最常用的几种方法是：
- en: Gitolite server
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gitolite 服务器
- en: Common shared directory with bare repositories
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共共享目录与裸仓库
- en: We shall look at procedures to create a bare repository inside a shared directory
    so that it can be shared within your network.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看在共享目录中创建裸仓库的过程，这样它就可以在你的网络内共享。
- en: Concept of a bare repository
  id: totrans-188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 裸仓库的概念
- en: 'As soon as it is said that you need a bare repository to share your files with
    others, a few basic questions you might have in your mind would be:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦说到你需要一个裸仓库来与他人共享文件时，你可能会心中有一些基本问题：
- en: What is a bare repository?
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是裸仓库？
- en: Why do we need such a thing to share the files of our repository with others?
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要这样一个东西来与他人共享我们的仓库文件？
- en: Let's see them one by one.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看它们。
- en: '**Bare repository**: A bare repository is the one where no working directory
    is present.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裸仓库**：裸仓库是没有工作目录的仓库。'
- en: '**Working directory**: This is nothing but a directory with your source files,
    for example, `content.docx` inside the `Workbench` directory.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作目录**：这只是一个包含源文件的目录，例如，`content.docx` 位于 `Workbench` 目录中。'
- en: The contents of the `.git` directory alone would be the contents of your entire
    directory if it is a bare repository.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.git` 目录的内容将是整个目录的内容，如果它是一个裸仓库的话。'
- en: '**Why bare repository**: Think about a situation where there are multiple people
    working on the same file at the same time. Now what happens when you are in the
    process of changing some content in the file from the repository and another person
    working on the same file makes his own changes and pushes it to your repository!'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为什么是裸仓库**：想象一下一个场景，多个用户同时在同一个文件上工作。那么，当你在从仓库中更改某些内容时，另一个正在处理同一文件的人做了他自己的更改并推送到你的仓库时会发生什么？'
- en: The contents of your file will be altered, or the file itself may cease to exist
    based on the actions performed from the other end, whereas you would have the
    file opened for manipulation.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的文件内容可能会被更改，或者文件本身可能会根据另一端执行的操作而不存在，而你则会打开该文件进行操作。
- en: It causes a great deal of confusion in handling such scenarios, so the people
    who have created Git have done the smart thing of avoiding such situations by
    implementing the bare repository concept. This bare repository acts as a middle
    man between all such clones and your source repository, which contains the working
    directory. So you cannot simply push from a clone to the source of the clone,
    if the source contains the working directory.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 处理这种情况时会引起很多混乱，因此创建 Git 的人采取了聪明的做法，通过实现裸仓库概念来避免这种情况。这个裸仓库充当所有这些克隆和包含工作目录的源仓库之间的中介。所以你不能仅仅从一个克隆推送到克隆的源，如果源包含工作目录的话。
- en: '![Concept of a bare repository](img/7522_04_25.jpg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![裸仓库的概念](img/7522_04_25.jpg)'
- en: Let's create a bare repository and take a quick peek into it to understand it
    better.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个裸仓库，并快速查看它以便更好地理解。
- en: Time for action – creating a bare repository in CLI mode
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在 CLI 模式下创建裸仓库
- en: The command for creating a bare repository would be the same as the one that
    you used to clone a repository except for the `--bare` parameter, which makes
    all the difference.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 创建裸仓库的命令与克隆仓库时使用的命令相同，唯一的区别是 `--bare` 参数，它是关键。
- en: '[PRE3]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Executing the preceding code in your console should create a bare clone of our
    `Workbench` repository in your common shared folder called `generic_share`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中执行上述代码应该会在你的公共共享文件夹 `generic_share` 中创建一个 `Workbench` 仓库的裸克隆。
- en: Time for action – creating a bare repository in GUI mode
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 – 在 GUI 模式下创建裸仓库
- en: 'Creating a bare clone from an already existing repository using GUI is an easy
    process. All you need to do is:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GUI 从已经存在的仓库创建裸克隆是一个简单的过程。你需要做的只是：
- en: Copy the `.git` directory from the existing repository and paste it with a `different_name.git`
    (whatever name you want to give to your new bare repository) outside the repository.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制现有仓库中的 `.git` 目录，并将其粘贴为 `different_name.git`（你想给新裸仓库取的任何名称）到仓库外部。
- en: In our case we have a non bare repo called `Workbench` at `C:\Users\raviepic3\Desktop\`
    inside which we have `content.docx`. And now I want to create a new bare repository
    from this using GUI. I'll copy `C:\Users\raviepic3\Desktop\Workbench\.git` and
    paste it as `C:\generic_share\Bare_Workbench.git`.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们有一个非裸仓库，名为 `Workbench`，路径是 `C:\Users\raviepic3\Desktop\`，其中包含 `content.docx`。现在，我想使用
    GUI 从这个仓库创建一个新的裸仓库。我将复制 `C:\Users\raviepic3\Desktop\Workbench\.git` 并将其粘贴为 `C:\generic_share\Bare_Workbench.git`。
- en: Open the `config` file inside `Bare_Workbench.git` with a text editor and find
    the line which says `bare = false` and replace the string `false` with `true`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器打开 `Bare_Workbench.git` 中的 `config` 文件，找到 `bare = false` 这一行，并将 `false`
    字符串替换为 `true`。
- en: Save and exit.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并退出。
- en: '*What just happened?*'
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*发生了什么？*'
- en: 'By performing the previous actions through CLI or GUI we have just created
    a bare repository out of the `Workbench` repository inside a directory called
    `generic_share` under the name of `Bare_Workbench` whose contents are as shown
    in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 CLI 或 GUI 执行之前的操作后，我们已经从 `Workbench` 仓库创建了一个裸仓库，并将其存放在名为 `generic_share`
    的目录下，仓库名称为 `Bare_Workbench`，其内容如下图所示：
- en: '![What just happened?](img/7522_04_26.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_04_26.jpg)'
- en: 'For a better understanding, a content comparison between the two repositories
    is shown in the following figure:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好理解，下面的图示展示了两个仓库之间的内容对比：
- en: '![What just happened?](img/7522_04_27.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![发生了什么？](img/7522_04_27.jpg)'
- en: If you are in a local network, you can control who has access to the repository
    by controlling the visibility of the shared folder `generic_share`, the same way
    you control visibility of other shared folders within your network.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你处在本地网络中，可以通过控制共享文件夹 `generic_share` 的可见性来控制谁能访问仓库，方法和你控制网络中其他共享文件夹的可见性一样。
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We have learned what is and how to:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了什么是以及如何：
- en: Clone a repository
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆一个仓库
- en: Differentiate between bare and non bare repositories, their usage, and implementation
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区分裸仓库和非裸仓库，了解它们的使用和实现方式
- en: Add a remote to a repository
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将远程仓库添加到本地仓库
- en: Fetch, merge, and push content to the added remote repository or a cloned repository
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取、合并并推送内容到添加的远程仓库或克隆的仓库
- en: The pull operation and its alternates
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉取操作及其替代方法
- en: 'Additionally, you have also learned how to:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还学会了如何：
- en: 'Share your repositories over the Internet and intranet using:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过以下方式在互联网和内联网中共享你的仓库：
- en: Git CLI
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 命令行界面（CLI）
- en: Git GUI
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 图形用户界面（GUI）
- en: You are also ready to get productive with the concepts that you have learned
    starting from day one, as you already have a Bitbucket account with which you
    can create and manage unlimited public and private repositories and share them
    with at the most five users without spending a penny on it
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也已经准备好开始使用从第一天开始所学的概念， 因为你已经拥有一个 Bitbucket 账户， 通过这个账户你可以创建和管理无限量的公共和私有仓库，并与最多五个用户共享这些仓库，完全不需要花费一分钱。
