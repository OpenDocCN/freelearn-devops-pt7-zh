- en: Getting Started with Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 入门指南
- en: Whether you are a professional or an amateur developer, you've likely heard
    about the concept of version control. You may know that adding a new feature,
    fixing a broken one, or stepping back to a previous condition is a daily routine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是专业开发者还是业余爱好者，你可能都听说过版本控制的概念。你可能知道，添加新功能、修复破损的功能或者回溯到以前的状态是日常工作的一部分。
- en: This requires the use of a powerful tool that can help you take care of your
    work, allowing you to move around your project quickly and without friction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要使用一个强大的工具来帮助你管理工作，使你能够快速而无摩擦地在项目中移动。
- en: There are many tools for this job on the market, both proprietary and open source.
    Usually, you will find **Version Control Systems** (**VCS**) and **Distributed
    Version Control Systems** (**DVCS**). Some examples of centralized tools are **Concurrent
    Version System** (**CVS**), **Subversion** (**SVN**), **Team Foundation Server**
    (**TFS**), and **Perforce Helix**. While in DVCS, you can find **Bazaar**, **Mercurial**,
    and **Git**. The main difference between the two families is the constraint—in
    the centralized system—to have a remote server from which to get and in which
    to put your files; needless to say, if the network is down, you are in trouble.
    In DVCS, on the other hand, you can either have or not have a remote server (even
    more than one), but you can work offline, too. All your modifications are locally
    recorded so that you can sync them at some other time. Today, Git is the DVCS
    that has gained more public favor than others, growing quickly from a niche tool
    to mainstream.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有很多此类工具，既有专有的也有开源的。通常，你会找到**版本控制系统**（**VCS**）和**分布式版本控制系统**（**DVCS**）。一些集中式工具的例子有**并发版本系统**（**CVS**）、**Subversion**（**SVN**）、**Team
    Foundation Server**（**TFS**）和**Perforce Helix**。而在分布式系统中，你可以找到**Bazaar**、**Mercurial**和**Git**。两者的主要区别在于，集中式系统中必须有一个远程服务器用于获取和存放文件；不用说，如果网络断开，你就麻烦了。而在分布式系统中，你可以有或者没有远程服务器（甚至可以有多个），但你也可以离线工作。所有的修改都会被本地记录，因此你可以在其他时间同步它们。如今，Git
    是获得更多公众青睐的 DVCS，迅速从一个小众工具发展为主流。
- en: Git has rapidly grown as the de facto source code versioning tool. It is the
    second famous child of **Linus Torvalds**, who, after creating the **Linux** kernel,
    forged this versioning software to keep track of his million lines of code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Git 作为事实上的源代码版本控制工具迅速成长起来。它是**Linus Torvalds**的第二个著名作品，他在创建**Linux**内核之后，打造了这个版本控制软件来跟踪他数百万行代码的变化。
- en: In this first chapter, we will start at the very beginning, assuming that you
    do not have Git on your machine. This book is intended for developers who have
    never used Git or only used it a little bit, but who are scared to throw themselves
    headlong into it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从最基础的开始，假设你的机器上还没有安装 Git。这本书面向那些从未使用过 Git 或者只是略微使用过的开发者，但他们害怕全身心投入其中。
- en: If you have never installed Git, this is your chapter. If you already have a
    working Git box, you can quickly read through it to check whether everything is
    alright.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未安装过 Git，那么这是你的章节。如果你已经有一个工作正常的 Git 环境，你可以快速浏览一下以确保一切正常。
- en: Foreword to the second edition
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二版前言
- en: Welcome to the second edition of Git Essentials!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到 Git Essentials 的第二版！
- en: This paragraph is dedicated to those who have already read the first edition;
    here you will find an overview of the changes and new things inside this brand-new
    edition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这一段专为已经阅读过第一版的人士准备；在这里，你将了解到这个全新版本中的变化和新内容的概述。
- en: 'First of all, we listened to your feedback: in [Chapters 2](99b661ad-e978-4ef2-bd8c-cce55c6a318e.xhtml), *Git
    Fundamentals - Working Locally* and [Chapter 3](20e98db3-d248-436e-88d5-069be7808998.xhtml), *Git
    Fundamentals - Working Remotely* we will look at some technical details in more
    depth, describing more accurately the internals of Git; this entails extra effort
    on the part of the reader, but in return, he or she will obtain a more mindful
    understanding of Git architecture that will later help to grasp the commands of
    this powerful tool.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们听取了你们的反馈：在[第二章](99b661ad-e978-4ef2-bd8c-cce55c6a318e.xhtml) *Git 基础 - 本地操作*
    和 [第三章](20e98db3-d248-436e-88d5-069be7808998.xhtml) *Git 基础 - 远程操作* 中，我们将更深入地探讨一些技术细节，更准确地描述
    Git 的内部工作原理；这需要读者额外的努力，但作为回报，他或她将获得对 Git 架构更加深刻的理解，从而有助于掌握这个强大工具的命令。
- en: 'The Git ecosystem made some really giant steps forward since April 2015, but
    at its heart, Git is always the same. Here is an incomplete list of new features
    and improvements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自2015年4月以来，Git生态系统取得了巨大进步，但Git的核心始终不变。以下是一些新增功能和改进的未完整列表：
- en: Big improvements for Windows (for example, a fully working credential subsystem,
    performance enhancements, and so on—see [https://github.com/git-for-windows/git](https://github.com/git-for-windows/git)).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Windows的重大改进（例如，完整的凭证子系统、性能提升等——参见[https://github.com/git-for-windows/git](https://github.com/git-for-windows/git)）。
- en: Git Large File Storage (LFS)-an additional tool from GitHub friends (see [https://git-lfs.github.com](https://git-lfs.github.com)).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git大文件存储（LFS）——来自GitHub的附加工具（参见[https://git-lfs.github.com](https://git-lfs.github.com)）。
- en: Git Virtual File System from Microsoft fellows (see [https://github.com/Microsoft/GVFS](https://github.com/Microsoft/GVFS)).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软同仁提供的Git虚拟文件系统（参见[https://github.com/Microsoft/GVFS](https://github.com/Microsoft/GVFS)）。
- en: '`git worktree` command and functionalities. Worktrees are a feature that was
    first included in Git 2.5; they let you check out and work on multiple repository
    branches in different directories simultaneously-see [https://git-scm.com/docs/git-worktree](https://git-scm.com/docs/git-worktree).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git worktree`命令和功能。工作树是Git 2.5中首次引入的一个功能，它让你可以在不同目录中同时检出并处理多个仓库分支——参见[https://git-scm.com/docs/git-worktree](https://git-scm.com/docs/git-worktree)。'
- en: A lot of improvements and new options for common commands, too many to cite
    them all.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多常用命令得到了改进和新增了选项，改进内容太多，无法一一列举。
- en: So the aim of this book is to get started with versioning and learn how to do
    it proficiently.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这本书的目标是让你开始使用版本控制，并学习如何熟练地操作它。
- en: Let's start!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧！
- en: Installing Git
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Git
- en: Git is open source software. You can download it for free from [http://git-scm.com](http://git-scm.com/),
    where you will find a package for all the most common environments (GNU-Linux,
    macOS and Windows). At the time of writing this book, the latest version of Git
    is 2.11.0.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Git是开源软件。你可以从[http://git-scm.com](http://git-scm.com/)免费下载安装，在那里你可以找到适用于所有常见环境（GNU-Linux、macOS和Windows）的安装包。写本书时，Git的最新版本是2.11.0。
- en: Installing Git on GNU-Linux
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GNU-Linux上安装Git
- en: If you are a Linux user, you may have Git out of the box.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Linux用户，你可能已经预装了Git。
- en: 'If not, you can use the distribution package manager to download and install
    it; an `apt-get install git` command or equivalent will provide you Git and all
    the necessary dependencies in seconds, as shown in the following image:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有，你可以使用发行版包管理器来下载和安装它；`apt-get install git`命令或等效命令会在几秒钟内为你安装Git以及所有必要的依赖，如下图所示：
- en: '![](img/2e26bfa5-7d66-458e-99a4-d997ea3ef19e.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e26bfa5-7d66-458e-99a4-d997ea3ef19e.png)'
- en: Installing Git on Kubuntu
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubuntu上安装Git
- en: Installing Git on macOS
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装Git
- en: 'There are several ways to install Git on macOS. The easiest way is to install
    the *Xcode command line tools*. Since *Mavericks* (*10.9*), you can do this simply
    by trying to run `git` from the terminal for the very first time. If you don''t
    have it installed already, it will prompt you to install it, as shown in the following
    image:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上安装Git有几种方式。最简单的方式是安装*Xcode命令行工具*。从*Mavericks*（*10.9*）开始，你只需要第一次在终端中尝试运行`git`。如果尚未安装，它会提示你进行安装，如下图所示：
- en: '![](img/25726502-9687-4b3b-b168-5c48f8107d24.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25726502-9687-4b3b-b168-5c48f8107d24.png)'
- en: Clicking on the Install button will fire the installation process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 点击安装按钮将开始安装过程。
- en: 'If you want a more up-to-date version, you can also install it via the `*.dmg`
    binary installer, downloaded from [git-scm.com](http://git-scm.com) (it says *mavericks*
    in the file name, but just ignore that). Beware the macOS policies while installing
    packages downloaded from the Internet; to allow execution, you need to hold down
    *CTRL* and click on the package icon to open it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个更新版本，也可以通过`*.dmg`二进制安装程序进行安装，该安装程序可以从[git-scm.com](http://git-scm.com)下载（文件名中有*mavericks*，但可以忽略这个）。安装从互联网下载的软件包时，请留意macOS的安全策略；要允许执行，你需要按住*CTRL*并点击包图标来打开它：
- en: '![](img/d9702380-471d-498a-9a4b-470a82ab7a3e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9702380-471d-498a-9a4b-470a82ab7a3e.png)'
- en: Hold down CTRL and click to let macOS prompt you to open the package
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按住CTRL并点击，让macOS提示你打开包文件
- en: 'After this, the installation will be very easy-it''s just a matter of clicking
    on the Continue button and following the steps represented in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，安装过程非常简单——只需点击继续按钮并按照下面的截图中的步骤操作：
- en: '![](img/c96e5c29-a3e5-45d1-a829-4bdd76c775ed.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c96e5c29-a3e5-45d1-a829-4bdd76c775ed.png)'
- en: Let's start the installation process
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开始安装过程
- en: 'Click on the Continue button and then go on; a window like the one shown in
    the following image will appear:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 点击继续按钮，然后继续；如以下图片所示的窗口将会出现：
- en: '![](img/315203ae-cf5e-436a-92b3-6940f7f67022.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/315203ae-cf5e-436a-92b3-6940f7f67022.png)'
- en: Here you can change the installation location, if you need; if in doubt, simply
    click Install
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以更改安装位置，如果不确定，可以直接点击安装
- en: 'Click now on the Install button to start the installation. After a few seconds,
    the installation will be completed:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击安装按钮以开始安装。几秒钟后，安装将完成：
- en: '![](img/eeed1047-81e6-43f0-be53-c2f6e526a9d8.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eeed1047-81e6-43f0-be53-c2f6e526a9d8.png)'
- en: Installation complete
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成
- en: Installing Git on Windows
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装Git
- en: 'While clicking on the `Download` button on [http://git-scm.com](http://git-scm.com),
    you will automatically download Git in either the **x86** or the **x64** variant.
    I won''t go into too much detail about the installation process itself, as it
    is trivial; I will only provide a few recommendations in the following screenshots:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击[http://git-scm.com](http://git-scm.com)上的`Download`按钮时，你将自动下载**x86**或**x64**版本的Git。我不会详细介绍安装过程本身，因为它非常简单；我只会在以下截图中提供一些建议：
- en: '![](img/18642337-14d5-4c31-8a15-175000638d5c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18642337-14d5-4c31-8a15-175000638d5c.png)'
- en: Enabling Windows Explorer integration is generally useful; you will benefit
    from a convenient way to open a Git prompt in any folder by right-clicking on
    the contextual menu.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Windows资源管理器集成通常是有用的；通过右键点击上下文菜单，你可以在任何文件夹中方便地打开Git提示符。
- en: 'You should also enable Git to be used in the classic DOS command prompt, as
    shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该启用Git在经典的DOS命令提示符下使用，如下图所示：
- en: '![](img/c7345804-495b-44c0-91b4-e399732b62ad.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7345804-495b-44c0-91b4-e399732b62ad.png)'
- en: Git is provided with an embedded, Windows-compatible version of the famous **Bash
    shell** (see [https://en.wikipedia.org/wiki/Bash_(Unix_shell)](https://en.wikipedia.org/wiki/Bash_(Unix_shell))),
    which we will use extensively. By doing this, we will also make Git available
    to third-party applications, such as GUIs and so on. It will come in handy when
    we give some GUI tools a try.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Git 提供了一个内嵌的、与Windows兼容的著名**Bash shell**（参见 [https://en.wikipedia.org/wiki/Bash_(Unix_shell)](https://en.wikipedia.org/wiki/Bash_(Unix_shell))），我们将广泛使用它。通过这样做，我们还将使Git可供第三方应用程序使用，如GUI等。当我们尝试一些GUI工具时，它将派上用场。
- en: 'Use defaults for line endings. This will protect you from future annoyances
    while working on multiplatform repositories:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对行尾使用默认设置。这将避免你在处理多平台仓库时遇到的未来烦恼：
- en: '![](img/5387b9cb-4bc5-4910-9d6f-a3710cec7e53.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5387b9cb-4bc5-4910-9d6f-a3710cec7e53.png)'
- en: 'Now it''s time to choose a terminal emulator for Git; I recommend using **MinTTY**
    (see [https://mintty.github.io](https://mintty.github.io/)), as it is a very good
    shell, fully customizable and user friendly:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是选择Git终端模拟器的时候了；我推荐使用**MinTTY**（参见 [https://mintty.github.io](https://mintty.github.io/)），因为它是一个非常好的shell，完全可定制且用户友好：
- en: '![](img/233d38e9-b625-482b-bf06-0c8fba4132fb.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/233d38e9-b625-482b-bf06-0c8fba4132fb.png)'
- en: 'Now, let''s look at some new stuff from the latest Git releases-that is file
    system caching, the Git Credential Manager, and symbolic links:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下最新Git版本中的一些新特性——即文件系统缓存、Git凭据管理器和符号链接：
- en: '![](img/25a403c0-6ebc-4b48-a6c9-ebf0f62c8f7a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25a403c0-6ebc-4b48-a6c9-ebf0f62c8f7a.png)'
- en: '**File system caching** has been considered experimental until Git for Windows
    v2.7.4 (March 18, 2016), but now it is stable, and since Git 2.8 this feature
    is enabled by default. This is a Windows-only configuration option, and allows
    Git to be quicker when dealing with the underlying read/write operations. I recommend
    that you enable it for optimal performance.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件系统缓存**在Git for Windows v2.7.4（2016年3月18日）之前被认为是实验性的，但现在它已稳定，并且自Git 2.8起默认启用。这是一个仅适用于Windows的配置选项，允许Git在处理底层读写操作时更快。我建议你启用此功能以获得最佳性能。'
- en: '**Git Credential Manager** (see [https://github.com/Microsoft/Git-Credential-Manager-for-Windows](https://github.com/Microsoft/Git-Credential-Manager-for-Windows))
    is included in the Git for Windows installer since v2.7.2 (February 23, 2016).
    Thanks to Microsoft, today, you can deal with Git users and passwords as easily
    as you can on other platforms. It requires .NET framework v4.5 or later, and perfectly
    integrates even with Visual Studio (see [https://www.visualstudio.com/](https://www.visualstudio.com/))
    and the GitHub for Windows (see [https://desktop.github.com](https://desktop.github.com))
    GUI. I recommend that you enable it, as it saves some time while working.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git凭证管理器**（见[https://github.com/Microsoft/Git-Credential-Manager-for-Windows](https://github.com/Microsoft/Git-Credential-Manager-for-Windows)）自v2.7.2版（2016年2月23日）起已包含在Git
    for Windows安装程序中。多亏了微软，现在你可以像在其他平台上一样轻松处理Git用户和密码。它要求.NET框架v4.5或更高版本，并且可以完美集成到Visual
    Studio（见[https://www.visualstudio.com/](https://www.visualstudio.com/)）和GitHub
    for Windows（见[https://desktop.github.com](https://desktop.github.com)）图形界面中。我建议你启用它，因为它在工作时节省了一些时间。'
- en: '**Symbolic links** is a feature that Windows has lacked from the beginning,
    and even when they were introduced in Windows Vista, they have highlighted many
    incompatibilities with with Unix-like symlinks.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**符号链接**是Windows从一开始就缺失的功能，即便在Windows Vista引入该功能时，它们也暴露了许多与Unix-like符号链接的不兼容问题。'
- en: Anyway, Git and its Windows subsystem can handle them (with some limitations),
    so, if needed, you can try to install this feature and enable it in configuration
    options (they are disabled by default). For now, however, the best thing is to
    not use them at all in your repository if you need to work on the Windows platform.
    You can find more info at [https://github.com/git-for-windows/git/wiki/Symbolic-Links](https://github.com/git-for-windows/git/wiki/Symbolic-Links).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，Git及其Windows子系统可以处理这些（有一些限制），所以如果需要，你可以尝试安装此功能并在配置选项中启用它（默认情况下是禁用的）。不过现在，最好的做法是，如果你需要在Windows平台上工作，最好完全不要在你的仓库中使用它们。你可以在[https://github.com/git-for-windows/git/wiki/Symbolic-Links](https://github.com/git-for-windows/git/wiki/Symbolic-Links)找到更多信息。
- en: '![](img/ce062565-356f-418e-87cd-e52108e301a0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce062565-356f-418e-87cd-e52108e301a0.png)'
- en: Git for Windows v2.10.2 (November 2 2016) introduced **a new, built-in difftool**
    that promises quicker diffs. I use it on a daily basis, and I find it quite stable
    and fast. Enable it if you want give it a try, but this is not mandatory for the
    purposes of this book.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Git for Windows v2.10.2（2016年11月2日）引入了**一个新的内置difftool**，承诺能更快地进行差异比较。我每天都在使用它，觉得它相当稳定且快速。如果你想尝试，可以启用它，但本书的目的并不要求必须使用它。
- en: '![](img/98d1e96b-1e2d-4be8-9ff8-a7076d9ef616.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98d1e96b-1e2d-4be8-9ff8-a7076d9ef616.png)'
- en: Git for Windows will install it in the default `Program Files` folder, as all
    the Windows programs usually do.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Git for Windows将把它安装在默认的`Program Files`文件夹中，就像所有Windows程序一样。
- en: '![](img/c155f8b3-67c3-445a-907a-bd518de47193.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c155f8b3-67c3-445a-907a-bd518de47193.png)'
- en: At the end of the process, we will have Git installed, and all its `*nix` friends
    will be ready to use it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个过程中，我们将安装Git，并且所有它的`*nix`伙伴将准备好使用它。
- en: Please keep an eye on the Release Notes to see what's new in the latest release.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意查看发布说明，以了解最新版本的新增内容。
- en: Running our first Git command
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行我们的第一个Git命令
- en: From now on, as a matter of convenience, we will use Windows as our platform
    of reference. Our screenshots will always refer to that platform. In any case,
    all the Git main commands we will use will work on the platforms we have previously
    mentioned anyway.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，为了方便起见，我们将以Windows作为参考平台。我们的截图将始终以该平台为准。无论如何，我们将使用的所有Git主命令都能在我们之前提到的平台上正常工作。
- en: It's time to test our installation. Is Git ready to rock? Let's find out!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是测试我们安装的时刻。Git准备好迎接挑战了吗？让我们来看看！
- en: 'Using shell integration, right-click on an empty place on the desktop and choose
    the new menu item Git Bash Here. It will appear as a new MinTTY shell, providing
    you a Git-ready bash for Windows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Shell集成，在桌面上的空白处右键单击，选择新的菜单项“Git Bash Here”。它将作为一个新的MinTTY Shell出现，为你提供一个适用于Windows的Git-ready
    bash：
- en: '![](img/34ec3b0b-ab20-4185-9a40-55f9c3ce0f86.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34ec3b0b-ab20-4185-9a40-55f9c3ce0f86.png)'
- en: 'This is a typical Bash prompt: we can see the user, `nando`, and the host,
    `computer`. Then there''s a `MINGW64` string, which refers to the actual platform
    we are using, called Minimalist GNU for Windows (see [http://www.mingw.org](http://www.mingw.org)),
    and at the end we find the actual path, in a more `*nix` fashion, `/c/Users/nando`.
    Later, we will look at this argument in more detail.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的 Bash 提示符：我们可以看到用户名 `nando` 和主机名 `computer`。接着是一个 `MINGW64` 字符串，它表示我们使用的实际平台，叫做
    Minimalist GNU for Windows（请参见 [http://www.mingw.org](http://www.mingw.org)），最后是实际的路径，以更符合
    `*nix` 风格的方式呈现，`/c/Users/nando`。稍后我们将更详细地探讨这个参数。
- en: 'Now that we have a new, shiny Bash prompt, simply type `git` (or the equivalent,
    `git --help`), as shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个崭新的 Bash 提示符，只需输入 `git`（或者等效命令 `git --help`），如下面的截图所示：
- en: '![](img/6fad571e-24e2-4fc6-b962-3416cb5faba8.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fad571e-24e2-4fc6-b962-3416cb5faba8.png)'
- en: If Git has been installed correctly, typing `git` without specifying anything
    else will result in a short help page, with a list of common commands (if not,
    try reinstalling Git).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Git 已正确安装，输入 `git` 而不指定任何内容，将显示一个简短的帮助页面，列出常用命令（如果没有显示，请尝试重新安装 Git）。
- en: So, we have Git up and running! Are you excited? Let's begin to type!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的 Git 已经启动并运行了！你激动吗？让我们开始输入命令吧！
- en: Making presentations
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做演示
- en: Git needs to know who you are. This is because in Git, every modification you
    make in a repository has to be signed with the name and email of the author. So,
    before doing anything else, we have to tell Git this information.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Git 需要知道你是谁。这是因为在 Git 中，你在仓库中的每次修改都必须用作者的名字和电子邮件进行签名。所以，在做任何其他事情之前，我们必须告诉 Git
    这些信息。
- en: 'Type these two commands:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这两个命令：
- en: '![](img/e26e187c-61dd-4aa2-afcc-f79eb19e0247.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e26e187c-61dd-4aa2-afcc-f79eb19e0247.png)'
- en: Using the `git config` command, we set up two configuration variables-`user.name`
    and `user.email`. Starting from now, Git will use them to sign your commits in
    all your repositories. Do not worry about it for now; in the next few chapters,
    we will explore the Git configuration system in more detail.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `git config` 命令，我们设置了两个配置变量——`user.name` 和 `user.email`。从现在开始，Git 会在你所有的仓库中使用这些信息来签署你的提交。暂时不用担心这些；在接下来的章节中，我们会更详细地探索
    Git 配置系统。
- en: Setting up a new repository
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置新仓库
- en: The first step is to set up a new repository. A **repository** is a container
    for your entire project; every file or subfolder within it belongs to that repository,
    in a consistent manner. Physically, a repository is nothing other than a folder
    that contains a special `.git` folder, the folder where the magic happens.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是设置一个新的仓库。一个 **仓库** 是你的整个项目的容器；其中的每个文件或子文件夹都属于该仓库，并保持一致性。物理上，一个仓库就是一个包含特殊
    `.git` 文件夹的文件夹，这个文件夹就是魔法发生的地方。
- en: 'Let''s try to make our first repository. Choose a folder you like (for example,
    `C:\Repos\MyFirstRepo`), and type the `git init` command, as shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试创建我们的第一个仓库。选择一个你喜欢的文件夹（例如，`C:\Repos\MyFirstRepo`），并输入 `git init` 命令，如下所示：
- en: '![](img/d9f679f0-ede6-4d88-8e9f-074cb44d370d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9f679f0-ede6-4d88-8e9f-074cb44d370d.png)'
- en: As you can see, I slightly modified the default Git Bash prompt to better fit
    the need of the demoing commands; I removed the user and host, and added an incremental
    number to every command we type so that it will be simpler for me to refer to
    it while explaining, and for you to refer to it while reading.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我稍微修改了默认的 Git Bash 提示符，以更好地满足演示命令的需求；我去除了用户和主机名，并在每个命令前添加了一个递增的编号，这样在我讲解时更便于引用，也方便你在阅读时查找。
- en: 'Let''s get back on topic. What just happened inside the `MyFirstRepo` folder?
    Git created a `.git` subfolder. The subfolder (normally hidden in Windows) contains
    some other files and folders, as shown in the next screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到正题。刚刚在 `MyFirstRepo` 文件夹中发生了什么？Git 创建了一个 `.git` 子文件夹。这个子文件夹（在 Windows 中通常是隐藏的）包含了一些其他的文件和文件夹，如下一个截图所示：
- en: '![](img/48a804dd-4d90-4e03-ba5f-d86c3487d6b2.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48a804dd-4d90-4e03-ba5f-d86c3487d6b2.png)'
- en: At this point in time, it is not important for us to understand what is inside
    this folder. The only thing you have to know is that you do not have to touch
    it, ever! If you delete it or if you modify the files inside by hand, you could
    get into trouble. Have I frightened you enough?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时此刻，我们无需理解这个文件夹中的内容。你只需要知道的是，你永远不需要碰它！如果你删除它或者手动修改其中的文件，可能会导致麻烦。我吓到你了吗？
- en: Now that we have a repository, we can start to put files inside it. Git can
    trace the history of any type of file, text-based or binary, small or large, with
    the same efficiency (more or less; large files are always a problem).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了一个代码库，就可以开始将文件放入其中。Git 可以高效地跟踪任何类型文件的历史，不论是文本文件还是二进制文件，小文件还是大文件（大文件始终是个问题）。
- en: Adding a file
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加文件
- en: 'Let''s create a text file, just to give it a try:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个文本文件，试试看：
- en: '![](img/2211b114-5c50-4628-b1ce-fd9ccc9d5a14.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2211b114-5c50-4628-b1ce-fd9ccc9d5a14.png)'
- en: And now what? Is that all? No! We have to tell Git to put this file in your
    repository, *explicitly*. **Git doesn't do anything that you don't want it to
    do**. If you have some spare or temp files in your repository, Git will not take
    care of them, but will only remind you that there are some files in your repository
    that are not under version control (in the next chapter, we will see how to instruct
    Git to ignore them when necessary).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在怎么办？就这样吗？不！我们还需要告诉 Git，将该文件放入你的代码库中，*明确地*。**Git 不会做任何你不希望它做的事情**。如果你的代码库中有一些临时文件或备用文件，Git
    不会处理它们，只会提醒你有些文件不在版本控制之下（在下一章，我们将看到如何指示 Git 在必要时忽略这些文件）。
- en: 'Okay, back to the topic. I want `file.txt` under the control of Git, so let''s
    add it, as shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，回到正题。我希望将 `file.txt` 纳入 Git 的管理之中，所以我们将它添加进去，如下所示：
- en: '![](img/db3557ef-76cc-4b4a-ad92-92822218f3c2.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db3557ef-76cc-4b4a-ad92-92822218f3c2.png)'
- en: The `git add` command tells Git that we want it to take care of that file and
    check it for future modifications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`git add` 命令告诉 Git，我们希望它管理该文件，并在未来检查该文件的修改。'
- en: 'In response to this command, it could happen that you will see this response
    message from Git:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这个命令，可能会看到 Git 返回以下消息：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The file will have its original line endings in your working directory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件将在你的工作目录中保留其原始行结尾格式。
- en: 'This is because of the option that we selected when installing Git: *Checkout
    Windows-style, commit Unix-style line endings*. Don''t worry about it for the
    moment; we will deal with it later.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由于我们在安装 Git 时选择的选项：*检出 Windows 样式，提交 Unix 样式的行结尾*。目前不用担心这个问题，我们稍后会处理它。
- en: Now, let us see if Git obeyed us.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Git 是否听从了我们的指令。
- en: 'Using the `git status` command, we can check the status of the repository,
    as shown in this screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `git status` 命令，我们可以查看代码库的状态，如下所示：
- en: '![](img/85f50602-ca1c-4156-b88c-02cf0f190895.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85f50602-ca1c-4156-b88c-02cf0f190895.png)'
- en: 'As we can see, Git has accomplished its work as expected. In this image, we
    can read words such as `branch`, `master`, `commit`, and `unstage`. We will look
    at them briefly, but for the moment, let''s ignore them: The purpose of this first
    experiment is overcome our fear and start playing with Git commands; after all,
    we have an entire book in which to learn the significant details.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Git 按预期完成了它的工作。在这张图中，我们可以看到诸如 `branch`、`master`、`commit` 和 `unstage` 等字眼。我们稍后会简单了解它们，但现在先忽略它们：这个首次实验的目的是克服我们的恐惧，并开始使用
    Git 命令；毕竟，我们有整本书可以学习其中的重要细节。
- en: Committing the added file
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交添加的文件
- en: 'At this point, Git knows about `file.txt`, but we have to perform another step
    to fix the snapshot of its content. We have to commit it using the appropriate
    `git commit` command. This time, we will add some flavor to our command, using
    the `--message` (or `-m`) subcommand, as shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，Git 已经知道 `file.txt` 的存在，但我们还需要执行另一个步骤，以修正其内容的快照。我们需要使用适当的 `git commit`
    命令提交它。这一次，我们将在命令中添加一些额外内容，使用 `--message`（或 `-m`）子命令，如下所示：
- en: '![](img/95d9904e-1bab-42fd-ba87-414c8347c224.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95d9904e-1bab-42fd-ba87-414c8347c224.png)'
- en: With the commit of `file.txt`, we have finally fired up our repository. Having
    done the first commit (also known as the root-commit, as you can see in the screenshot),
    the repository now has a `master` branch with a commit inside it. We will play
    with branches in the forthcoming chapters. Right now, think of it as a path of
    our repository, and keep in mind that a repository can have multiple paths that
    often cross each other.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提交 `file.txt`，我们终于启动了我们的代码库。在完成第一次提交（也叫做根提交，如截图所示）后，代码库现在拥有一个包含提交的 `master`
    分支。接下来的章节中我们会玩转分支。现在，可以将它看作是代码库的路径，并记住一个代码库可以有多条交叉的路径。
- en: Modifying a committed file
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改已提交的文件
- en: 'Now, we can try to make some modifications to the file and see how to deal
    with it, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试修改文件，并查看如何处理它，如下图所示：
- en: '![](img/59fe50b6-f898-49d7-bb5f-79c86f95a81a.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59fe50b6-f898-49d7-bb5f-79c86f95a81a.png)'
- en: As you can see, the Bash shell warns us that there are some modifications painting
    the name of the modified files in red. Here, the `git status` command informs
    us that there is a file with some modifications, and that we need to commit it
    if we want to save this modification step in the repository history.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Bash shell 会警告我们有些文件已被修改，并且将修改的文件名标红。在这里，`git status` 命令告诉我们有一个文件进行了修改，如果我们想将该修改保存到仓库历史中，需要提交它。
- en: However, what does `**no changes added to commit**` mean? It is simple. Git
    makes you take a second look at what you want to include in the next commit. If
    you have touched two files but you want to commit only one, you can add only that
    one.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`**no changes added to commit**`是什么意思呢？很简单。Git 会让你重新审视你想要包含在下一个提交中的内容。如果你修改了两个文件，但只想提交其中一个，你可以只添加那个文件。
- en: If you try to commit by skipping the `add` step, nothing will happen (see the
    following screenshot). We will analyze this behavior in depth in the next chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试跳过 `add` 步骤进行提交，什么也不会发生（见下图）。我们将在下一章深入分析这种行为。
- en: 'So, let''s add the file again for the purpose of getting things ready for the
    next commit:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们再次添加文件，以便为下一个提交做好准备：
- en: '![](img/8be5acd5-0bad-4540-95f3-36c0cf99714c.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8be5acd5-0bad-4540-95f3-36c0cf99714c.png)'
- en: 'Okay, let''s make another commit, this time, avoiding the `--message` subcommand.
    Type `git commit` and hit the *Enter* key:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们再做一个提交，这次避免使用 `--message` 子命令。输入 `git commit` 然后按 *Enter* 键：
- en: '![](img/ca8fea03-9530-4cda-8324-b2832e0bc46b.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca8fea03-9530-4cda-8324-b2832e0bc46b.png)'
- en: Fasten your seatbelts! You are now entering in a piece of code history!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 系好安全带！你现在进入了代码历史的一部分！
- en: '![](img/2b2ccf35-7b58-437a-951d-ef49ea0447c1.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b2ccf35-7b58-437a-951d-ef49ea0447c1.png)'
- en: 'What is that? It''s **Vim** (**Vi IMproved**), an ancient and powerful text
    editor, used even today by millions of people. You can configure Git to use your
    own preferred editor, but if you don''t do it, this is what you have to deal with.
    Vim is powerful, but for newcomers, it can be a pain to use. It has a strange
    way of dealing with text. To start typing, you have to press *I* for inserting
    text, as shown in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 那是什么？它是 **Vim**（**Vi IMproved**），一个古老而强大的文本编辑器，直到今天仍被数百万用户使用。你可以将 Git 配置为使用你自己喜欢的编辑器，但如果你没有这么做，这就是你必须面对的。Vim
    很强大，但对于新手来说，使用起来可能会让人头疼。它处理文本的方式很独特。要开始输入，你必须按 *I* 键进入插入模式，如下图所示：
- en: '![](img/a0775cfb-39d3-4c11-8c1c-b5c7716f7b93.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0775cfb-39d3-4c11-8c1c-b5c7716f7b93.png)'
- en: 'Once you have typed your commit message, you can press *Esc* to get out of
    editing mode. Then, you can type the `:w` command to write changes and the `:q`
    command to quit. You can also type the command in pairs as `:wq`, as we do in
    this screenshot, or use the equivalent `:x` command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了提交信息，就可以按 *Esc* 键退出编辑模式。然后，你可以输入 `:w` 命令保存更改，并输入 `:q` 命令退出。你也可以将这两个命令合并为
    `:wq`，正如我们在这张截图中所做的，或者使用等效的 `:x` 命令：
- en: '![](img/1cfd1140-1211-46fd-8bdf-9746f3424e61.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1cfd1140-1211-46fd-8bdf-9746f3424e61.png)'
- en: 'After that, press *Enter* and another commit is done, as shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，按下 *Enter*，再一次完成提交，如下所示：
- en: '![](img/196a26eb-6327-4de8-afa4-99c06ee29d19.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/196a26eb-6327-4de8-afa4-99c06ee29d19.png)'
- en: Note that when you exit from Vim, Git automatically dispatches the commit, as
    you can see in the preceding screenshot.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你退出 Vim 时，Git 会自动提交，你可以在之前的截图中看到这一点。
- en: Well done! Now, it's time to recap.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好！现在，是时候回顾一下了。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned that Git is not so difficult to install, even on
    a non-Unix platform, such as Windows.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学到 Git 并不难安装，即使是在非 Unix 平台上，如 Windows。
- en: Once you have chosen a directory to include in a Git repository, you can see
    that initializing a new Git repository is as easy as executing a `git init` command.
    For now, don't worry about saving it on a remote server and so on. It's not mandatory
    to save it; you can do this when you need, preserving the entire history of your
    repository. This is a killer feature of Git and DVCS in general. You can comfortably
    work offline and push your work to a remote location when the network is available,
    without any hassle.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了一个目录来包含在 Git 仓库中，你会发现初始化一个新的 Git 仓库就像执行一个 `git init` 命令一样简单。现在，不用担心将其保存到远程服务器等问题。保存并不是强制要求的；你可以在需要时再执行保存操作，保留仓库的完整历史记录。这是
    Git 和分布式版本控制系统（DVCS）的一项杀手级功能。你可以在离线状态下舒适地工作，并在网络可用时将你的工作推送到远程位置，毫不麻烦。
- en: 'Lastly, we discovered one of the most important character traits of Git: it
    will do nothing if you don''t mention it explicitly. You also learned a little
    bit about the `add` command. We were obliged to perform a `git add` command for
    a file when we committed it to Git for the very first time. Then, we used another
    command when we modified it. This is because if you modify a file, Git does not
    expect that you want it to be automatically added to the next commit (and it''s
    right to assume this, I''d say).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们发现了 Git 最重要的一个特点：如果你没有明确提到，它什么都不会做。你还学到了一点关于`add`命令的知识。当我们第一次将文件提交到 Git
    时，必须执行 `git add` 命令。然后，当我们修改文件时，又使用了另一个命令。这是因为，如果你修改了一个文件，Git 默认不会将其自动添加到下次提交中（我认为它这么假设是对的）。
- en: In the next chapter, we will look at some fundamentals of Git.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习 Git 的一些基本概念。
