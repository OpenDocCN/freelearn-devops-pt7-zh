["```\n$ aws --version\n$ aws ec2 describe-regions\n```", "```\n- name: Deploy and configure the AWS Environment\n  hosts: localhost\n  connection: local\n  gather_facts: true\n  vars_files:\n    - group_vars/aws.yml\n    - group_vars/common.yml\n  roles:\n    - roles/create-randoms\n    - roles/aws-network\n    - roles/aws-storage\n    - roles/aws-database\n    - roles/aws-vm-admin\n    - roles/aws-asg-web\n    - roles/output\n```", "```\n$ ansible-galaxy init roles/role-name\n```", "```\napp:\n  name: \"iac-wordpress\"\n  location: \"us-east-1\"\n  env: \"prod\"\nwordpress:\n  wp_title: \"IAC WordPress\"\n  wp_admin_user: \"admin\"\n  wp_admin_email: \"test@test.com\"\n```", "```\nvpc_name: \"{{ app.name }}-{{ app.env }}-{{ dict.vpc }}\"\nvpc_subnet_web01_name: \"{{ app.name }}-{{ app.env }}-web01-{{ dict.subnet }}\"\nvpc_subnet_web02_name: \"{{ app.name }}-{{ app.env }}-web02-{{ dict.subnet }}\"\n```", "```\nvpc:\n  address_space: \"10.0.0.0/24\"\n```", "```\n- name: Create VPC\n  amazon.aws.ec2_vpc_net:\n    name: \"{{ vpc_name }}\"\n    region: \"{{ region }}\"\n    cidr_block: \"{{ vpc.address_space }}\"\n    dns_hostnames: true\n    dns_support: true\n    state: present\n  register: vpc\n```", "```\n- name: get some information on the available zones\n  amazon.aws.aws_az_info:\n    region: \"{{ region }}\"\n  register: zones\n```", "```\n- name: Create Subnet Web01\n  amazon.aws.ec2_vpc_subnet:\n    vpc_id: \"{{ vpc.vpc.id }}\"\n    cidr: \"{{ vpc.vpc.cidr_block | ansible.utils.ipsubnet(27, 0) }}\"\n    az: \"{{ zones.availability_zones[0].zone_name }}\"\n    region: \"{{ region }}\"\n    tags:\n      Name: \"{{ vpc_subnet_web01_name }}\"\n      Description: \"{{ dict.ansible_warning }}\"\n      Project: \"{{ app.name }}\"\n      Environment: \"{{ app.env }}\"\n      Deployed_by: \"Ansible\"\n  register: subnet_web01\n```", "```\n- name: Create an ELB target group\n  community.aws.elb_target_group:\n    name: \"{{ alb_target_group_name }}\"\n    protocol: \"HTTP\"\n    port: \"80\"\n    vpc_id: \"{{ vpc.vpc.id }}\"\n    region: \"{{ region }}\"\n    state: \"present\"\n    modify_targets: false\n    tags:\n      Name: \"{{ alb_target_group_name }}\"\n      Description: \"{{ dict.ansible_warning }}\"\n      Project: \"{{ app.name }}\"\n      Environment: \"{{ app.env }}\"\n      Deployed_by: \"Ansible\"\n  register: alb_target_group\n```", "```\n- name: Create the EFS resource\n  community.aws.efs:\n    name: \"{{ efs_name }}\"\n    state: present\n    region: \"{{ region }}\"\n    targets:\n      - subnet_id: \"{{ subnet_web01.subnet.id }}\"\n        security_groups: [\"{{ security_group_efs.group_id }}\"]\n      - subnet_id: \"{{ subnet_web02.subnet.id }}\"\n        security_groups: [\"{{ security_group_efs.group_id }}\"]\n    tags:\n      Name: \"{{ efs_name }}\"\n      Description: \"{{ dict.ansible_warning }}\"\n      Project: \"{{ app.name }}\"\n      Environment: \"{{ app.env }}\"\n      Deployed_by: \"Ansible\"\n  register: efs\n```", "```\nec2:\n  instance_type: \"t2.micro\"\n  public_ip: true\n  asg:\n    min_size: 1\n    max_size: 3\n    desired_capacity: 2\n  ami:\n    owners: \"099720109477\"\n    filters:\n      name: \"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"\n      virtualization_type: \"hvm\"\n```", "```\n- name: Generate temp admin cloud-init file\n  ansible.builtin.tempfile:\n  register: tmp_file_create_cloud_init_admin_task\n```", "```\n- name: Create the admin cloud-init file from a template file\n  ansible.builtin.template:\n    src: \"vm-cloud-init-admin.yml.j2\"\n    dest: \"{{ tmp_file_create_cloud_init_admin_task.path }}\"\n```", "```\n- name: gather information about AMIs with the specified filters\n  amazon.aws.ec2_ami_info:\n    region: \"{{ region }}\"\n    owners: \"{{ ec2.ami.owners }}\"\n    filters:\n      name: \"{{ ec2.ami.filters.name }}\"\n      virtualization-type: \"{{ ec2.ami.filters.virtualization_type }}\"\n  register: ubuntu_ami_info\n```", "```\n- name: filter the list of AMIs to find the latest one\n  set_fact:\n    ami: \"{{ ubuntu_ami_info.images | sort(attribute='creation_date') | last }}\"\n```", "```\n- name: create the admin ec2 instance\n  amazon.aws.ec2_instance:\n    name: \"{{ ec2_instance_name_admin }}\"\n    region: \"{{ region }}\"\n    vpc_subnet_id: \"{{ subnet_web01.subnet.id }}\"\n    instance_type: \"{{ ec2.instance_type }}\"\n    security_group: \"{{ security_group_web.group_name }}\"\n    network:\n      assign_public_ip: \"{{ ec2.public_ip }}\"\n    image_id: \"{{ ami.image_id }}\"\n    user_data: \"{{ lookup('file', tmp_file_create_cloud_init_admin_task.path) }}\"\n    tags:\n      Name: \"{{ ec2_instance_name_admin }}\"\n      Description: \"{{ dict.ansible_warning }}\"\n      Project: \"{{ app.name }}\"\n      Environment: \"{{ app.env }}\"\n      Deployed_by: \"Ansible\"\n  register: ec2_instance_admin\n```", "```\n- name: Get information about the admin EC2 instance to see if its running\n  amazon.aws.ec2_instance_info:\n    region: \"{{ region }}\"\n    filters:\n      instance-id: \"{{ ec2_instance_admin.instances[0].instance_id }}\"\n  register: admin_ec2_instance_state\n  delay: 5\n  retries: 50\n  until: admin_ec2_instance_state.instances[0].state.name == \"running\"\n```", "```\nuntil: admin_ec2_instance_state.instances[0].state.name == \"running\"\n```", "```\nretries: 50\ndelay: 5\n```", "```\n- name: Update the ELB target group\n  community.aws.elb_target_group:\n    name: \"{{ alb_target_group_name }}\"\n    protocol: \"HTTP\"\n    port: \"80\"\n    vpc_id: \"{{ vpc.vpc.id }}\"\n    region: \"{{ region }}\"\n    state: \"present\"\n    modify_targets: true\n    targets:\n      - Id: \"{{ ec2_instance_admin.instances[0].instance_id }}\"\n        Port: 80\n```", "```\n  # Mount the NFS share and add it to fstab\n  - until nc -vzw 2 {{ efs.efs.filesystem_address | regex_replace(\"[^A-Za-z0-9.-]\", \"\") }} 2049; do sleep 2; done; mount -t nfs4 {{ efs.efs.filesystem_address }} /var/www/html -o vers=4,minorversion=1,sec=sys\n  - echo \"{{ efs.efs.filesystem_address }} /var/www/html nfs4 vers=4,minorversion=1,sec=sys\" | sudo tee --append /etc/fstab\n```", "```\nuntil nc -vzw 2 somedns.domain.com 2049; do sleep 2;\ndone;\n```", "```\n{{ efs.efs.filesystem_address | regex_replace(\"[^A-Za-z0-9.-]\", \"\") }}\n```", "```\n- name: Generate temp web cloud-init file\n  ansible.builtin.tempfile:\n  register: tmp_file_create_cloud_init_web_task\n- name: Create the web cloud-init file from a template file\n  ansible.builtin.template:\n    src: \"vm-cloud-init-web.yml.j2\"\n    dest: \"{{ tmp_file_create_cloud_init_web_task.path }}\"\n```", "```\n- name: Create launch config\n  community.aws.autoscaling_launch_config:\n    name: \"{{ lauch_configuration_name }}\"\n    image_id: \"{{ ami.image_id }}\"\n    region: \"{{ region }}\"\n    security_groups: \"{{ security_group_web.group_name }}\"\n    instance_type: \"{{ ec2.instance_type }}\"\n    assign_public_ip: \"{{ ec2.public_ip }}\"\n    user_data: \"{{ lookup('file', tmp_file_create_cloud_init_web_task.path) }}\"\n```", "```\n- name: Create the Auto Scaling Group\n  amazon.aws.autoscaling_group:\n    name: \"{{ asg_name }}\"\n    region: \"{{ region }}\"\n    target_group_arns:\n      - \"{{ alb_target_group.target_group_arn }}\"\n    availability_zones:\n      - \"{{ zones.availability_zones[0].zone_name }}\"\n      - \"{{ zones.availability_zones[1].zone_name }}\"\n    launch_config_name: \"{{ lauch_configuration_name }}\"\n    min_size: \"{{ ec2.asg.min_size }}\"\n    max_size: \"{{ ec2.asg.max_size }}\"\n    desired_capacity: \"{{ ec2.asg.desired_capacity }}\"\n    vpc_zone_identifier:\n      - \"{{ subnet_web01.subnet.id }}\"\n      - \"{{ subnet_web02.subnet.id }}\"\n    tags:\n      - Name: \"{{ asg_name }}\"\n      - Description: \"{{ dict.ansible_warning }}\"\n      - Project: \"{{ app.name }}\"\n      - Environment: \"{{ app.env }}\"\n      - Deployed_by: \"Ansible\"\n```", "```\n- name: Output details on the deployment\n  ansible.builtin.debug:\n    msg:\n      - \"Wordpress Admin Username: {{ wordpress.wp_admin_user }}\"\n      - \"Wordpress Admin Password: {{ wp_password }}\"\n      - \"Wordpress URL: http://{{ alb.dns_name }}/\"\n```", "```\n$ ansible-playbook site.yml\n```", "```\n$ ansible-playbook destory.yml\n```", "```\nwhen: asgs.results | length > 0\n```", "```\n    - name: Delete the security groups\n      amazon.aws.ec2_security_group:\n        name: \"{{ item }}\"\n        region: \"{{ region }}\"\n        state: absent\n      with_items:\n        - \"{{ vpc_security_group_name_efs }}\"\n        - \"{{ vpc_security_group_name_rds }}\"\n        - \"{{ vpc_security_group_name_web }}\"\n      register: delelte_security_groups\n      until: \"delelte_security_groups is not failed\"\n      retries: 25\n      delay: 10\n```", "```\n    - name: Delete the Route Table\n      amazon.aws.ec2_vpc_route_table:\n        route_table_id: \"{{ item.route_table_id }}\"\n        vpc_id: \"{{ the_vpc.vpcs[0].id }}\"\n        region: \"{{ region }}\"\n        lookup: id\n        state: absent\n      when: the_vpc.vpcs | length > 0 and item.associations[0].main != true\n      with_items: \"{{ the_route_tables.route_tables }}\"\n```", "```\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n```", "```\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n```", "```\nresource \"aws_subnet\" \"web01\" {\n  vpc_id            = aws_vpc.vpc.id\n  cidr_block        = cidrsubnet(\"${aws_vpc.vpc.cidr_block}\", 3, 0)\n  availability_zone = var.zones[0]\n  tags              = merge(var.default_tags, tomap({ Name = \"${var.name}-${var.environment_type}-web01-subnet\" }))\n}\n```", "```\ndata \"aws_ami\" \"ubuntu_admin\" {\n  most_recent = var.ami_most_recent\n  owners      = [var.ami_owners]\n  filter {\n    name   = \"name\"\n    values = [var.ami_filter_name]\n  }\n  filter {\n    name   = \"virtualization-type\"\n    values = [var.ami_filter_virtualization_type]\n  }\n}\n```", "```\nresource \"random_password\" \"wordpress_admin_password\" {\n  length           = 16\n  special          = true\n  override_special = \"_%@\"\n}\n```", "```\nresource \"aws_instance\" \"admin\" {\n  ami  = data.aws_ami.ubuntu_admin.id\n  instance_type = var.instance_type\n  subnet_id = aws_subnet.web01.id\n  associate_public_ip_address = true\n  availability_zone = var.zones[0]\n  vpc_security_group_ids = [aws_security_group.sg_vms.id]\n```", "```\n  user_data = templatefile(\"vm-cloud-init-admin.yml.tftpl\", {\n    tmpl_database_username = \"${var.database_username}\"\n    tmpl_database_password = \"${random_password.database_password.result}\"\n    tmpl_database_hostname = \"${aws_db_instance.database.address}\"\n    tmpl_database_name     = \"${var.database_name}\"\n    tmpl_file_share        = \"${aws_efs_file_system.efs.dns_name}\"\n    tmpl_wordpress_url     = \"http://${aws_lb.lb.dns_name}/\"\n    tmpl_wp_title          = \"${var.wp_title}\"\n    tmpl_wp_admin_user     = \"${var.wp_admin_user}\"\n    tmpl_wp_admin_password = \"${random_password.wordpress_admin_password.result}\"\n    tmpl_wp_admin_email    = \"${var.wp_admin_email}\"\n  })\n```", "```\n  tags = merge(var.default_tags, tomap({ Name = \"${var.name}-${var.environment_type}-ec2-admin\" }))\n}\n```", "```\nresource \"aws_lb_target_group_attachment\" \"admin\" {\n  target_group_arn = aws_lb_target_group.front_end.arn\n  target_id        = aws_instance.admin.id\n  port             = 80\n}\n```", "```\nresource \"aws_launch_configuration\" \"web_launch_configuration\" {\n  name_prefix                 = \"${var.name}-${var.environment_type}-alc-web-\"\n  image_id                    = data.aws_ami.ubuntu_admin.id\n  instance_type               = var.instance_type\n  associate_public_ip_address = true\n  security_groups             = [aws_security_group.sg_vms.id]\n  user_data = templatefile(\"vm-cloud-init-web.yml.tftpl\", {\n    tmpl_file_share = \"${aws_efs_file_system.efs.dns_name}\"\n  })\n}\n```", "```\nresource \"aws_autoscaling_group\" \"web_autoscaling_group\" {\n  name                 = \"${var.name}-${var.environment_type}-asg-web\"\n  min_size             = var.min_number_of_web_servers\n  max_size             = var.max_number_of_web_servers\n  launch_configuration = aws_launch_configuration.web_launch_configuration.name\n  target_group_arns    = [aws_lb_target_group.front_end.arn]\n  vpc_zone_identifier  = [aws_subnet.web01.id, aws_subnet.web02.id]\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```", "```\noutput \"wp_user\" {\n  value     = \"Wordpress Admin Username: ${var.wp_admin_user}\"\n  sensitive = false\n}\noutput \"wp_password\" {\n  value     = \"Wordpress Admin Password: ${random_password.wordpress_admin_password.result}\"\n  sensitive = true\n}\noutput \"wp_url\" {\n  value     = \"Wordpress URL: http://${aws_lb.lb.dns_name}/\"\n  sensitive = false\n}\n```", "```\n$ terraform init\n$ terraform apply\n```", "```\n$ terraform destroy\n```"]