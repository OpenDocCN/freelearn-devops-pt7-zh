["```\n[user]\n    name = Joe R. Hacker\n    email = joe@company.com\n```", "```\n$ git status\nOn branch master\nnothing to commit, working tree clean\n```", "```\nYour branch is up to date with 'origin/master'.\n```", "```\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n        new file:   COPYING\n        renamed:    src/rand.c -> src/random.c\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   Makefile\n        deleted:    README\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n        NEWS\n```", "```\n$ git status --short\nA  COPYING\n M Makefile\n D README\nR  src/rand.c -> src/random.c\n?? NEWS\n```", "```\ndiff --git a/builtin-http-fetch.c b/http-fetch.c\nsimilarity index 95%\nrename from builtin-http-fetch.c\nrename to http-fetch.c\nindex f3e63d7206..e8f44babd9 100644\n--- a/builtin-http-fetch.c\n+++ b/http-fetch.c\n@@ -1,8 +1,9 @@\n #include \"cache.h\"\n #include \"walker.h\"\n-int cmd_http_fetch(int argc, const char **argv, const char *prefix)\n+int main(int argc, const char **argv)\n {\n+       const char *prefix;\n        struct walker *walker;\n        int commits_on_stdin = 0;\n        int commits;\n@@ -18,6 +19,8 @@ int cmd_http_fetch(int argc, const char **argv,\n        int get_verbosely = 0;\n        int get_recover = 0;\n+       prefix = setup_git_directory();\n+\n        git_config(git_default_config, NULL);\n        while (arg < argc && argv[arg][0] == '-') {\n```", "```\nsimilarity index 95%\nrename from builtin-http-fetch.c\nrename to http-fetch.c\n```", "```\nindex f3e63d7206..e8f44babd9 100644\n```", "```\n--- a/builtin-http-fetch.c\n+++ b/http-fetch.c\n```", "```\n@@ -1,8 +1,9 @@\n```", "```\n@@ -18,6 +19,8 @@ int cmd_http_fetch(int argc, const char\n```", "```\nint [-cmd_http_fetch-]{+main+}(int argc, const char **argv[-, const char *prefix-])\n```", "```\n\\ No newline at end of file\n```", "```\n#include \"cache.h\"\n #include \"walker.h\"\n-int cmd_http_fetch(int argc, const char **argv, const char *prefix)\n+int main(int argc, const char **argv)\n {\n+       const char *prefix;\n        struct walker *walker;\n        int commits_on_stdin = 0;\n        int commits;\n```", "```\n#include \"cache.h\"\n#include \"walker.h\"\nint cmd_http_fetch(int argc, const char **argv, const char *prefix)\n{\n       struct walker *walker;\n       int commits_on_stdin = 0;\n       int commits;\n```", "```\n#include \"cache.h\"\n#include \"walker.h\"\nint main(int argc, const char **argv)\n{\n       const char *prefix;\n       struct walker *walker;\n       int commits_on_stdin = 0;\n       int commits;\n```", "```\n$ git commit view/entry.tmpl\n```", "```\n$ git commit --interactive\n           staged     unstaged path\n  1:    unchanged        +3/-2 Makefile\n  2:    unchanged       +64/-1 src/rand.c\n*** Commands ***\n  1: status       2: update       3: revert       4: add untracked\n  5: patch        6: diff         7: quit         8: help\nWhat now>\n```", "```\nWhat now> h\nstatus        - show paths with changes\nupdate        - add working tree state to the staged set of changes\nrevert        - revert staged set of changes back to the HEAD version\npatch         - pick hunks and update selectively\ndiff          - view diff between HEAD and index\nadd untracked - add contents of untracked files to the staged set of changes\n```", "```\nWhat now> p\n           staged     unstaged path\n  1:    unchanged        +3/-2 Makefile\n  2:    unchanged       +64/-1 src/rand.c\nPatch update>> 1\n           staged     unstaged path\n* 1:    unchanged        +3/-2 Makefile\n  2:    unchanged       +64/-1 src/rand.c\nPatch update>>\n```", "```\ny - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk or any of the remaining ones\na - stage this hunk and all later hunks in the file\n…\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n```", "```\n@@ -16,7 +15,6 @@ int main(int argc, char *argv[])\n        int max = atoi(argv[1]);\n+       srand(time(NULL));\n        int result = random_int(max);\n        printf(\"%d\\n\", result);\nStage this hunk [y,n,q,a,d,/,j,J,g,e,?]? y\n```", "```\n$ git commit --amend\n```", "```\n$ git reflog --no-decorate\n94d3e03 HEAD@{0}: commit (amend): After amending\nd69a0a9 HEAD@{1}: commit: Before amending\n```", "```\n$ git branch testing\n```", "```\n$ git branch testing HEAD^^^\n```", "```\n$ git switch -c testing\n```", "```\n$ git checkout -b testing\n```", "```\n$ git switch --orphan gh-pages\nSwitched to a new branch 'gh-pages'\n```", "```\n$ git rm -rf .\n```", "```\n$ git switch testing\n```", "```\n$ git checkout other-branch\nerror: Your local changes to the following files would be overwritten by checkout:\n        file-with-local-changes\nPlease commit your changes or stash them before you switch branches.\nAborting\n```", "```\n$ git switch -\nPrevious HEAD position was a3bl9 <Some commit message>\nSwitched to branch 'master'\n```", "```\n$ git switch next\n```", "```\n$ git switch -c next --track origin/next\n```", "```\n$ git show-ref --abbrev next\n4936735 refs/remotes/origin/next\n```", "```\n$ git tag --list \"v0.9*\"\nv0.99\nv0.99.1\nv0.99.2\n```", "```\n$ git reflog --no-decorate HEAD\n…\n3a59408 HEAD@{3}: checkout: moving from base-doc to master\n```", "```\n$ git reflog --no-decorate new-name\n3a59408 new-name@{0}: branch: renamed refs/heads/old-name to refs/heads/new-name\n```"]