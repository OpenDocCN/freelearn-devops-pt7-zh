["```\n*.[oa]\n*~\n```", "```\n# ignore html files, generated from AsciiDoc sources\n*.html\n# except for the files below which are generated by hand\n!welcome.html\n```", "```\n# exclude everything except directory t0001/bin\n/*\n!/t0001\n/t0001/*\n!/t0001/bin\n```", "```\n$ git status --ignored\nOn branch master\nIgnored files:\n  (use \"git add -f <file>...\" to include in what will be committed)\n        rand.c~\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git status --short --branch --ignored\n## master\n!! rand.c~\n```", "```\n$ git ls-files --others --ignored --exclude-standard\nrand.c~\n```", "```\n$ git ls-files --cached --ignored --exclude-standard\n```", "```\n$ git update-index --skip-worktree GIT-VERSION-NAME\n$ git ls-files -v\nS GIT-VERSION-NAME\nH …\n```", "```\n$ git update-index --no-skip-worktree GIT-VERSION-NAME\n```", "```\npattern*  set -unset set-to=value !unspecified\n```", "```\n*.ps binary\n*.pbxproj binary\n```", "```\n*.doc  diff=word2text\n*.jpg  diff=exif\n```", "```\n[diff \"word2text\"]\n    textconv = catdoc\n# cached data will be stored in refs/notes/textconv/exif\n[diff \"exif\"]\n    textconv = exiftool\n    cachetextconv = true\n```", "```\n$ echo \"*.xml diff=xmldiff\" >>.gitattributes\n$ git config diff.xmldiff.command xmldiff-wrapper.sh\n```", "```\n@@ -18,6 +19,8 @@ int cmd_http_fetch(int argc, const char **argv,\n```", "```\n[diff \"tex\"]\n    xfuncname = \"^(\\\\\\\\(sub)*section\\\\{.*)$\"\n    wordRegex = \"\\\\\\\\[a-zA-Z]+|[{}]|\\\\\\\\.|[^\\\\{}[:space:]]+\"\n```", "```\n[merge \"merge-changelog\"]\n    name = GNU-style ChangeLog merge driver\n    driver = git-merge-changelog %O %A %B\n```", "```\nChangeLog merge=merge-changelog\n```", "```\n[filter \"opendocument\"]\n    clean = \"rezip -p ODF_UNCOMPRESS\"\n    smudge = \"rezip -p ODF_COMPRESS\"\n```", "```\n*.odt filter=opendocument\n*.ods filter=opendocument\n*.odp filter=opendocument\n```", "```\n[filter \"indent\"]\n    clean = indent\n```", "```\n$ git config filter.media.clean  \"git-media filter-clean\"\n$ git config filter.media.smudge \"git-media filter-smudge\"\n$ echo \"*.mov filter=media -crlf\" >> .gitattributes\n```", "```\n[[filter \"clean-password\"]\n    clean = sed -e 's/^pass = .*$/pass = @PASSWORD@/'\n    smudge = sed -e 's/^pass = @PASSWORD@/pass = passw0rd/'\n    required\n```", "```\n[filter \"dater\"]\n    clean = sed -e 's/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date\\\\\\$/'\n    smudge = expand_date %f\n```", "```\n# Do not include extra tests in the archive\nxt/  export-ignore\n```", "```\n* whitespace=!indent,trail,space\n*.[ch] whitespace=indent,trail,space\n*.sh whitespace=indent,trail,space\n```", "```\n/po/*.po encoding=UTF-8\n```", "```\n*.ps1 text working-tree-encoding=UTF-16LE eol=CRLF\n```", "```\n[attr]binary -diff -merge -text\n```", "```\n$ git commit --amend [<options>]\n```", "```\n$ git reset --soft HEAD^\n$ git commit --reedit-message=ORIG_HEAD [<options>]\n```", "```\n$ git reset HEAD^\nUnstaged changes after reset:\nM       README.md\n```", "```\n$ git commit -a -m 'snapshot WIP (Work In Progress)'\n```", "```\n$ git switch -\n$ git reset --soft HEAD^\n$ git reset\n```", "```\n$ git branch feature/topic\n$ git stash\nNo local changes to save\n$ git reset --hard HEAD~3\nHEAD is now at f82887f before\n$ git switch feature/topic\nSwitched to branch 'feature/topic'\n```", "```\n$ git reset --keep HEAD^\nerror: Entry 'README' not uptodate. Cannot merge.\nfatal: Could not reset index file to revision 'HEAD^'.\n```", "```\n$ edit\n$ git checkout -b bugfix-127\n$ git reset --keep start\n```", "```\n$ edit\n$ git stash\n$ git switch -c bugfix-127 start\n$ git stash pop\n```", "```\n$ git stash\n$ # ... handle interruption ...\n$ git stash pop\n```", "```\n$ git stash list\nstash@{0}: WIP on master: 049d078 atoi() is deprecated\nstash@{1}: WIP on master: c264051 Add error checking\n```", "```\n$ git stash push -m 'Add <count>'\nSaved working directory and index state On master: Add <count>\nHEAD is now at 049d078 atoi() is deprecated\n```", "```\n$ git stash list\nstash@{0}: On master: Add <count>\nstash@{1}: WIP on master: c264051 Add error checking\n```", "```\n$ git add --interactive\n$ git stash --keep-index\n$ make test\n$ git commit -m 'First part'\n$ git stash pop\n```", "```\n$ git stash save --quiet 'Add <count>'\n$ git show-ref --abbrev\n765b095 refs/heads/master\n81ef667 refs/stash\n$ gitk --all\n```", "```\n$ git reflog stash --no-decorate\n81ef667 stash@{0}: On master: Add <count>\nbb76632 stash@{1}: WIP on master: Added .gitignore\n```", "```\n$ git stash show -p stash@{0} | git apply -R -\n```", "```\n$ git fsck --unreachable |\ngrep \"unreachable commit \" | cut -d\" \" -f3 |\ngit log --stdin --merges --no-walk --grep=\"WIP on \"\n```", "```\nsrc $ less -FRX rand.c\nsrc $ git show :src/rand.c\nsrc $ git show :./rand.c\nsrc $ git show HEAD:src/rand.c\nsrc $ git show HEAD:./rand.c\n```", "```\nsrc $ git ls-files\nrand.c\nsrc $ git ls-files --full-name :/\nCOPYRIGHT\nMakefile\nREADME\nsrc/rand.c\n```", "```\nsrc $ git ls-tree --name-only HEAD\nrand.c\nsrc $ git ls-tree --abbrev --full-tree -r -t HEAD\n100644 blob 862aafd     COPYRIGHT\n100644 blob 25c3d1b     Makefile\n100644 blob bdf2c76     README\n040000 tree 7e44d2e     src\n100644 blob b2c087f     src/rand.c\n```", "```\n$ git grep -e ';;'\n```", "```\n$ git grep -e ';;' -- '*.c'\n```", "```\nfor (;;) {\n```", "```\n$ git grep -e ';;' --and --not 'for *(.*;;' -- '**/*.c'\n```", "```\n$ git status --ignored\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\nIgnored files:\n  (use \"git add -f <file>...\" to include in what will be committed)\n```", "```\n$ git clean --dry-run\nWould remove patch-1.diff\n```", "```\n$ git clean --interactive\nWould remove the following items:\n  src/rand.c~\n  screenlog.0\n*** Commands ***\n    1: clean       2: filter by pattern    3: select by numbers\n    4: ask each    5: quit                 6: help\nWhat now>\n```"]