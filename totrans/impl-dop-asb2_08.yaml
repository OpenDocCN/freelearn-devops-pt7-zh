- en: Ansible Modules and Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 模块和库
- en: Ansible provides integration and compatibility for hundreds of open and closed
    source software solutions. This integration opens the door for Ansible to communicate
    at a programmatic API level with a multitude of build, test, project management,
    cloud, and delivery software solutions. The module implementation, as a result,
    provides Ansible with a huge edge against competing automation and configuration
    management solutions on the market.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供了与数百种开源和闭源软件解决方案的集成与兼容性。这种集成使 Ansible 能够在程序化 API 层面与多种构建、测试、项目管理、云计算和交付软件解决方案进行通信。因此，模块的实现为
    Ansible 提供了巨大的竞争优势，超过了市场上其他自动化和配置管理解决方案。
- en: At this point in the book, we should be fairly well educated about some of the
    more common playbook implementations and structured approaches to leverage Ansible.
    To expand our knowledge further, this chapter will focus on the wide array of
    modules provided by the Ansible core implementation. Modules in Ansible provide
    the ability for playbooks to connect to and control third-party technologies (some
    open source, some closed source). In this chapter, we will discuss the most popular
    ones and dive into creating playbook tasks that help manage a suite of tools and
    services available to developers, testers, and operators.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本书的这一部分，我们应该已经对一些常见的剧本实现和结构化方法有了比较全面的了解。为了进一步扩展我们的知识，本章将重点介绍 Ansible 核心实现提供的各种模块。Ansible
    中的模块为剧本提供了与第三方技术（部分为开源，部分为闭源）连接和控制的能力。在本章中，我们将讨论最流行的模块，并深入研究如何创建剧本任务，以帮助管理开发人员、测试人员和运维人员可用的一系列工具和服务。
- en: To further our learning, in this chapter, we will take a look at the integration
    that Ansible provides with other software solutions. As we take a journey through
    this chapter, and will learn about some of the more popular integration points
    available within the Ansible realm. We will discover how Ansible's modular architecture
    works and learn how it provides hooks for integration with other technologies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步学习，本章我们将探讨 Ansible 与其他软件解决方案的集成。通过本章的学习，我们将了解一些在 Ansible 范畴内更为流行的集成点。我们将发现
    Ansible 的模块化架构如何工作，并了解它如何提供与其他技术集成的钩子。
- en: 'The topics we will specifically cover in this chapter include the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将具体讨论以下主题：
- en: Introducing Ansible modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Ansible 模块
- en: Integrating Ansible with other technologies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Ansible 与其他技术集成
- en: Understanding the integration options available within the Ansible documentation
    for various technologies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Ansible 文档中为各种技术提供的集成选项
- en: Step-by-step examples of integrating Ansible with other technologies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Ansible 与其他技术集成的逐步示例
- en: Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Introducing Ansible Modules
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Ansible 模块
- en: 'Ansible modules represent the preferred way of connecting Ansible (and automating)
    with other software solutions. At the time of writing of this book, Ansible has
    the ability to integrate with a multitude of external software and hardware solutions.
    Some of the more obvious integrations we have already discovered include the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 模块代表了将 Ansible 与其他软件解决方案连接并自动化的首选方式。在撰写本书时，Ansible 已具备与大量外部软件和硬件解决方案集成的能力。我们已经发现的一些较为明显的集成包括以下内容：
- en: Linux (OS and packages)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux（操作系统和包）
- en: Filesystem management
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统管理
- en: Package management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理
- en: 'These basic modules that we have discussed so far are obvious for introductory
    playbook creation and management, but did you know that Ansible integrates with
    JIRA, Slack, Git, Artifactory, Jenkins, and *much much* more. Ansible module''s
    exhaustive integration has been broken down within the Ansible documentation into
    the following categories:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的这些基本模块显而易见，适用于入门级剧本的创建和管理，但你知道 Ansible 与 JIRA、Slack、Git、Artifactory、Jenkins
    等工具集成吗？Ansible 模块的广泛集成已在 Ansible 文档中按以下类别进行划分：
- en: Cloud modules
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云模块
- en: Clustering modules
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群模块
- en: Commands modules
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令模块
- en: Crypto modules
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密模块
- en: Database modules
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库模块
- en: Files modules
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件模块
- en: Identity modules
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份模块
- en: Inventory modules
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存模块
- en: Messaging modules
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息模块
- en: Monitoring modules
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控模块
- en: Net tools modules
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络工具模块
- en: Network modules
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络模块
- en: Notification modules
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知模块
- en: Packaging modules
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包管理模块
- en: Remote management modules
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程管理模块
- en: Source control modules
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理模块
- en: Storage modules
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储模块
- en: System modules
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统模块
- en: Utilities modules
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用工具模块
- en: Web infrastructure modules
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 基础设施模块
- en: Windows modules
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 模块
- en: As you can see from the preceding list, Ansible provides a vast expanse of integrations
    with other technologies. Each integration point with another technology is leveraged
    via an Ansible playbook task. The complete documentation of each integration module
    can be found at [http://docs.ansible.com/ansible/modules_by_category.html](http://docs.ansible.com/ansible/modules_by_category.html).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Ansible 提供了与其他技术的广泛集成。每个与其他技术的集成点都通过 Ansible playbook 任务进行利用。每个集成模块的完整文档可以在
    [http://docs.ansible.com/ansible/modules_by_category.html](http://docs.ansible.com/ansible/modules_by_category.html)
    找到。
- en: 'Ansible divides the module implementation into a few distinct categories: the
    Core, Community, Curated module set, and Custom modules, and plugins. Each is
    implemented in a very similar way but is organized by Ansible slightly differently.
    The diagram provided next shows where the Ansible module implementation sits within
    the Ansible architecture:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 将模块实现分为几类：Core（核心）、Community（社区）、Curated（精心策划）模块集和 Custom（自定义）模块及插件。每一类的实现方式非常相似，但
    Ansible 会根据不同类别做不同的组织安排。下面提供的图示展示了 Ansible 模块实现如何融入到 Ansible 架构中：
- en: '![](img/a33f873b-f433-42bb-ab17-729ab03f683d.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a33f873b-f433-42bb-ab17-729ab03f683d.jpg)'
- en: In the previous chapters of this book, we have been using Ansible modules for
    basic system-level configurations, package management, file operations, and more.
    These implementations have taught us how to make use of the core Ansible module
    set.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们一直在使用 Ansible 模块进行基本的系统级配置、包管理、文件操作等。这些实现教会了我们如何使用核心的 Ansible 模块集。
- en: 'The Ansible implementation has three different module types. These module types
    are Core, Curated, Community, and Custom. Each of these modules have their own
    specific function and role within the Ansible solution. Let''s take a minute to
    look at what the Ansible documentation has to say about these different module
    types:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 实现有三种不同的模块类型。这些模块类型分别是 Core（核心）、Curated（精心策划）、Community（社区）和 Custom（自定义）。每种模块都有其在
    Ansible 解决方案中的特定功能和作用。让我们花点时间来看一下 Ansible 文档中对这些不同模块类型的描述：
- en: '**Core**: These are modules that the core ansible team maintains and will always
    ship with ansible itself. They will also receive slightly higher priority for
    all requests. Non-core modules are still fully usable.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Core**：这些模块由 Ansible 核心团队维护，并且将始终与 Ansible 一起发布。它们还将在所有请求中获得稍高的优先级。非核心模块依然可以完全使用。'
- en: '**Curated**: Some examples of Curated modules are submitted by other companies
    or maintained by the community. Maintainers of these types of modules must watch
    for any issues reported or pull requests raised against the module.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Curated**：一些 Curated 模块的示例由其他公司提交或由社区维护。这些模块的维护者必须关注任何报告的问题或针对模块提出的拉取请求。'
- en: Core Committers will review all modules becoming Curated. Core Committers will
    review proposed changes to existing Curated modules once the community maintainers
    of the module have approved the changes. Core committers will also ensure that
    any issues that arise due to Ansible engine changes will be remediated. Also,
    it is strongly recommended (but not presently required) for these types of modules
    to have unit tests.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Core Committers（核心提交者）将审查所有即将成为 Curated（精心策划）模块的内容。核心提交者将审查在模块的社区维护者批准变更后，针对现有
    Curated 模块提出的更改。核心提交者还将确保由于 Ansible 引擎的变化而产生的任何问题能够得到修复。此外，强烈建议（但目前不要求）这些类型的模块拥有单元测试。
- en: These modules are currently shipped with Ansible, but might be shipped separately
    in the future.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块目前与 Ansible 一起发布，但未来可能会单独发布。
- en: '**Community**: These modules are not supported by Core Committers or by companies/partners
    associated to the module. They are maintained by the community.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Community**：这些模块不由 Core Committers（核心提交者）或与模块相关的公司/合作伙伴支持。它们由社区维护。'
- en: They are still fully usable, but the response rate to issues is purely up to
    the community. Best effort support will be provided but is not covered under any
    support contracts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它们仍然可以完全使用，但对问题的响应速度完全取决于社区。将提供尽最大努力支持，但不在任何支持合同范围内。
- en: These modules are currently shipped with Ansible, but will most likely be shipped
    separately in the future.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块目前与 Ansible 一起发布，但未来很可能会单独发布。
- en: In the Ansible world, Ansible modules are also referred to as **task-plugins**
    or **library-plugins**, thus describing the way Ansible handles module implementations.
    Each module (Core or otherwise) is manifested via the pluggable architecture that
    is Ansible.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible 的世界里，Ansible 模块也被称为 **任务插件** 或 **库插件**，这描述了 Ansible 如何处理模块实现的方式。每个模块（无论是核心模块还是其他模块）都是通过
    Ansible 的可插拔架构来实现的。
- en: Within the context of an Ansible, modules offer a similar functionality to programming
    libraries. These libraries can be invoked via a playbook task *or* a direct single
    command-line operation. Let's take a quick look at each of these two implementation
    options.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible 的上下文中，模块提供了类似于编程库的功能。这些库可以通过 playbook 任务 *或* 直接的单行命令操作来调用。让我们快速了解一下这两种实现方式。
- en: 'Let''s call an Ansible module from the command line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从命令行调用一个 Ansible 模块：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s call an Ansible module from a playbook task:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 playbook 任务中调用一个 Ansible 模块：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From the preceding examples, we can see two distinct implementations of Ansible
    modules. Now that we can see how Ansible modules are executed (for system calls),
    let's take a look at how Ansible modules can provide connectivity solutions for
    other technologies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们可以看到两种不同的 Ansible 模块实现。现在，我们已经了解了 Ansible 模块如何执行（用于系统调用），接下来我们将看看
    Ansible 模块如何为其他技术提供连接解决方案。
- en: Integrating Ansible with Other Technologies
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Ansible 与其他技术集成
- en: Ansible integrates quite nicely with other technologies. The implementation
    of the module system provides us with a set of unique hooks that we can leverage
    to connect Ansible (on an API level) with popular software solutions. In this
    section of implementing Ansible with DevOps, we will take a closer look at how
    to actually use Ansible to connect with some of the more popular technology solutions
    available to DevOps-minded individuals.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 与其他技术的集成非常顺畅。模块系统的实现为我们提供了一组独特的挂钩，我们可以利用这些挂钩将 Ansible（在 API 层面）与流行的软件解决方案连接起来。在本节中，我们将更详细地了解如何实际使用
    Ansible 与一些流行的技术解决方案进行连接，这些解决方案是面向 DevOps 思维的人员所常用的。
- en: Ansible with JIRA
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 与 JIRA
- en: 'Ansible provides us with a handy set of built-in tasks that can be used to
    *create* tickets. For those of you unfamiliar with JIRA, it is a widely used ticketing
    system created and maintained by Atlassian ([http://www.atlassian.com](http://www.atlassian.com)).
    In this section, we will take a look at how to create and manipulate JIRA tickets
    using Ansible. The general implementation uses the JIRA module provided by Ansible.
    The following is an example of how to create a ticket using an Ansible task:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 为我们提供了一组方便的内置任务，可以用来 *创建* 工单。对于不熟悉 JIRA 的朋友们，JIRA 是由 Atlassian 创建并维护的一个广泛使用的工单系统
    ([http://www.atlassian.com](http://www.atlassian.com))。在本节中，我们将探讨如何使用 Ansible
    创建和操作 JIRA 工单。一般的实现使用了 Ansible 提供的 JIRA 模块。以下是通过 Ansible 任务创建工单的示例：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the preceding implementation uses Jinja to supply the module with
    a JIRA username and password. This might be best implemented using Ansible vault
    (which we just discovered in the previous chapter).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的实现使用 Jinja 为模块提供 JIRA 用户名和密码。最好的做法可能是使用 Ansible vault（我们在前一章中刚刚介绍过）。
- en: 'Beyond simple ticket creation, Ansible can also be used to modify existing
    tickets. Let''s take a look at an example of that next:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的工单创建外，Ansible 还可以用来修改现有的工单。接下来让我们看看一个这样的示例：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: "For a complete documentation set of how to manipulate Jira tickets using Ansible,\
    \ visit [http://docs.ansible.com/ansible/jira_module.html#synopsis](http://docs.ansible.com/ansible/jira_module.html#synopsis).[\uFEFF\
    ](http://docs.ansible.com/ansible/jira_module.html#synopsis)"
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: "有关如何使用 Ansible 操作 Jira 工单的完整文档，请访问 [http://docs.ansible.com/ansible/jira_module.html#synopsis](http://docs.ansible.com/ansible/jira_module.html#synopsis).[\uFEFF\
    ](http://docs.ansible.com/ansible/jira_module.html#synopsis)"
- en: Ansible and Git
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 与 Git
- en: Ansible provides a complete module to manipulate Git repositories. For those
    unfamiliar with Git, Git is a modern distributed source control solution currently
    in use by a significant number of software organizations. Unlike traditional server/client-oriented
    source control solutions, Git provides a nifty distributed solution, which does
    not require a central server. Ansible's integration with Git is fairly robust.
    It provides a complete set of integration tasks. The complete documentation for
    the Ansible Git module can be found at [http://docs.ansible.com/ansible/git_module.html](http://docs.ansible.com/ansible/git_module.html).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供了一个完整的模块来操作 Git 仓库。对于那些不熟悉 Git 的人来说，Git 是一种现代的分布式源代码控制解决方案，当前被大量软件公司使用。与传统的服务器/客户端导向的源代码控制解决方案不同，Git
    提供了一种巧妙的分布式解决方案，它不需要中央服务器。Ansible 与 Git 的集成相当强大，提供了一整套集成任务。Ansible Git 模块的完整文档可以在
    [http://docs.ansible.com/ansible/git_module.html](http://docs.ansible.com/ansible/git_module.html)
    查阅。
- en: Let's take a look at some example playbook tasks and see how we can integrate
    Ansible and Git.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下几个示例的 playbook 任务，看看如何将 Ansible 和 Git 集成。
- en: One prerequisite for Ansible's Git integration is that the target machine should
    have Git v1.7 or a higher command-line client installed and working.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 的 Git 集成的一个前提是目标机器应安装并正常运行 Git v1.7 或更高版本的命令行客户端。
- en: 'Here''s an example Git checkout task:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 Git checkout 任务：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s an example where we''ll be creating ZIP file from the GitHub repository:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例，我们将从 GitHub 仓库创建一个 ZIP 文件：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ansible and Jenkins
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 和 Jenkins
- en: Jenkins CI (Open sourced by CloudBees) is a modern day Continuous Integration
    and Continuous Delivery solution. It is widely leveraged by organizations of all
    sizes and supports simple automation as well as complex build and delivery pipeline
    implementations. It has a massive
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins CI（由 CloudBees 开源）是一个现代化的持续集成和持续交付解决方案。它被各种规模的组织广泛使用，支持简单的自动化以及复杂的构建和交付流水线实现。它具有巨大的
- en: Ansible integrates with Jenkins in a few different ways. For the purpose of
    this chapter, the one we will talk about is the module-specific integration point.
    That is, we will be automating the control of Jenkins itself using Ansible. In
    this section, you will learn about some interesting ways in which you can use
    Ansible to control and manage the Jenkins instance via Ansible. The complete documentation
    for the Ansible Jenkins module can be found at [http://docs.ansible.com/ansible/jenkins_job_module.html](http://docs.ansible.com/ansible/jenkins_job_module.html).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 以几种不同的方式与 Jenkins 集成。对于本章的目的，我们将讨论的是模块特定的集成点。也就是说，我们将通过 Ansible 自动化控制
    Jenkins 本身。在本节中，您将了解如何通过 Ansible 控制和管理 Jenkins 实例的一些有趣方法。Ansible Jenkins 模块的完整文档可以在
    [http://docs.ansible.com/ansible/jenkins_job_module.html](http://docs.ansible.com/ansible/jenkins_job_module.html)
    查阅。
- en: 'Ansible communicates with Jenkins over the Jenkins REST API. So it is important
    that the Jenkins instance have the REST API available and can be reached from
    the target server that will be connecting to the REST API. In addition to the
    REST API availability, the Ansible Jenkins module requires the following Python
    packages to be installed:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 通过 Jenkins REST API 与 Jenkins 通信。因此，重要的是 Jenkins 实例必须提供 REST API，并且可以从将要连接到
    REST API 的目标服务器访问。除了 REST API 可用性外，Ansible Jenkins 模块还需要安装以下 Python 软件包：
- en: Python-Jenkins 0.4.12 or higher
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python-Jenkins 0.4.12 或更高版本
- en: lxml 3.3.3 or higher
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lxml 3.3.3 或更高版本
- en: These packages are required because they provide direct API connectivity to
    Jenkins from Python. This is something Ansible has no direct connection to and
    as such they are required to use this specific module.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包是必需的，因为它们提供了从 Python 直接连接 Jenkins 的 API。这是 Ansible 无法直接连接的，因此它们是使用该特定模块所必需的。
- en: 'Now that we have the prerequisites taken care of, let''s look at some examples
    of Ansible tasks:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经处理了先决条件，让我们看一下 Ansible 任务的一些示例：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition to creating jobs based on templates, we can also delete jobs. The
    following example shows how to do that:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于模板创建作业外，我们还可以删除作业。以下示例演示了如何做到这一点：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For a complete Jenkins REST API documentation, check out the following URL:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的 Jenkins REST API 文档，请访问以下网址：
- en: '[https://www.cloudbees.com/blog/taming-jenkins-json-api-depth-and-tree](https://www.cloudbees.com/blog/taming-jenkins-json-api-depth-and-tree)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.cloudbees.com/blog/taming-jenkins-json-api-depth-and-tree](https://www.cloudbees.com/blog/taming-jenkins-json-api-depth-and-tree)'
- en: Ansible and Docker
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 和 Docker
- en: Docker has become a powerhouse in the virtualization space within the last few
    years. Docker has a unique kernel, filesystem, and memory management solution,
    which makes Docker an ideal choice in virtualization for many organizations. Docker
    operates under the concept of container-based visualizations, which are lightweight
    virtualized operating systems. In this section, we will look at how Ansible integrates
    with Docker. We will discover how to control Docker containers using Ansible 2\.
    The complete Ansible Docker module reference can be found at [http://docs.ansible.com/ansible/docker_module.html](http://docs.ansible.com/ansible/docker_module.html).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Docker在过去几年里已成为虚拟化领域的强大工具。Docker具有独特的内核、文件系统和内存管理解决方案，使得Docker成为许多组织虚拟化的理想选择。Docker基于容器化虚拟化的概念运行，这些容器是轻量级的虚拟化操作系统。在本节中，我们将了解Ansible如何与Docker集成。我们将发现如何使用Ansible
    2控制Docker容器。完整的Ansible Docker模块参考资料可以在[http://docs.ansible.com/ansible/docker_module.html](http://docs.ansible.com/ansible/docker_module.html)找到。
- en: 'In order to make use of the Docker Ansible module, the following Python packages
    must be installed on the target system (the system running the playbook):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Docker的Ansible模块，目标系统（运行playbook的系统）必须安装以下Python包：
- en: Python 2.6 or higher
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.6或更高版本
- en: Docker-py 0.3.0 or higher
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker-py 0.3.0或更高版本
- en: Docker server 0.10.0 or higher
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker服务器0.10.0或更高版本
- en: 'Ansible provides a number of docker-oriented modules, which provides interconnectivity
    with Ansible and Docker. The complete list and descriptions of each is provided
    as follows ([https://docs.ansible.com/ansible/guide_docker.html](https://docs.ansible.com/ansible/guide_docker.html)):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了许多面向docker的模块，用于实现Ansible与Docker的互联互通。每个模块的完整列表和描述如下所示（[https://docs.ansible.com/ansible/guide_docker.html](https://docs.ansible.com/ansible/guide_docker.html)）：
- en: '`docker_service`: Use your existing Docker compose files to orchestrate containers
    on a single Docker daemon or on Swarm. Supports compose versions 1 and 2'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_service`：使用现有的Docker Compose文件来编排单个Docker守护进程或Swarm中的容器。支持Compose版本1和2'
- en: '`docker_container`: Manages the container life cycle by providing the ability
    to create, update, stop, start, and destroy a container'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_container`：通过提供创建、更新、停止、启动和销毁容器的功能来管理容器生命周期'
- en: '`docker_image`: Provides full control over images, including `build`, `pull`,
    `push`, `tag`, and `remove`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_image`：提供对镜像的完全控制，包括`build`、`pull`、`push`、`tag`和`remove`'
- en: '`docker_image_facts`: Inspects one or more images in the Docker host''s image
    cache, providing the information as facts to make decision or assertions in a
    playbook'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_image_facts`：检查Docker主机镜像缓存中的一个或多个镜像，并将信息作为事实提供，以便在playbook中做出决策或断言'
- en: '`docker_login`: Authenticates with Docker Hub or any Docker registry and updates
    the Docker Engine config file, which in turn provides password-free pushing and
    pulling of images to and from the registry'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker_login`：与Docker Hub或任何Docker注册表进行身份验证，并更新Docker引擎配置文件，从而提供无需密码即可将镜像推送到注册表或从注册表拉取镜像'
- en: '`docker (dynamic inventory)`: Dynamically builds an inventory of all the available
    containers from a set of one or more Docker hosts'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker (动态清单)`：动态构建来自一个或多个Docker主机的所有可用容器的清单'
- en: It's important to note that the `docker_container` task name has been deprecated
    in Ansible 2.2\. Instead, Ansible recommends that you use `docker_container` and
    `docker_image` instead.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`docker_container`任务名称在Ansible 2.2中已被弃用。取而代之的是，Ansible建议使用`docker_container`和`docker_image`。
- en: Let's look at some simple playbook task examples that will integrate Ansible
    with Docker.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些简单的playbook任务示例，这些示例将Ansible与Docker进行集成。
- en: 'This is how we can use Ansible to build a Docker container:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用Ansible构建Docker容器的方式：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is how you can use the command line to build a Docker container:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你如何使用命令行构建Docker容器的方式：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is a complete example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个完整的示例：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the Ansible module architecture. We talked about
    how Ansible organizes modules by category (Core and user). Once you learned how
    Ansible manages modules, we talked about how Ansible modules can be called via
    two distinct methods (the command line and via playbook tasks). Then, we moved
    on and looked at a few examples of popular integration modules with Ansible.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们探讨了Ansible模块架构。我们讨论了Ansible如何按类别（核心模块和用户模块）组织模块。在你了解了Ansible如何管理模块之后，我们还讨论了Ansible模块可以通过两种不同的方式调用（命令行和playbook任务）。接着，我们继续查看了一些与Ansible集成的流行模块的示例。
- en: In the next chapter, we will move on to look at how to integrate Ansible with
    popular CICD solutions, such as Jenkins, Git, and more. We will explore how to
    start making pipelines using Ansible and discover some tricks that will help us
    encourage the reuse of Ansible playbooks within an organization. Let's get moving,
    shall we?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将继续讨论如何将 Ansible 与流行的 CICD 解决方案（如 Jenkins、Git 等）集成。我们将探索如何使用 Ansible
    创建流水线，并发现一些技巧，帮助我们在组织内部鼓励重用 Ansible playbook。让我们开始吧，怎么样？
