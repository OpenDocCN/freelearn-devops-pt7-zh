["```\n# This simple playbook installs / updates Apache\n---\n- hosts: all\n tasks:\n   - name: Ensure Apache is installed and at the latest version\n     yum: name=httpd state=latest\n\n```", "```\n# This simple playbook installs / updates Apache\n---\n- hosts: all\n tasks:\n   - name: Ensure Apache is installed and at the latest version\n <yum>: <param>=<value> <param>=<value>\n\n```", "```\nlibrary = /usr/share/ansible\n\n```", "```\n#> export ANSIBLE_LIBRARY=/srv/modules/custom_modules:/srv/modules/vendor_modules\n\n```", "```\n#> foo.yml\n #> library/\n #> library/mymodule.py\n\n```", "```\n$ pip install git+https://github.com/sivel/ansible-testing.git#egg=ansible_testing\n\n```", "```\n#> ansible-validate-modules\n\n```", "```\n#!/usr/bin/python\n# The following Python code converts a simple \"Hello Ansible\" message into a json object \n# for use with an Ansible module call\n\nimport json\n\nmessage = \"Hello Ansible\"\nprint(json.dumps({\n \"Message\" : message\n}))\n\n```", "```\n#> git clone git://github.com/ansible/ansible.git\n#> source ansible/hacking/env-setup\n\n```", "```\n#> ansible/hacking/test-module -m ./library/helloworld.py\n\n```", "```\n#!/usr/bin/python#!/usr/bin/python\nimport json\ndef main(): \n\n    module = AnsibleModule(argument_spec=dict( param1 = dict(required=True, type='str') ) )\n    message = module.params['param1']\n\n    print(json.dumps({\n        \"Message\" : message\n    }))\n\n    module.exit_json(changed=True, keyword=value)\n    module.exit_json(changed=False, msg='error message ', keyword=value)\n\nfrom ansible.module_utils.basic import *\nif __name__ = '__main__': \n    main() \n\n```", "```\n- name: Hello World\n  hosts: localhost\n  connection: local\n  tasks:\n    - name: Tell the Ansible Community Hello\n      helloworld: param1=hello\n\n```", "```\n#> ansible-playbook myplaybook.yml -i localhost -v\n\n```", "```\n#!/usr/bin/python\n\n#Main Entry point for the module\ndef main():\n\n    # Instantiate the message variable (this will contain our YAML param value)\n    message = ''\n\n    # Instantiate the Ansible Module which will retrieve the value of our param1 variable\n    module = AnsibleModule(argument_spec=dict(param1 = dict(required=True, type='str')))\n\n    # Set the value of Message to the value of module.params['param1']\n    message = module.params['param1']\n\n    # Display the content of the message in JSON format\n    print(json.dumps({\"Message\": message{))\n\n    # Exit the program SUCCESS/FAIL\n    module.exit_json(changed=True, keyword=value)\n    module.exit_json(changed=False, msg='error message', keyword=value)\n\n# Import ansible functionality from Ansible.module\nfrom ansible.module_utils.basic import *\n\n# This line imports the functionality of JSON. It allows us to print the JSON formatted message\nimport json\n\n# Call Main Function IF _main_ is defined\nif __name__ = '__main__':\n    main()\n\n```", "```\nansible_facts_dict = {\n \"changed\" : true,\n \"rc\" : 5,\n \"ansible_facts\" : {\n \"foo\" : \"bar\",\n }\n}\n\nmodule.exit_json(changed=False, result=\"success\",ansible_facts)\n\n```", "```\n#> foo.yml\n#> action_plugins/\n#> action_plugin/mymodule.py\n\n```", "```\n#> foo.yml\n#> callback_plugins/\n#> callback_plugin/mymodule.py\n\n```", "```\n#action_plugins = /usr/share/ansible/plugins/action\n#callback_plugins = /usr/share/ansible/plugins/callback\n#connection_plugins = /usr/share/ansible/plugins/connection\n#lookup_plugins = /usr/share/ansible/plugins/lookup\n#vars_plugins = /usr/share/ansible/plugins/vars\n#filter_plugins = /usr/share/ansible/plugins/filter\n#test_plugins = /usr/share/ansible/plugins/test\n\n```", "```\n- name: Special Action to be run on the master\n  action: myaction foo=bar\n\n```", "```\n#!/usr/bin/python\n\n# Import the Ansible Runner return data lib \nfrom ansible.runner.return_data import ReturnData\n\n# Define our ActionModule class (MUST BE NAMED ActionModule)\nclass ActionModule(object):\n\n    # Define our Calss constructor method (Must be present)\n    def __init__(self, runner):\n        self.runner = runner\n\n    # Define our run method (must be present)\n    def run(self, conn, tmp, module_name, module_args, inject, complex_args=None, **kwargs):\n        return ReturnData(conn=conn, comm_ok=True, result=dict(failed=False, changed=False, msg=\"Hello Ansible\"))\n\n```", "```\n#!/usr/bin/python\n\n# Import CallbackPlugin base class\nfrom ansible.plugins.callback import CallbackBase\nfrom ansible import constants as C\n\n# Define the CallBackModule class\nclass CallbackModule(CallbackBase):\n    pass\n\n```", "```\n# This Code Example Comes from the Official Ansible Documentation Set (http://www.ansible.com/)\n\nfrom ansible.errors import AnsibleError, AnsibleParserError\nfrom ansible.plugins.lookup import LookupBase\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n# This is the standard class for the LookupModule implementation it is required to be this name \nclass LookupModule(LookupBase):\n\n    # As with all our other plugins, the run method MUST be there \n    def run(self, terms, variables=None, **kwargs):\n\n        ret = []\n        # Perform iteration\n        for term in terms:\n\n            display.debug(\"File lookup term: %s\" % term)\n\n            # Find the file in the expected search path\n            lookupfile = self.find_file_in_search_path(variables, 'files', term)\n            display.vvvv(u\"File lookup using %s as file\" % lookupfile)\n            try:\n                if lookupfile:\n                    contents, show_data = self._loader._get_file_contents(lookupfile)\n                    ret.append(contents.rstrip())\n                else:\n                    raise AnsibleParserError()\n\n            except AnsibleParserError:\n                raise AnsibleError(\"could not locate file in lookup: %s\" % term)\nreturn ret\n\n```", "```\n---\n- hosts: all\n vars:\n contents: \"{{ lookup('file', '/etc/foo.txt') }}\"\n tasks:\n\n  - debug: msg=\"the value of foo.txt is {{ contents }} as seen today {{ lookup('pipe', 'date +\"%Y-%m-%d\"') }}\"\n\n```"]