["```\nproject = \"TEST\"\n```", "```\nassignee = currentUser()\n```", "```\nproject = \"TEST\" AND assignee = currentUser()\n```", "```\nproject in projects(\"TEST\", \"DEMO\")\n```", "```\nproject in (\"TEST\",\"DEMO\") and also to project = \"TEST\" OR project = \"DEMO\"\n```", "```\n    <jql-function key=\"jql-projects\" name=\"Projects Function\" class=\"com.jtricks.ProjectsFunction\">\n      <!--The name of the function-->\n      <fname>projects</fname>\n\n      <!--Whether this function returns a list or a single value-->\n      <list>true</list>\n    </jql-function>\n    ```", "```\n        public JiraDataType getDataType() {\n          return JiraDataTypes.PROJECT;\n        }\n        ```", "```\n        public int getMinimumNumberOfExpectedArguments() {\n          return 1;\n        }\n        ```", "```\n        public MessageSet validate(User searcher, FunctionOperand operand, TerminalClauseterminalClause) {\n          List<String> projectKeys = operand.getArgs();\n          MessageSet messages = new MessageSetImpl();\n          if (projectKeys.isEmpty()) {\n            messages.addErrorMessage(\"Atleast one project key needed\");\n          } else {\n            for (String projectKey : projectKeys) {\n              if (projectManager.getProjectObjByKey(projectKey) == null){\n                messages.addErrorMessage(\"Invalid Project Key:\" + projectKey);\n              }\n            }\n          }\n          return messages;\n        }\n        ```", "```\n    MessageSet messages = validateNumberOfArgs(operand, 1);\n    ```", "```\n        public List<QueryLiteral> getValues(QueryCreationContext context, FunctionOperand operand,   TerminalClauseterminalClause) {\n          notNull(\"queryCreationContext\", context);\n          List<QueryLiteral> literals = new LinkedList<QueryLiteral>();\n          List<String> projectKeys = operand.getArgs();\n          for (String projectKey : projectKeys) {\n            Project project = projectManager.getProjectObjByKey(projectKey);\n            if (project != null) {\n              literals.add(new QueryLiteral(operand, project.getId()));\n            }\n          }\n          return literals;\n        }\n        ```", "```\n        Collections.singletonList(new QueryLiteral(operand, some_value))\n        ```", "```\n    public class ProjectsFunction extends AbstractJqlFunction implements ClauseSanitisingJqlFunction{\n    ```", "```\n    @NotNull FunctionOperand santiseOperand(User searcher, @NotNullFunctionOperand operand);\n    ```", "```\n    public FunctionOperand sanitiseOperand(User user, FunctionOperand functionOperand) {\n      final List<String> pKeys = functionOperand.getArgs();\n      boolean argChanged = false;\n      final List<String> newArgs = new ArrayList<String>(pKeys.size());\n      for (final String pKey : pKeys) {\n        Project project = projectManager.getProjectObjByKey(pKey);\n        if (project != null && !permissionManager.hasPermission(Permissions.BROWSE, project, user)) {\n          newArgs.add(project.getId().toString());\n          argChanged = true;\n        } else {\n          newArgs.add(pKey);\n        }\n      }\n\n      if (argChanged) {\n        return new FunctionOperand(functionOperand.getName(),\n    newArgs);\n      } else {\n        return functionOperand;\n      }\n    }\n    ```", "```\n    <search-request-view key=\"simple-searchrequest-html\" name=\"Simple HTML View\" class=\"com.jtricks.SimpleSearchRequestHTMLView\" state='enabled'                        fileExtension=\"html\" contentType=\"text/html\">\n      <resource type=\"velocity\" name=\"header\" location=\"templates/searchrequest-html-header.vm\"/>\n      <resource type=\"velocity\" name=\"body\" location=\"templates/searchrequest-html-body.vm\"/>\n      <resource type=\"velocity\" name=\"footer\" location=\"templates/searchrequest-html-footer.vm\"/>\n\n      <order>200</order>\n    </search-request-view>\n    ```", "```\n    writer.write(descriptor.getHtml(\"header\", headerParams));\n    ```", "```\n        final Map defaultParams = JiraVelocityUtils.getDefaultVelocityParams(authenticationContext);\n        ```", "```\n        final Map headerParams = new HashMap(defaultParams);        headerParams.put(\"filtername\", searchRequest.getName());        headerParams.put(\"user\", authenticationContext.getUser());\n        writer.write(descriptor.getHtml(\"header\", headerParams));\n        ```", "```\n        final Searcher searcher = searchProviderFactory.getSearcher(SearchProviderFactory.ISSUE_INDEX);\n        final Map issueParams = new HashMap(defaultParams);\n        final DocumentHitCollectorhitCollector = new IssueWriterHitCollector(searcher, writer, issueFactory){\n          protected void writeIssue(Issue issue, Writer writer) throws IOException{\n            //put the current issue into the velocity context and render the //single issue view\n            issueParams.put(\"issue\", issue  writer.write(descriptor.getHtml(\"body\", issueParams));\n          }\n        };\n        searchProvider.searchAndSort(searchRequest.getQuery(), user, hitCollector, searchRequestParams.getPagerFilter());\n        ```", "```\n        writer.write(descriptor.getHtml(\"footer\", EasyMap.build(\"user\", user)));\n        ```", "```\n    @Override\n    public void writeSearchResults(final SearchRequestsearchRequest, final SearchRequestParams searchRequestParams, final Writer writer) throws SearchException{\n      final Map defaultParams = JiraVelocityUtils.getDefaultVelocityParams(authenticationContext);\n      final Map headerParams = newHashMap(defaultParams);          headerParams.put(\"filtername\", searchRequest.getName());      headerParams.put(\"user\", authenticationContext.getUser());  \n      try{\n        //Header\n        writer.write(descriptor.getHtml(\"header\", headerParams));  \n\n        //Body\n        final Searcher searcher =searchProviderFactory.getSearcher(SearchProviderFactory.ISSUE_INDEX);\n        final Map issueParams = new HashMap(defaultParams); \n        final DocumentHitCollector hitCollector = new IssueWriterHitCollector(searcher, writer, issueFactory) {\n          protected void writeIssue(Issue issue, Writer writer) throws IOException{\n            //put the current issue into the velocity context and render the single issue view\n            issueParams.put(\"issue\", issue);      writer.write(descriptor.getHtml(\"body\", issueParams));\n          }\n        };\n        searchProvider.searchAndSort(searchRequest.getQuery(), authenticationContext.getUser(),hitCollector, searchRequestParams.getPagerFilter());\n\n        //Footer\n        writer.write(descriptor.getHtml(\"footer\", EasyMap.build(\"user\", authenticationContext.getUser())));\n      }catch (IOException e){\n        throw new RuntimeException(e);\n      }catch (SearchException e){\n        throw new RuntimeException(e);\n      }\n    }\n    ```", "```\n        Hello $user.fullName , have a look at the search results!<br><br>\n        #set($displayName = 'Anonymous')\n        #if($filtername)\n          #set($displayName = $textutils.htmlEncode($filtername))\n        #end\n        <b>Filter</b> : $displayName<br><br>\n        <table>\n        ```", "```\n        <tr>\n          <td><font color=\"green\">$!issue.key</font></td>\n          <td>$!issue.summary</td>\n        </tr>\n        ```", "```\n        </table>\n        <br><br>...And that's all we have got now , $user.fullName !\n        ```", "```\nissuetype = Bug AND assignee = currentUser() AND status = Open\n```", "```\n(summary ~ jql OR description ~ jql OR comment ~ jql) AND issuetype = Bug AND assignee = currentUser() AND status = Open\n```", "```\n(summary ~ \"jql performance\" OR description ~ \"jql performance\" OR comment ~ \"jql performance\") AND issuetype = Bug AND assignee = currentUser() AND status = Open.\n```", "```\nproject = \"DEMO\" and assignee = currentUser()\n```", "```\n    JqlQueryBuilder builder = JqlQueryBuilder.newBuilder();\n    ```", "```\n    builder.where().project(10000L)\n    ```", "```\n    builder.where().project(10000L).and().assigneeIsCurrentUser();\n    ```", "```\n    builder.orderBy().assignee(SortOrder.ASC);\n    ```", "```\n    Query query = builder.buildQuery();\n    ```", "```\n    SearchService searchService = ComponentManager.getInstance().getSearchService();\n    ```", "```\n    SearchResults results = searchService.search(user, query, PagerFilter.getUnlimitedFilter());\n    ```", "```\n    List<Issue> issues = results.getIssues();\n    ```", "```\n  private List<Issue>getIssues(User user) {\n    JqlQueryBuilder builder = JqlQueryBuilder.newBuilder();\n    builder.where().project(10000L).and().assigneeIsCurrentUser();\n    builder.orderBy().assignee(SortOrder.ASC);\n    Query query = builder.buildQuery();\n    SearchService searchService = ComponentManager.getInstance().getSearchService();\n    SearchResults results = searchService.search(user, query, PagerFilter.getUnlimitedFilter());\n    returnresults.getIssues();\n  }\n```", "```\n    project in (\"TEST\", \"DEMO\") and assignee in (\"jobinkk\", \"admin\") and \"Customer Name\" = \"Jobin\"\n    ```", "```\n    builder.where().project(\"TEST\", \"DEMO\").and().assignee().in(\"jobinkk\", \"admin\").and().customField(10000L).eq(\"Jobin\");\n    ```", "```\n    project in (\"TEST\", \"DEMO\") and (assignee is EMPTY or reporter is EMPTY)\n    ```", "```\n    builder.where().project(\"TEST\", \"DEMO\").and().sub().assigneeIsEmpty().or().reporterIsEmpty().endsub();\n    ```", "```\n    String jqlQuery = \"project = \\\"DEMO\\\" and assignee = currentUser()\";\n    SearchService.ParseResult parseResult = searchService.parseQuery(user, jqlQuery);\n    ```", "```\n    if (parseResult.isValid()){\n       // Carry On\n    } else {\n      // Log the error and exit!\n    }\n    ```", "```\n    Query query = parseResult.getQuery()\n    ```", "```\n    SearchResults results = searchService.search(user, query, PagerFilter.getUnlimitedFilter());\n    ```", "```\n    List<Issue> issues = results.getIssues();\n    ```", "```\n    SearchService searchService = ComponentManager.getInstance().getSearchService();\n    ```", "```\n    String queryString = searchService.getQueryString(user, query);\n    ```", "```\n    <a href=\"<%= request.getContextPath() %>/secure/IssueNavigator.jspa?reset=true<ww:property value=\"/queryString\" />&amp;mode=hide\" title=\"\">Show in Navigator</a>\n    ```", "```\n    <a href=\"$requestContext.baseUrl/secure/IssueNavigator.jspa?reset=true$queryString&amp;mode=hide\" title=\"\">Show in Navigator</a>\n    ```", "```\nreset=true<ww:property value=\"/queryString\" />&amp;mode=hide will be then reset=true&amp;jqlQuery=someQuery&amp;mode=hide\n```", "```\nIssueIndexManager indexManager = ComponentManager.getInstance().getIndexManager();\n```", "```\n  // Store the current state of indexingboolean wasIndexing = ImportUtils.isIndexIssues();\n  // Set indexing to trueImportUtils.setIndexIssues(true);\n  // Update the issue or issues\n  ...................\n  // Reset indexingImportUtils.setIndexIssues(wasIndexing);\n```", "```\n    SearchRequest searchRequest = new SearchRequest(query);\n    ```", "```\n    JiraServiceContext ctx = new JiraServiceContextImpl(user);\n    ```", "```\n    SearchRequestService searchRequestService = ComponentManager.getInstance().getSearchRequestService();\n    ```", "```\n    final SearchRequest newSearchRequest = searchRequestService.createFilter(ctx, searchRequest, favourite);\n    ```", "```\nSearchRequest updatedSearchRequest = searchRequestService.updateSearchParameters(JiraServiceContextserviceCtx, SearchRequest request);\n```", "```\nSearchRequest updatedFilter = searchRequestService.updateFilter(JiraServiceContextserviceCtx, SearchRequest request);\n```", "```\nSearchRequest updatedFilter = searchRequestService.updateFilter(JiraServiceContextserviceCtx, SearchRequest request, booleanisFavourite);\n```", "```\nsearchRequestService.validateForDelete(ctx, filterId);\n```", "```\nif(!ctx.getErrorCollection().hasAnyErrors())){\n  searchRequestService.deleteFilter(ctx, filterId);\n}\n```", "```\ndeleteAllFiltersForUser(JiraServiceContextserviceCtx, User user);\n```", "```\nCollection<SearchRequest>getFavouriteFilters(User user);\nCollection<SearchRequest>getOwnedFilters(User user);\nCollection<SearchRequest>getNonPrivateFilters(User user);\nCollection<SearchRequest>getFiltersFavouritedByOthers(User user);\n```", "```\nsearchRequest.setPermissions(permissions);\n```", "```\n[{\"type\":\"global\"}]\n[{\"type\":\"group\",\"param1\":\"jira-administrators\"},{\"type\":\"project\",\"param1\":\"10000\",\"param2\":\"10010\"}]\n```", "```\n    FilterSubscriptionService filterSubscriptionService = ComponentManager.getInstance().getComponentInstanceOfType(FilterSubscriptionService.class)\n    ```", "```\n    String cronExpression = \"0 0/15 * * * ? *\"; // Denotes every 15 minutes\n    ```", "```\n    String groupName = \"jira-administrators\";\n    ```", "```\n    JiraServiceContext ctx = new JiraServiceContextImpl(user);\n    ```", "```\n    booleane mailOnEmpty = true;\n    ```", "```\n    filterSubscriptionService.validateCronExpression(ctx, cronExpression);\n    ```", "```\n    if (!ctx.getErrorCollection().hasAnyErrors()){\n      filterSubscriptionService.storeSubscription(ctx, filterId, groupName, cronExpression, emailOnEmpty);\n    }\n    ```", "```\nfilterSubscriptionService.updateSubscription(ctx, subId, groupName, cronExpression, emailOnEmpty);\n```", "```\nString cronExpression = new CronExpressionGenerator().getCronExpressionFromInput(cronEditorBean);\n```"]