["```\n$ mkdir Chapter05 Chapter05/group_vars Chapter05/roles\n$ touch Chapter05/group_vars/common.yml Chapter05/hosts Chapter05/site.yml\n$ cd Chapter05\n```", "```\n$ ansible-galaxy role init roles/stack_install\n```", "```\n- name: \"Update apt-cache and upgrade packages\"\n  ansible.builtin.apt:\n    name: \"*\"\n    state: \"latest\"\n    update_cache: true\n```", "```\nrepo_keys_url:\n  - \"http://nginx.org/keys/nginx_signing.key\"\n```", "```\nrepo_packages:\n  - \"deb http://nginx.org/packages/mainline/ubuntu/ {{ ansible_distribution_release }} nginx\"\n  - \"deb-src http://nginx.org/packages/mainline/ubuntu/ {{ ansible_distribution_release }} nginx\"\n```", "```\n- name: \"Add the apt keys from a URL\"\n  ansible.builtin.apt_key:\n    url: \"{{ item }}\"\n    state: \"present\"\n  with_items: \"{{ repo_keys_url }}\"\n```", "```\n- name: \"Install the repo packages\"\n  ansible.builtin.apt_repository:\n    repo: \"{{ item }}\"\n    state: \"present\"\n    update_cache: true\n  with_items: \"{{ repo_packages }}\"\n```", "```\n- name: \"Update cache and install the stack packages\"\n  ansible.builtin.apt:\n    state: \"present\"\n    update_cache: true\n    pkg: \"{{ system_packages + extra_packages + stack_packages }}\"\n```", "```\nsystem_packages:\n  - \"software-properties-common\"\n  - \"python3-pymysql\"\n  - \"acl\"\n```", "```\nextra_packages:\n  - \"vim\"\n  - \"git\"\n  - \"unzip\"\n```", "```\nstack_packages:\n  - \"nginx\"\n  - \"mariadb-server\"\n  - \"mariadb-client\"\n  - \"php-cli\"\n  - \"php-curl\"\n  - \"php-fpm\"\n  - \"php-gd\"\n  - \"php-intl\"\n  - \"php-mbstring\"\n  - \"php-mysql\"\n  - \"php-soap\"\n  - \"php-xml\"\n  - \"php-xmlrpc\"\n  - \"php-zip\"\n```", "```\nextra_packages:\n  - \"vim\"\n  - \"git\"\n  - \"unzip\"\n  - \"awscli\"\n```", "```\n$ ansible-galaxy role init roles/stack_config\n```", "```\nwordpress_system:\n  user: \"wordpress\"\n  group: \"php-fpm\"\n  comment: \"wordpress system user\"\n  home: \"/var/www/wordpress\"\n  state: \"present\"\n```", "```\n- name: \"add the wordpress group\"\n  ansible.builtin.group:\n    name: \"{{ wordpress_system.group }}\"\n    state: \"{{ wordpress_system.state }}\"\n```", "```\n- name: \"Add the wordpress user\"\n  ansible.builtin.user:\n    name: \"{{ wordpress_system.user }}\"\n    group: \"{{ wordpress_system.group }}\"\n    comment: \"{{ wordpress_system.comment }}\"\n    home: \"{{ wordpress_system.home }}\"\n    state: \"{{ wordpress_system.state }}\"\n```", "```\n# {{ ansible_managed }}\nuser  nginx;\nworker_processes  {{ ansible_processor_count }};\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    keepalive_timeout  65;\n    client_max_body_size 20m;\n    include /etc/nginx/conf.d/*.conf;\n}\n```", "```\n- name: \"Copy the nginx.conf to /etc/nginx/\"\n  ansible.builtin.template:\n    src: nginx-nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    mode: \"0644\"\n  notify: \"Restart nginx\"\n```", "```\n- name: \"Restart nginx\"\n  ansible.builtin.service:\n    name: nginx\n    state: restarted\n    enabled: true\n```", "```\n# {{ ansible_managed }}\nupstream {{ php.upstream }} {\n        server {{ php.ip }}:{{ php.port }};\n}\nserver {\n     listen       80;\n     server_name  {{ ansible_nodename }};\n     root         {{ wordpress_system.home }};\n     index        index.php index.html index.htm;\n    include global/restrictions.conf;\n    include global/wordpress_shared.conf;\n}\n```", "```\n- name: \"Copy the default.conf to /etc/nginx/conf.d/\"\n  ansible.builtin.template:\n    src: nginx-confd-default.conf.j2\n    dest: /etc/nginx/conf.d/default.conf\n    mode: \"0644\"\n  notify: \"Restart nginx\"\n```", "```\n- name: \"Create the global directory in /etc/nginx/\"\n  ansible.builtin.file:\n    dest: /etc/nginx/global/\n    state: directory\n    mode: \"0644\"\n```", "```\n- name: \"Copy the restrictions.conf to /etc/nginx/global/\"\n  ansible.builtin.copy:\n    src: nginx-global-restrictions.conf\n    dest: /etc/nginx/global/restrictions.conf\n    mode: \"0644\"\n  notify: \"Restart nginx\"\n```", "```\nlocation ~* /(wp-config.php|readme.html|license.txt|nginx.conf) {\n    deny all;\n}\n```", "```\nlocation ~* ^/wp-content/.*.(php|phps)$ {\n    deny all;\n}\n```", "```\n- name: \"Copy the wordpress_shared.conf to /etc/nginx/global/\"\n  ansible.builtin.template:\n    src: nginx-global-wordpress_shared.conf.j2\n    dest: /etc/nginx/global/wordpress_shared.conf\n    mode: \"0644\"\n  notify: \"Restart nginx\"\n```", "```\nphp:\n  ip: \"127.0.0.1\"\n  port: \"9000\"\n  upstream: \"php\"\n  ini:\n    - { regexp: \"^;date.timezone =\", replace: \"date.timezone = Europe/London\" }\n    - { regexp: \"^expose_php = On\", replace: \"expose_php = Off\" }\n    - {\n        regexp: \"^upload_max_filesize = 2M\",\n        replace: \"upload_max_filesize = 20M\",\n      }\n```", "```\nphp_fpm_path: \"/etc/php/8.1/fpm/pool.d/www.conf\"\nphp_ini_path: \"/etc/php/8.1/fpm/php.ini\"\nphp_service_name: \"php8.1-fpm\"\n```", "```\n; {{ ansible_managed }}\n[{{ wordpress_system.user }}]\nuser = {{ wordpress_system.user }}\ngroup = {{ wordpress_system.group }}\nlisten = {{ php.ip }}:{{ php.port }}\nlisten.allowed_clients = {{ php.ip }}\npm = dynamic\npm.max_children = 50\npm.start_servers = 5\npm.min_spare_servers = 5\npm.max_spare_servers = 35\nphp_admin_value[error_log] = /var/log/php-fpm/{{ wordpress_system.user }}-error.log\nphp_admin_flag[log_errors] = on\nphp_value[session.save_handler] = files\nphp_value[session.save_path]    = /var/lib/php/fpm/session\nphp_value[soap.wsdl_cache_dir]  = /var/lib/php/fpm/wsdlcache\n```", "```\n- name: \"Copy the www.conf to /etc/php-fpm.d/\"\n  ansible.builtin.template:\n    src: php-fpmd-www.conf.j2\n    dest: \"{{ php_fpm_path }}\"\n    mode: \"0644\"\n  notify: \"Restart php-fpm\"\n```", "```\n- name: \"Restart php-fpm\"\n  ansible.builtin.service:\n    name: \"{{ php_service_name }}\"\n    state: restarted\n    enabled: true\n```", "```\n- name: \"Configure php.ini settings\"\n  ansible.builtin.lineinfile:\n    dest: \"{{ php_ini_path }}\"\n    regexp: \"{{ item.regexp }}\"\n    line: \"{{ item.replace }}\"\n    backup: \"true\"\n    backrefs: \"true\"\n  with_items: \"{{ php.ini }}\"\n  notify: \"Restart php-fpm\"\n```", "```\n- name: \"Start php-fpm\"\n  ansible.builtin.service:\n    name: \"{{ php_service_name }}\"\n    state: \"started\"\n```", "```\n- name: \"Start nginx\"\n  ansible.builtin.service:\n    name: \"nginx\"\n    state: \"started\"\n```", "```\nmariadb:\n  bind: \"127.0.0.1\"\n  server_config: \"/etc/my.cnf.d/mariadb-server.cnf\"\n  username: \"root\"\n  password: \"Pa55W0rd123\"\n  hosts:\n    - \"127.0.0.1\"\n    - \"::1\"\n    - \"{{ ansible_nodename }}\"\n    - \"localhost\"\n```", "```\n- name: \"Start mariadb\"\n  ansible.builtin.service:\n    name: \"mariadb\"\n    state: \"started\"\n    enabled: true\n```", "```\n- name: \"Check to see if the ~/.my.cnf file exists\"\n  ansible.builtin.stat:\n    path: \"~/.my.cnf\"\n  register: mycnf\n```", "```\n- name: \"Change mysql root password if we need to\"\n  community.mysql.mysql_user:\n    name: \"{{ mariadb.username }}\"\n    host: \"{{ item }}\"\n    password: \"{{ mariadb.password }}\"\n    check_implicit_admin: \"true\"\n    priv: \"*.*:ALL,GRANT\"\n    login_user: \"{{ mariadb.username }}\"\n    login_unix_socket: /var/run/mysqld/mysqld.sock\n  with_items: \"{{ mariadb.hosts }}\"\n  when: not mycnf.stat.exists\n```", "```\n- name: \"Set up .my.cnf file\"\n  ansible.builtin.template:\n    src: \"my.cnf.j2\"\n    dest: \"~/.my.cnf\"\n    mode: \"0644\"\n```", "```\n- name: \"Delete anonymous MySQL user\"\n  community.mysql.mysql_user:\n    user: \"\"\n    host: \"{{ item }}\"\n    state: \"absent\"\n  with_items: \"{{ mariadb.hosts }}\"\n```", "```\n- name: \"Remove the MySQL test database\"\n  community.mysql.mysql_db:\n    db: \"test\"\n    state: \"absent\"\n```", "```\n$ ansible-galaxy role init roles/wordpress\n```", "```\n- name: \"Set a fact for the wordpress domain\"\n  ansible.builtin.set_fact:\n    wordpress_domain: \"{{ ansible_ssh_host }}\"\n    os_family: \"{{ ansible_distribution }} {{ ansible_distribution_version }}\"\n```", "```\nwp_cli:\n  download: \"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\"\n  path: \"/usr/local/bin/wp\"\n```", "```\n- name: \"Download wp-cli\"\n  ansible.builtin.get_url:\n    url: \"{{ wp_cli.download }}\"\n    dest: \"{{ wp_cli.path }}\"\n    mode: \"0755\"\n```", "```\nwp_database:\n  name: \"wordpress\"\n  username: \"wordpress\"\n  password: \"W04DPr3S5\"\n```", "```\n- name: \"Create the wordpress database\"\n  community.mysql.mysql_db:\n    db: \"{{ wp_database.name }}\"\n    state: \"present\"\n```", "```\n- name: \"Create the user for the wordpress database\"\n  community.mysql.mysql_user:\n    name: \"{{ wp_database.username }}\"\n    password: \"{{ wp_database.password }}\"\n    priv: \"{{ wp_database.name }}.*:ALL\"\n    state: \"present\"\n  with_items: \"{{ mariadb.hosts }}\"\n```", "```\nwordpress:\n  domain: \"http://{{ wordpress_domain }}/\"\n  title: \"WordPress installed by Ansible on {{ os_family }}\"\n  username: \"ansible\"\n  password: \"password\"\n  email: \"test@example.com\"\n  plugins:\n    - \"jetpack\"\n    - \"wp-super-cache\"\n    - \"wordpress-seo\"\n    - \"wordfence\"\n    - \"nginx-helper\"\n```", "```\n- name: \"Are the wordpress files already there?\"\n  ansible.builtin.stat:\n    path: \"{{ wordpress_system.home }}/index.php\"\n  register: wp_installed\n```", "```\n- name: \"Download wordpresss\"\n  ansible.builtin.command: \"{{ wp_cli.path }} core download\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: not wp_installed.stat.exists\n```", "```\n$ su wordpress -\n$ cd /var/www/wordpress\n$ /usr/local/bin/wp core download\n```", "```\n- name: \"Set the correct permissions on the homedir\"\n  ansible.builtin.file:\n    path: \"{{ wordpress_system.home }}\"\n    mode: \"0755\"\n  when: not wp_installed.stat.exists\n```", "```\n- name: \"Is wordpress already configured?\"\n  ansible.builtin.stat:\n    path: \"{{ wordpress_system.home }}/wp-config.php\"\n  register: wp_configured\n```", "```\n- name: \"Sort the basic wordpress configuration\"\n  ansible.builtin.command: \"{{ wp_cli.path }} core config --dbhost={{ mariadb.bind }} --dbname={{ wp_database.name }} --dbuser={{ wp_database.username }} --dbpass={{ wp_database.password }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: not wp_configured.stat.exists\n```", "```\n$ su wordpress -\n$ cd /var/www/wordpress\n$ /usr/local/bin/wp core config \\\n--dbhost=127.0.0.1\\\n--dbname=wordpress\\\n--dbuser=wordpress \\\n--dbpass=W04DPr3S5\n```", "```\n- name: \"Do we need to install wordpress?\"\n  ansible.builtin.command: \"{{ wp_cli.path }} core is-installed\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  ignore_errors: true\n  register: wp_installed\n```", "```\n- name: \"Install wordpress if needed\"\n  ansible.builtin.command: \"{{ wp_cli.path }} core install --url='{{ wordpress.domain }}' --title='{{ wordpress.title }}' --admin_user={{ wordpress.username }} --admin_password={{ wordpress.password }} --admin_email={{ wordpress.email }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_installed.rc == 1\n```", "```\n- name: \"Do we need to install the plugins?\"\n  ansible.builtin.command: \"{{ wp_cli.path }} plugin is-installed {{ item }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  with_items: \"{{ wordpress.plugins }}\"\n  ignore_errors: true\n  register: wp_plugin_installed\n```", "```\n- name: \"Set a fact if we don't need to install the plugins\"\n  ansible.builtin.set_fact:\n    wp_plugin_installed_skip: true\n  when: wp_plugin_installed.failed is undefined\n```", "```\n- name: \"Set a fact if we need to install the plugins\"\n  ansible.builtin.set_fact:\n    wp_plugin_installed_skip: false\n  when: wp_plugin_installed.failed is defined\n```", "```\n- name: \"Install the plugins if we need to or ignore if not\"\n  ansible.builtin.command: \"{{ wp_cli.path }} plugin install {{ item }} --activate\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  with_items: \"{{ wordpress.plugins }}\"\n  when: not wp_plugin_installed_skip\n```", "```\n---\n- name: \"Install and configure WordPress and supporting software\"\n  hosts: \"ansible_hosts\"\n  gather_facts: true\n  become: true\n  become_method: \"ansible.builtin.sudo\"\n  vars_files:\n    - \"group_vars/common.yml\"\n  roles:\n    - \"stack_install\"\n    - \"stack_config\"\n    - \"wordpress\"\n```", "```\n$ ansible-playbook -i hosts site.yml\n```", "```\nTASK [roles/stack_install : add the apt keys from a URL] **\nchanged: [ansiblevm] => (item=http://nginx.org/keys/nginx_signing.key)\nTASK [roles/stack_install : install the repo packages] ****\nchanged: [ansiblevm] => (item=deb http://nginx.org/packages/mainline/ubuntu/ jammy nginx)\nchanged: [ansiblevm] => (item=deb-src http://nginx.org/packages/mainline/ubuntu/ jammy nginx)\n```", "```\nTASK [roles/stack_config : configure php.ini] *************\nchanged: [ansiblevm] => (item={'regexp': '^;date.timezone =', 'replace': 'date.timezone = Europe/London'})\nok: [ansiblevm] => (item={'regexp': '^expose_php = On', 'replace': 'expose_php = Off'})\nchanged: [ansiblevm] => (item={'regexp': '^upload_max_filesize = 2M', 'replace': 'upload_max_filesize = 20M'})\n```", "```\nTASK [roles/wordpress : do we need to install wordpress?] *\nfatal: [ansiblevm]: FAILED! => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp core is-installed\", \"delta\": \"0:00:00.142910\", \"end\": \"2023-09-17 12:28:16.500304\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2023-09-17 12:28:16.357394\", \"stderr\": \"PHP Warning:  Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\\nWarning: Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\\nPHP Warning:  Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\\nWarning: Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\", \"stderr_lines\": [\"PHP Warning:  Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\", \"Warning: Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\", \"PHP Warning:  Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\", \"Warning: Undefined array key \\\"HTTP_HOST\\\" in /var/www/wordpress/wp-includes/functions.php on line 6135\"], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\nTASK [roles/wordpress : install wordpress if needed] ******\nchanged: [ansiblevm]\n```", "```\nTASK [roles/wordpress : set a fact if we don't need to install the plugins] **************************************\nskipping: [ansiblevm]\nTASK [roles/wordpress : set a fact if we need to install the plugins] **********************************************\nok: [ansiblevm]\n```", "```\nPLAY RECAP ************************************************\nansiblevm                  : ok=39   changed=28   unreachable=0    failed=0    skipped=1    rescued=0    ignored=2\n```", "```\nTASK [roles/wordpress : are the wordpress files already there?] ***************************************************\nok: [ansiblevm]\nTASK [roles/wordpress : download wordpresss] **************\nskipping: [ansiblevm]\n```", "```\nTASK [roles/wordpress : do we need to install the plugins?]\nchanged: [ansiblevm] => (item=jetpack)\nchanged: [ansiblevm] => (item=wp-super-cache)\nchanged: [ansiblevm] => (item=wordpress-seo)\nchanged: [ansiblevm] => (item=wordfence)\nchanged: [ansiblevm] => (item=nginx-helper)\nTASK [roles/wordpress : set a fact if we don't need to install the plugins] **************************************\nok: [ansiblevm]\nTASK [roles/wordpress : set a fact if we need to install the plugins] **********************************************\nskipping: [ansiblevm]\nTASK [roles/wordpress : install the plugins if we need to or ignore if not] *****************************************\nskipping: [ansiblevm] => (item=jetpack)\nskipping: [ansiblevm] => (item=wp-super-cache)\nskipping: [ansiblevm] => (item=wordpress-seo)\nskipping: [ansiblevm] => (item=wordfence)\nskipping: [ansiblevm] => (item=nginx-helper)\n```"]