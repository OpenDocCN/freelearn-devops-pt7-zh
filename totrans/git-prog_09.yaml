- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Using the Log
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志
- en: One of the most powerful commands in Git is `log`. You've already seen the log
    being used a bit in previous chapters, but now it is time to look at it in detail.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Git中最强大的命令之一是`log`。你已经在前几章看到过日志的用法，现在是时候深入了解它了。
- en: The log can show you when each commit was created, who created it, and other
    useful information about the commit, such as what changed in each file. You have
    great control over what is displayed, as you will see in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 日志可以显示每个提交的创建时间、创建者以及关于提交的其他有用信息，比如每个文件的变化内容。你可以对显示内容进行精细控制，正如本章所示。
- en: Getting started with log
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用日志
- en: 'Let''s quickly build another project and repository:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速构建另一个项目和仓库：
- en: '![](img/B17441_09_01.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_01.png)'
- en: 'Figure 9.1: Create a new repository'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：创建新仓库
- en: 'Next, as we have done before, we''ll clone this repository to our local machine:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，正如我们之前所做的，我们将把这个仓库克隆到本地计算机：
- en: '![](img/B17441_09_02.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_02.png)'
- en: 'Figure 9.2: Cloning the demo program'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：克隆示例程序
- en: With this local repository, we can begin to examine its commits using `log`.
    To do so, of course, we need to create a program and make some commits.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个本地仓库，我们可以开始使用`log`命令查看其提交记录。要做到这一点，当然，我们需要先创建一个程序并进行一些提交。
- en: The LogDemo program
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LogDemo程序
- en: 'Create a program in the `LogDemo` directory. Change the program to be public
    and build and run it to make sure it is working:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LogDemo`目录中创建一个程序。将程序修改为公开的，并进行构建和运行，以确保它能够正常工作：
- en: '![](img/B17441_09_03.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_03.png)'
- en: 'Figure 9.3: Testing the program'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：测试程序
- en: I'm going to create the same `calculator` class we've seen before, with the
    same commits after each tiny function. I'll spare you having to look at all that
    and I'll just put it into the repository.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我将创建与之前相同的`calculator`类，并在每个小功能后做提交。我会省略这些内容，只将其放入仓库中。
- en: 'Having added all the functions, let''s give it a spin:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 添加完所有功能后，我们来试一试：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The results should be:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应为：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I now have a number of commits, which we can see using the `lg` alias described
    in *Chapter 8*, *Aliases*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在有了多个提交，我们可以使用在*第8章*中描述的`lg`别名来查看这些提交：
- en: '![](img/B17441_09_04.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_04.png)'
- en: 'Figure 9.4: Examining the commits with the lg alias of log'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：使用`lg`别名查看提交历史
- en: 'We can see that there are 12 commits, and we can see on the last line that
    none of them has been pushed, and so we are ahead of origin by 12 commits. That
    is confirmed by the `status` command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有12个提交，并且可以从最后一行看到这些提交都没有被推送，因此我们领先于远程仓库12次提交。通过`status`命令可以确认这一点：
- en: '![](img/B17441_09_05.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_05.png)'
- en: 'Figure 9.5: Status shows 12 commits to push and nothing in the working directory'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：状态显示有12个提交等待推送，工作目录为空
- en: Once the commits are made, the working directory is clean. You do have 12 commits
    ready to be pushed, but that does not affect Git's analysis of the state of the
    working directory.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交完成，工作目录就会保持干净。你确实有12个提交准备推送，但这并不影响Git对工作目录状态的分析。
- en: Visual Studio
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio
- en: 'Another great view of this same information is in Visual Studio. Click on **Git**:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很棒的视图展示相同信息的是在Visual Studio中。点击**Git**：
- en: '![](img/B17441_09_06.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_06.png)'
- en: 'Figure 9.6: Click on the menu item Git'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：点击菜单项Git
- en: 'And then on **View Branch History**:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**查看分支历史**：
- en: '![](img/B17441_09_07.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_07.png)'
- en: 'Figure 9.7: Branch history'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：分支历史
- en: This shows the 12 commits ready to be pushed, and the one commit that is already
    on origin (`e040fb00`).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了12个准备推送的提交，以及一个已经在远程仓库的提交（`e040fb00`）。
- en: GitHub Desktop
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub桌面客户端
- en: 'GitHub Desktop has yet another way of presenting the same data. This single
    page tells you a lot in one view:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub桌面客户端还有另一种展示相同数据的方式。这一单独页面能让你在一个视图中获取大量信息：
- en: '![](img/B17441_09_08.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_08.png)'
- en: 'Figure 9.8: GitHub Desktop'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：GitHub桌面客户端
- en: Along the top, we see the repository, branch, and status. Running down the left
    column are each of the commits and their messages. (Clicking on the up arrow will
    push that commit.) The middle column shows which files are in that commit, and
    the far right shows the code from the selected file. The `log` command can do
    all of these things, but not all at once.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面顶部，我们看到仓库、分支和状态。左侧列展示了每个提交及其信息。（点击向上箭头将推送该提交。）中间列显示该提交涉及的文件，右侧则显示选中文件的代码。`log`命令可以完成所有这些操作，但不能同时进行。
- en: log at the command line
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行中的log
- en: 'There are a large number of flags you can add to `log` to control its output.
    In creating the `lg` alias, we already saw how to use `log -–oneline`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向 `log` 添加大量标志以控制其输出。在创建 `lg` 别名时，我们已经看到如何使用 `log --oneline`：
- en: '![](img/B17441_09_09.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_09.png)'
- en: 'Figure 9.9: Using log at the command line'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9：在命令行中使用 `log`
- en: Looking closely, we see that the left column has the short ID, the right column
    lists the messages associated with each commit, and for both the first and last
    commits, we also see where the head pointer is; both locally and on origin.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察，我们看到左列显示短 ID，右列列出了与每个提交相关的消息，在第一个和最后一个提交中，我们还看到了 head 指针的位置；本地和远程都是如此。
- en: Which files changed?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪些文件发生了变化？
- en: 'If you want to know which files were changed in each commit but not see what
    those changes were, you would use:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想知道每次提交中哪些文件被更改，但不想看到这些更改的具体内容，你可以使用：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is an excerpt:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个摘录：
- en: '![](img/B17441_09_10.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_10.png)'
- en: 'Figure 9.10: Using log to see file changes'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10：使用 `log` 查看文件更改
- en: We see two commits. The first, in `Program.cs`, has the message `Call the add
    function`, and you can also see the full ID, the author, and when this commit
    was made.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到两个提交。第一个，在 `Program.cs` 中，消息为 `调用 add 函数`，你还可以看到完整的 ID、作者和提交的时间。
- en: 'You can of course do the same thing with our `lg` alias to condense the output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以使用我们的 `lg` 别名来简化输出：
- en: '![](img/B17441_09_11.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_11.png)'
- en: 'Figure 9.11: Using the shortcut lg'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11：使用快捷键 lg
- en: The problem here is that the vertical spacing can be confusing. This example
    shows three commits. The first has the message `Instantiate the calculator` and
    in that commit `Program.cs` was modified. The best way to figure out which file
    goes with which commit is to start with the ID.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是，垂直间距可能会让人感到困惑。这个例子展示了三个提交。第一个提交的消息是 `实例化计算器`，在这个提交中，`Program.cs` 被修改。弄清楚哪个文件属于哪个提交的最好方法是从
    ID 开始。
- en: There is not an easy way to do this in Visual Studio and, as we saw, GitHub
    Desktop shows you the list of changed files as part of the commit history.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中没有简单的办法做到这一点，正如我们所看到的，GitHub Desktop 会将更改过的文件列表显示为提交历史的一部分。
- en: What changed in each file?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个文件发生了什么变化？
- en: We can go further and ask `log` which files changed and what the files were
    in that change. The command for this is `git log -p`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步询问 `log` 哪些文件发生了变化，以及这些变化中涉及到的文件。对应的命令是 `git log -p`。
- en: 'This will print out the changes for each file in each commit. Here is one file''s
    changes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出每个提交中每个文件的更改。以下是一个文件的更改：
- en: '![](img/B17441_09_12.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_12.png)'
- en: 'Figure 9.12: Using log to see what has changed in each file'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12：使用 `log` 查看每个文件的变化
- en: 'On my computer, the new line is shown in green, and notice the `+` sign to
    the left indicating that this line was added. Let''s go into `Program.cs` and
    make some more changes – taking out the square root function and adding a call
    to the divide function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的电脑上，新增的行显示为绿色，并且注意到左边的 `+` 符号，表示这行是新增的。接下来，我们进入 `Program.cs`，做更多修改——移除平方根函数并添加对除法函数的调用：
- en: '![](img/B17441_09_13.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_13.png)'
- en: 'Figure 9.13: Using diff indicators to see changes'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13：使用 diff 指示器查看变化
- en: Here `log` is showing that the square root method was removed (red on my screen
    with a minus sign on the far left) and the divide method was added (once again,
    note the + sign on the far left).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`log` 显示了平方根方法被移除（我的屏幕上是红色，并且最左边有一个减号），而除法方法被添加（再次注意最左边的加号）。
- en: 'Just below the message for this commit we see an interesting line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在该提交的消息下方，我们看到了一行有趣的内容：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Git is using the `diff` command, separating the original version (`a/LogDemo/LogDemo/Program.cs`)
    from the new version (`b/LogDemo/LogDemo/Program.cs`). It is this use of `diff`
    that allows log to show the changes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Git 使用了 `diff` 命令，将原始版本（`a/LogDemo/LogDemo/Program.cs`）与新版本（`b/LogDemo/LogDemo/Program.cs`）进行了区分。正是
    `diff` 的这种使用，使得 `log` 能够显示变化。
- en: diff
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: diff
- en: Nothing stops you from using diff yourself. The most powerful use of this is
    to show you what has changed in the work you have done since the last commit.
    You do this before you commit your changes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么能阻止你自己使用 `diff`。最强大的用途是，它可以在你提交更改之前，显示你自上次提交以来所做工作的变化。
- en: 'Suppose you are doing work and then you are called away. If you are like me,
    you have completely forgotten how far you''ve gotten and what exactly you were
    about to do. Let''s add back the square root method and remove the divide method
    to test the program, but before we commit it, let''s see the change:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在工作，然后被叫走了。如果你像我一样，可能已经完全忘记了自己做到了哪里以及到底要做什么。我们添加平方根方法并删除除法方法来测试程序，但在提交之前，我们先查看一下更改：
- en: '![](img/B17441_09_14.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_14.png)'
- en: 'Figure 9.14: Using diff'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14：使用diff
- en: This is very similar to the previous example, except that this shows the difference
    between what I have in my working directory and what was in the previous commit.
    I can tell that this is a change in my working directory by the `~1` in the prompt
    – indicating that one file has been modified but not yet checked in.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前的示例非常相似，唯一的不同是，这里展示的是我的工作目录与上一个提交之间的差异。我可以通过提示符中的`~1`知道这是工作目录中的更改——表示有一个文件被修改但尚未提交。
- en: Visual Studio
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio
- en: 'Suppose I''m working on my program and I add an `Absolute` method to the calculator:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在我的程序中工作，并且为计算器添加了一个`Absolute`方法：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'I save that and go off to work on other parts of the program. When I return
    to the calculator, I know I''ve made a change but I can''t remember what. In Visual
    Studio, right-click on `Calculator.cs` and select:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我保存了它，然后去做程序的其他部分。当我回到计算器时，我知道我做了更改，但不记得是什么。在Visual Studio中，右键单击`Calculator.cs`并选择：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Visual Studio opens side-by-side windows showing what you''ve changed in this
    file since the last commit:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio打开并显示并排窗口，显示自上次提交以来你在此文件中做的更改：
- en: '![](img/B17441_09_15.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_15.png)'
- en: 'Figure 9.15: Side-by-side comparison'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15：并排比较
- en: This makes your changes immediately obvious.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这样你的更改立即变得显而易见。
- en: What changed in this file over time?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个文件随时间发生了什么变化？
- en: 'If you want to see the history of changes for a given file, enter:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看给定文件的更改历史，可以输入：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](img/B17441_09_16.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_16.png)'
- en: 'Figure 9.16: Examining changes to one file over time'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16：检查一个文件随时间变化的更改
- en: 'Here I''ve asked for a log of `Calculator.cs` (providing the full path) and
    I get back each change in that file over time. As you might expect, I can make
    this easier to read with `lg`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我请求查看`Calculator.cs`的日志（提供完整路径），并获取该文件随时间变化的每个更改。正如你预期的那样，我可以使用`lg`让它更易读：
- en: '![](img/B17441_09_17.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_17.png)'
- en: 'Figure 9.17: Using lg to see what has changed over time'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17：使用lg查看随时间变化的内容
- en: Now we can see what is really going on. The log is providing all the information
    it usually does, but only for the selected file. Note that the prompt still says
    we have 14 files to upload, a good hint that this list is not the entire list
    of commits waiting to be pushed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到实际发生了什么。日志提供了它通常所提供的所有信息，但仅限于所选文件。注意，提示符仍然显示我们有14个文件待上传，这表明这个列表并不是等待推送的所有提交。
- en: Search
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索
- en: 'Suppose for a moment that we want to find every file in our set of commits
    that has the word calculator in it. For that we use the `-S` search flag, followed
    immediately by the term we are searching for:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想找到所有提交中包含单词"calculator"的文件。为此，我们使用`-S`搜索标志，紧接着输入我们要搜索的词：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will return all the commits that have the word calculator in one or more
    of its files:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有包含单词"calculator"的提交，无论该词出现在其中一个或多个文件中：
- en: '![](img/B17441_09_18.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_18.png)'
- en: 'Figure 9.18: Searching within commits'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18：在提交中搜索
- en: 'Note: You can also use `git log -Gcalculator`, which will allow you to search
    on regular expressions.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：你还可以使用`git log -Gcalculator`，这将允许你使用正则表达式进行搜索。
- en: 'Once again, the `lg` alias can make this easier to read:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`lg`别名可以让它更易读：
- en: '![](img/B17441_09_19.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_19.png)'
- en: 'Figure 9.19: Using lg with search'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19：使用lg进行搜索
- en: Searching is uncommon, but when you need it, Git provides a very powerful tool.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索虽然不常见，但当你需要它时，Git提供了一个非常强大的工具。
- en: Where are my commits?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的提交在哪里？
- en: 'Sometimes you just want the list of commits a particular person has added.
    To do that, you use:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你只想查看某个特定人添加的提交列表。为此，你可以使用：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Of course, for this example, that will be all of the commits:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于这个示例，这将是所有的提交：
- en: '![](img/B17441_09_20.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_20.png)'
- en: 'Figure 9.20: Using lg to see what has changed over time'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20：使用lg查看随时间变化的内容
- en: Note that the search is case sensitive, so searching for "jesse liberty" won't
    return any records, but "Jesse" will.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，搜索是区分大小写的，所以搜索"jesse liberty"不会返回任何记录，但"Jesse"会。
- en: You may find in practice that you are more interested in the author than who
    made the commit, and that works the same way, except for using `--author`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可能会发现你更关心作者而非是谁做了提交，这样做的方式是一样的，只不过需要使用`--author`。
- en: 'It turns out, however, that all I want is "Jesse Liberty''s" commits in the
    past 80 minutes. For that we use the since flag (you can put in any reasonable
    designation of elapsed time, for example, `--since="one week"`):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实证明，我只想要“Jesse Liberty”在过去80分钟内的提交。为此，我们使用`since`标志（你可以输入任何合理的时间段，例如`--since="one
    week"`）：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That produces a much more manageable list:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以生成一个更加易于管理的列表：
- en: '![](img/B17441_09_21.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_21.png)'
- en: 'Figure 9.21: Limiting the output of log by time'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21：按时间限制日志输出
- en: 'You can do exactly the same search for author, in case they are not the same:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以完全按作者进行相同的搜索，以防他们不相同：
- en: '![](img/B17441_09_22.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_22.png)'
- en: 'Figure 9.22: Limiting the log based on author and time'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22：基于作者和时间限制日志输出
- en: Limiting the log to a specific time can greatly facilitate zeroing in on the
    changes you are interested in.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 限制日志显示特定时间段内的提交，可以大大帮助你集中注意力查看感兴趣的更改。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this section you''ve seen the powerful Git command `log` in use. Among the
    flags we covered were:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你已经看到`log`命令的强大功能。我们讨论了其中的一些标志：
- en: '| log flag | Meaning |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| log 标志 | 含义 |'
- en: '| `--oneline` | Show only one line per commit |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `--oneline` | 每个提交只显示一行 |'
- en: '| `--name-only` | Names of files that have changed in each commit |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `--name-only` | 只显示每个提交中更改的文件名称 |'
- en: '| `-p` | What has changed? |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `-p` | 有什么更改？ |'
- en: '| `git log <filename>` | What has changed in this file? |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `git log <filename>` | 该文件中发生了什么变化？ |'
- en: '| `-Sfoo` | Search for `foo` in every commit |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `-Sfoo` | 在每个提交中搜索`foo` |'
- en: '| `--committer="name"` | Search for all commits by name |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `--committer="name"` | 按名称搜索所有提交 |'
- en: '| `--author="name"` | Search for all authors by name |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `--author="name"` | 按名称搜索所有作者 |'
- en: '| `--since="1 week"` | Use with committer or author to search within a designated
    amount of time |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `--since="1 week"` | 与提交者或作者一起使用，在指定时间段内进行搜索 |'
- en: Good working knowledge of the most important `log` commands can make working
    with your commits much easier. Of course, there are many more commands and flags,
    but it is easy to google the ones you want.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 熟练掌握最常用的`log`命令可以让你更轻松地处理提交。当然，还有很多其他命令和标志，但你可以通过谷歌搜索找到你需要的命令。
- en: Challenge
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: 'In this challenge you will use `log` to examine a set of commits:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个挑战中，你将使用`log`命令查看一组提交：
- en: Create a new repository
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的仓库
- en: Create a program in that repository
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该仓库中创建一个程序
- en: Add a number of (at least 6) commits
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加至少6个提交
- en: Find the names of every file changed in each commit
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找每个提交中更改的文件名称
- en: Find what changed in a given file over time
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找某个文件在时间推移中的变化
- en: Find all the files you committed in the past hour (or whatever time increment
    makes sense)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找过去一小时内（或任何合适的时间段）你提交的所有文件
- en: Notice that you will be using `log` to see how one file changes over time and
    to find the names of every file in the commit. This shows the versatility of the
    `log` command.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你将使用`log`查看一个文件如何随时间变化，并查找每个提交中更改的文件名称。这展示了`log`命令的多功能性。
- en: Answer
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: There is no one correct answer to this challenge, but unlike some of the other
    challenges, you are somewhat constrained by how `log` is typically used.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个挑战，没有一个正确答案，但与其他一些挑战不同，你在一定程度上受限于`log`命令的常见用法。
- en: Create a new repository
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的仓库
- en: 'I will go to GitHub.com and create the `LogChallenge` repository:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我将去GitHub.com创建`LogChallenge`仓库：
- en: '![](img/B17441_09_23.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_23.png)'
- en: 'Figure 9.23: Creating the repository'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23：创建仓库
- en: 'Next, I need to clone that repo to my local machine:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我需要将那个仓库克隆到我的本地机器：
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Add at least 6 commits
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 至少添加6个提交
- en: 'First, we must track the new program:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须追踪新程序：
- en: '![](img/B17441_09_24.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_24.png)'
- en: 'Figure 9.24: Tracking the program'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24：追踪程序
- en: 'We''ll add one change to `Program.cs`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向`Program.cs`文件添加一个更改：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now it is time to commit that change. Let''s start with a call to status (`st`):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候提交这个更改了。让我们从查看状态（`st`）开始：
- en: '![](img/B17441_09_25.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_25.png)'
- en: 'Figure 9.25: Handling untracked and modified files'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.25：处理未追踪和修改的文件
- en: 'This is a tricky image. Make sure you understand why the first three are "to
    be committed" and the last is not staged for commit. (Hint: the first three are
    already in the staging area.)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个棘手的图像。确保你理解为什么前三个是“待提交的”，而最后一个没有被暂存提交。（提示：前三个已经在暂存区中。）
- en: 'To make life easy, we''ll add the unstaged files all at once:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，我们一次性将所有未暂存的文件都添加进来：
- en: '![](img/B17441_09_26.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_26.png)'
- en: 'Figure 9.26: Adding the unstaged files'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.26：添加未暂存文件
- en: 'Now make sure you understand why there are three files to be committed and
    not four (hint: take a look at `Program.cs`).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在确保你理解为什么有三个文件需要提交而不是四个（提示：查看 `Program.cs`）。
- en: 'Go ahead and commit these files:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 继续提交这些文件：
- en: '![](img/B17441_09_27.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_27.png)'
- en: 'Figure 9.27: Making the commits'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.27：创建提交
- en: Once again, I'm using the alias from the previous chapter. Notice that cam adds,
    but there is nothing to add. No harm done. It then commits and waits for a message.
    *Do not push the commit at this time*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，我使用的是上一章中的别名。注意 cam 添加了文件，但实际上没有文件被添加。没关系。然后它进行了提交并等待消息。*此时不要推送提交*。
- en: Let's add some more commits by creating the `Calculator` class and each method
    and committing after each change, as you've seen before.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建 `Calculator` 类并添加每个方法，在每次更改后提交，从而增加更多的提交记录，就像你之前看到的那样。
- en: 'Finally, let''s test the `SquareRoot` function in `Program.cs`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们测试一下 `Program.cs` 中的 `SquareRoot` 函数：
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Running this gives the correct result as a double:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令可以得到正确的结果，且类型为 double：
- en: '[PRE13]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s examine the messages of all the commits:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看所有提交的消息：
- en: '[PRE14]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There is a bit of extra information here (the ID, the author, and so on.) but
    we do see the messages of all the commits:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些额外的信息（如 ID、作者等），但我们确实看到了所有提交的消息：
- en: '![](img/B17441_09_28.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_28.png)'
- en: 'Figure 9.28: Using lg with the name only flag'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.28：仅使用名称标志的 lg
- en: Now that we've seen how to handle staged and unstaged files and examine their
    contents with log, let's see how to find every file in a commit that actually
    changed.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何处理已暂存和未暂存的文件，并通过 log 命令检查它们的内容，接下来我们来看一下如何找到在一次提交中实际更改的所有文件。
- en: Find the names of every file changed in each commit
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找每次提交中更改的所有文件名
- en: This is tricky because of the spacing. Let's examine the first one; first, we
    see the ID and message from the latest commit, and then some way down we see the
    affected file. Similarly, in the second box, we see **Add square root function**,
    but the affected file, `Calculator.cs`, is a bit further down the listing. This
    is clearer with a couple of files. Let's do that.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点棘手，因为存在空格问题。让我们先看第一个；首先，我们看到的是最新提交的 ID 和消息，然后在稍后的位置看到受影响的文件。类似地，在第二个框中，我们看到
    **添加平方根函数**，但受影响的文件 `Calculator.cs` 离它的显示位置稍远。这在处理多个文件时会更加清晰。让我们试试这样做。
- en: 'We''ll add the `Round` method to `Calculator`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向 `Calculator` 添加 `Round` 方法：
- en: '[PRE15]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And we''ll test it in the program:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在程序中进行测试：
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We now check it in, and we have made changes to two files:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将其提交，并且已经更改了两个文件：
- en: '![](img/B17441_09_29.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_29.png)'
- en: 'Figure 9.29: Seeing that two files are modified'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.29：看到有两个文件被修改
- en: 'We check that in, and we now have 15 commits:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将其提交，现在已经有 15 次提交：
- en: '![](img/B17441_09_30.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_30.png)'
- en: 'Figure 9.30: Using lg to examine the 15 commits'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.30：使用 lg 查看 15 次提交
- en: Find what changed in a given file over time
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找随时间变化的指定文件的变更
- en: 'To find what has changed in a file over time, we use the simple `log` command
    with the name of the file we want to see. For example, we can examine the changes
    to `Program.cs` (remember to include the relative path):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看文件随时间变化的内容，我们使用简单的 `log` 命令，后面加上要查看的文件名。例如，我们可以查看 `Program.cs` 的变更（记得包括相对路径）：
- en: '[PRE17]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result shows all the commits, with the latest at the top:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示了所有的提交记录，最新的位于顶部：
- en: '![](img/B17441_09_31.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_31.png)'
- en: 'Figure 9.31: All the commits for one file'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.31：查看一个文件的所有提交记录
- en: We have seen how to find all the commits for one file over time, but that can
    be a bit overwhelming. We may want only the most recent commits.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何查找某个文件随时间变化的所有提交记录，但这可能会让人感到有些不知所措。我们可能只需要查看最近的提交记录。
- en: Find all the files you committed in the past hour (or whatever time increment
    makes sense)
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找过去一小时内你提交的所有文件（或者根据需要选择合适的时间段）
- en: 'For this, we need only the `since` flag:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们只需要使用 `since` 标志：
- en: '![](img/B17441_09_32.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17441_09_32.png)'
- en: 'Figure 9.32: Using the since flag'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.32：使用 since 标志
- en: 'We have fulfilled the challenge by doing the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过以下步骤完成了挑战：
- en: Creating a new repository
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新仓库
- en: Creating a program in that repository
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在该仓库中创建一个程序
- en: Adding commits
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加提交
- en: Finding the names of every file changed in each commit
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找每次提交中更改的所有文件名
- en: Examining the changes in one file over time
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看一个文件随时间变化的更改记录
- en: Finding all the files committed in the past hour
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找过去一小时内所有提交的文件
