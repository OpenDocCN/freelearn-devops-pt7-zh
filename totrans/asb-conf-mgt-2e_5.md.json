["```\n$ git clone (https://github.com/ansible/ansible.git)\n$ cd ansible\n$ git checkout v1.3.0\n$ chmod +x hacking/test-module\n\n```", "```\n#!/bin/bash\n\nHOSTNAME=\"$(hostname)\"\n\necho \"hostname=${HOSTNAME}\"\n```", "```\nansible/hacking/test-module -m ./hostname\n\n```", "```\n* module boilerplate substitution not requested in module, line numbers will be unaltered\n***********************************\nRAW OUTPUT\nhostname=admin01.int.example.com\n\n***********************************\nPARSED OUTPUT\n{\n    \"hostname\": \"admin01.int.example.com\"\n}\n```", "```\n#!/bin/bash\n\nset -e\n\n# This is potentially dangerous\nsource ${1}\n\nOLDHOSTNAME=\"$(hostname)\"\nCHANGED=\"False\"\n\nif [ ! -z \"$hostname\" -a \"${hostname}x\" != \"${OLDHOSTNAME}x\" ]; then\n  hostname $hostname\n  OLDHOSTNAME=\"$hostname\"\n  CHANGED=\"True\"\nfi\n\necho \"hostname=${OLDHOSTNAME} changed=${CHANGED}\"\nexit 0\n```", "```\nsudo ansible/hacking/test-module -m ./hostname -a 'hostname=test.example.com'\n\n```", "```\n* module boilerplate substitution not requested in module, line numbers will be unaltered\n***********************************\nRAW OUTPUT\nhostname=test.example.com changed=True\n\n***********************************\nPARSED OUTPUT\n{\n    \"changed\": true,\n    \"hostname\": \"test.example.com\"\n}\n```", "```\n* module boilerplate substitution not requested in module, line numbers will be unaltered\n***********************************\nRAW OUTPUT\nhostname=test.example.com changed=False\n\n***********************************\nPARSED OUTPUT\n{\n    \"changed\": false,\n    \"hostname\": \"test.example.com\"\n}\n```", "```\n---\n- name: Test the hostname file\n  hosts: testmachine\n  tasks:\n    - name: Set the hostname\n      hostname: hostname=testmachine.example.com\n```", "```\nPLAY [Test the hostname file] ***************************************\n\nGATHERING FACTS *****************************************************\nok: [ansibletest]\n\nTASK: [Set the hostname] ********************************************\nchanged: [ansibletest]\n\nPLAY RECAP **********************************************************\nansibletest                : ok=2    changed=1    unreachable=0    failed=0\n```", "```\nmodule = AnsibleModule(\n  argument_spec = dict(\n    runlevel=dict(default=None, type='str')\n  )\n)\n```", "```\ndef main():     #1\n  module = AnsibleModule(    #2\n    argument_spec = dict(    #3\n      runlevel=dict(default=None, type='str')     #4\n    )     #5\n  )     #6\n\n  # Ansible helps us run commands     #7\n  rc, out, err = module.run_command('/sbin/runlevel')     #8\n  if rc != 0:     #9\n    module.fail_json(msg=\"Could not determine current runlevel.\", rc=rc, err=err)     #10\n\n  # Get the runlevel, exit if its not what we expect     #11\n  last_runlevel, cur_runlevel = out.split(' ', 1)     #12\n  cur_runlevel = cur_runlevel.rstrip()     #13\n  if len(cur_runlevel) > 1:     #14\n    module.fail_json(msg=\"Got unexpected output from runlevel.\", rc=rc)     #15\n\n  # Do we need to change anything     #16\n  if module.params['runlevel'] is None or module.params['runlevel'] == cur_runlevel:     #17\n    module.exit_json(changed=False, runlevel=cur_runlevel)     #18\n\n  # Check if we are root     #19\n  uid = os.geteuid()     #20\n  if uid != 0:     #21\n    module.fail_json(msg=\"You need to be root to change the runlevel\")     #22\n\n  # Attempt to change the runlevel     #23\n  rc, out, err = module.run_command('/sbin/init %s' % module.params['runlevel'])     #24\n  if rc != 0:     #25\n    module.fail_json(msg=\"Could not change runlevel.\", rc=rc, err=err)     #26\n\n  # Tell ansible the results     #27\n  module.exit_json(changed=True, runlevel=cur_runlevel)     #28\n```", "```\n# include magic from lib/ansible/module_common.py\n#<<INCLUDE_ANSIBLE_MODULE_COMMON>>\nmain()\nSo, finally, we have the code for our module built. Putting it all together, it should look like the following code:\n#!/usr/bin/python     #1\n# -*- coding: utf-8 -*-    #2\n\nimport os     #3\n\ndef main():     #4\n  module = AnsibleModule(    #5\n    argument_spec = dict(    #6\n      runlevel=dict(default=None, type='str'),     #7\n    ),     #8\n  )     #9\n\n  # Ansible helps us run commands     #10\n  rc, out, err = module.run_command('/sbin/runlevel')     #11\n  if rc != 0:     #12\n    module.fail_json(msg=\"Could not determine current runlevel.\", rc=rc, err=err)     #13\n\n  # Get the runlevel, exit if its not what we expect     #14\n  last_runlevel, cur_runlevel = out.split(' ', 1)     #15\n  cur_runlevel = cur_runlevel.rstrip()     #16\n  if len(cur_runlevel) > 1:     #17\n    module.fail_json(msg=\"Got unexpected output from runlevel.\", rc=rc)     #18\n\n  # Do we need to change anything     #19\n  if (module.params['runlevel'] is None or module.params['runlevel'] == cur_runlevel):     #20\n    module.exit_json(changed=False, runlevel=cur_runlevel)     #21\n\n  # Check if we are root     #22\n  uid = os.geteuid()     #23\n  if uid != 0:     #24\n    module.fail_json(msg=\"You need to be root to change the runlevel\")     #25\n\n  # Attempt to change the runlevel     #26\n  rc, out, err = module.run_command('/sbin/init %s' % module.params['runlevel'])     #27\n  if rc != 0:     #28\n    module.fail_json(msg=\"Could not change runlevel.\", rc=rc, err=err)     #29\n\n  # Tell ansible the results     #30\n  module.exit_json(changed=True, runlevel=cur_runlevel)     #31\n\n# include magic from lib/ansible/module_common.py     #32\n#<<INCLUDE_ANSIBLE_MODULE_COMMON>>     #33\nmain()     #34\n```", "```\n---\n- name: Test the new init module\n  hosts: testmachine\n  user: root\n  tasks:\n    - name: Set the init level to 5\n      init: runlevel=5\n```", "```\nGroup,Host,Variables\ntest,example,ansible_ssh_user=root\ntest,localhost,connection=local\n```", "```\n{\"test\": [\"example\", \"localhost\"]}\n```", "```\n{\"ansible_ssh_user\": \"root\"}\n```", "```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport csv\nimport json\n\ndef getlist(csvfile):\n  # Init local variables\n  glist = dict()\n  rowcount = 0\n\n  # Iterate over all the rows\n  for row in csvfile:\n    # Throw away the header (Row 0)\n    if rowcount != 0:\n      # Get the values out of the row\n      (group, host, variables) = row\n\n      # If this is the first time we've\n      # read this group create an empty\n      # list for it\n      if group not in glist:\n        glist[group] = list()\n\n      # Add the host to the list\n      glist[group].append(host)\n\n    # Count the rows we've processed\n    rowcount += 1\n\n  return glist\n\ndef gethost(csvfile, host):\n  # Init local variables\n  rowcount = 0\n\n  # Iterate over all the rows\n  for row in csvfile:\n    # Throw away the header (Row 0)\n    if rowcount != 0 and row[1] == host:\n      # Get the values out of the row\n      variables = dict()\n      for kvpair in row[2].split():\n        key, value = kvpair.split('=', 1)\n        variables[key] = value\n\n      return variables\n\n    # Count the rows we've processed\n    rowcount += 1\n\ncommand = sys.argv[1]\n\n#Open the CSV and start parsing it\nwith open('machines.csv', 'r') as infile:\n  result = dict()\n  csvfile = csv.reader(infile)\n\n  if command == '--list':\n    result = getlist(csvfile)\n  elif command == '--host':\n    result = gethost(csvfile, sys.argv[2])\n\n  print json.dumps(result)\n```", "```\n$ ansible -i csvinventory â€“list-hosts -m ping all\n\n```", "```\nlocalhost | success >> {\n  \"changed\": false,\n  \"ping\": \"pong\"\n}\n\nexample | success >> {\n  \"changed\": false,\n  \"ping\": \"pong\"\n}\n```", "```\nimport json\n\nclass LookupModule(object):\n    def __init__(self, basedir=None, **kwargs):\n        pass\n\n    def run(self, terms, inject=None, **kwargs):\n        with open(terms, 'r') as f:\n            json_obj = json.load(f)\n\n        return json_obj\n```", "```\n- name: Print the JSON data we received\n  debug:\n    msg: \"{{ lookup('json', 'file.json') }}\"\n```", "```\ndef quorum(list_of_machines):\n\n    n = len(list_of_machines)\n    quorum = n / 2 + 1\n\n    return quorum\n\nclass FilterModule(object):\n    def filters(self):\n        return {\n            'quorum': quorum,\n        }\n```", "```\ndiscovery.zen.minimum_master_nodes: {{ play_hosts|quorum }}\n```"]