- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Workflow, Notes, and Tags
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流程、笔记和标签
- en: In this chapter, we will see
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到
- en: The standard workflow using Git
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Git 的标准工作流程
- en: What notes are
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是笔记
- en: How to use notes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用笔记
- en: What tags are
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是标签
- en: How to use tags
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用标签
- en: We'll start off by examining the standard workflow.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从检查标准工作流程开始。
- en: Standard workflow
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准工作流程
- en: 'The standard workflow is pretty much what we''ve seen in the previous five
    chapters, except that you usually would not commit so quickly or often. Typically,
    it goes like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 标准工作流程基本上就是我们在前五章中看到的，只是你通常不会这么快速或频繁地提交。通常，它的流程如下：
- en: Create a repository.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个仓库。
- en: Either clone that repository from the server, or if it was created locally,
    push it to the server.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从服务器克隆该仓库，或者如果它是本地创建的，可以将其推送到服务器。
- en: Create a branch.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个分支。
- en: Code.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码。
- en: Test.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试。
- en: Commit.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交。
- en: Repeat *steps 4-6* until you have a block of code that does "something" (e.g.
    opens a dialog box and processes the result).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 4-6*，直到你有一段执行“某些操作”的代码（例如打开一个对话框并处理结果）。
- en: Test.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试。
- en: Commit.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交。
- en: Push.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送。
- en: Repeat *steps 4-10* until you have fulfilled a requirement (self-imposed or
    otherwise).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤 4-10*，直到你完成一个需求（无论是自我设定的还是其他的）。
- en: Merge into the main branch (or create a pull request if you are in a team).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并到主分支（如果你在团队中，创建一个拉取请求）。
- en: There are variants on this. Some people like to push after each commit, but
    that prevents them from using interactive rebase to reorganize their commits.
    What happens though if you have pushed your commit and realize that there is additional
    information you wish you had added to the message?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面有一些变体。有些人喜欢每次提交后就推送，但这样会阻止他们使用交互式变基来重组他们的提交。但是，如果你已经推送了提交，然后意识到有额外的信息你希望能添加到提交信息中，会发生什么呢？
- en: Do *not* modify code you've pushed. (Have I said that before?) So, what to do?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*不要*修改你已经推送的代码。（我之前说过吗？）那么，该怎么做呢？'
- en: If the problem is significant (you need to modify the commit contents, etc.)
    then you'll need to take more drastic measures (see *Chapter 12*, *Fixing Mistakes*
    on fixing mistakes). But if it is just a matter of updating the message, consider
    adding a note.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果问题比较严重（你需要修改提交内容等），那么你需要采取更为激烈的措施（参见*第12章*《修复错误》）。但如果只是更新消息的话，可以考虑添加一个笔记。
- en: Mirroring your repo
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像你的仓库
- en: We want to go on to discuss notes, but to do so we need to take a digression
    into mirroring our repository so that we can add notes without messing up our
    existing repo.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想继续讨论笔记，但为了做到这一点，我们需要稍微偏离一下，先镜像我们的仓库，这样我们就可以添加笔记而不会搞乱现有的仓库。
- en: 'The repository we want to mirror should have a fair number of commits. You
    may remember from the previous chapter that I answered the challenge by creating
    a repository called `RockyHorror`. Let''s open that repo on our local machine
    and use the log to see the commits:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要镜像的仓库应该有足够数量的提交。你可能还记得在上一章中，我通过创建一个名为`RockyHorror`的仓库来解决挑战。让我们打开这个仓库，在本地机器上使用日志查看提交：
- en: '![](img/B17741_07_01.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_01.png)'
- en: 'Figure 7.1: What''s in the existing repository?'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1：现有仓库中的内容是什么？
- en: '**Note**: You are not going crazy: for this chapter I''ve switched from PowerShell
    to the Bash shell.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：你并没有疯：在这一章中，我已经从 PowerShell 切换到了 Bash shell。'
- en: Replicating an existing repo
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制现有仓库
- en: As you can see there are nine commits, which will be enough for our purposes.
    However, I don't want to modify this repository (principally so that when you
    download the code it will look right when you are reading *Chapter 6*, *Interactive
    Rebasing*).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有九次提交，这对于我们的目的已经足够了。不过，我不想修改这个仓库（主要是为了当你下载代码时，在阅读*第6章*《交互式变基》时，它看起来是正确的）。
- en: To get an exact copy of this repository into another, complete with commits,
    messages, etc., we're going to use Git's --`mirror` flag. Here's how you do it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这个仓库的精确副本（包括提交、消息等）放入另一个仓库，我们将使用 Git 的 --`mirror` 标志。以下是操作步骤。
- en: Change directory to `RockyHorror` and make sure you are in the local repository
    by using the log, using the `--oneline` flag, as shown previously in *Figure 7.1*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 `RockyHorror` 目录，并使用日志确认你已在本地仓库中，使用`--oneline`标志，正如之前在*图 7.1*中所示。
- en: 'Now, we need a repository to put our mirrored version into. Go to GitHub and
    create a new repository named `RockyHorror2`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个仓库来放置我们的镜像版本。去 GitHub 创建一个名为`RockyHorror2`的新仓库：
- en: '![](img/B17741_07_02.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_02.png)'
- en: 'Figure 7.2: Creating the new repo'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2：创建新仓库
- en: As you would expect, you now have a repository, `RockyHorror2`, on the server
    but not locally. We are now going to overwrite the files, commits, etc. on the
    server with the contents of `RockyHorror`, giving us an exact duplicate to work
    with.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所预期的，现在你在服务器上有一个仓库 `RockyHorror2`，但在本地没有。接下来，我们将用 `RockyHorror` 的内容覆盖服务器上的文件、提交等，给我们提供一个完全相同的副本来进行工作。
- en: 'To do this, make sure you are in the original repository (`RockyHorror`), and
    then push to the server using the `––mirror` flag and pushing to the new repository
    (`RockyHorror2`). You''ll need the address of your new repo, so start by going
    to the clone button on the server and copying the address, but *do not clone the
    repo*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，确保你处于原始仓库（`RockyHorror`）中，然后使用 `––mirror` 标志将内容推送到服务器，并推送到新的仓库（`RockyHorror2`）。你需要新仓库的地址，因此首先去服务器上的克隆按钮，复制地址，但*不要克隆仓库*：
- en: '![](img/B17741_07_03.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_03.png)'
- en: 'Figure 7.3: Mirroring to the new repo'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：将内容镜像到新仓库
- en: Okay, let's review. In your terminal (Bash, PowerShell, Terminal, etc.) you
    are in the directory for `RockyHorror` and if you call `git log --oneline` you
    will get the results shown in *Figure 7.1*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们复习一下。在你的终端（Bash、PowerShell、Terminal 等）中，你位于 `RockyHorror` 目录下，如果你运行 `git
    log --oneline`，你将看到如*图 7.1*所示的结果。
- en: Now you are ready to mirror this repo locally. You'll do that from your terminal,
    but remember, what it is going to do is push a mirror of this repository onto
    the server, overwriting whatever is already in `RockyHorror2` (in this case just
    the `README.md`, the `LICENSE`, and the `.gitignore` file).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好将这个仓库镜像到本地。你将在终端中进行此操作，但请记住，这将把这个仓库的镜像推送到服务器，并覆盖 `RockyHorror2` 中已有的内容（在此案例中仅有
    `README.md`、`LICENSE` 和 `.gitignore` 文件）。
- en: 'This will cause Git to take a number of actions, the net effect of which is
    to copy everything from `RockyHorror` over to `RockyHorror2`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致 Git 执行一系列操作，最终的效果是将 `RockyHorror` 中的所有内容复制到 `RockyHorror2`：
- en: '![](img/B17741_07_04.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_04.png)'
- en: 'Figure 7.4: Copying from the server to a local repo'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：从服务器复制到本地仓库
- en: 'You can now go to GitHub and see that `RockyHorror2` has been updated to be
    an exact replica of `RockyHorror` (If you don''t see that, remember to refresh
    the page):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以去 GitHub 查看，`RockyHorror2` 已经更新为 `RockyHorror` 的完全副本（如果没有看到，记得刷新页面）：
- en: '![](img/B17741_07_05.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_05.png)'
- en: 'Figure 7.5: Examining the mirrored repo'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：查看镜像仓库
- en: There are a few interesting things to see in *Figure 7.5*. First, notice in
    the upper left that we're in `RockyHorror2`, but if you look at the `README` it
    says `RockyHorror`. That is because that `README` came from the original `RockyHorror`
    repo. Also notice that the files are not from a few minutes ago, but in my case
    from 6 days ago; that is because I modified those files 6 days ago in the original
    repo. The point, which really can be hard to wrap your head around, is that this
    is an exact duplicate of `RockyHorror`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.5*中有一些有趣的内容。首先，注意左上角显示的是 `RockyHorror2`，但是如果你查看 `README` 文件，它上面写的是 `RockyHorror`。这是因为这个
    `README` 文件来自原始的 `RockyHorror` 仓库。还要注意，文件不是几分钟前的，而是我在 6 天前在原始仓库中修改的；这是因为这些文件是
    6 天前在原仓库中修改的。要点是，虽然这看起来是一个副本，但它实际上是 `RockyHorror` 的完全复制品。
- en: Now go to `RockyHorror2` on your local machine. What? It isn't there? Right,
    we only mirrored to the server. If we want a local repository we need to clone
    our new one. You can do that using the command line, Visual Studio, or GitHub
    Desktop as we've seen (or any other GUI you like. SourceTree and Fork are very
    popular as of the time of writing).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到你本地的 `RockyHorror2` 目录。什么？它不在那儿？对，我们只是在服务器上进行了镜像。如果我们想要本地仓库，我们需要克隆我们新的仓库。你可以通过命令行、Visual
    Studio 或 GitHub Desktop 来完成这一操作（或者任何你喜欢的 GUI，SourceTree 和 Fork 在撰写本文时非常流行）。
- en: 'When you are cloning, make sure you copy the address of the new repo, not the
    original:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行克隆时，请确保复制新仓库的地址，而不是原始仓库的地址：
- en: '![](img/B17741_07_06.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_06.png)'
- en: 'Figure 7.6: Ensuring you are in the right place'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6：确保你在正确的位置
- en: 'You now can change into the new `RockyHorror2` directory. Do so and get a log
    of what is in there:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以进入新的 `RockyHorror2` 目录。进入后查看里面的日志：
- en: '![](img/B17741_07_07.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_07.png)'
- en: 'Figure 7.7: Getting a log of the mirrored repo'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7：获取镜像仓库的日志
- en: A key thing to notice here is that the commits and where `HEAD` and `origin`
    are pointing to are identical to `RockyHorror` as shown in *Figure 7.1*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个关键点是，提交记录以及 `HEAD` 和 `origin` 指向的位置与*图 7.1*所示的 `RockyHorror` 完全相同。
- en: Notice that the ID is identical as well. I personally find this almost shocking,
    but as far as Git is concerned this is just another copy of the same repo. From
    now on, however, you can change one without affecting the other.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，ID也是相同的。我个人觉得这几乎让人吃惊，但就Git而言，这只是同一个仓库的另一个副本。然而，从现在开始，你可以改变一个，而不会影响另一个。
- en: Adding and showing notes
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加和显示笔记
- en: Now we are ready to add a note to one of our commits.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好为我们的一个提交添加笔记。
- en: Let me be clear, you do *not* have to mirror your repo to use notes. We only
    did that here for the purposes of the book; to ensure that the repos correspond
    to what is shown in each chapter. Normally, you would just add the note.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我明确一点，你*不需要*镜像你的仓库来使用笔记。我们在这里这么做仅仅是为了本书的目的；以确保仓库与每章中所展示的内容相对应。通常，你只需要添加笔记即可。
- en: Notes are just bits of text you can attach to a commit after it is already in
    the repo. A common use for notes is to explain how a commit fits in with other
    commits, or perhaps to flag a commit for amending or rebasing, or really to add
    any information you want to paste onto the commit. It does not change the commit;
    it is like a post-it you tack on.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记只是你可以在提交已存在于仓库之后附加到提交上的一些文本。笔记的常见用途是解释某个提交如何与其他提交相关，或者标记一个提交需要修改或重新基准，或者添加你希望粘贴到提交中的任何信息。它不会改变提交；它就像一个便条纸，你贴在上面。
- en: 'To add the note, you''ll use the `git notes` command with one or more flags.
    For example, if you have the code in *Figure 7.7* and you want to add a note to
    the commit that currently says "Remove Hello World" all we need to do is to get
    the ID `commit id—bb4927c—` and execute like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加笔记，你需要使用`git notes`命令并加上一个或多个标志。例如，如果你在*图 7.7*中有代码，且想要为当前显示“Remove Hello
    World”的提交添加笔记，我们只需要获取ID `commit id—bb4927c—`，然后像这样执行：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you now run `git log` you''ll see the note in the log listing, prefixed
    by the word Notes:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行`git log`，你将看到日志列表中的笔记，前面会有“Notes”字样：
- en: '`![](img/B17741_07_08.png)`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`![](img/B17741_07_08.png)`'
- en: 'Figure 7.8: Seeing the attached note'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8：查看附加的笔记
- en: 'If you want to see your changes along with the note, use the `show` subcommand:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到带有笔记的更改，可以使用`show`子命令：
- en: '![](img/B17741_07_09.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_09.png)'
- en: 'Figure 7.9: Seeing your changes with the notes'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9：查看带有笔记的更改
- en: Once again, there are many subcommands that you can Google for when the need
    arises.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，当需要时，你可以谷歌搜索很多子命令。
- en: Tags
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: It can be convenient to mark a given commit with a name. For example, you might
    mark one commit as the developer release, and another as the general release.
    Each time you make a new release you add another tag, giving you a quick and clean
    way to look through the history and see which commits were added before or after
    each release.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为某个提交标记一个名称可能会很方便。例如，你可以将某个提交标记为开发者版本，另一个标记为正式版本。每次发布新版本时，你都可以添加另一个标签，这样就能快速、清晰地浏览历史记录，查看每个版本之前或之后添加了哪些提交。
- en: Let's look back at *Figure 7.1* one more time. We might decide that the commit
    `Enter show times` is the last commit in creating the Show object, and we'd like
    to indicate that. We can do so with a note, but in this case, it may be more convenient
    to tag that commit.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再回头看一下*图 7.1*。我们可能会决定将提交`Enter show times`视为创建Show对象的最后一个提交，并且我们想要表明这一点。我们可以用笔记来做，但在这种情况下，用标签标记这个提交可能更方便。
- en: 'There are two types of tags you might use: a simple tag and an annotated tag.
    Let''s start with a simple tag:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能使用两种类型的标签：简单标签和注解标签。我们先从简单标签开始：
- en: '![](img/B17741_07_10.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_10.png)'
- en: 'Figure 7.10: Tag for LastShowCommit'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10：LastShowCommit的标签
- en: 'In *Figure 7.10* we first take an online log of all the commits. We then add
    the tag:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.10*中，我们首先获取所有提交的在线日志。然后我们添加标签：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we use the keyword `tag` followed by the tag itself (one word,
    no quotes) followed by the ID of the commit we're tagging.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用关键字`tag`，后跟标签本身（一个单词，不加引号），然后是我们正在标记的提交的ID。
- en: Note that we are tagging a commit, not a given file. This tag applies to all
    the files in that commit.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们标记的是提交，而不是某个特定文件。这个标签适用于该提交中的所有文件。
- en: 'The second type of tag is an annotated tag, as shown in *Figure 7.11*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型的标签是注解标签，如*图 7.11*所示：
- en: '![](img/B17741_07_11.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_11.png)'
- en: 'Figure 7.11: Annotated tag'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11：注解标签
- en: 'When you use the oneline log, this appears just as the other tag did, as shown
    in *Figure 7.12*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用在线日志时，它与其他标签一样出现，如*图 7.12*所示：
- en: '![](img/B17741_07_12.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_12.png)'
- en: 'Figure 7.12: Annotated tag in the oneline log'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12：在线日志中的注解标签
- en: 'If, however, you use the `show` command, you can see the tag with the additional
    information you supplied (i.e. the message) when it was created and by whom. It
    is very similar to a commit, except that no files are affected, and it is marked
    with the keywords **tag** and **tagger**:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你使用`show`命令，你可以看到标签的附加信息（即创建时的消息）和由谁创建。它非常类似于提交，只不过不会影响文件，并且标记了**tag**和**tagger**关键词：
- en: '![](img/B17741_07_13.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_13.png)'
- en: 'Figure 7.13: The annotated tag'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13：注释标签
- en: Pointing to a different tag
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指向不同的标签
- en: 'If you create a tag but point it to the wrong commit, you can change what it
    points to by using the force flag. For example, suppose you have the list of commits
    shown in *Figure 7.14*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建了一个标签，但指向了错误的提交，可以通过使用强制标志来更改它指向的内容。例如，假设你有*图 7.14*中所示的提交列表：
- en: '![](img/B17741_07_14.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_14.png)'
- en: 'Figure 7.14: List with tag at the wrong commit'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14：指向错误提交的标签列表
- en: 'Notice that the tag `TestOfShowObject` is pointing to `f55eb4e`. Unfortunately,
    we meant to point it to the next commit (`e16d191`). To do this, we can write:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，标签`TestOfShowObject`指向`f55eb4e`。不幸的是，我们本来是想指向下一个提交（`e16d191`）。为此，我们可以写：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need the force flag (`-f`) to ensure that Git doesn''t complain with `Fatal:
    tag TestOfShowObjects already exists`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要强制标志（`-f`）来确保Git不会报错`Fatal: tag TestOfShowObjects already exists`：'
- en: '![](img/B17741_07_15.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_15.png)'
- en: 'Figure 7.15: Using the force command to reassign the tag'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15：使用强制命令重新分配标签
- en: As you can see in *Figure 7.15*, Git responds with the message updated tag,
    the name of the tag, and what it had been pointing to. The tag has now been moved
    to `e16d191`, as we hoped.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 7.15*所示，Git回复了更新标签的消息、标签的名称以及它之前指向的内容。标签现在已经被移动到`e16d191`，正如我们所希望的那样。
- en: 'Finally, we can delete a tag with the `-d` flag:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`-d`标志删除一个标签：
- en: '![](img/B17741_07_16.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_16.png)'
- en: 'Figure 7.16: Deleting the tag'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16：删除标签
- en: '*Figure 7.16* shows that Git confirms the deletion and running the log shows
    that the tag is gone.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.16*显示Git确认了删除操作，运行日志显示标签已被删除。'
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you learned
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学到了
- en: The standard workflow using Git
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Git的标准工作流
- en: What notes are and how to create them
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释是什么，如何创建注释
- en: What tags are and how to create, move, and delete them
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签是什么，如何创建、移动和删除标签
- en: Challenge
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Create a local copy of `Panofy`. Add a note to one of the commits and ensure
    it is there. Add a tag to one of the commits and make sure it is there. Finally,
    change which commit the tag is pointing to.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Panofy`的本地副本。向其中一个提交添加注释，并确保它存在。向其中一个提交添加标签并确保它存在。最后，改变标签指向的提交。
- en: 'Here is my answer:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的回答：
- en: 'First, switch directory to `Panofy`. If it is not on your local machine, clone
    it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，切换到`Panofy`目录。如果它不在本地机器上，克隆它：
- en: '![](img/B17741_07_17.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_17.png)'
- en: 'Figure 7.17: Switching to the Panofy project'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17：切换到Panofy项目
- en: As shown in *Figure 7.17* when I tried to change directory to `Panofy` I was
    told it doesn't exist, so I cloned it from the server.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 7.17*所示，当我尝试切换到`Panofy`目录时，系统告诉我该目录不存在，于是我从服务器上克隆了它。
- en: 'To create a mirror I first create a new repo on the server named `Panofy2`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建镜像，我首先在服务器上创建一个名为`Panofy2`的新仓库：
- en: '![](img/B17741_07_18.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_18.png)'
- en: 'Figure 7.18: Mirroring'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18：镜像
- en: 'As you can see in *Figure 7.18*, this time I did not bother creating a license
    file as all of this will be overwritten when I mirror Panofy over it. To do so
    I change directory to Panofy (the original repo) and enter:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 7.18*所示，这次我没有费心创建许可证文件，因为所有这些内容将在我将Panofy镜像过来时被覆盖。为此，我将目录切换到Panofy（原始仓库）并输入：
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This takes the repository I''m in (`Panofy`) and pushes it to the new address,
    mirroring the original:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将我所在的仓库（`Panofy`）推送到新地址，镜像原始仓库：
- en: '![](img/B17741_07_19.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_19.png)'
- en: 'Figure 7.19: Pushing to the mirrored repo on the server'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19：推送到服务器上的镜像仓库
- en: 'I''ll switch to `Panofy2` on the server, and sure enough, the license is now
    there (from `Panofy`) along with the `Panofy` folder as shown in *Figure 7.20*:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在服务器上切换到`Panofy2`，果然，许可证现在已经在那里（来自`Panofy`），并且有了`Panofy`文件夹，如*图 7.20*所示：
- en: '![](img/B17741_07_20.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_20.png)'
- en: 'Figure 7.20: License for Panofy'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20：Panofy的许可证
- en: 'With that in place, I can safely change `Panofy2`. The first task is to add
    a note. Let''s start with a log so that we can see what we have:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，我可以安全地更改`Panofy2`。第一项任务是添加一个注释。我们从日志开始，这样我们就可以看到现有内容：
- en: '![](img/B17741_07_21.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_21.png)'
- en: 'Figure 7.21: Adding a note to a commit in the mirrored repo'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21：在镜像仓库中为提交添加注释
- en: 'Let''s add a note to the commit with the message `Add Hello Message` that says
    `Traditional first Hello World`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为提交添加一个信息为`Add Hello Message`的注释，内容是`Traditional first Hello World`：
- en: '![](img/B17741_07_22.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_22.png)'
- en: 'Figure 7.22: Adding a note'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22：添加注释
- en: 'In *Figure 7.22* we see that this time I did not add the note in the Git statement.
    Instead I waited for the editor (in my case Visual Studio Code) to open and I
    put the statement in there. When I closed the file the note was entered, as shown
    in *Figure 7.23*:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.22*中，我们看到这次我没有在 Git 提交语句中添加注释。相反，我等待编辑器（在我的情况下是 Visual Studio Code）打开，然后把语句放入其中。当我关闭文件时，注释已被输入，如*图
    7.23*所示：
- en: '![](img/B17741_07_23.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_23.png)'
- en: 'Figure 7.23: Adding the note with an editor'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23：使用编辑器添加注释
- en: 'Let''s look at the log once more:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看一次日志：
- en: '![](img/B17741_07_24.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_24.png)'
- en: 'Figure 7.24: Examining the log'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24：检查日志
- en: 'I''ll add an annotated tag to the commit that says `Update csproj`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我将添加一个注释标签到提交中，标签内容是`Update csproj`：
- en: '![](img/B17741_07_25.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_25.png)'
- en: 'Figure 7.25: Examining an annotated tag'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25：检查注释标签
- en: There are four arrows in *Figure 7.25*. The first points to the creation of
    the tag. The second shows you the tag name, the third shows you who the tagger
    (creator of the tag) was, and the final arrow points to the text of the tag itself.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.25*中有四个箭头。第一个指向标签的创建。第二个显示标签名称，第三个显示标签的创建者，最后一个箭头指向标签本身的文本。
- en: 'Let''s look at the log again, as shown in *Figure 7.26*:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次查看日志，如*图 7.26*所示：
- en: '![](img/B17741_07_26.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_26.png)'
- en: 'Figure 7.26: An annotated tag in the oneline log'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26：单行日志中的注释标签
- en: 'We can see the tag at `877348c`, but it turns out we had forgotten to update
    `csproj` and fixed that at commit `4b080ba`. Let''s move the tag there:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到标签位于`877348c`，但事实证明我们忘记了更新`csproj`，并在提交`4b080ba`时修复了这个问题。让我们将标签移到那里：
- en: '![](img/B17741_07_27.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17741_07_27.png)'
- en: 'Figure 7.27: Moving the tag'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27：移动标签
- en: In this final figure, *Figure 7.27*, you can see that we have moved the tag
    `ReleaseCandidate` to `4b080ba` as intended.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一张图中，*图 7.27*，你可以看到我们已经将标签`ReleaseCandidate`移动到了`4b080ba`，正如预期的那样。
