["```\n    $ mkdir -p inventories/development/group_vars\n    inventories/development/hosts:\n\n    ```", "```\n\n    ```", "```\n    ---\n    http_port: 8080\n    ```", "```\n    $ mkdir -p inventories/production/group_vars\n    hosts in the newly created production directory with the following contents:\n\n    ```", "```\n\n    ```", "```\n    ---\n    http_port: 80\n    ```", "```\n$ mkdir library\n```", "```\n$ mkdir filter_plugins\n```", "```\n$ mkdir roles\n$ ansible-galaxy role init --init-path roles/ installapp\n- Role installapp was created successfully\n```", "```\n---\n- name: Display http_port variable contents\n  debug:\n    var: http_port\n- name: Create /tmp/foo\n  file:\n    path: /tmp/foo\n    state: file\n- name: Use custom module to copy /tmp/foo\n  remote_filecopy:\n    source: /tmp/foo\n  dest: /tmp/bar\n- name: Define a fact about automation\n  set_fact:\n    about_automation: \"Puppet is an excellent automation tool\"\n- name: Tell us about automation with a custom filter applied\n  debug:\n    msg: \"{{ about_automation | improve_automation }}\"\n```", "```\n---\n- name: Play using best practice directory structure\nhosts: all\n  roles:\n    - installapp\n```", "```\n.\n├── filter_plugins\n│ ├── custom_filter.py\n│ └── custom_filter.pyc\n├── inventories\n│ ├── development\n│ │ ├── group_vars\n│ │ │ └── app.yml\n│ │ ├── hosts\n│ │ └── host_vars\n│ └── production\n│ ├── group_vars\n│ │ └── app.yml\n│ ├── hosts\n│ └── host_vars\n├── library\n│ └── remote_filecopy.py\n├── roles\n│ └── installapp\n│ ├── defaults\n│ │ └── main.yml\n│ ├── files\n│ ├── handlers\n│ │ └── main.yml\n│ ├── meta\n│ │ └── main.yml\n│ ├── README.md\n│ ├── tasks\n│ │ └── main.yml\n│ ├── templates\n│ ├── tests\n│ │ ├── inventory\n│ │ └── test.yml\n│ └── vars\n│ └── main.yml\n└── site.yml\n```", "```\n$ ansible-playbook -i inventories/development/hosts site.yml\nPLAY [Play using best practice directory structure] ****************************\nTASK [Gathering Facts] *********************************************************\nok: [app02.dev.example.com]\nok: [app01.dev.example.com]\nTASK [installapp : Display http_port variable contents] ************************\nok: [app01.dev.example.com] => {\n \"http_port\": 8080\n}\nok: [app02.dev.example.com] => {\n \"http_port\": 8080\n}\nTASK [installapp : Create /tmp/foo] ********************************************\nchanged: [app02.dev.example.com]\nchanged: [app01.dev.example.com]\nTASK [installapp : Use custom module to copy /tmp/foo] *************************\nchanged: [app02.dev.example.com]\nchanged: [app01.dev.example.com]\nTASK [installapp : Define a fact about automation] *****************************\nok: [app01.dev.example.com]\nok: [app02.dev.example.com]\nTASK [installapp : Tell us about automation with a custom filter applied] ******\nok: [app01.dev.example.com] => {\n \"msg\": \"Ansible is an excellent automation tool\"\n}\nok: [app02.dev.example.com] => {\n \"msg\": \"Ansible is an excellent automation tool\"\n}\nPLAY RECAP *********************************************************************\napp01.dev.example.com : ok=6 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\napp02.dev.example.com : ok=6 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n```", "```\n$ ansible-playbook -i inventories/production/hosts site.yml\nPLAY [Play using best practice directory structure] ****************************\nTASK [Gathering Facts] *********************************************************\nok: [app02.prod.example.com]\nok: [app01.prod.example.com]\nTASK [installapp : Display http_port variable contents] ************************\nok: [app01.prod.example.com] => {\n \"http_port\": 80\n}\nok: [app02.prod.example.com] => {\n \"http_port\": 80\n}\nTASK [installapp : Create /tmp/foo] ********************************************\nchanged: [app01.prod.example.com]\nchanged: [app02.prod.example.com]\nTASK [installapp : Use custom module to copy /tmp/foo] *************************\nchanged: [app02.prod.example.com]\nchanged: [app01.prod.example.com]\nTASK [installapp : Define a fact about automation] *****************************\nok: [app01.prod.example.com]\nok: [app02.prod.example.com]\nTASK [installapp : Tell us about automation with a custom filter applied] ******\nok: [app01.prod.example.com] => {\n \"msg\": \"Ansible is an excellent automation tool\"\n}\nok: [app02.prod.example.com] => {\n \"msg\": \"Ansible is an excellent automation tool\"\n}\nPLAY RECAP *********************************************************************\napp01.prod.example.com : ok=6 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\napp02.prod.example.com : ok=6 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n```", "```\n    $ mkdir -p inventories/development/group_vars\n    inventories/development/hosts file; the contents should be as follows:\n\n    ```", "```\n\n    ```", "```\n    ---\n    http_port: 8080\n    ```", "```\n    ---\n    - name: Play using best practice directory structure\n    hosts: all\n    tasks:\n      - name: Display the value of our inventory variable\n        debug:\n          var: http_port\n    ```", "```\n    $ ansible-playbook -i inventories/development/hosts site.yml\n    PLAY [Play using best practice directory structure] ****************************\n    TASK [Gathering Facts] *********************************************************\n    ok: [app01.dev.example.com]\n    ok: [app02.dev.example.com]\n    TASK [Display the value of our inventory variable] *****************************\n    ok: [app01.dev.example.com] => {\n     \"http_port\": 8080\n    }\n    ok: [app02.dev.example.com] => {\n     \"http_port\": 8080\n    }\n    PLAY RECAP *********************************************************************\n    app01.dev.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    all.yml file remaining unchanged. Let’s also create a new file located in inventories/development/group_vars/app.yml, which will contain the following content:\n\n    ```", "```\n\n    ```", "```\n    $ ansible-playbook -i inventories/development/hosts site.yml\n    PLAY [Play using best practice directory structure] ****************************\n    TASK [Gathering Facts] *********************************************************\n    ok: [app02.dev.example.com]\n    ok: [app01.dev.example.com]\n    TASK [Display the value of our inventory variable] *****************************\n    ok: [app01.dev.example.com] => {\n     \"http_port\": 8081\n    }\n    ok: [app02.dev.example.com] => {\n     \"http_port\": 8081\n    }\n    PLAY RECAP *********************************************************************\n    app01.dev.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    centos, and another group that could notionally contain hosts built to a new build standard, called newcentos, of which both application servers will be a member. This means modifying inventories/development/hosts so that it now looks as follows:\n\n    ```", "```\n\n    ```", "```\n    ---\n    http_port: 8082\n    ```", "```\n    ---\n    http_port: 8083\n    ```", "```\n    $ ansible-playbook -i inventories/development/hosts site.yml\n    PLAY [Play using best practice directory structure] ****************************\n    TASK [Gathering Facts] *********************************************************\n    ok: [app01.dev.example.com]\n    ok: [app02.dev.example.com]\n    TASK [Display the value of our inventory variable] *****************************\n    ok: [app01.dev.example.com] => {\n     \"http_port\": 8083\n    }\n    ok: [app02.dev.example.com] => {\n     \"http_port\": 8083\n    }\n    PLAY RECAP *********************************************************************\n    app01.dev.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    newcentos.yml won—but why? The Ansible documentation states that where identical variables are defined at the group level in the inventory (the one place you can do this), the one from the last-loaded group wins. Just for completeness, we can override all of this by leaving the group_vars directory untouched, but adding a file called inventories/development/host_vars/app01.dev.example.com.yml, which will contain the following content:\n\n    ```", "```\n\n    ```", "```\n    $ ansible-playbook -i inventories/development/hosts site.yml\n    PLAY [Play using best practice directory structure] ****************************\n    TASK [Gathering Facts] *********************************************************\n    ok: [app01.dev.example.com]\n    ok: [app02.dev.example.com]\n    TASK [Display the value of our inventory variable] *****************************\n    ok: [app01.dev.example.com] => {\n     \"http_port\": 9090\n    }\n    ok: [app02.dev.example.com] => {\n     \"http_port\": 8083\n    }\n    PLAY RECAP *********************************************************************\n    app01.dev.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    app02.dev.example.com : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    ```", "```\n$ sudo yum install git\n```", "```\n$ sudo apt-get update\n$ sudo apt-get install git\n```", "```\n$ brew install git\n```", "```\n    $ git clone https://github.com/<YOUR_GIT_ACCOUNT>/<GIT_REPO>.git\n    Cloning into '<GIT_REPO>'...\n    remote: Enumerating objects: 7, done.\n    remote: Total 7 (delta 0), reused 0 (delta 0), pack-reused 7\n    Unpacking objects: 100% (7/7), done.\n    ```", "```\n    $ cd <GIT_REPO>\n    $ vim myplaybook.yml\n    ```", "```\n    commit message (specified in quotes after the -m switch), as follows:\n\n    ```", "```\n\n    ```", "```\n    $ git push\n    Enumerating objects: 5, done.\n    Counting objects: 100% (5/5), done.\n    Delta compression using up to 8 threads\n    Compressing objects: 100% (3/3), done.\n    Writing objects: 100% (3/3), 297 bytes | 297.00 KiB/s, done.\n    Total 3 (delta 2), reused 0 (delta 0)\n    remote: Resolving deltas: 100% (2/2), completed with 2 local objects.\n    To https://github.com/<YOUR_GIT_ACCOUNT>/<GIT_REPO>.git\n    0d00263..ed14138 master -> master\n    ```", "```\n    $ git pull\n    ```", "```\n[app]\napp01.dev.example.com\napp02.dev.example.com\n```", "```\n    ---\n    - name: Play to demonstrate group_by module\n      hosts: all\n      tasks:\n      - name: Create inventory groups based on host facts\n        group_by:\n          key: os_{{ ansible_facts['distribution'] }}\n    ```", "```\n    - name: Play to install Apache on CentOS\n      hosts: os_CentOS\n      become: true\n      tasks:\n        - name: Install Apache on CentOS\n          yum:\n            name: httpd\n            state: present\n    ```", "```\n    - name: Play to install Apache on Ubuntu\n      hosts: os_Ubuntu\n      become: true\n      tasks:\n        - name: Install Apache on Ubuntu\n        apt:\n          name: apache2\n          state: present\n    ```", "```\n    $ ansible-playbook -i hosts osvariants.yml\n    PLAY [Play to demonstrate group_by module] *************************************\n    TASK [Gathering Facts] *********************************************************\n    ok: [app02.dev.example.com]\n    ok: [app01.dev.example.com]\n    TASK [Create inventory groups based on host facts] *****************************\n    ok: [app01.dev.example.com]\n    ok: [app02.dev.example.com]\n    PLAY [Play to install Apache on CentOS] ****************************************\n    TASK [Gathering Facts] *********************************************************\n    ok: [app01.dev.example.com]\n    ok: [app02.dev.example.com]\n    TASK [Install Apache on CentOS] ************************************************\n    changed: [app02.dev.example.com]\n    changed: [app01.dev.example.com]\n    [WARNING]: Could not match supplied host pattern, ignoring: os_Ubuntu\n    PLAY [Play to install Apache on Ubuntu] ****************************************\n    skipping: no hosts matched\n    PLAY RECAP *********************************************************************\n    app01.dev.example.com : ok=4 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    app02.dev.example.com : ok=4 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n    ```", "```\n$ ansible [core 2.15.0]\n  config file = None\n  configured module search path = ['/Users/danieloh/Library/Python/3.11/bin/plugins/modules', '/usr/share/ansible/plugins/modules']\n  ansible python module location = /Users/danieloh/Library/Python/3.11/lib/python/site-packages/ansible\n  ansible collection location =\n/Users/danieloh/Library/Python/3.11/bin/collections:/usr/share/ansible/collections\n  executable location = /Users/danieloh/Library/Python/3.11/bin/ansible\n  python version = 3.11.3 (main, Apr  7 2023, 20:13:31) [Clang 14.0.0 (clang-1400.0.29.202)] (/opt/homebrew/opt/python@3.11/bin/python3.11)\n  jinja version = 3.1.2\n libyaml = True\n```", "```\n$ ansible --version\nansible 2.8.4\n config file = /etc/ansible/ansible.cfg\n configured module search path = [u'/home/james/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n ansible python module location = /usr/lib/python2.7/site-packages/ansible\n executable location = /usr/bin/ansible\n python version = 2.7.5 (default, Aug 7 2019, 00:51:29) [GCC 4.8.5 20150623 (Red Hat 4.8.5-39)]\n```"]