- en: Ansible and Docker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 和 Docker
- en: Ansible's realm of DevOps integrations is not limited to CI solutions or Configuration
    Management provisioning implementations. In addition to these, its integration
    with cloud infrastructure and virtualization-oriented solutions is considered
    second to none by industry experts. Virtualization solutions such as Docker and
    Vagrant have taken the cloud computing industry by storm. As such, the integration
    between Configuration Management tools (including Ansible) has become increasingly
    robust.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 在 DevOps 集成领域的应用不仅限于 CI 解决方案或配置管理部署实现。除了这些，它与云基础设施和虚拟化解决方案的集成被业内专家认为是无可比拟的。像
    Docker 和 Vagrant 这样的虚拟化解决方案在云计算行业中掀起了风暴。因此，配置管理工具（包括 Ansible）与这些虚拟化解决方案的集成变得越来越强大。
- en: In this chapter, we will take a deep dive into the relationship that can be
    forged between Docker and Ansible. We will discover how Ansible can be used to
    create, maintain, and deploy Docker images. We will take a look at how Ansible's
    module solution for Docker can help automate the delivery of software applications.
    We will discover commonly popular ways to integrate Ansible with this modern virtualization
    solution and learn how experts in the industry are combining these two tools to
    create horizontally scalable and powerful infrastructure delivery solutions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨 Docker 与 Ansible 之间可以构建的关系。我们将发现如何使用 Ansible 创建、维护和部署 Docker 镜像。我们将看看
    Ansible 的 Docker 模块解决方案如何帮助自动化软件应用程序的交付。我们还将探索一些流行的集成 Ansible 与这一现代虚拟化解决方案的方式，并了解行业专家如何将这两个工具结合起来，打造水平可扩展且强大的基础设施交付解决方案。
- en: Upon completing this chapter, we will have a better understanding of how to
    integrate Ansible with Docker. We will have a solid grasp of the technical requirements
    required to create a scalable Docker environment, and you will learn how to better
    automate continuous integration and continuous delivery pipelines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，我们将更好地理解如何将 Ansible 与 Docker 集成。我们将牢固掌握创建可扩展 Docker 环境所需的技术要求，您将学会如何更好地自动化持续集成和持续交付管道。
- en: 'More specifically, in this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体来说，本章将涵盖以下主题：
- en: Understanding Docker's Architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Docker 的架构
- en: Managing Docker Containers with Ansible
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理 Docker 容器
- en: Using Ansible to Create Docker Images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 创建 Docker 镜像
- en: Managing Docker Images with Ansible
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理 Docker 镜像
- en: Gathering Facts About Docker Containers using Ansible
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 收集 Docker 容器信息
- en: Let's get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Understanding Docker's Architecture
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Docker 的架构
- en: Initially, combining Docker and Ansible may seem contrary to good configuration
    management tactics. However, after some research, we quickly learn that these
    two seemingly different technologies are actually quite robust and scalable when
    combined. This chapter will focus on integrating Ansible and Docker.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，将 Docker 和 Ansible 结合使用可能看起来与良好的配置管理策略相悖。然而，经过一些研究后，我们很快发现，这两种看似不同的技术结合起来时，实际上是非常强大和可扩展的。本章将重点介绍
    Ansible 与 Docker 的集成。
- en: Docker is easily the frontrunner of virtualization solutions. It provides a
    huge benefit above virtually every other virtualization solution on the market.
    As such, Dockers popularity has grown significantly in organizations looking to
    deliver high-quality, robust implementations to customers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 无疑是虚拟化解决方案的领跑者。与市场上几乎所有其他虚拟化解决方案相比，它提供了巨大的优势。因此，Docker 在寻求为客户提供高质量、强大实施的组织中，受到了显著的关注和广泛应用。
- en: 'Before we can dive into the integration points, let''s talk about Dockers''
    architecture. This is important to understand as it is what sets Docker aside
    from the competition. The following diagram shows Docker''s unique architecture
    in detail:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨集成点之前，先了解一下 Docker 的架构。这一点非常重要，因为它是 Docker 与竞争对手的最大区别。以下图表详细展示了 Docker
    独特的架构：
- en: '![](img/957222cd-e575-4ccb-987e-aab376565fd2.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/957222cd-e575-4ccb-987e-aab376565fd2.png)'
- en: As we can see from the preceding diagram, Dockers architecture provides us with
    a **shared kernel** that sits on top of the **Host operating system**. In addition
    to the shared kernel, we also have **Shared libraries** and a set of shared resources.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的图表中看到的，Docker 的架构为我们提供了一个**共享内核**，它位于**主机操作系统**之上。除了共享内核外，我们还有**共享库**和一组共享资源。
- en: This is important to understand because in the case of the **Host operating
    system**, the flavor of Linux is irrelevant. This support structure allows Docker
    to sit on top of any flavor of Linux and yet still serve up a filesystem from
    another flavor of Linux. For example, the **Host operating system** could be Ubuntu
    Linux and yet the containers might have a Fedora flavor.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点很重要，因为在**主机操作系统**的情况下，Linux的版本是无关紧要的。这种支持结构允许Docker在任何Linux版本之上运行，并从另一种Linux版本提供文件系统。例如，**主机操作系统**可以是Ubuntu
    Linux，但容器可能有Fedora版本。
- en: 'Let''s look at how this works via the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何通过下图实现的：
- en: '![](img/2aa93f36-363f-4bc3-a7b6-187b40762677.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2aa93f36-363f-4bc3-a7b6-187b40762677.png)'
- en: From the preceding diagram, we can see exactly how the various Linux distributions
    can be used via a Docker container. In our illustration, we have three highly
    unique flavors of Linux and web applications that reside within different Linux
    flavors. Neat, right?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述图表中，我们可以看到各种Linux发行版如何通过Docker容器使用。在我们的示例中，我们有三种高度独特的Linux版本和不同Linux版本中的Web应用程序。很整洁，对吧？
- en: Understanding Docker containers as environments
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Docker容器视为环境的理解
- en: Docker's implementation makes it highly effective for spinning up environments.
    Environments in this context represent application hosts, database tiers, and
    APIs that can be combined to provide a working instance of a software solution.
    In the case of larger organizations, these environments might be multiple instances
    (development, QA, stage, and production).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的实现使其非常适合快速启动环境。在这里，环境表示应用主机、数据库层和API，可以组合在一起提供软件解决方案的工作实例。对于较大的组织而言，这些环境可能是多个实例（开发、QA、预发布和生产）。
- en: 'In the following diagram, we can see the architecture of a full-scale environment
    implementation using Docker:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到使用Docker实现完整环境的架构：
- en: '![](img/bc15d2ed-78c0-4d82-a39a-16f69ce2ab89.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc15d2ed-78c0-4d82-a39a-16f69ce2ab89.png)'
- en: In the preceding diagram, we have multiple containers serving up multiple environments.
    Ansible's integration and orchestration solution can help pave and maintain these
    environments. In the next section, we will see exactly how.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图表中，我们有多个容器提供多个环境。Ansible的集成和编排解决方案可以帮助铺设和维护这些环境。在下一节中，我们将看到这是如何实现的。
- en: Managing Docker Containers with Ansible
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible管理Docker容器
- en: Ansible provides a unique set of modules that allow Ansible playbook developers
    to integrate Ansible with Docker directly. The *Docker module* provides the Ansible
    playbook developer with the ability to `create`, `start`, `restart`, `modify`,
    and `remove`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了一组独特的模块，允许Ansible playbook开发人员直接与Docker集成。*Docker模块*为Ansible playbook开发人员提供了创建、启动、重启、修改和移除的能力。
- en: 'In this section, we will take a look at basic operational techniques that can
    be applied to managing Docker containers using Ansible. Specifically, we will
    cover:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看可以应用于使用Ansible管理Docker容器的基本操作技术。具体来说，我们将涵盖：
- en: How to create Docker containers using Ansible
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Ansible创建Docker容器
- en: How to update Docker containers using Ansible
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Ansible更新Docker容器
- en: How to delete Docker containers using Ansible
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Ansible删除Docker容器
- en: How to launch a Docker container using Ansible
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Ansible启动Docker容器
- en: Initially, performing these tasks may seem a bit daunting. But once we pull
    back the veil on this solution, we will see that the implementation of such tasks
    within a playbook is fairly straightforward. Let's take a look at how these playbook
    modules can help us manage Docker containers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，执行这些任务可能看起来有些令人畏惧。但一旦我们揭开这个解决方案的面纱，我们会发现在playbook中实现这些任务是相当简单的。让我们看看这些playbook模块如何帮助我们管理Docker容器。
- en: Creating Docker containers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Docker容器
- en: 'Creating Docker containers may seem like a difficult task through Ansible;
    however, it''s actually quite simple. In this section, you will learn how to do
    exactly that. Let''s get started:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Ansible创建Docker容器可能看起来是一个困难的任务；然而，实际上它非常简单。在这一节中，你将学习如何做到这一点。让我们开始吧：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding Ansible task creates a Docker data container using the `busybox`
    image with a simple volume of `/data`. While it's easy to create simple containers,
    we will obviously need more substance to create more useful containers. Let's
    take a look at how to do this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的Ansible任务使用`busybox`镜像创建了一个简单的数据容器，只包含一个简单的`/data`卷。虽然创建简单容器很容易，但显然我们需要更多内容来创建更有用的容器。让我们看看如何做到这一点。
- en: Removing Docker containers
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除Docker容器
- en: 'Removing Docker containers can be achieved with a simple Ansible state for
    the container provided within the task itself. The following is an example of
    how to remove a Docker container from the local Docker registry:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 Docker 容器可以通过任务中提供的简单 Ansible 状态来实现。以下是如何从本地 Docker 注册表中删除 Docker 容器的示例：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Launching and stopping Docker containers
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和停止 Docker 容器
- en: 'Launching Docker containers using Ansible can be achieved via the Ansible Docker
    task. In the following example, we launch a Docker container for `mysql`. Let''s
    take a look:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ansible 启动 Docker 容器可以通过 Ansible Docker 任务来实现。在以下示例中，我们为 `mysql` 启动一个 Docker
    容器。我们来看看：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: From the preceding example, we can see the task launches a MySQL Docker container
    (version 1.0). The primary parameters we used in this task are `image` and `name`.
    These parameters define the image and tag for the task to use and what we want
    to title the container we are managing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们可以看到该任务启动了一个 MySQL Docker 容器（版本 1.0）。我们在这个任务中使用的主要参数是 `image` 和 `name`。这些参数定义了任务使用的镜像和标签，以及我们希望给正在管理的容器命名。
- en: 'The key to launching the container is the `started` state. State in this context
    provides the following switches:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启动容器的关键是 `started` 状态。在这种情况下，状态提供了以下开关：
- en: '`absent`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absent`'
- en: '`present`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`present`'
- en: '`stopped`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stopped`'
- en: '`started`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`started`'
- en: 'So, in order to expand on this, let''s take a look at an example of the same
    Ansible task, which instead of launching the container will stop it:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，为了扩展这个内容，我们来看看同一个 Ansible 任务的示例，改为停止容器而不是启动它：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For teams who update their containers frequently, it is probably a good idea
    to add the following flags to the Docker container launch operation:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经常更新容器的团队，可能需要在 Docker 容器启动操作中添加以下标志：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These operational parameters will force Docker to pull a fresh container every
    time it's executed *and* to reload the container as part of the task.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作参数将迫使 Docker 每次执行时都拉取一个新的容器，并作为任务的一部分重新加载容器。
- en: For a complete documentation of the Ansible Docker container module, go to [https://docs.ansible.com/ansible/docker_container_module.html](https://docs.ansible.com/ansible/docker_container_module.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Ansible Docker 容器模块的完整文档，请访问 [https://docs.ansible.com/ansible/docker_container_module.html](https://docs.ansible.com/ansible/docker_container_module.html)。
- en: 'In addition to launching and stopping a Docker container using the `started`
    and `stopped` switches, we can also launch a container and execute a command.
    Let''s take a look at how to do this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 `started` 和 `stopped` 开关来启动和停止 Docker 容器，我们还可以启动一个容器并执行命令。我们来看看如何做到这一点：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Managing network access Docker containers
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Docker 容器的网络访问
- en: What good is an isolated Docker container with no network access? In this section,
    we are going to take a look at how to add a container to a network and conversely
    also remove it from the network.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 没有网络访问的孤立 Docker 容器有什么用？在本节中，我们将探讨如何将容器添加到网络中，反之亦然，如何从网络中移除容器。
- en: To manage network connectivity within a Docker container, the Ansible task implementation
    has provided a set of network switches to the main Docker container task. Let's
    take a look at an example of these switches in action and see how to leverage
    Ansible in this form.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理 Docker 容器内的网络连接，Ansible 任务实现已经为主 Docker 容器任务提供了一组网络开关。我们来看看这些开关的实际应用示例，并了解如何在这种形式下利用
    Ansible。
- en: 'Adding a container to a network can be done using the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将容器添加到网络可以使用以下代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Removing a container from the network can be done using the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从网络中移除容器可以使用以下代码：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using Ansible to Create Docker Images
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 创建 Docker 镜像
- en: Docker provides an out-of-box solution to build Docker images using a Docker
    domain-specific language. Docker files are created in order to provide spin-up
    instructions that Docker can execute in order to build an image. After learning
    to create Docker files, one may ask why we would advocate for leveraging Ansible
    to create Docker containers in conjunction with a Dockerfile. The answer is quite
    simple—idempotency. An idempotent operation is one where the operation, once executed,
    can be executed repeatedly without any change. This is precisely what Ansible
    does.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了一种开箱即用的解决方案，通过 Docker 特定语言构建 Docker 镜像。Docker 文件用于提供启动指令，Docker 可以执行这些指令来构建镜像。在学习如何创建
    Docker 文件后，可能会问：为什么我们要提倡结合使用 Dockerfile 和 Ansible 来创建 Docker 容器呢？答案很简单——幂等性。幂等操作是指一旦执行该操作后，可以重复执行而不会产生变化。这正是
    Ansible 所做的。
- en: Once Ansible has effected a change in a given system, it will automatically
    skip that change if the change is already present. So for example, if an Ansible
    playbook runs against a target system and makes, say, four changes to that system,
    it will automatically skip trying to make that change again *if* the change is
    found already present or if the system is already in the desired state.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Ansible 对给定系统进行了更改，如果该更改已经存在，它将自动跳过该更改。例如，如果一个 Ansible playbook 针对目标系统运行，并对该系统进行四项更改，它会自动跳过那些已经存在的更改，*前提是*
    该更改已经存在或系统已经处于所需状态。
- en: In terms of creating Docker images using Ansible, it is a good idea to leverage
    Ansible because the domain language is a bit easier to read, the operations are
    idempotent, and the changes can be applied to one container or a hundred simultaneously.
    This provides a large amount of flexibility and scalability within this space.
    In this section, we are going to look at how to leverage Ansible to create Docker
    images. Let's get started.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Ansible 创建 Docker 镜像方面，利用 Ansible 是一个不错的选择，因为其领域语言更易读，操作具有幂等性，而且更改可以同时应用于一个或一百个容器。这为该领域提供了很大的灵活性和可扩展性。在本节中，我们将探讨如何利用
    Ansible 创建 Docker 镜像。让我们开始吧。
- en: Using Dockerfiles to launch Ansible playbooks
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Dockerfiles 启动 Ansible playbook
- en: 'By leveraging Docker files to call Ansible playbooks once launched, we can
    make our implementation of Docker containers fairly robust. This type of implementation
    has a number of benefits. The most notable are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 Docker 文件在启动时调用 Ansible playbook，我们可以使 Docker 容器的实现相当健壮。这种实现方式有许多好处。最显著的有以下几点：
- en: If there is existing infrastructure that is already leveraging Ansible, keeping
    the automation control consistent is a no-brainer
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果已有基础设施正在使用 Ansible，那么保持自动化控制一致性是显而易见的选择
- en: Ansible's module system provides integration with a number of third-party tools
    and technologies
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 的模块系统提供了与多种第三方工具和技术的集成
- en: Ansible's implementation of easy-to-read syntax and idempotent architecture
    provides a significant set of capabilities for developers onboarding into Ansible.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 实现了易于阅读的语法和幂等架构，为开发者入门 Ansible 提供了强大的功能。
- en: 'In this section, we will take a look at how to best leverage a Dockerfile to
    execute an Ansible playbook. Let''s get started by taking a look at an example
    Dockerfile:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何最好地利用 Dockerfile 执行 Ansible playbook。让我们通过查看一个示例 Dockerfile 开始：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding example should be fairly self-documented. However, it basically
    creates a Docker image based on Ubuntu 14.04, defines a working directory for
    Ansible, and then runs Ansible locally using `myplaybook.yml` as its source. Easy,
    right?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例应该是自解释的。然而，它基本上是基于 Ubuntu 14.04 创建 Docker 镜像，定义了一个用于 Ansible 的工作目录，然后使用
    `myplaybook.yml` 作为源在本地运行 Ansible。简单吧？
- en: Managing Docker Images with Ansible
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理 Docker 镜像
- en: 'Docker images are slightly different from containers. That is, the image is
    the stored copy of the container. Docker images are stored in what is commonly
    referred to as a **registry.** In the context of Docker, the registry acts similar
    to a source control solution in many ways. That source control solution is mirrored
    in many ways to Git. Docker registries parallel Git in many ways; the most obvious
    is the ability to have a distributed set of registries. Confused yet? Let''s take
    a look at the following diagram:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像与容器稍有不同。也就是说，镜像是容器的存储副本。Docker 镜像存储在通常所称的 **注册中心** 中。在 Docker 的上下文中，注册中心在许多方面与源代码控制解决方案类似。这个源代码控制解决方案在许多方面与
    Git 相似。Docker 注册中心与 Git 有很多相似之处；最明显的是能够拥有分布式的注册中心。还搞不清楚吗？让我们看看以下图示：
- en: '![](img/cebd8ec3-2cd1-4367-8467-a9ed47fa9f8b.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cebd8ec3-2cd1-4367-8467-a9ed47fa9f8b.png)'
- en: From the preceding illustration, we can see that the **Docker registry** is
    a remote location that stores Docker images. Docker images then reside in a local
    registry (local to the developer) where they can manipulate and store changes
    made to the various containers stored within the **Docker registry**. When a set
    of changes has been deemed complete, the developer has the option to **push**
    the image(s) to the remote registry and communicate their changes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示意图中，我们可以看到 **Docker 注册中心** 是一个远程位置，用于存储 Docker 镜像。Docker 镜像随后存储在本地注册中心（开发者本地），在这里他们可以操作并存储对存储在
    **Docker 注册中心** 中的各个容器所做的更改。当一组更改完成时，开发者可以选择将镜像推送到远程注册中心，并传达他们的更改。
- en: Pulling, pushing, and tagging images
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拉取、推送和标记镜像
- en: 'One of the fundamental Docker development requirements is the ability of the
    developer to pull, push, and tag Docker images from the remote registry. Ansible
    can be useful in this *if* you have a build system that orchestrates changes to
    the infrastructure and stores the baked images for future deployment. Within this
    type of scenario, the workflow might go something like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 开发的基本要求之一是开发人员能够从远程仓库拉取、推送和标记 Docker 镜像。如果你有一个协调基础设施变更并存储已构建镜像以供未来部署的构建系统，Ansible
    在这种情况下可能会非常有用。这样的工作流可能大致如下：
- en: The developer checks out the source code for a set of Ansible playbooks that
    define the organization's infrastructure.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员检出一组定义组织基础设施的 Ansible playbook 的源代码。
- en: The developer makes a change to a playbook that is associated with the DB tier
    of the environment and commits their code change to Git.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员修改与环境中的 DB 层相关的 playbook，并将他们的代码更改提交到 Git。
- en: Jenkins offers an automated CI solution, which sees the commit, and pulls down
    the playbook repo for validation.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 提供了一个自动化的 CI 解决方案，它会监控提交并拉取 playbook 仓库进行验证。
- en: Jenkins executes Ansible to run the playbook, which automatically creates a
    newer version of the Docker image.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 执行 Ansible 运行 playbook，从而自动创建更新版的 Docker 镜像。
- en: The updated Docker image is then pushed to the remote registry for deployment
    into a development or QA environment.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新后的 Docker 镜像将被推送到远程仓库，以便部署到开发或 QA 环境。
- en: This type of workflow is pretty simple. It ensures that the development organization
    is not manually making changes to the containers; it ensures that Ansible is the
    tool used to develop, automate, and deploy the software solution; and it ensures
    that the images spun up are tested before deployment to production.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的工作流相当简单。它确保开发团队不会手动更改容器；它确保 Ansible 是用于开发、自动化和部署软件解决方案的工具；并确保构建的镜像在部署到生产环境之前经过测试。
- en: Automating this type of workflow in Ansible takes the ability to pull a Docker
    image, push a Docker image, and tag a Docker image. Let's look at the playbook
    tasks that could make this happen.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible 中自动化这种工作流需要能够拉取 Docker 镜像、推送 Docker 镜像并标记 Docker 镜像。让我们看看可以实现这一目标的
    playbook 任务。
- en: 'To pull a Docker image, use the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要拉取 Docker 镜像，可以使用以下代码：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To tag an image and push it, use the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要标记镜像并推送它，请使用以下代码：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see, the implementation of these tasks is actually *very* straightforward.
    But what about tagging and pushing to a local registry? I''m glad you asked. Let''s
    look at how to do that:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这些任务的实现其实*非常*简单。但标记和推送到本地仓库怎么办？很高兴你问了。让我们看看如何做到这一点：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Easy, right? Finally, let's look at how to build and image from a Dockerfile
    and push it to a private registry. This should be simple, easy right?
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，对吧？最后，让我们看看如何从 Dockerfile 构建镜像并将其推送到私有仓库。这应该很简单，对吧？
- en: 'The following example shows how an image is built from a Dockerfile:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何从 Dockerfile 构建镜像：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This task assumes you have a Dockerfile located at `./test`, and it definitely
    isn't rocket science.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该任务假设你在 `./test` 目录下有一个 Dockerfile，而且这绝对不是火箭科学。
- en: Building and archiving Docker images
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和归档 Docker 镜像
- en: 'Building Docker images from a Dockerfile is a topic we briefly touched on in
    the previous section, but it deserves a bit more depth. In building a Docker image
    from a Dockerfile, we can leverage it later. But first, we would need a Dockerfile
    to make this happen. Let''s look at an example of a Dockerfile and then look at
    how to build it using Ansible:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Dockerfile 构建 Docker 镜像是我们在上一节中简单提到的话题，但它值得深入探讨。在从 Dockerfile 构建 Docker 镜像时，我们可以稍后利用它。但首先，我们需要一个
    Dockerfile 来实现这一点。让我们先看一个 Dockerfile 的示例，然后看看如何使用 Ansible 构建它：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This Dockerfile should look *very* familiar. In fact, it is! It''s the source
    code we leveraged earlier to have it run an Ansible playbook at launch. Can you
    see where we are going with this example? Save this Dockerfile to the `/opt/test`
    directory and then create a playbook with the following contents:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Dockerfile 看起来*非常*熟悉。实际上，它就是！它是我们之前利用的源代码，让它在启动时运行 Ansible playbook。你能看到我们从这个示例中想要表达的意思吗？将这个
    Dockerfile 保存到 `/opt/test` 目录下，然后创建一个内容如下的 playbook：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now create a simple playbook in `/srv/example/myplaybook.yml` with the following
    content:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `/srv/example/myplaybook.yml` 中创建一个简单的 playbook，内容如下：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Nice. Now run the `/opt/test` Ansible playbook and see the solution build a
    Docker container with nginx already installed and sitting happily in the local
    Docker registry.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在运行 `/opt/test` Ansible playbook，查看解决方案如何构建一个已经安装了 nginx 并且愉快地位于本地 Docker
    注册表中的 Docker 容器。
- en: Saving and loading archived Docker images
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和加载归档的 Docker 镜像
- en: 'Docker provides a unique ability to share containers using tarballs. This allows
    developers to pass around a tarball copy of the infrastructure for inspection
    and manipulation. Generally, there are two distinct operations involved in archiving
    a Docker container (exporting/archiving and loading an archive); a Docker image
    is also a really straightforward task. Let''s look at an example code on how to
    archive a Docker image:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了一种独特的能力，通过 tarball 分享容器。这使得开发者可以传递 tarball 格式的基础设施副本，以便进行检查和操作。通常，归档
    Docker 容器涉及两个 distinct 操作（导出/归档和加载归档）；归档 Docker 镜像也是一个非常简单的任务。我们来看一个如何归档 Docker
    镜像的示例代码：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Loading an archived image can be done using the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下代码加载已归档的镜像：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Gathering Facts About Docker Containers
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集有关 Docker 容器的事实
- en: Facts are the bread and butter of how Ansible works and manages information
    about its controlled/automated systems. Facts represent data about the device
    and the current state. Ansible provides a set of playbook tasks that can be readily
    leveraged to gather facts about Docker images. Let's take a look at a couple of
    examples of how to accomplish this.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是 Ansible 工作原理和管理其控制/自动化系统信息的核心。事实代表了关于设备和当前状态的数据。Ansible 提供了一组可用于收集 Docker
    镜像信息的 playbook 任务。我们来看几个如何实现这一目标的示例。
- en: 'This is example 1:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是示例 1：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is example 2:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是示例 2：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding playbook tasks inspect a single or multiple Docker image setup
    and report the facts. The fact data itself is stored in the return value. An example
    of the output is provided as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前述 playbook 任务检查单个或多个 Docker 镜像的设置并报告事实。事实数据本身存储在返回值中。以下是输出的一个示例：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The output of the command provides a nice hash data set. This data could then
    be further dissected and used within playbook's.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出提供了一个漂亮的哈希数据集。这些数据可以进一步解析并在 playbook 中使用。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered some interesting and unique ways to integrate
    the Ansible automation system with Docker. We learned that these two seemingly
    redundant technologies can be combined to provide a robust automation implementation
    that scales very well.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了一些有趣且独特的方式，将 Ansible 自动化系统与 Docker 集成。我们了解到，这两种看似冗余的技术可以结合起来提供一个强大的自动化实现，并且具有非常好的可扩展性。
- en: We also talked about how to inversely leverage Ansible playbook tasks to create,
    update, delete, and manage containers. Then, we covered how to attach and remove
    networking from these containers. You learned that even though these implementations
    might have looked difficult at first, they proved to be quite easy actually.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了如何反向利用 Ansible playbook 任务来创建、更新、删除和管理容器。然后，我们介绍了如何为这些容器添加和移除网络。你会发现，尽管这些实现一开始看起来很难，但实际上它们非常简单。
- en: In the next chapter, we will take a look at how to extend Ansible and create
    custom modules. We will educate you on how to use Python to extend Ansible and
    create custom modules that integrate with unique specific technology stacks. This
    will be done by providing a set of tutorials that teach you how to write and release
    custom Ansible modules. This chapter will teach you how to read input, manage
    facts, perform automated tasks, interact with REST APIs, and generate documentation.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何扩展 Ansible 并创建自定义模块。我们将教你如何使用 Python 扩展 Ansible，并创建与特定技术栈集成的自定义模块。通过提供一系列教程，我们将教你如何编写和发布自定义
    Ansible 模块。本章将教你如何读取输入、管理事实、执行自动化任务、与 REST API 交互以及生成文档。
