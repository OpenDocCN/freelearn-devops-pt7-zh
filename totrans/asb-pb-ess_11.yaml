- en: Chapter 10. Orchestrating Infrastructure with Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：使用 Ansible 编排基础设施
- en: 'Orchestration can mean different things at different times when used in different
    scenarios. The following are some of the orchestration scenarios described:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编排在不同的场景中有不同的含义，具体取决于使用时的情境。以下是一些编排场景的描述：
- en: Running ad hoc commands in parallel on a group of hosts, for example, using
    a `for` loop to walk over a group of web servers to restart the Apache service.
    This is the crudest form of orchestration.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一组主机上并行执行临时命令，例如，使用 `for` 循环遍历一组 Web 服务器以重启 Apache 服务。这是最基本的编排形式。
- en: Invoking an orchestration engine to launch another configuration management
    tool to enforce correct ordering.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用编排引擎启动另一个配置管理工具，以确保正确的执行顺序。
- en: Configuring a multitier application infrastructure in a certain order with the
    ability to have fine-grained control over each step, and the flexibility to move
    back and forth while configuring multiple components. For example, installing
    the database, setting up the web server, coming back to the database, creating
    a schema, going to web servers to start services, and more.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照特定顺序配置多层应用基础设施，同时能够对每个步骤进行精细控制，并且在配置多个组件时具有前后灵活调整的能力。例如，安装数据库、设置 Web 服务器、返回数据库创建模式、然后去
    Web 服务器启动服务等。
- en: Most real-world scenarios are similar to the last scenario, which involve a
    multitier application stacks and more than one environment, where it's important
    to bring up and update nodes in a certain order, and in a coordinated way. It's
    also useful to actually test that the application is up and running before moving
    on to the next. The workflow to set up the stack for the first time versus pushing
    updates can be different. There can be times when you would not want to update
    all the servers at once, but do them in batches so that downtime is avoided.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现实世界的场景类似于最后一种情况，涉及多层应用栈和多个环境，在这些场景中，按特定顺序并协调一致地启动和更新节点非常重要。在继续执行下一步之前，实际测试应用程序是否运行正常也很有用。首次设置应用栈与推送更新的工作流可能是不同的。有时，你可能不想一次性更新所有服务器，而是分批进行，以避免停机时间。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Orchestration scenarios
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编排场景
- en: Using Ansible as an infrastructure orchestrating engine
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 作为基础设施编排引擎
- en: Implementing rolling updates
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现滚动更新
- en: Using tags, limits and patterns
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签、限制和模式
- en: Building tests into playbooks
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 playbook 中构建测试
- en: Ansible as an orchestrator
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 作为编排工具
- en: When it comes to orchestration of any sort, Ansible really shines over other
    tools. Of course, as the creators of Ansible would say, it's more than a configuration
    management tool, which is true. Ansible can find a place for itself in any of
    the orchestration scenarios discussed earlier. It was designed to manage complex
    multitier deployments. Even if you have your infrastructure being automated with
    other configuration management tools, you can consider Ansible to orchestrate
    those.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何形式的编排中，Ansible 相较于其他工具表现得尤为突出。当然，正如 Ansible 的创始人所说，它不仅仅是一个配置管理工具，这一点是正确的。Ansible
    可以在之前讨论的任何编排场景中找到自己的位置。它的设计初衷就是为了管理复杂的多层部署。即使你的基础设施已经通过其他配置管理工具进行自动化，你也可以考虑使用
    Ansible 来进行编排。
- en: Let's discuss the specific features that Ansible ships with, which are useful
    for orchestration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下 Ansible 所提供的特性，这些特性对于编排非常有用。
- en: Multiple playbooks and ordering
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个 playbook 和执行顺序
- en: Unlike most other configuration management systems, Ansible supports running
    different playbooks at different times to configure or manage the same infrastructure.
    You can create one playbook to set up the application stack for the first time,
    and another to push updates over time in a certain manner. Another property of
    the playbook is that it can contain more than one play, which allows the separation
    of groups of hosts for each tier in the application stack, and configures them
    at the same time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他配置管理系统不同，Ansible 支持在不同的时间运行不同的 playbook 来配置或管理相同的基础设施。你可以创建一个 playbook
    来首次设置应用栈，另一个 playbook 来以某种方式逐步推送更新。Playbook 的另一个特点是它可以包含多个 play，这使得能够将应用栈中的每一层的主机分组，并同时对它们进行配置。
- en: Pre-tasks and post-tasks
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前置任务和后置任务
- en: We have used pre-tasks and post-tasks earlier, which are very relevant while
    orchestrating, as these allow us to execute a task or run validations before and
    after running a play. Let's use the example of updating web servers that are registered
    with the load balancer. Using pre-tasks, a web server can be taken out of a load
    balancer, then the role is applied to the web servers to push updates, followed
    by post-tasks which register the web server back to the load balancer. Moreover,
    if these servers are being monitored by **Nagios**, alerts can be disabled during
    the update process and automatically enabled again using pre-tasks and post-tasks.
    This can avoid the noise that the monitoring tool may generate in the form of
    alerts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们已经使用过前任务和后任务，在编排时非常相关，因为这些允许我们在运行播放之前和之后执行任务或运行验证。让我们举一个更新已在负载平衡器注册的Web服务器的例子。使用前任务，可以将Web服务器从负载平衡器中移除，然后将角色应用于Web服务器以推送更新，随后使用后任务将Web服务器重新注册到负载平衡器。此外，如果这些服务器正在被
    **Nagios** 监控，可以在更新过程中通过前任务和后任务自动禁用和重新启用警报。这可以避免监控工具可能以警报形式生成的噪音。
- en: Delegation
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 委托
- en: 'If you would like tasks to be selectively run on a certain class of hosts,
    especially the ones outside the current play, the delegation feature of Ansible
    can come in handy. This is relevant to the scenarios discussed previously and
    is commonly used with pre-tasks and post-tasks. For example, before updating a
    web server, it needs to be deregistered from the load balancer. Now, this task
    should be run on the load balancer, which is not part of the play. This dilemma
    can be solved by using the delegation feature. With pre-tasks, a script can be
    launched on the load balancer using the `delegate_to` keyword, which does the
    deregistering part as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望任务仅在某些类型的主机上运行，特别是当前播放之外的主机上，Ansible 的委托功能非常方便。这与前面讨论的场景相关，并且通常与前任务和后任务一起使用。例如，在更新Web服务器之前，需要将其从负载平衡器中注销。现在，此任务应在不属于播放范围的负载平衡器上运行。可以使用
    `delegate_to` 关键字通过前任务在负载平衡器上启动脚本来解决这个问题，执行注销操作如下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Rolling updates
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动更新
- en: 'This is also called batch updates or zero-downtime updates. Let''s assume that
    we have 100 web servers that need to be updated. If we define these in an inventory
    and launch a playbook against them, Ansible will start updating all the hosts
    in parallel. This can also cause downtime. To avoid complete downtime and have
    a seamless update, it would make sense to update them in batches, for example,
    20 at a time. While running a playbook, batch size can be mentioned by using the
    `serial` keyword in the play. Let''s take a look at the following code snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这也称为批量更新或零停机更新。假设我们有 100 台需要更新的Web服务器。如果我们在清单中定义它们并对其启动一个Playbook，Ansible 将并行开始更新所有主机。这也可能导致停机时间。为了避免完全停机并进行无缝更新，可以分批更新，例如每次更新
    20 台。在运行Playbook时，可以通过在播放中使用 `serial` 关键字来指定批量大小。让我们看以下代码片段：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tests
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: 'While orchestrating, it''s not only essential to configure the applications
    in order, but also to ensure that they are actually started, and functioning as
    expected. Ansible modules, such as `wait_for` and `uri`, help you build that testing
    into the playbooks, for example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在编排时，不仅需要按顺序配置应用程序，还需要确保它们实际启动并按预期运行。例如，Ansible 模块如 `wait_for` 和 `uri` 可以帮助您将这些测试集成到
    Playbooks 中，例如：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `wait_for` module can be additionally used to test the existence of a file.
    It's also useful when you would like to wait until a service is available before
    proceeding.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`wait_for` 模块可以额外用于测试文件的存在。当您希望在继续之前等待服务可用时，它也非常有用。'
- en: Tags
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: Ansible plays map roles to specific hosts. While the plays are run, the entire
    logic that is called from the main task is executed. While orchestrating, we may
    need to just run a part of the tasks based on the phases that we want to bring
    the infrastructure in. One example is a zookeeper cluster, where it's important
    to bring up all the nodes in the cluster at the same time, or in a gap of a few
    seconds. Ansible can orchestrate this easily with a two-phase execution. In the
    first phase, you can install and configure the application on all nodes, but not
    start it. The second phase involves starting the application on all nodes almost
    simultaneously. This can be achieved by tagging individual tasks, for example,
    configure, install, service, and more.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible plays 将角色映射到特定的主机。在执行 play 时，从主任务调用的整个逻辑都会被执行。在编排过程中，我们可能只需要根据我们希望将基础设施带到的阶段来运行部分任务。一个例子是
    zookeeper 集群，在这个场景中，重要的是同时启动集群中的所有节点，或者在几秒钟的间隔内启动。Ansible 可以轻松地通过两阶段执行来编排此过程。在第一阶段，您可以在所有节点上安装和配置应用程序，但不启动它。第二阶段涉及几乎同时在所有节点上启动应用程序。这可以通过标记单独的任务来实现，例如配置、安装、服务等。
- en: 'For example, let''s take a look at the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，来看一下以下截图：
- en: '![Tags](img/B03800_10_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![标签](img/B03800_10_01.jpg)'
- en: 'While running a playbook, all tasks with a specific tag can be called using
    `–-tags` as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 playbook 时，可以使用 `--tags` 调用所有带有特定标签的任务，具体如下：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Tags can not only be applied to tasks, but also to the roles, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 标签不仅可以应用于任务，还可以应用于角色，具体如下：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If a specific task needs to be executed always, even if filtered with a tag,
    use a special tag called `always`. This will make the task execute unless an overriding
    option, such as `--skip-tags always` is used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个特定任务需要始终执行，即使是使用标签过滤，也可以使用一个特殊标签 `always`。这会使任务执行，除非使用了覆盖选项，例如 `--skip-tags
    always`。
- en: Patterns and limits
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式与限制
- en: 'Limits can be used to run tasks on a subset of hosts, which are filtered by
    patterns. For example, the following code would run tasks only on hosts that are
    part of the `db` group:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 限制可以用于在主机的子集上运行任务，这些主机通过模式进行过滤。例如，以下代码将仅在属于`db`组的主机上运行任务：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Patterns usually contain a group of hosts to include or exclude. A combination
    of more than one pattern can be specified as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 模式通常包含一组需要包含或排除的主机。可以通过以下方式指定多个模式的组合：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Having a colon as separator can be used to filter hosts further. The following
    command would run tasks on all hosts except for the ones that belong to the groups
    `www` and `db`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用冒号作为分隔符可以进一步过滤主机。以下命令将在除属于`www`和`db`组的主机外，所有主机上运行任务：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Note that this usually needs to be enclosed in quotes. In this pattern, we
    used the `all` group, which matches all hosts in the inventory, and can be replaced
    with `*`. That was followed by `!` to exclude hosts in the `db` group. The output
    of this command is as follows, which shows that plays by the name `db` and `www`
    were skipped as no hosts matched due to the filter we used previously:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通常需要将其括在引号中。在此模式中，我们使用了 `all` 组，它匹配清单中的所有主机，并可以替换为 `*`。接着使用了 `!` 来排除 `db`
    组中的主机。该命令的输出如下，显示由于我们先前使用的过滤器，没有主机匹配，导致名为 `db` 和 `www` 的 play 被跳过：
- en: '![Patterns and limits](img/B03800_10_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![模式与限制](img/B03800_10_02.jpg)'
- en: Let's now see these orchestration features in action. We will begin by tagging
    the role and do the multiphase execution followed by writing a new playbook to
    manage updates to the WordPress application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这些编排功能的实际应用。我们将从标记角色开始，进行多阶段执行，然后编写一个新的 playbook 来管理 WordPress 应用程序的更新。
- en: Tagging the roles
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记角色
- en: 'Let''s now start tagging the roles we created earlier. We will create the following
    tags that map to the phases the applications are managed in:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们开始为之前创建的角色打标签。我们将创建以下标签，这些标签映射到应用程序管理的各个阶段：
- en: Install
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: Configure
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Start
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始
- en: 'Here is an example of adding tags to the `haproxy` role. Tagging other roles
    is excluded from the text to avoid redundancy. We can either add tags to the tasks
    inside the role or tag the complete roles in a playbook. Let''s begin by tagging
    tasks:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是为 `haproxy` 角色添加标签的示例。为了避免冗余，文本中排除了标记其他角色的部分。我们可以将标签添加到角色中的任务，也可以在 playbook
    中标记整个角色。让我们先从标记任务开始：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After tagging tasks in a role, we will additionally tag the roles in the playbooks
    too, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在角色中标记任务后，我们还将在 playbook 中标记角色，具体如下：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once applied, the tags for our main playbook can be listed as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用，主 playbook 的标签可以按以下方式列出：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using the combination of tags and limits gives us a fine-grained control over
    what gets executed in a playbook run, for example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标签和限制的组合可以让我们对在 playbook 运行时执行的内容进行细粒度控制，例如：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating an orchestration playbook for WordPress
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 WordPress 创建一个协调 playbook
- en: 'We have a site-wide playbook, that is, the `site.yml` file that serves us to
    install and configure the complete WordPress stack. For updating the application
    with zero downtime and deploying new revisions, the `site.yml` file is not the
    ideal playbook though. We would want to follow a workflow that would involve the
    following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个全站的 playbook，也就是 `site.yml` 文件，它用于安装和配置完整的 WordPress 堆栈。对于零停机更新应用程序和部署新版本，`site.yml`
    文件并不是理想的 playbook。我们希望遵循一个包含以下步骤的工作流：
- en: Update the web servers one at a time. This will avoid any downtime.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一次更新一个 Web 服务器，这样可以避免任何停机。
- en: Before updating, deregister the web server from the haproxy load balancer. This
    will stop the traffic to the web server in order to avoid downtime.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新之前，将 Web 服务器从 haproxy 负载均衡器中注销。这样可以停止对 Web 服务器的流量，避免停机。
- en: Run roles related to the WordPress application, that is, Nginx, php5-fpm, and
    WordPress.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行与 WordPress 应用程序相关的角色，也就是 Nginx、php5-fpm 和 WordPress。
- en: Ensure that the web server is running and is listening to port 80.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Web 服务器正在运行并监听 80 端口。
- en: Register the server back on haproxy and start sending the traffic again.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务器重新注册到 haproxy，并再次开始发送流量。
- en: 'Let''s create a playbook by the name `update.yml`, which does the orchestration
    just as explained earlier and uses most of the features discussed previously in
    this chapter. Here is the playbook:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`update.yml`的 playbook，它按照前面解释的方式进行协调，并使用本章之前讨论的大部分功能。以下是 playbook：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s analyze this code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这段代码：
- en: The playbook contains just one play, which runs on the hosts that belong to
    the `www group in` inventory.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该 playbook 只包含一个 play，它运行在属于 `www` 组的主机上。
- en: The serial keyword specifies the batch size, and allows rolling updates with
    zero downtime. In our case, since we have fewer hosts, we chose one web server
    to be updated at a time.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serial` 关键字指定批处理大小，并允许进行零停机的滚动更新。在我们的案例中，由于我们有较少的主机，我们选择一次更新一个 Web 服务器。'
- en: Before applying the role, the host is deregistered from the load balancer using
    the pre-tasks section ,which runs a shell command with **socat**. This is run
    on all load balancers using the `delegate` keyword. Socat is a Unix utility similar
    to and more at (nc) but has a richer feature set.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用角色之前，主机通过 pre-tasks 部分从负载均衡器中注销，该部分运行一个带有**socat**的 shell 命令。这个命令将在所有负载均衡器上使用
    `delegate` 关键字运行。Socat 是一个类似于 `nc`（netcat）的 Unix 工具，但功能更强大。
- en: After deregistering the host, roles are applied to it; this will update the
    configurations for the web server or deploy new code.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在注销主机后，会应用角色；这将更新 Web 服务器的配置或部署新代码。
- en: Once updated, the post-tasks kick in, which first wait until the web server
    is up and listening to port 80, and only after its ready, then it registers it
    back to the load balancer.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新后，后任务将启动，首先等待直到 Web 服务器启动并监听 80 端口，只有在其准备好后，才会将其注册回负载均衡器。
- en: Review questions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为自己已经充分理解了这一章吗？尝试回答以下问题来测试你的理解：
- en: Is it possible to use Ansible to orchestrate another configuration management
    tool?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以使用 Ansible 来协调其他配置管理工具？
- en: How can you achieve zero downtime while deploying applications with Ansible?
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在使用 Ansible 部署应用程序时实现零停机？
- en: What does the `--limit` command do to Ansible playbook?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--limit` 命令对 Ansible playbook 有什么作用？'
- en: How would you run a subset of tasks for a given role in a playbook?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 playbook 中为给定角色运行任务的子集？
- en: What is the purpose of using pre-tasks and post-tasks?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前任务和后任务的目的是什么？
- en: What modules can be used to run tests from playbooks?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用哪些模块从 playbook 中运行测试？
- en: Why is the `always` tag special?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 `always` 标签很特殊？
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter by discussing what orchestration is, what different
    orchestration scenarios are, and how Ansible can fit in. You learned about Ansible's
    set of rich features in the context or orchestration. This includes multi-playbook
    support, pre-tasks and post-tasks, tags and limits, running tests, and a lot more.
    We went on to tag the roles we created earlier and learned how to control what
    portion of code runs on which machines using a combination of tags, patterns,
    and limits. Finally, we created a new playbook to orchestrate the workflow to
    update web servers, which involves zero-downtime deployment, delegation, pre-tasks
    and post-tasks, and tests. You also learned that Ansible can be a good fit in
    any orchestration scenario.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从讨论编排的概念开始本章，介绍了不同的编排场景以及 Ansible 的应用。您了解了 Ansible 在编排背景下的丰富功能集，包括多 playbook
    支持、前任务和后任务、标签和限制、运行测试等等。我们进一步给之前创建的角色打上标签，并学习了如何使用标签、模式和限制来控制代码在哪些机器上运行的方法。最后，我们创建了一个新的
    playbook 来编排工作流程，以更新 Web 服务器，其中涉及零停机部署、委派、前任务和后任务以及测试。您也了解到 Ansible 可以很好地适用于任何编排场景中。
- en: This brings us to the end of this book. Before we conclude, on behalf of the
    reviewers, editors, contributors, and rest of the publishing team, I would like
    to thank you for considering this book as a companion in your journey towards
    being an Ansible practitioner.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书到此结束。在结束之前，我代表审阅者、编辑、贡献者以及整个出版团队，感谢您将本书作为在成为 Ansible 实践者之路上的伴侣。
- en: We hope that by now you have become comfortable with the various primitives
    that Ansible offers to automate common infrastructure tasks, create dynamic roles,
    manage multitier application configurations, zero-downtime deployments, orchestrate
    complex infrastructure, and more. We hope that you will be able to apply the knowledge
    acquired in this book to create effective Ansible playbooks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望您现在已经对 Ansible 提供的各种基本操作有了充分的了解，包括自动化常见基础设施任务、创建动态角色、管理多层应用配置、零停机部署、编排复杂基础设施等等。希望您能够将本书中获得的知识应用到创建有效的
    Ansible playbook 中。
