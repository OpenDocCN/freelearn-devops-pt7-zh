["```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name  = \"rg-terraform-state-uks\"\n    storage_account_name = \"satfbeiac1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n  }\n}\n```", "```\nterraform {\n  backend \"s3\" {\n    bucket = \"tfbeiac1234\"\n    key    = \"tfstate/prod.terraform.tfstate\"\n    region = \"us-east-1\"\n  }\n}\n```", "```\n$ az ad sp create-for-rbac --scopes /subscriptions/3a52ef17-7e42-4f89-9a43-9a23c517cf1a --role Contributor\n```", "```\nCreating 'Contributor' role assignment under scope '/subscriptions/3a52ef17-7e42-4f89-9a43-9a23c517cf1a\nThe output includes credentials that you must protect. Be sure that you do not include these credentials in your code or check the credentials into your source control. For more information, see https://aka.ms/azadsp-cli\n```", "```\n{\n  \"appId\": \"019f16d2-552b-43ff-8eb8-6c87b13d47f9\",\n  \"displayName\": \"azure-cli-2023-03-18-14-28-04\",\n  \"password\": \"6t3Rq~vT.cL9y7zN_apCvGANvAg7_v6wiBb1eboQ\",\n  \"tenant\": \"8a7e32c4-5732-4e57-8d8c-dfca4b1e4d4a\"\n}\n```", "```\nname: \"Terraform Plan/Apply\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n```", "```\njobs:\n  check_storage_account:\n    name: \"Check for Azure storage account\"\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n```", "```\nsteps:\n    - name: Login to Azure using a service principal\n      uses: Azure/login@v1\n      with:\n        creds: '{\"clientId\":\"${{ secrets.ARM_CLIENT_ID }}\",\"clientSecret\":\"${{ secrets.ARM_CLIENT_SECRET }}\",\"subscriptionId\":\"${{ secrets.ARM_SUBSCRIPTION_ID }}\",\"tenantId\":\"${{ secrets.ARM_TENANT_ID }}\"}'\n```", "```\n- name: Create Azure storage account\n  uses: Azure/CLI@v1\n  with:\n    inlineScript: |\n      az group create --name ${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }} --location ${{ vars.BACKEND_AZURE_LOCATION }}\n      az storage account create --name ${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT }} --resource-group ${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }} --location ${{ vars.BACKEND_AZURE_LOCATION }} --sku Standard_LRS\n      az storage container create --name ${{ vars.BACKEND_AZURE_CONTAINER_NAME }} --account-name ${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT }}\n```", "```\nterraform_plan:\n  name: \"Terraform Plan\"\n  needs: check_storage_account\n  runs-on: ubuntu-latest\n  env:\n    ARM_CLIENT_ID: \"${{ secrets.ARM_CLIENT_ID }}\"\n    ARM_CLIENT_SECRET: \"${{ secrets.ARM_CLIENT_SECRET }}\"\n    ARM_SUBSCRIPTION_ID: \"${{ secrets.ARM_SUBSCRIPTION_ID }}\"\n    ARM_TENANT_ID: \"${{ secrets.ARM_TENANT_ID }}\"\n  defaults:\n    run:\n      shell: bash\n```", "```\nsteps:\n  - name: Checkout the code\n    id: checkout\n    uses: actions/checkout@v3\n```", "```\n- name: Setup Terraform\n  id: setup\n  uses: hashicorp/setup-terraform@v2\n  with:\n    terraform_wrapper: false\n```", "```\n- name: Terraform Init\n  id: init\n  run: terraform init -backend-config=\"resource_group_name=${{ vars.BACKEND_AZURE_RESOURCE_GROUP_NAME }}\" -backend-config=\"storage_account_name=${{ vars.BACKEND_AZURE_STORAGE_ACCOUNT }}\" -backend-config=\"container_name=${{ vars.BACKEND_AZURE_CONTAINER_NAME }}\" -backend-config=\"key=${{ vars.BACKEND_AZURE_STATE_FILE_NAME }}\"\n```", "```\n- name: Terraform Plan\n  id: tf-plan\n  run: |\n    export exitcode=0\n    terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?\n    echo \"exitcode=$exitcode\" >> $GITHUB_OUTPUT\n```", "```\n    if [ $exitcode -eq 1 ]; then\n      echo Terraform Plan Failed!\n      exit 1\n    else\n      exit 0\n    fi\n```", "```\n- name: Publish Terraform Plan\n  uses: actions/upload-artifact@v3\n  with:\n    name: tfplan\n    path: tfplan\n```", "```\n- name: Create String Output\n  id: tf-plan-string\n  run: |\n    TERRAFORM_PLAN=$(terraform show -no-color tfplan)\n    delimiter=\"$(openssl rand -hex 8)\"\n    echo \"summary<<${delimiter}\" >> $GITHUB_OUTPUT\n    echo \"## Terraform Plan Output\" >> $GITHUB_OUTPUT\n    echo \"<details><summary>Click to expand</summary>\" >> $GITHUB_OUTPUT\n    echo \"\" >> $GITHUB_OUTPUT\n    echo '```", "```' >> $GITHUB_OUTPUT\n    echo \"</details>\" >> $GITHUB_OUTPUT\n    echo \"${delimiter}\" >> $GITHUB_OUTPUT\n```", "```\n- name: Publish Terraform Plan to Task Summary\n  env:\n    SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}\n  run: |\n    echo \"$SUMMARY\" >> $GITHUB_STEP_SUMMARY\n```", "```\nterraform-apply:\n  name: \"Terraform Apply\"\n  if: github.ref == 'refs/heads/main'\n  runs-on: ubuntu-latest\n  env:\n    ARM_CLIENT_ID: \"${{ secrets.ARM_CLIENT_ID }}\"\n    ARM_CLIENT_SECRET: \"${{ secrets.ARM_CLIENT_SECRET }}\"\n    ARM_SUBSCRIPTION_ID: \"${{ secrets.ARM_SUBSCRIPTION_ID }}\"\n    ARM_TENANT_ID: \"${{ secrets.ARM_TENANT_ID }}\"\n  needs: [terraform_plan]\n```", "```\n- name: Download Terraform Plan\n  uses: actions/download-artifact@v3\n  with:\n    name: tfplan\n```", "```\n- name: Terraform Apply\n  run: terraform apply -auto-approve tfplan\n```", "```\nterraform {\n  required_version = \">=1.0\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n  }\n  backend \"azurerm\" {}\n}\n```", "```\nname: \"Ansible Playbook Run\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n```", "```\njobs:\n  run_ansible_playbook:\n    name: \"Run Ansible Playbook\"\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n```", "```\nsteps:\n  - name: Checkout the code\n    id: checkout\n    uses: actions/checkout@v3\n```", "```\n- name: Ensure that Python 3.10 is installed\n  uses: actions/setup-python@v4\n  with:\n    python-version: \"3.10\"\n```", "```\n- name: Install Ansible\n  run: pip install ansible\n```", "```\n- name: Install Azure Collection\n  run: ansible-galaxy collection install azure.azcollection\n```", "```\n- name: Install Azure Requirements\n  run: pip install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt\n```", "```\n- name: Run the playbook (with ansible-playbook)\n  id: ansible-playbook-run\n  run: |\n    ANSIBLE_OUTPUT=$(ansible-playbook site.yml)\n    delimiter=\"$(openssl rand -hex 8)\"\n    echo \"summary<<${delimiter}\" >> $GITHUB_OUTPUT\n    echo \"## Ansible Playbook Output\" >> $GITHUB_OUTPUT\n    echo \"<details><summary>Click to expand</summary>\" >> $GITHUB_OUTPUT\n    echo \"\" >> $GITHUB_OUTPUT\n    echo '```", "```' >> $GITHUB_OUTPUT\n    echo \"</details>\" >> $GITHUB_OUTPUT\n    echo \"${delimiter}\" >> $GITHUB_OUTPUT\n```", "```\n- name: Publish Ansible Playbook run to Task Summary\n  env:\n    SUMMARY: ${{ steps.ansible-playbook-run.outputs.summary }}\n  run: |\n    echo \"$SUMMARY\" >> $GITHUB_STEP_SUMMARY\n```"]