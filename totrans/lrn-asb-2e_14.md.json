["```\n- name: \"Scan our WordPress Ansible Playbook and stack\"\n  hosts: ansible_hosts\n  gather_facts: true\n  become: true\n  become_method: \"ansible.builtin.sudo\"\n  vars_files:\n    - 'group_vars/common.yml'\n```", "```\n  roles:\n    - { role: 'common', tags: ['openscap','scan'] }\n    - { role: 'docker', tags: ['docker','scan'] }\n```", "```\n    - { role: 'stack_install', tags: ['wordpress'] }\n    - { role: 'stack_config', tags: ['wordpress'] }\n    - { role: 'wordpress', tags: ['wordpress'] }\n```", "```\n    - { role: 'scan', tags: ['scan'] }\n    - { role: 'openscap', tags: ['openscap'] }\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"openscap\" --extra-vars \"scap_options_remediation=true\"\n$ ansible-playbook -i hosts site.yml --tags \"openscap\"\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"wordpress\"\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"scan\"\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"scan\" --extra-vars \"scan_types=zap\"\n$ ansible-playbook -i hosts site.yml --tags \"scan\" --extra-vars \"scan_types=wpscan\"\n```", "```\n- name: \"Set a fact for the date\"\n  ansible.builtin.set_fact:\n    the_date: \"{{ lookup('pipe', 'date +%Y-%m-%d-%H%M') }}\"\n```", "```\n- name: \"Pull the Docker image for the scanning tool\"\n  community.docker.docker_image:\n    name: \"{{ item.image }}\"\n    source: \"{{ item.source }}\"\n  loop: \"{{ scan }}\"\n  when: \"item.name in scan_types\"\n  loop_control:\n    label: \"{{ item.name }}\"\n```", "```\n- name: \"Create the folder which we will mount inside the container\"\n  ansible.builtin.file:\n    path: \"{{ item.log.remote_folder }}\"\n    state: \"directory\"\n    mode: \"0777\"\n  loop: \"{{ scan }}\"\n  when: \"item.name in scan_types\"\n  loop_control:\n    label: \"{{ item.name }}\"\n```", "```\n- name: \"Run the scan\"\n  community.docker.docker_container:\n    detach: \"{{ item.detach }}\"\n    auto_remove: \"{{ item.auto_remove }}\"\n    name: \"{{ item.name }}\"\n    volumes: \"{{ item.log.remote_folder }}:{{ item.container_folder }}\"\n    image: \"{{ item.image }}\"\n    command: \"{{ item.command }}\"\n  register: docker_scan\n  ignore_errors: true\n  no_log: true\n  loop: \"{{ scan }}\"\n  when: \"item.name in scan_types\"\n  loop_control:\n    label: \"{{ item.name }}\"\n```", "```\n- name: \"Download the report\"\n  ansible.builtin.fetch:\n    src: \"{{ item.log.remote_folder }}{{ item.log.file }}\"\n    dest: \"{{ item.log.local_folder }}\"\n    flat: true\n    mode: \"0644\"\n  loop: \"{{ scan }}\"\n  when: \"item.name in scan_types\"\n  loop_control:\n    label: \"{{ item.name }}\"\n```", "```\n- name: \"Remove the scan container\"\n  community.docker.docker_container:\n    name: \"{{ item.name }}\"\n    state: \"absent\"\n  loop: \"{{ scan }}\"\n  when: \"item.name in scan_types\"\n  loop_control:\n    label: \"{{ item.name }}\"\n```", "```\nscan_types:\n  - \"{{ common_scan_settings.dict.wpscan }}\"\n  - \"{{ common_scan_settings.dict.zap }}\"\n```", "```\ncommon_scan_settings:\n  detach: false\n  auto_remove: false\n  source: \"pull\"\n  local_folder: \"output/\"\n  report_name: \"{{ the_date }}-results-\"\n  dict:\n    wpscan: \"wpscan\"\n    zap: \"zap\"\n```", "```\nscan:\n  - name: \"{{ common_scan_settings.dict.wpscan }}\"\n    image: \"wpscanteam/wpscan:latest\"\n    source: \"{{ common_scan_settings.source }}\"\n    detach: \"{{ common_scan_settings.detach }}\"\n    auto_remove: \"{{ common_scan_settings.auto_remove }}\"\n    container_folder: \"/tmp/{{ common_scan_settings.dict.wpscan }}/\"\n    command: \"--url http://{{ ansible_host }} --enumerate u --plugins-detection mixed --format cli-no-color --output /tmp/{{ common_scan_settings.dict.wpscan }}/{{ common_scan_settings.report_name }}{{ common_scan_settings.dict.wpscan }}.txt\"\n    log:\n      remote_folder: \"/tmp/{{ common_scan_settings.dict.wpscan }}/\"\n      local_folder: \"{{ common_scan_settings.local_folder }}\"\n      file: \"{{ common_scan_settings.report_name }}{{ common_scan_settings.dict.wpscan }}.txt\"\n```", "```\n  - name: \"{{ common_scan_settings.dict.zap}}\"\n    image: \"ghcr.io/zaproxy/zaproxy:stable\"\n    source: \"{{ common_scan_settings.source }}\"\n    detach: \"{{ common_scan_settings.detach }}\"\n    auto_remove: \"{{ common_scan_settings.auto_remove }}\"\n    container_folder: \"/zap/wrk/\"\n    command: \"zap-baseline.py -t http://{{ ansible_host }} -g gen.conf -r {{ common_scan_settings.report_name }}{{ common_scan_settings.dict.zap }}.html\"\n    log:\n      remote_folder: \"/tmp/{{ common_scan_settings.dict.zap }}/\"\n      local_folder: \"{{ common_scan_settings.local_folder }}\"\n      file: \"{{ common_scan_settings.report_name }}{{ common_scan_settings.dict.zap }}.html\"\n```", "```\n$ sudo apt-get install unzip curl libopenscap8\n```", "```\n$ wget https://github.com/ComplianceAsCode/content/releases/download/v0.1.71/scap-security-guide-0.1.71.zip\nunzip scap-security-guide-0.1.71.zip\n```", "```\n$ sudo oscap info --fetch-remote-resources scap-security-guide-0.1.71/ssg-ubuntu2204-ds.xml\n```", "```\n$ oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_cis_level1_server  --results-arf result.xml --report report.html scap-security-guide-0.1.71/ssg-ubuntu2204-ds.xml\n```", "```\n$ sudo oscap xccdf generate guide  --profile xccdf_org.ssgproject.content_profile_cis_level1_server scap-security-guide-0.1.71/ssg-ubuntu2204-ds.xml  > guide.html\n```", "```\n$ sudo oscap xccdf generate fix --fetch-remote-resources --fix-type ansible --result-id \"\" result.xml > playbook.yml\n```", "```\n$ sudo oscap xccdf generate fix --fetch-remote-resources --fix-type bash --result-id \"\" result.xml > bash.sh\n```", "```\n$ ansible-playbook -i hosts --become -become-method=sudo output/ansiblevm-playbook.yml\n```", "```\n$ sudo bash bash.sh\n```", "```\nscap_options_remediation: false\n```", "```\nscap_packages:\n  - \"unzip\"\n  - \"curl\"\n  - \"libopenscap8\"\n```", "```\nopenscap_download:\n  openscap_github_release_api_url: \"https://api.github.com/repos/ComplianceAsCode/content/releases/latest\"\n  dest: \"/tmp/scap-security-guide\"\n```", "```\nopenscap_scan:\n  ssg_file_name: \"{{openscap_download.dest}}/ssg-{{ ansible_facts.distribution | lower }}{{ ansible_facts.distribution_version | replace('.','') }}-ds.xml\"\n  profile_search: \"cis_level1_server\"\n  output_dir: \"/tmp/\"\n  output_file_xml: \"{{ inventory_hostname }}-result.xml\"\n  output_file_html: \"{{ inventory_hostname }}-report.html\"\n  output_file_guide: \"{{ inventory_hostname }}-guide.html\"\n  output_file_playbook: \"{{ inventory_hostname }}-playbook.yml\"\n  output_file_bash: \"{{ inventory_hostname }}-bash.sh\"\n  local_output_dir: \"output/{{ the_date }}-openscap-results\"\n```", "```\n- name: \"Update apt cache and upgrade packages\"\n  ansible.builtin.apt:\n    name: \"*\"\n    state: \"latest\"\n    update_cache: \"yes\"\n```", "```\n- name: \"Install common packages\"\n  ansible.builtin.apt:\n    state: \"present\"\n    pkg: \"{{ scap_packages }}\"\n```", "```\n- name: \"Create the directory to store the scap security guide content\"\n  ansible.builtin.file:\n    path: \"{{ openscap_download.dest }}\"\n    state: \"directory\"\n    mode: \"0755\"\n```", "```\n- name: \"Download the latest scap security guide content\"\n  ansible.builtin.unarchive:\n    src: \"{{ lookup('url', '{{ openscap_download.openscap_github_release_api_url }}', split_lines=false) | from_json | json_query('assets[?content_type==`application/zip`].browser_download_url') | last }}\"\n    dest: \"{{ openscap_download.dest }}\"\n    creates: \"{{ openscap_download.dest }}/README.md\"\n    list_files: true\n    remote_src: true\n  register: scap_download_result\n```", "```\n- name: \"Move scap security guide content to the correct location\"\n  ansible.builtin.shell: \"mv {{ openscap_download.dest }}/{{ scap_download_result.files[0] }}/* {{ openscap_download.dest }}\"\n  when: scap_download_result.changed\n- name: \"Remove the downloaded scap security guide content\"\n  ansible.builtin.file:\n    path: \"{{ openscap_download.dest }}/{{ scap_download_result.files[0] }}\"\n    state: \"absent\"\n  when: scap_download_result.changed\n```", "```\n- name: \"Get information of the SCAP profiles available for the target system\"\n  ansible.builtin.command: \"oscap info –profiles –fetch-remote-resources {{ openscap_scan.ssg_file_name }}\"\n  register: scap_info\n```", "```\n- name: \"Extract profile name based on our selection criteria\"\n  ansible.builtin.set_fact:\n    profile_name: \"{{ scap_info.stdout_lines | select('search', openscap_scan.profile_search) | map('regex_replace', '^(.*?):.*$', '\\\\1') | first }}\"\n```", "```\n- name: \"Run OpenSCAP scan\"\n  ansible.builtin.command: \"oscap xccdf eval --profile {{ profile_name }} --results-arf {{ openscap_scan.output_dir }}{{ openscap_scan.output_file_xml }} --report {{ openscap_scan.output_dir }}{{ openscap_scan.output_file_html }} {{ openscap_scan.ssg_file_name }}\"\n  ignore_errors: true\n  no_log: true\n  register: scap_scan\n```", "```\n- name: \"Ensure the local output directory exists\"\n  ansible.builtin.file:\n    path: \"{{ openscap_scan.local_output_dir }}\"\n    state: directory\n    mode: \"0755\"\n  delegate_to: \"localhost\"\n  become: false\n```", "```\n- name: \"Copy the SCAP report and results file to local machine\"\n  ansible.builtin.fetch:\n    src: \"{{ item }}\"\n    dest: \"{{ openscap_scan.local_output_dir }}/\"\n    flat: true\n    mode: \"0644\"\n  with_items:\n    - \"{{ openscap_scan.output_dir }}{{ openscap_scan.output_file_xml }}\"\n    - \"{{ openscap_scan.output_dir }}{{ openscap_scan.output_file_html }}\"\n```", "```\n- name: \"generate SCAP guide\"\n  ansible.builtin.command: \"oscap xccdf generate guide --profile {{ profile_name }} {{ openscap_scan.ssg_file_name }}\"\n  ignore_errors: true\n  register: scap_guide\n```", "```\n- name: \"Copy SCAP guide to local machine\"\n  ansible.builtin.copy:\n    content: \"{{ scap_guide.stdout }}\"\n    dest: \"{{ openscap_scan.local_output_dir }}/{{ openscap_scan.output_file_guide }}\"\n    mode: \"0644\"\n  when: scap_guide is defined\n  delegate_to: \"localhost\"\n  become: false\n```", "```\n- name: \"Generate SCAP fix playbook\"\n  ansible.builtin.command: \"oscap xccdf generate fix --fetch-remote-resources --fix-type ansible --result-id '' {{ openscap_scan.output_dir }}{{ openscap_scan.output_file_xml }}\"\n  ignore_errors: true\n  register: scap_playbook\n- name: \"Copy SCAP playbook to local machine\"\n  ansible.builtin.copy:\n    content: \"{{ scap_playbook.stdout }}\"\n    dest: \"{{ openscap_scan.local_output_dir }}/{{ openscap_scan.output_file_playbook }}\"\n    mode: \"0644\"\n  when: scap_playbook is defined\n  delegate_to: \"localhost\"\n  become: false\n```", "```\n- name: \"Generate SCAP fix bash script\"\n  ansible.builtin.command: \"oscap xccdf generate fix --fetch-remote-resources --fix-type bash --result-id '' {{ openscap_scan.output_dir }}{{ openscap_scan.output_file_xml }}\"\n  ignore_errors: true\n  register: scap_bash_script\n- name: \"Copy SCAP bash script to local machine\"\n  ansible.builtin.copy:\n    content: \"{{ scap_bash_script.stdout }}\"\n    dest: \"{{ openscap_scan.local_output_dir }}/{{ openscap_scan.output_file_bash }}\"\n    mode: \"0644\"\n  when: scap_bash_script is defined\n  delegate_to: \"localhost\"\n  become: false\n```", "```\n- name: \"Run the remediation playbook\"\n  ansible.builtin.command: \"ansible-playbook -i {{ inventory_file }} --become --become-method sudo {{ openscap_scan.local_output_dir }}/{{ openscap_scan.output_file_playbook }}\"\n  when: scap_options_remediation\n  delegate_to: \"localhost\"\n  become: false\n  register: remediation_playbook\n```", "```\n- name: \"Copy the remediation bash script to the target machine\"\n  ansible.builtin.copy:\n    src: \"{{ openscap_scan.local_output_dir }}/{{ openscap_scan.output_file_bash }}\"\n    dest: \"{{ openscap_scan.output_dir }}\"\n    mode: \"0755\"\n  when: scap_options_remediation\n```", "```\n- name: \"Run the remediation bash script\"\n  ansible.builtin.command: \"bash {{ openscap_scan.output_dir }}{{ openscap_scan.output_file_bash }}\"\n  when: scap_options_remediation\n  register: remediation_bash_script\n```", "```\n$ multipass launch -n ansiblevm --cloud-init cloud-init.yaml --disk 10G --memory 4G\n```", "```\n$ multipass info ansiblevm\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"openscap\" --extra-vars \"scap_options_remediation=true\"\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"openscap\"\n```", "```\n$ multipass stop ansiblevm\n$ multipass delete --purge ansiblevm\n$ multipass launch -n ansiblevm --cloud-init cloud-init.yaml --disk 10G --memory 4G\n$ multipass info ansiblevm\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"wordpress\"\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"scan\"\n```", "```\n$ ansible-playbook -i hosts site.yml --tags \"scan\" --extra-vars \"scan_types=zap\"\n$ ansible-playbook -i hosts site.yml --tags \"scan\" --extra-vars \"scan_types=wpscan\"\n```", "```\n$ multipass stop ansiblevm\n$ multipass delete --purge ansiblevm\n```"]